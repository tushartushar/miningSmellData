Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The method has 204 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The method has 243 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The method has 126 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The method has 267 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The method has 126 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GetHashCode,The method has 203 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The method has 213 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The method has 213 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The method has 213 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Abs,The method has 146 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The method has 213 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The method has 213 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,DotProduct,The method has 134 lines of code.
Long Method,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,SquareRoot,The method has 212 lines of code.
Long Method,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Invert,The method has 147 lines of code.
Long Method,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The method has 164 lines of code.
Long Parameter List,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,Matrix3x2,The method has 6 parameters. Parameters: m11' m12' m21' m22' m31' m32
Long Parameter List,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Matrix4x4,The method has 16 parameters. Parameters: m11' m12' m13' m14' m21' m22' m23' m24' m31' m32' m33' m34' m41' m42' m43' m44
Long Parameter List,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,CreateConstrainedBillboard,The method has 5 parameters. Parameters: objectPosition' cameraPosition' rotateAxis' cameraForwardVector' objectForwardVector
Long Parameter List,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,CreatePerspectiveOffCenter,The method has 6 parameters. Parameters: left' right' bottom' top' nearPlaneDistance' farPlaneDistance
Long Parameter List,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,CreateOrthographicOffCenter,The method has 6 parameters. Parameters: left' right' bottom' top' zNearPlane' zFarPlane
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_0 = left.register.sbyte_0 == right.register.sbyte_0 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_1 = left.register.sbyte_1 == right.register.sbyte_1 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_2 = left.register.sbyte_2 == right.register.sbyte_2 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_3 = left.register.sbyte_3 == right.register.sbyte_3 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_4 = left.register.sbyte_4 == right.register.sbyte_4 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_5 = left.register.sbyte_5 == right.register.sbyte_5 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_6 = left.register.sbyte_6 == right.register.sbyte_6 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_7 = left.register.sbyte_7 == right.register.sbyte_7 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_8 = left.register.sbyte_8 == right.register.sbyte_8 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_9 = left.register.sbyte_9 == right.register.sbyte_9 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_10 = left.register.sbyte_10 == right.register.sbyte_10 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 123.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_11 = left.register.sbyte_11 == right.register.sbyte_11 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 123.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_12 = left.register.sbyte_12 == right.register.sbyte_12 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 123.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_13 = left.register.sbyte_13 == right.register.sbyte_13 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 123.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_14 = left.register.sbyte_14 == right.register.sbyte_14 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 123.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.sbyte_15 = left.register.sbyte_15 == right.register.sbyte_15 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 123.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_0 = left.register.uint16_0 == right.register.uint16_0 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_1 = left.register.uint16_1 == right.register.uint16_1 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_2 = left.register.uint16_2 == right.register.uint16_2 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_3 = left.register.uint16_3 == right.register.uint16_3 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_4 = left.register.uint16_4 == right.register.uint16_4 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_5 = left.register.uint16_5 == right.register.uint16_5 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_6 = left.register.uint16_6 == right.register.uint16_6 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint16_7 = left.register.uint16_7 == right.register.uint16_7 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_0 = left.register.int16_0 == right.register.int16_0 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_1 = left.register.int16_1 == right.register.int16_1 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_2 = left.register.int16_2 == right.register.int16_2 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_3 = left.register.int16_3 == right.register.int16_3 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_4 = left.register.int16_4 == right.register.int16_4 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_5 = left.register.int16_5 == right.register.int16_5 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_6 = left.register.int16_6 == right.register.int16_6 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int16_7 = left.register.int16_7 == right.register.int16_7 ? ConstantHelper.GetInt16WithAllBitsSet() : (Int16)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint32_0 = left.register.uint32_0 == right.register.uint32_0 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint32_1 = left.register.uint32_1 == right.register.uint32_1 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint32_2 = left.register.uint32_2 == right.register.uint32_2 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint32_3 = left.register.uint32_3 == right.register.uint32_3 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int32_0 = left.register.int32_0 == right.register.int32_0 ? ConstantHelper.GetInt32WithAllBitsSet() : (Int32)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int32_1 = left.register.int32_1 == right.register.int32_1 ? ConstantHelper.GetInt32WithAllBitsSet() : (Int32)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int32_2 = left.register.int32_2 == right.register.int32_2 ? ConstantHelper.GetInt32WithAllBitsSet() : (Int32)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int32_3 = left.register.int32_3 == right.register.int32_3 ? ConstantHelper.GetInt32WithAllBitsSet() : (Int32)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint64_0 = left.register.uint64_0 == right.register.uint64_0 ? ConstantHelper.GetUInt64WithAllBitsSet() : (UInt64)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.uint64_1 = left.register.uint64_1 == right.register.uint64_1 ? ConstantHelper.GetUInt64WithAllBitsSet() : (UInt64)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int64_0 = left.register.int64_0 == right.register.int64_0 ? ConstantHelper.GetInt64WithAllBitsSet() : (Int64)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.int64_1 = left.register.int64_1 == right.register.int64_1 ? ConstantHelper.GetInt64WithAllBitsSet() : (Int64)0; " is 120.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.single_0 = left.register.single_0 == right.register.single_0 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.single_1 = left.register.single_1 == right.register.single_1 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.single_2 = left.register.single_2 == right.register.single_2 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.single_3 = left.register.single_3 == right.register.single_3 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.double_0 = left.register.double_0 == right.register.double_0 ? ConstantHelper.GetDoubleWithAllBitsSet() : (Double)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Equals,The length of the statement  "                    register.double_1 = left.register.double_1 == right.register.double_1 ? ConstantHelper.GetDoubleWithAllBitsSet() : (Double)0; " is 125.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.sbyte_10 = left.register.sbyte_10 < right.register.sbyte_10 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.sbyte_11 = left.register.sbyte_11 < right.register.sbyte_11 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.sbyte_12 = left.register.sbyte_12 < right.register.sbyte_12 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.sbyte_13 = left.register.sbyte_13 < right.register.sbyte_13 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.sbyte_14 = left.register.sbyte_14 < right.register.sbyte_14 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.sbyte_15 = left.register.sbyte_15 < right.register.sbyte_15 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_0 = left.register.uint16_0 < right.register.uint16_0 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_1 = left.register.uint16_1 < right.register.uint16_1 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_2 = left.register.uint16_2 < right.register.uint16_2 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_3 = left.register.uint16_3 < right.register.uint16_3 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_4 = left.register.uint16_4 < right.register.uint16_4 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_5 = left.register.uint16_5 < right.register.uint16_5 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_6 = left.register.uint16_6 < right.register.uint16_6 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint16_7 = left.register.uint16_7 < right.register.uint16_7 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint32_0 = left.register.uint32_0 < right.register.uint32_0 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint32_1 = left.register.uint32_1 < right.register.uint32_1 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint32_2 = left.register.uint32_2 < right.register.uint32_2 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint32_3 = left.register.uint32_3 < right.register.uint32_3 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint64_0 = left.register.uint64_0 < right.register.uint64_0 ? ConstantHelper.GetUInt64WithAllBitsSet() : (UInt64)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.uint64_1 = left.register.uint64_1 < right.register.uint64_1 ? ConstantHelper.GetUInt64WithAllBitsSet() : (UInt64)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.single_0 = left.register.single_0 < right.register.single_0 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.single_1 = left.register.single_1 < right.register.single_1 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.single_2 = left.register.single_2 < right.register.single_2 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.single_3 = left.register.single_3 < right.register.single_3 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.double_0 = left.register.double_0 < right.register.double_0 ? ConstantHelper.GetDoubleWithAllBitsSet() : (Double)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,LessThan,The length of the statement  "                    register.double_1 = left.register.double_1 < right.register.double_1 ? ConstantHelper.GetDoubleWithAllBitsSet() : (Double)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.sbyte_10 = left.register.sbyte_10 > right.register.sbyte_10 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.sbyte_11 = left.register.sbyte_11 > right.register.sbyte_11 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.sbyte_12 = left.register.sbyte_12 > right.register.sbyte_12 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.sbyte_13 = left.register.sbyte_13 > right.register.sbyte_13 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.sbyte_14 = left.register.sbyte_14 > right.register.sbyte_14 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.sbyte_15 = left.register.sbyte_15 > right.register.sbyte_15 ? ConstantHelper.GetSByteWithAllBitsSet() : (SByte)0; " is 122.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_0 = left.register.uint16_0 > right.register.uint16_0 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_1 = left.register.uint16_1 > right.register.uint16_1 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_2 = left.register.uint16_2 > right.register.uint16_2 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_3 = left.register.uint16_3 > right.register.uint16_3 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_4 = left.register.uint16_4 > right.register.uint16_4 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_5 = left.register.uint16_5 > right.register.uint16_5 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_6 = left.register.uint16_6 > right.register.uint16_6 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint16_7 = left.register.uint16_7 > right.register.uint16_7 ? ConstantHelper.GetUInt16WithAllBitsSet() : (UInt16)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint32_0 = left.register.uint32_0 > right.register.uint32_0 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint32_1 = left.register.uint32_1 > right.register.uint32_1 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint32_2 = left.register.uint32_2 > right.register.uint32_2 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint32_3 = left.register.uint32_3 > right.register.uint32_3 ? ConstantHelper.GetUInt32WithAllBitsSet() : (UInt32)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint64_0 = left.register.uint64_0 > right.register.uint64_0 ? ConstantHelper.GetUInt64WithAllBitsSet() : (UInt64)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.uint64_1 = left.register.uint64_1 > right.register.uint64_1 ? ConstantHelper.GetUInt64WithAllBitsSet() : (UInt64)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.single_0 = left.register.single_0 > right.register.single_0 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.single_1 = left.register.single_1 > right.register.single_1 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.single_2 = left.register.single_2 > right.register.single_2 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.single_3 = left.register.single_3 > right.register.single_3 ? ConstantHelper.GetSingleWithAllBitsSet() : (Single)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.double_0 = left.register.double_0 > right.register.double_0 ? ConstantHelper.GetDoubleWithAllBitsSet() : (Double)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,GreaterThan,The length of the statement  "                    register.double_1 = left.register.double_1 > right.register.double_1 ? ConstantHelper.GetDoubleWithAllBitsSet() : (Double)0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.sbyte_10 = left.register.sbyte_10 < right.register.sbyte_10 ? left.register.sbyte_10 : right.register.sbyte_10; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.sbyte_11 = left.register.sbyte_11 < right.register.sbyte_11 ? left.register.sbyte_11 : right.register.sbyte_11; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.sbyte_12 = left.register.sbyte_12 < right.register.sbyte_12 ? left.register.sbyte_12 : right.register.sbyte_12; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.sbyte_13 = left.register.sbyte_13 < right.register.sbyte_13 ? left.register.sbyte_13 : right.register.sbyte_13; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.sbyte_14 = left.register.sbyte_14 < right.register.sbyte_14 ? left.register.sbyte_14 : right.register.sbyte_14; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.sbyte_15 = left.register.sbyte_15 < right.register.sbyte_15 ? left.register.sbyte_15 : right.register.sbyte_15; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_0 = left.register.uint16_0 < right.register.uint16_0 ? left.register.uint16_0 : right.register.uint16_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_1 = left.register.uint16_1 < right.register.uint16_1 ? left.register.uint16_1 : right.register.uint16_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_2 = left.register.uint16_2 < right.register.uint16_2 ? left.register.uint16_2 : right.register.uint16_2; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_3 = left.register.uint16_3 < right.register.uint16_3 ? left.register.uint16_3 : right.register.uint16_3; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_4 = left.register.uint16_4 < right.register.uint16_4 ? left.register.uint16_4 : right.register.uint16_4; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_5 = left.register.uint16_5 < right.register.uint16_5 ? left.register.uint16_5 : right.register.uint16_5; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_6 = left.register.uint16_6 < right.register.uint16_6 ? left.register.uint16_6 : right.register.uint16_6; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint16_7 = left.register.uint16_7 < right.register.uint16_7 ? left.register.uint16_7 : right.register.uint16_7; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint32_0 = left.register.uint32_0 < right.register.uint32_0 ? left.register.uint32_0 : right.register.uint32_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint32_1 = left.register.uint32_1 < right.register.uint32_1 ? left.register.uint32_1 : right.register.uint32_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint32_2 = left.register.uint32_2 < right.register.uint32_2 ? left.register.uint32_2 : right.register.uint32_2; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint32_3 = left.register.uint32_3 < right.register.uint32_3 ? left.register.uint32_3 : right.register.uint32_3; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint64_0 = left.register.uint64_0 < right.register.uint64_0 ? left.register.uint64_0 : right.register.uint64_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.uint64_1 = left.register.uint64_1 < right.register.uint64_1 ? left.register.uint64_1 : right.register.uint64_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.single_0 = left.register.single_0 < right.register.single_0 ? left.register.single_0 : right.register.single_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.single_1 = left.register.single_1 < right.register.single_1 ? left.register.single_1 : right.register.single_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.single_2 = left.register.single_2 < right.register.single_2 ? left.register.single_2 : right.register.single_2; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.single_3 = left.register.single_3 < right.register.single_3 ? left.register.single_3 : right.register.single_3; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.double_0 = left.register.double_0 < right.register.double_0 ? left.register.double_0 : right.register.double_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Min,The length of the statement  "                    vec.register.double_1 = left.register.double_1 < right.register.double_1 ? left.register.double_1 : right.register.double_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.sbyte_10 = left.register.sbyte_10 > right.register.sbyte_10 ? left.register.sbyte_10 : right.register.sbyte_10; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.sbyte_11 = left.register.sbyte_11 > right.register.sbyte_11 ? left.register.sbyte_11 : right.register.sbyte_11; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.sbyte_12 = left.register.sbyte_12 > right.register.sbyte_12 ? left.register.sbyte_12 : right.register.sbyte_12; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.sbyte_13 = left.register.sbyte_13 > right.register.sbyte_13 ? left.register.sbyte_13 : right.register.sbyte_13; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.sbyte_14 = left.register.sbyte_14 > right.register.sbyte_14 ? left.register.sbyte_14 : right.register.sbyte_14; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.sbyte_15 = left.register.sbyte_15 > right.register.sbyte_15 ? left.register.sbyte_15 : right.register.sbyte_15; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_0 = left.register.uint16_0 > right.register.uint16_0 ? left.register.uint16_0 : right.register.uint16_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_1 = left.register.uint16_1 > right.register.uint16_1 ? left.register.uint16_1 : right.register.uint16_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_2 = left.register.uint16_2 > right.register.uint16_2 ? left.register.uint16_2 : right.register.uint16_2; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_3 = left.register.uint16_3 > right.register.uint16_3 ? left.register.uint16_3 : right.register.uint16_3; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_4 = left.register.uint16_4 > right.register.uint16_4 ? left.register.uint16_4 : right.register.uint16_4; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_5 = left.register.uint16_5 > right.register.uint16_5 ? left.register.uint16_5 : right.register.uint16_5; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_6 = left.register.uint16_6 > right.register.uint16_6 ? left.register.uint16_6 : right.register.uint16_6; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint16_7 = left.register.uint16_7 > right.register.uint16_7 ? left.register.uint16_7 : right.register.uint16_7; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint32_0 = left.register.uint32_0 > right.register.uint32_0 ? left.register.uint32_0 : right.register.uint32_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint32_1 = left.register.uint32_1 > right.register.uint32_1 ? left.register.uint32_1 : right.register.uint32_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint32_2 = left.register.uint32_2 > right.register.uint32_2 ? left.register.uint32_2 : right.register.uint32_2; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint32_3 = left.register.uint32_3 > right.register.uint32_3 ? left.register.uint32_3 : right.register.uint32_3; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint64_0 = left.register.uint64_0 > right.register.uint64_0 ? left.register.uint64_0 : right.register.uint64_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.uint64_1 = left.register.uint64_1 > right.register.uint64_1 ? left.register.uint64_1 : right.register.uint64_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.single_0 = left.register.single_0 > right.register.single_0 ? left.register.single_0 : right.register.single_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.single_1 = left.register.single_1 > right.register.single_1 ? left.register.single_1 : right.register.single_1; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.single_2 = left.register.single_2 > right.register.single_2 ? left.register.single_2 : right.register.single_2; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.single_3 = left.register.single_3 > right.register.single_3 ? left.register.single_3 : right.register.single_3; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.double_0 = left.register.double_0 > right.register.double_0 ? left.register.double_0 : right.register.double_0; " is 124.
Long Statement,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Max,The length of the statement  "                    vec.register.double_1 = left.register.double_1 > right.register.double_1 ? left.register.double_1 : right.register.double_1; " is 124.
Long Statement,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,CreatePerspectiveFieldOfView,The length of the statement  "            var negFarRange = float.IsPositiveInfinity(farPlaneDistance) ? -1.0f : farPlaneDistance / (nearPlaneDistance - farPlaneDistance); " is 129.
Long Statement,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,CreatePerspective,The length of the statement  "            var negFarRange = float.IsPositiveInfinity(farPlaneDistance) ? -1.0f : farPlaneDistance / (nearPlaneDistance - farPlaneDistance); " is 129.
Long Statement,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,CreatePerspectiveOffCenter,The length of the statement  "            var negFarRange = float.IsPositiveInfinity(farPlaneDistance) ? -1.0f : farPlaneDistance / (nearPlaneDistance - farPlaneDistance); " is 129.
Long Statement,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Equals,The length of the statement  "            return (M11 == other.M11 && M22 == other.M22 && M33 == other.M33 && M44 == other.M44 && // Check diagonal element first for early out. " is 134.
Long Statement,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,ToString,The length of the statement  "            return String.Format(ci' "{{ {{M11:{0} M12:{1} M13:{2} M14:{3}}} {{M21:{4} M22:{5} M23:{6} M24:{7}}} {{M31:{8} M32:{9} M33:{10} M34:{11}}} {{M41:{12} M42:{13} M43:{14} M44:{15}}} }}"' " is 183.
Long Statement,System.Numerics,Quaternion,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Quaternion.cs,ToString,The length of the statement  "            return String.Format(ci' "{{X:{0} Y:{1} Z:{2} W:{3}}}"' X.ToString(ci)' Y.ToString(ci)' Z.ToString(ci)' W.ToString(ci)); " is 120.
Magic Number,System.Numerics.Hashing,HashHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Numerics\Hashing\HashHelpers.cs,Combine,The following statement contains a magic number: unchecked              {                  // RyuJIT optimizes this to use the ROL instruction                  // Related GitHub pull request: dotnet/coreclr#1830                  uint rol5 = ((uint)h1 << 5) | ((uint)h1 >> 27);                  return ((int)rol5 + h1) ^ h2;              }
Magic Number,System.Numerics.Hashing,HashHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Numerics\Hashing\HashHelpers.cs,Combine,The following statement contains a magic number: unchecked              {                  // RyuJIT optimizes this to use the ROL instruction                  // Related GitHub pull request: dotnet/coreclr#1830                  uint rol5 = ((uint)h1 << 5) | ((uint)h1 >> 27);                  return ((int)rol5 + h1) ^ h2;              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Vector,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Byte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (SByte)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int16)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int32)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (UInt64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Int64)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Single)(object)values[g + index];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          for (int g = 0; g < Count; g++)                          {                              *(basePtr + g) = (Double)(object)values[g + index];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      fixed (Byte* basePtr = &this.register.byte_0)                      {                          *(basePtr + 0) = (Byte)(object)values[0 + index];                          *(basePtr + 1) = (Byte)(object)values[1 + index];                          *(basePtr + 2) = (Byte)(object)values[2 + index];                          *(basePtr + 3) = (Byte)(object)values[3 + index];                          *(basePtr + 4) = (Byte)(object)values[4 + index];                          *(basePtr + 5) = (Byte)(object)values[5 + index];                          *(basePtr + 6) = (Byte)(object)values[6 + index];                          *(basePtr + 7) = (Byte)(object)values[7 + index];                          *(basePtr + 8) = (Byte)(object)values[8 + index];                          *(basePtr + 9) = (Byte)(object)values[9 + index];                          *(basePtr + 10) = (Byte)(object)values[10 + index];                          *(basePtr + 11) = (Byte)(object)values[11 + index];                          *(basePtr + 12) = (Byte)(object)values[12 + index];                          *(basePtr + 13) = (Byte)(object)values[13 + index];                          *(basePtr + 14) = (Byte)(object)values[14 + index];                          *(basePtr + 15) = (Byte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      fixed (SByte* basePtr = &this.register.sbyte_0)                      {                          *(basePtr + 0) = (SByte)(object)values[0 + index];                          *(basePtr + 1) = (SByte)(object)values[1 + index];                          *(basePtr + 2) = (SByte)(object)values[2 + index];                          *(basePtr + 3) = (SByte)(object)values[3 + index];                          *(basePtr + 4) = (SByte)(object)values[4 + index];                          *(basePtr + 5) = (SByte)(object)values[5 + index];                          *(basePtr + 6) = (SByte)(object)values[6 + index];                          *(basePtr + 7) = (SByte)(object)values[7 + index];                          *(basePtr + 8) = (SByte)(object)values[8 + index];                          *(basePtr + 9) = (SByte)(object)values[9 + index];                          *(basePtr + 10) = (SByte)(object)values[10 + index];                          *(basePtr + 11) = (SByte)(object)values[11 + index];                          *(basePtr + 12) = (SByte)(object)values[12 + index];                          *(basePtr + 13) = (SByte)(object)values[13 + index];                          *(basePtr + 14) = (SByte)(object)values[14 + index];                          *(basePtr + 15) = (SByte)(object)values[15 + index];                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      fixed (UInt16* basePtr = &this.register.uint16_0)                      {                          *(basePtr + 0) = (UInt16)(object)values[0 + index];                          *(basePtr + 1) = (UInt16)(object)values[1 + index];                          *(basePtr + 2) = (UInt16)(object)values[2 + index];                          *(basePtr + 3) = (UInt16)(object)values[3 + index];                          *(basePtr + 4) = (UInt16)(object)values[4 + index];                          *(basePtr + 5) = (UInt16)(object)values[5 + index];                          *(basePtr + 6) = (UInt16)(object)values[6 + index];                          *(basePtr + 7) = (UInt16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      fixed (Int16* basePtr = &this.register.int16_0)                      {                          *(basePtr + 0) = (Int16)(object)values[0 + index];                          *(basePtr + 1) = (Int16)(object)values[1 + index];                          *(basePtr + 2) = (Int16)(object)values[2 + index];                          *(basePtr + 3) = (Int16)(object)values[3 + index];                          *(basePtr + 4) = (Int16)(object)values[4 + index];                          *(basePtr + 5) = (Int16)(object)values[5 + index];                          *(basePtr + 6) = (Int16)(object)values[6 + index];                          *(basePtr + 7) = (Int16)(object)values[7 + index];                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      fixed (UInt32* basePtr = &this.register.uint32_0)                      {                          *(basePtr + 0) = (UInt32)(object)values[0 + index];                          *(basePtr + 1) = (UInt32)(object)values[1 + index];                          *(basePtr + 2) = (UInt32)(object)values[2 + index];                          *(basePtr + 3) = (UInt32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      fixed (Int32* basePtr = &this.register.int32_0)                      {                          *(basePtr + 0) = (Int32)(object)values[0 + index];                          *(basePtr + 1) = (Int32)(object)values[1 + index];                          *(basePtr + 2) = (Int32)(object)values[2 + index];                          *(basePtr + 3) = (Int32)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      fixed (UInt64* basePtr = &this.register.uint64_0)                      {                          *(basePtr + 0) = (UInt64)(object)values[0 + index];                          *(basePtr + 1) = (UInt64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      fixed (Int64* basePtr = &this.register.int64_0)                      {                          *(basePtr + 0) = (Int64)(object)values[0 + index];                          *(basePtr + 1) = (Int64)(object)values[1 + index];                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      fixed (Single* basePtr = &this.register.single_0)                      {                          *(basePtr + 0) = (Single)(object)values[0 + index];                          *(basePtr + 1) = (Single)(object)values[1 + index];                          *(basePtr + 2) = (Single)(object)values[2 + index];                          *(basePtr + 3) = (Single)(object)values[3 + index];                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      fixed (Double* basePtr = &this.register.double_0)                      {                          *(basePtr + 0) = (Double)(object)values[0 + index];                          *(basePtr + 1) = (Double)(object)values[1 + index];                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,CopyTo,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Byte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (SByte)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int16)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int32)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (UInt64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Int64)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Single)(object)this[g];                          }                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          for (int g = 0; g < Count; g++)                          {                              destinationBase[startIndex + g] = (Double)(object)this[g];                          }                      }                  }              }              else              {                  if (typeof(T) == typeof(Byte))                  {                      Byte[] byteArray = (Byte[])(object)destination;                      fixed (Byte* destinationBase = byteArray)                      {                          destinationBase[startIndex + 0] = this.register.byte_0;                          destinationBase[startIndex + 1] = this.register.byte_1;                          destinationBase[startIndex + 2] = this.register.byte_2;                          destinationBase[startIndex + 3] = this.register.byte_3;                          destinationBase[startIndex + 4] = this.register.byte_4;                          destinationBase[startIndex + 5] = this.register.byte_5;                          destinationBase[startIndex + 6] = this.register.byte_6;                          destinationBase[startIndex + 7] = this.register.byte_7;                          destinationBase[startIndex + 8] = this.register.byte_8;                          destinationBase[startIndex + 9] = this.register.byte_9;                          destinationBase[startIndex + 10] = this.register.byte_10;                          destinationBase[startIndex + 11] = this.register.byte_11;                          destinationBase[startIndex + 12] = this.register.byte_12;                          destinationBase[startIndex + 13] = this.register.byte_13;                          destinationBase[startIndex + 14] = this.register.byte_14;                          destinationBase[startIndex + 15] = this.register.byte_15;                      }                  }                  else if (typeof(T) == typeof(SByte))                  {                      SByte[] sbyteArray = (SByte[])(object)destination;                      fixed (SByte* destinationBase = sbyteArray)                      {                          destinationBase[startIndex + 0] = this.register.sbyte_0;                          destinationBase[startIndex + 1] = this.register.sbyte_1;                          destinationBase[startIndex + 2] = this.register.sbyte_2;                          destinationBase[startIndex + 3] = this.register.sbyte_3;                          destinationBase[startIndex + 4] = this.register.sbyte_4;                          destinationBase[startIndex + 5] = this.register.sbyte_5;                          destinationBase[startIndex + 6] = this.register.sbyte_6;                          destinationBase[startIndex + 7] = this.register.sbyte_7;                          destinationBase[startIndex + 8] = this.register.sbyte_8;                          destinationBase[startIndex + 9] = this.register.sbyte_9;                          destinationBase[startIndex + 10] = this.register.sbyte_10;                          destinationBase[startIndex + 11] = this.register.sbyte_11;                          destinationBase[startIndex + 12] = this.register.sbyte_12;                          destinationBase[startIndex + 13] = this.register.sbyte_13;                          destinationBase[startIndex + 14] = this.register.sbyte_14;                          destinationBase[startIndex + 15] = this.register.sbyte_15;                      }                  }                  else if (typeof(T) == typeof(UInt16))                  {                      UInt16[] uint16Array = (UInt16[])(object)destination;                      fixed (UInt16* destinationBase = uint16Array)                      {                          destinationBase[startIndex + 0] = this.register.uint16_0;                          destinationBase[startIndex + 1] = this.register.uint16_1;                          destinationBase[startIndex + 2] = this.register.uint16_2;                          destinationBase[startIndex + 3] = this.register.uint16_3;                          destinationBase[startIndex + 4] = this.register.uint16_4;                          destinationBase[startIndex + 5] = this.register.uint16_5;                          destinationBase[startIndex + 6] = this.register.uint16_6;                          destinationBase[startIndex + 7] = this.register.uint16_7;                      }                  }                  else if (typeof(T) == typeof(Int16))                  {                      Int16[] int16Array = (Int16[])(object)destination;                      fixed (Int16* destinationBase = int16Array)                      {                          destinationBase[startIndex + 0] = this.register.int16_0;                          destinationBase[startIndex + 1] = this.register.int16_1;                          destinationBase[startIndex + 2] = this.register.int16_2;                          destinationBase[startIndex + 3] = this.register.int16_3;                          destinationBase[startIndex + 4] = this.register.int16_4;                          destinationBase[startIndex + 5] = this.register.int16_5;                          destinationBase[startIndex + 6] = this.register.int16_6;                          destinationBase[startIndex + 7] = this.register.int16_7;                      }                  }                  else if (typeof(T) == typeof(UInt32))                  {                      UInt32[] uint32Array = (UInt32[])(object)destination;                      fixed (UInt32* destinationBase = uint32Array)                      {                          destinationBase[startIndex + 0] = this.register.uint32_0;                          destinationBase[startIndex + 1] = this.register.uint32_1;                          destinationBase[startIndex + 2] = this.register.uint32_2;                          destinationBase[startIndex + 3] = this.register.uint32_3;                      }                  }                  else if (typeof(T) == typeof(Int32))                  {                      Int32[] int32Array = (Int32[])(object)destination;                      fixed (Int32* destinationBase = int32Array)                      {                          destinationBase[startIndex + 0] = this.register.int32_0;                          destinationBase[startIndex + 1] = this.register.int32_1;                          destinationBase[startIndex + 2] = this.register.int32_2;                          destinationBase[startIndex + 3] = this.register.int32_3;                      }                  }                  else if (typeof(T) == typeof(UInt64))                  {                      UInt64[] uint64Array = (UInt64[])(object)destination;                      fixed (UInt64* destinationBase = uint64Array)                      {                          destinationBase[startIndex + 0] = this.register.uint64_0;                          destinationBase[startIndex + 1] = this.register.uint64_1;                      }                  }                  else if (typeof(T) == typeof(Int64))                  {                      Int64[] int64Array = (Int64[])(object)destination;                      fixed (Int64* destinationBase = int64Array)                      {                          destinationBase[startIndex + 0] = this.register.int64_0;                          destinationBase[startIndex + 1] = this.register.int64_1;                      }                  }                  else if (typeof(T) == typeof(Single))                  {                      Single[] singleArray = (Single[])(object)destination;                      fixed (Single* destinationBase = singleArray)                      {                          destinationBase[startIndex + 0] = this.register.single_0;                          destinationBase[startIndex + 1] = this.register.single_1;                          destinationBase[startIndex + 2] = this.register.single_2;                          destinationBase[startIndex + 3] = this.register.single_3;                      }                  }                  else if (typeof(T) == typeof(Double))                  {                      Double[] doubleArray = (Double[])(object)destination;                      fixed (Double* destinationBase = doubleArray)                      {                          destinationBase[startIndex + 0] = this.register.double_0;                          destinationBase[startIndex + 1] = this.register.double_1;                      }                  }              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: UInt16* lowPtr = stackalloc UInt16[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  lowPtr[i] = (UInt16)source[i];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: UInt16* highPtr = stackalloc UInt16[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (UInt16)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (UInt16)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: UInt32* lowPtr = stackalloc UInt32[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  lowPtr[i] = (UInt32)source[i];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: UInt32* highPtr = stackalloc UInt32[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (UInt32)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (UInt32)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: UInt64* lowPtr = stackalloc UInt64[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  lowPtr[i] = (UInt64)source[i];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: UInt64* highPtr = stackalloc UInt64[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (UInt64)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (UInt64)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Int16* lowPtr = stackalloc Int16[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  lowPtr[i] = (Int16)source[i];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Int16* highPtr = stackalloc Int16[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Int16)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Int16)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Int32* lowPtr = stackalloc Int32[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  lowPtr[i] = (Int32)source[i];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Int32* highPtr = stackalloc Int32[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Int32)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Int32)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Int64* lowPtr = stackalloc Int64[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  lowPtr[i] = (Int64)source[i];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Int64* highPtr = stackalloc Int64[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Int64)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Int64)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Double* lowPtr = stackalloc Double[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  lowPtr[i] = (Double)source[i];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: Double* highPtr = stackalloc Double[elements / 2];
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Double)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Widen,The following statement contains a magic number: for (int i = 0; i < elements / 2; i++)              {                  highPtr[i] = (Double)source[i + (elements / 2)];              }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Byte>.Count;  				Byte* retPtr = stackalloc Byte[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Byte)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Byte)high[i];  				}    				return new Vector<Byte>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Byte>.Count;  				Byte* retPtr = stackalloc Byte[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Byte)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Byte)high[i];  				}    				return new Vector<Byte>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Byte>.Count;  				Byte* retPtr = stackalloc Byte[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Byte)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Byte)high[i];  				}    				return new Vector<Byte>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<UInt16>.Count;  				UInt16* retPtr = stackalloc UInt16[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (UInt16)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (UInt16)high[i];  				}    				return new Vector<UInt16>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<UInt16>.Count;  				UInt16* retPtr = stackalloc UInt16[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (UInt16)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (UInt16)high[i];  				}    				return new Vector<UInt16>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<UInt16>.Count;  				UInt16* retPtr = stackalloc UInt16[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (UInt16)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (UInt16)high[i];  				}    				return new Vector<UInt16>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<UInt32>.Count;  				UInt32* retPtr = stackalloc UInt32[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (UInt32)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (UInt32)high[i];  				}    				return new Vector<UInt32>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<UInt32>.Count;  				UInt32* retPtr = stackalloc UInt32[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (UInt32)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (UInt32)high[i];  				}    				return new Vector<UInt32>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<UInt32>.Count;  				UInt32* retPtr = stackalloc UInt32[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (UInt32)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (UInt32)high[i];  				}    				return new Vector<UInt32>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<SByte>.Count;  				SByte* retPtr = stackalloc SByte[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (SByte)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (SByte)high[i];  				}    				return new Vector<SByte>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<SByte>.Count;  				SByte* retPtr = stackalloc SByte[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (SByte)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (SByte)high[i];  				}    				return new Vector<SByte>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<SByte>.Count;  				SByte* retPtr = stackalloc SByte[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (SByte)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (SByte)high[i];  				}    				return new Vector<SByte>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Int16>.Count;  				Int16* retPtr = stackalloc Int16[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Int16)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Int16)high[i];  				}    				return new Vector<Int16>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Int16>.Count;  				Int16* retPtr = stackalloc Int16[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Int16)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Int16)high[i];  				}    				return new Vector<Int16>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Int16>.Count;  				Int16* retPtr = stackalloc Int16[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Int16)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Int16)high[i];  				}    				return new Vector<Int16>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Int32>.Count;  				Int32* retPtr = stackalloc Int32[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Int32)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Int32)high[i];  				}    				return new Vector<Int32>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Int32>.Count;  				Int32* retPtr = stackalloc Int32[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Int32)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Int32)high[i];  				}    				return new Vector<Int32>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Int32>.Count;  				Int32* retPtr = stackalloc Int32[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Int32)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Int32)high[i];  				}    				return new Vector<Int32>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Single>.Count;  				Single* retPtr = stackalloc Single[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Single)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Single)high[i];  				}    				return new Vector<Single>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Single>.Count;  				Single* retPtr = stackalloc Single[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Single)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Single)high[i];  				}    				return new Vector<Single>(retPtr);  		    }
Magic Number,System.Numerics,Vector,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector.cs,Narrow,The following statement contains a magic number: unchecked  		    {  				int elements = Vector<Single>.Count;  				Single* retPtr = stackalloc Single[elements];  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i] = (Single)low[i];  				}  				for (int i = 0; i < elements / 2; i++)  				{  					retPtr[i + (elements / 2)] = (Single)high[i];  				}    				return new Vector<Single>(retPtr);  		    }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: radians = MathF.IEEERemainder(radians' MathF.PI * 2);
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: radians = MathF.IEEERemainder(radians' MathF.PI * 2);
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix3x2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix3x2.cs,CreateRotation,The following statement contains a magic number: if (radians > -epsilon && radians < epsilon)              {                  // Exact case for zero rotation.                  c = 1;                  s = 0;              }              else if (radians > MathF.PI / 2 - epsilon && radians < MathF.PI / 2 + epsilon)              {                  // Exact case for 90 degree rotation.                  c = 0;                  s = 1;              }              else if (radians < -MathF.PI + epsilon || radians > MathF.PI - epsilon)              {                  // Exact case for 180 degree rotation.                  c = -1;                  s = 0;              }              else if (radians > -MathF.PI / 2 - epsilon && radians < -MathF.PI / 2 + epsilon)              {                  // Exact case for 270 degree rotation.                  c = 0;                  s = -1;              }              else              {                  // Arbitrary rotation.                  c = MathF.Cos(radians);                  s = MathF.Sin(radians);              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Matrix4x4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Matrix4x4.cs,Decompose,The following statement contains a magic number: unsafe              {                  fixed (Vector3* scaleBase = &scale)                  {                      float* pfScales = (float*)scaleBase;                      const float EPSILON = 0.0001f;                      float det;                        VectorBasis vectorBasis;                      Vector3** pVectorBasis = (Vector3**)&vectorBasis;                        Matrix4x4 matTemp = Matrix4x4.Identity;                      CanonicalBasis canonicalBasis = new CanonicalBasis();                      Vector3* pCanonicalBasis = &canonicalBasis.Row0;                        canonicalBasis.Row0 = new Vector3(1.0f' 0.0f' 0.0f);                      canonicalBasis.Row1 = new Vector3(0.0f' 1.0f' 0.0f);                      canonicalBasis.Row2 = new Vector3(0.0f' 0.0f' 1.0f);                        translation = new Vector3(                          matrix.M41'                          matrix.M42'                          matrix.M43);                        pVectorBasis[0] = (Vector3*)&matTemp.M11;                      pVectorBasis[1] = (Vector3*)&matTemp.M21;                      pVectorBasis[2] = (Vector3*)&matTemp.M31;                        *(pVectorBasis[0]) = new Vector3(matrix.M11' matrix.M12' matrix.M13);                      *(pVectorBasis[1]) = new Vector3(matrix.M21' matrix.M22' matrix.M23);                      *(pVectorBasis[2]) = new Vector3(matrix.M31' matrix.M32' matrix.M33);                        scale.X = pVectorBasis[0]->Length();                      scale.Y = pVectorBasis[1]->Length();                      scale.Z = pVectorBasis[2]->Length();                        uint a' b' c;                      #region Ranking                      float x = pfScales[0]' y = pfScales[1]' z = pfScales[2];                      if (x < y)                      {                          if (y < z)                          {                              a = 2;                              b = 1;                              c = 0;                          }                          else                          {                              a = 1;                                if (x < z)                              {                                  b = 2;                                  c = 0;                              }                              else                              {                                  b = 0;                                  c = 2;                              }                          }                      }                      else                      {                          if (x < z)                          {                              a = 2;                              b = 0;                              c = 1;                          }                          else                          {                              a = 0;                                if (y < z)                              {                                  b = 2;                                  c = 1;                              }                              else                              {                                  b = 1;                                  c = 2;                              }                          }                      }                      #endregion                        if (pfScales[a] < EPSILON)                      {                          *(pVectorBasis[a]) = pCanonicalBasis[a];                      }                        *pVectorBasis[a] = Vector3.Normalize(*pVectorBasis[a]);                        if (pfScales[b] < EPSILON)                      {                          uint cc;                          float fAbsX' fAbsY' fAbsZ;                            fAbsX = MathF.Abs(pVectorBasis[a]->X);                          fAbsY = MathF.Abs(pVectorBasis[a]->Y);                          fAbsZ = MathF.Abs(pVectorBasis[a]->Z);                            #region Ranking                          if (fAbsX < fAbsY)                          {                              if (fAbsY < fAbsZ)                              {                                  cc = 0;                              }                              else                              {                                  if (fAbsX < fAbsZ)                                  {                                      cc = 0;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          else                          {                              if (fAbsX < fAbsZ)                              {                                  cc = 1;                              }                              else                              {                                  if (fAbsY < fAbsZ)                                  {                                      cc = 1;                                  }                                  else                                  {                                      cc = 2;                                  }                              }                          }                          #endregion                            *pVectorBasis[b] = Vector3.Cross(*pVectorBasis[a]' *(pCanonicalBasis + cc));                      }                        *pVectorBasis[b] = Vector3.Normalize(*pVectorBasis[b]);                        if (pfScales[c] < EPSILON)                      {                          *pVectorBasis[c] = Vector3.Cross(*pVectorBasis[a]' *pVectorBasis[b]);                      }                        *pVectorBasis[c] = Vector3.Normalize(*pVectorBasis[c]);                        det = matTemp.GetDeterminant();                        // use Kramer's rule to check for handedness of coordinate system                      if (det < 0.0f)                      {                          // switch coordinate system by negating the scale and inverting the basis vector on the x-axis                          pfScales[a] = -pfScales[a];                          *pVectorBasis[a] = -(*pVectorBasis[a]);                            det = -det;                      }                        det -= 1.0f;                      det *= det;                        if ((EPSILON < det))                      {                          // Non-SRT matrix encountered                          rotation = Quaternion.Identity;                          result = false;                      }                      else                      {                          // generate the quaternion from the matrix                          rotation = Quaternion.CreateFromRotationMatrix(matTemp);                      }                  }              }
Magic Number,System.Numerics,Vector2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector2.cs,Reflect,The following statement contains a magic number: if (Vector.IsHardwareAccelerated)              {                  float dot = Vector2.Dot(vector' normal);                  return vector - (2 * dot * normal);              }              else              {                  float dot = vector.X * normal.X + vector.Y * normal.Y;                    return new Vector2(                      vector.X - 2.0f * dot * normal.X'                      vector.Y - 2.0f * dot * normal.Y);              }
Magic Number,System.Numerics,Vector2,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector2.cs,CopyTo,The following statement contains a magic number: if ((array.Length - index) < 2)              {                  throw new ArgumentException(SR.Format(SR.Arg_ElementsInSourceIsGreaterThanDestination' index));              }
Magic Number,System.Numerics,Vector3,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector3.cs,CopyTo,The following statement contains a magic number: if ((array.Length - index) < 3)              {                  throw new ArgumentException(SR.Format(SR.Arg_ElementsInSourceIsGreaterThanDestination' index));              }
Magic Number,System.Numerics,Vector3,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector3.cs,CopyTo,The following statement contains a magic number: array[index + 2] = Z;
Magic Number,System.Numerics,Vector4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector4.cs,CopyTo,The following statement contains a magic number: if ((array.Length - index) < 4)              {                  throw new ArgumentException(SR.Format(SR.Arg_ElementsInSourceIsGreaterThanDestination' index));              }
Magic Number,System.Numerics,Vector4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector4.cs,CopyTo,The following statement contains a magic number: array[index + 2] = Z;
Magic Number,System.Numerics,Vector4,C:\selectedRepos\dotnet_corefx\src\System.Numerics.Vectors\src\System\Numerics\Vector4.cs,CopyTo,The following statement contains a magic number: array[index + 3] = W;
