Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,Init,The method has 181 lines of code.
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,InitConfigFromFile,The method has 137 lines of code.
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,GetSectionRecursive,The method has 298 lines of code.
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,Evaluate,The method has 154 lines of code.
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanFactoriesRecursive,The method has 263 lines of code.
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanSectionsRecursive,The method has 331 lines of code.
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanLocationSection,The method has 134 lines of code.
Long Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveLocationSections,The method has 120 lines of code.
Long Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,Unmerge,The method has 117 lines of code.
Long Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,SerializeElement,The method has 118 lines of code.
Long Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,DeserializeElement,The method has 296 lines of code.
Long Method,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,Unmerge,The method has 179 lines of code.
Long Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,SaveAs,The method has 154 lines of code.
Long Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetConfigDeclarationUpdates,The method has 153 lines of code.
Long Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetConfigDefinitionUpdates,The method has 188 lines of code.
Long Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,UpdateRecords,The method has 159 lines of code.
Long Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfig,The method has 147 lines of code.
Long Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfigDeclarationsRecursive,The method has 197 lines of code.
Long Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfigDefinitionsRecursive,The method has 317 lines of code.
Long Method,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,CopyXmlNode,The method has 255 lines of code.
Long Method,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,FormatXmlElement,The method has 120 lines of code.
Complex Method,System.Configuration,ApplicationSettingsBase,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ApplicationSettingsBase.cs,EnsureInitialized,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,Init,Cyclomatic complexity of the method is 25
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,InitConfigFromFile,Cyclomatic complexity of the method is 12
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,GetSectionRecursive,Cyclomatic complexity of the method is 22
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,Evaluate,Cyclomatic complexity of the method is 24
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,FindSectionRecursive,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanSectionsRecursive,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanLocationSection,Cyclomatic complexity of the method is 11
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,NormalizeLocationSubPath,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,HlClearResultRecursive,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,HlNeedsChildFor,Cyclomatic complexity of the method is 9
Complex Method,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,CloseRecursive,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,ClientConfigPaths,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigPaths.cs,ClientConfigPaths,Cyclomatic complexity of the method is 9
Complex Method,System.Configuration,ClientConfigPaths,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigPaths.cs,SetNamesAndVersion,Cyclomatic complexity of the method is 17
Complex Method,System.Configuration,ClientConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigurationHost.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,System.Configuration,ConfigPathUtility,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigPathUtility.cs,IsValid,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,MergeLocks,Cyclomatic complexity of the method is 23
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ResetLockLists,Cyclomatic complexity of the method is 13
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,Unmerge,Cyclomatic complexity of the method is 17
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,SerializeElement,Cyclomatic complexity of the method is 14
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ReportInvalidLock,Cyclomatic complexity of the method is 10
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ParseLockedAttributes,Cyclomatic complexity of the method is 10
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,DeserializeElement,Cyclomatic complexity of the method is 44
Complex Method,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ValidateElement,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,Unmerge,Cyclomatic complexity of the method is 25
Complex Method,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,BaseAdd,Cyclomatic complexity of the method is 15
Complex Method,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,BaseAddInternal,Cyclomatic complexity of the method is 11
Complex Method,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,BaseAdd,Cyclomatic complexity of the method is 11
Complex Method,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,BaseRemove,Cyclomatic complexity of the method is 12
Complex Method,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,BaseRemoveAt,Cyclomatic complexity of the method is 9
Complex Method,System.Configuration,LocalFileSettingsProvider,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\LocalFileSettingsProvider.cs,GetPreviousConfigFileName,Cyclomatic complexity of the method is 11
Complex Method,System.Configuration,LocalFileSettingsProvider,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\LocalFileSettingsProvider.cs,SerializeToXmlElement,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,IsStreamUsed,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,ChangeConfigSource,Cyclomatic complexity of the method is 10
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,ValidateSectionXml,Cyclomatic complexity of the method is 9
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,RemoveConfigurationSection,Cyclomatic complexity of the method is 13
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,SaveAs,Cyclomatic complexity of the method is 14
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetUpdatedSectionDeclarationXml,Cyclomatic complexity of the method is 9
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetConfigDeclarationUpdates,Cyclomatic complexity of the method is 23
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetConfigDefinitionUpdates,Cyclomatic complexity of the method is 12
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,UpdateRecords,Cyclomatic complexity of the method is 19
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteUnwrittenConfigDeclarationsRecursive,Cyclomatic complexity of the method is 11
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteNewConfigDefinitions,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteNewConfigDefinitionsRecursive,Cyclomatic complexity of the method is 9
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfigDeclarationsRecursive,Cyclomatic complexity of the method is 15
Complex Method,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfigDefinitionsRecursive,Cyclomatic complexity of the method is 22
Complex Method,System.Configuration,ProviderSettings,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ProviderSettings.cs,UpdatePropertyCollection,Cyclomatic complexity of the method is 11
Complex Method,System.Configuration,UrlPath,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\UrlPath.cs,IsEqualOrSubpathImpl,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,SkipAndCopyReaderToNextElement,Cyclomatic complexity of the method is 8
Complex Method,System.Configuration,SettingsPropertyValue,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValue.cs,Deserialize,Cyclomatic complexity of the method is 11
Long Parameter List,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,CreateSection,The method has 5 parameters. Parameters: inputIsTrusted' factoryRecord' sectionRecord' parentConfig' reader
Long Parameter List,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,GetSectionRecursive,The method has 7 parameters. Parameters: configKey' getLkg' checkPermission' getRuntimeObject' requestIsHere' result' resultRuntimeObject
Long Parameter List,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,CreateSectionDefault,The method has 6 parameters. Parameters: configKey' getRuntimeObject' factoryRecord' sectionRecord' result' resultRuntimeObject
Long Parameter List,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,Evaluate,The method has 7 parameters. Parameters: factoryRecord' sectionRecord' parentResult' getLkg' getRuntimeObject' result' resultRuntimeObject
Long Parameter List,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,EvaluateOne,The method has 6 parameters. Parameters: keys' input' isTrusted' factoryRecord' sectionRecord' parentResult
Long Parameter List,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,CallCreateSection,The method has 7 parameters. Parameters: inputIsTrusted' factoryRecord' sectionRecord' parentConfig' reader' filename' line
Long Parameter List,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanSectionsRecursive,The method has 6 parameters. Parameters: xmlUtil' parentConfigKey' inLocation' locationSubPath' overrideMode' skipInChildApps
Long Parameter List,System.Configuration,ClientConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigurationHost.cs,InitForConfiguration,The method has 5 parameters. Parameters: locationSubPath' configPath' locationConfigPath' configRoot' hostInitConfigurationParams
Long Parameter List,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,InitForConfiguration,The method has 5 parameters. Parameters: locationSubPath' configPath' locationConfigPath' configRoot' hostInitConfigurationParams
Long Parameter List,System.Configuration,ConfigDefinitionUpdates,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigDefinitionUpdates.cs,AddUpdate,The method has 5 parameters. Parameters: overrideMode' inheritInChildApps' moved' updatedXml' sectionRecord
Long Parameter List,System.Configuration,ConfigurationManager,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationManager.cs,OpenExeConfigurationImpl,The method has 5 parameters. Parameters: fileMap' isMachine' userLevel' exePath' preLoad
Long Parameter List,System.Configuration,ConfigurationProperty,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationProperty.cs,ConfigurationProperty,The method has 6 parameters. Parameters: name' type' defaultValue' typeConverter' validator' options
Long Parameter List,System.Configuration,ConfigurationProperty,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationProperty.cs,ConfigurationProperty,The method has 7 parameters. Parameters: name' type' defaultValue' typeConverter' validator' options' description
Long Parameter List,System.Configuration,ConfigurationProperty,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationProperty.cs,ConstructorInit,The method has 5 parameters. Parameters: name' type' options' validator' converter
Long Parameter List,System.Configuration,ConfigXmlAttribute,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigXmlAttribute.cs,ConfigXmlAttribute,The method has 6 parameters. Parameters: filename' line' prefix' localName' namespaceUri' doc
Long Parameter List,System.Configuration,ConfigXmlElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigXmlElement.cs,ConfigXmlElement,The method has 6 parameters. Parameters: filename' line' prefix' localName' namespaceUri' doc
Long Parameter List,System.Configuration,FactoryRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\FactoryRecord.cs,FactoryRecord,The method has 12 parameters. Parameters: configKey' group' name' factory' factoryTypeName' flags' allowDefinition' allowExeDefinition' overrideModeDefault' filename' lineNumber' errors
Long Parameter List,System.Configuration,FactoryRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\FactoryRecord.cs,FactoryRecord,The method has 6 parameters. Parameters: configKey' group' name' factoryTypeName' filename' lineNumber
Long Parameter List,System.Configuration,FactoryRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\FactoryRecord.cs,FactoryRecord,The method has 14 parameters. Parameters: configKey' group' name' factoryTypeName' allowLocation' allowDefinition' allowExeDefinition' overrideModeDefault' restartOnExternalChanges' requirePermission' isFromTrustedConfigRecord' isUndeclared' filename' lineNumber
Long Parameter List,System.Configuration,FactoryRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\FactoryRecord.cs,IsEquivalentSectionFactory,The method has 7 parameters. Parameters: host' typeName' allowLocation' allowDefinition' allowExeDefinition' restartOnExternalChanges' requirePermission
Long Parameter List,System.Configuration,ImplicitMachineConfigHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ImplicitMachineConfigHost.cs,InitForConfiguration,The method has 5 parameters. Parameters: locationSubPath' configPath' locationConfigPath' configRoot' hostInitConfigurationParams
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CreateSection,The method has 5 parameters. Parameters: inputIsTrusted' factoryRecord' sectionRecord' parentConfig' reader
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetConfigDefinitionUpdates,The method has 5 parameters. Parameters: requireUpdates' saveMode' forceSaveAll' definitionUpdates' configSourceUpdates
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteNewConfigDeclarations,The method has 5 parameters. Parameters: declarationUpdates' utilWriter' linePosition' indent' skipFirstIndent
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteUnwrittenConfigDeclarations,The method has 5 parameters. Parameters: declarationUpdates' utilWriter' linePosition' indent' skipFirstIndent
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteUnwrittenConfigDeclarationsRecursive,The method has 5 parameters. Parameters: declarationUpdates' utilWriter' linePosition' indent' skipFirstIndent
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteNewConfigDefinitionsRecursive,The method has 5 parameters. Parameters: utilWriter' sectionUpdates' linePosition' indent' skipFirstIndent
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfig,The method has 6 parameters. Parameters: declarationUpdates' definitionUpdates' buffer' filename' namespaceChange' utilWriter
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfigDeclarationsRecursive,The method has 6 parameters. Parameters: declarationUpdates' xmlUtil' utilWriter' group' parentLinePosition' parentIndent
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfigDefinitionsRecursive,The method has 10 parameters. Parameters: configDefinitionUpdates' xmlUtil' utilWriter' locationPathApplies' locationUpdates' sectionUpdates' addNewSections' group' parentLinePosition' parentIndent
Long Parameter List,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,WriteSectionUpdate,The method has 5 parameters. Parameters: utilWriter' update' linePosition' indent' skipFirstIndent
Long Parameter List,System.Configuration,RuntimeConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\RuntimeConfigurationRecord.cs,CreateSection,The method has 5 parameters. Parameters: inputIsTrusted' factoryRecord' sectionRecord' parentConfig' reader
Long Parameter List,System.Configuration,RuntimeConfigurationFactory,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\RuntimeConfigurationRecord.cs,CreateSection,The method has 6 parameters. Parameters: inputIsTrusted' configRecord' factoryRecord' sectionRecord' parentConfig' reader
Long Parameter List,System.Configuration,SectionXmlInfo,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionXmlInfo.cs,SectionXmlInfo,The method has 14 parameters. Parameters: configKey' definitionConfigPath' targetConfigPath' subPath' filename' lineNumber' streamVersion' rawXml' configSource' configSourceStreamName' configSourceStreamVersion' protectionProviderName' overrideMode' skipInChildApps
Long Parameter List,System.Configuration,SettingChangingEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingChangingEventArgs.cs,SettingChangingEventArgs,The method has 5 parameters. Parameters: settingName' settingClass' settingKey' newValue' cancel
Long Parameter List,System.Configuration,ValidatorUtils,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ValidatorUtils.cs,ValidateScalar,The method has 5 parameters. Parameters: value' min' max' resolution' exclusiveRange
Long Parameter List,System.Configuration,ValidatorUtils,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ValidatorUtils.cs,ValidateScalar,The method has 5 parameters. Parameters: value' min' max' resolutionInSeconds' exclusiveRange
Long Parameter List,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,UpdateStartElement,The method has 5 parameters. Parameters: utilWriter' updatedStartElement' needsChildren' linePosition' indent
Long Parameter List,System.Configuration,SettingsProperty,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsProperty.cs,SettingsProperty,The method has 9 parameters. Parameters: name' propertyType' provider' isReadOnly' defaultValue' serializeAs' attributes' throwOnErrorDeserializing' throwOnErrorSerializing
Long Parameter List,System.Configuration.Internal,DelegatingConfigHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\DelegatingConfigHost.cs,InitForConfiguration,The method has 5 parameters. Parameters: locationSubPath' configPath' locationConfigPath' configRoot' hostInitConfigurationParams
Long Parameter List,System.Configuration.Internal,IInternalConfigHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\IInternalConfigHost.cs,InitForConfiguration,The method has 5 parameters. Parameters: locationSubPath' configPath' locationConfigPath' configRoot' hostInitConfigurationParams
Long Parameter List,System.Configuration.Internal,InternalConfigHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\InternalConfigHost.cs,InitForConfiguration,The method has 5 parameters. Parameters: locationSubPath' configPath' locationConfigPath' configRoot' hostInitConfigurationParams
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveLocationSections,The length of the parameter locationSectionRecordDictionary is 31.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter SectionAllowDefinitionAttribute is 31.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter AllowDefinitionMachineToApplication is 35.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter AllowDefinitionMachineToWebRoot is 31.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter SectionAllowExeDefinitionAttribute is 34.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter AllowExeDefinitionMachineToRoaming is 34.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter AllowExeDefinitionMachineToLocal is 32.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter SectionRestartonExternalChangesAttribute is 40.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter SectionRequirePermissionAttribute is 33.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter SectionOverrideModeDefaultAttribute is 35.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter LocationAllowOverrideAttribute is 30.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter LocationInheritInChildApplicationsAttribute is 43.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter KeywordLocationOverrideModeString is 33.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter ClassSupportsChangeNotifications is 32.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter ClassSupportsRestrictedPermissions is 34.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter InvalidSubPathCharactersString is 30.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter ProtectedConfigurationSectionTypeName is 37.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter ReservedSectionProtectedConfiguration is 37.
Long Identifier,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,,The length of the parameter s_invalidSubPathCharactersArray is 31.
Long Identifier,System.Configuration,ClientSettingsStore,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,,The length of the parameter ApplicationSettingsGroupPrefix is 30.
Long Identifier,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,,The length of the parameter ClientConfigurationHostTypeName is 31.
Long Identifier,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,,The length of the parameter InternalConfigConfigurationFactoryTypeName is 42.
Long Identifier,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,,The length of the parameter _lockedAllExceptAttributesList is 30.
Long Identifier,System.Configuration,ConfigurationProperty,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationProperty.cs,,The length of the parameter s_defaultCollectionPropertyName is 31.
Long Identifier,System.Configuration,ConfigurationPropertyAttribute,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationPropertyAttribute.cs,,The length of the parameter s_defaultCollectionPropertyName is 31.
Long Identifier,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfig,The length of the parameter configurationElementLinePosition is 32.
Long Identifier,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfig,The length of the parameter configSectionsElementLinePosition is 33.
Long Identifier,System.Configuration,SectionInformation,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionInformation.cs,SectionInformation,The length of the parameter associatedConfigurationSection is 30.
Long Identifier,System.Configuration,SectionInformation,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionInformation.cs,ProtectSection,The length of the parameter protectedConfigurationProvider is 30.
Long Identifier,System.Configuration,SectionInformation,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionInformation.cs,,The length of the parameter FlagProtectionProviderDetermined is 32.
Long Identifier,System.Configuration,SectionInformation,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionInformation.cs,,The length of the parameter FlagChildrenLockWithoutFileInput is 32.
Long Identifier,System.Configuration,SectionInformation,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionInformation.cs,,The length of the parameter FlagAllowExeDefinitionModified is 30.
Long Identifier,System.Configuration,SectionInformation,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionInformation.cs,,The length of the parameter FlagProtectionProviderModified is 30.
Long Identifier,System.Configuration,SectionInformation,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionInformation.cs,,The length of the parameter FlagOverrideModeDefaultModified is 31.
Long Identifier,System.Configuration,SectionRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionRecord.cs,,The length of the parameter FlagIndirectLocationInputLockApplied is 36.
Long Identifier,System.Configuration,SectionRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SectionRecord.cs,,The length of the parameter FlagChildrenLockWithoutFileInput is 32.
Long Identifier,System.Configuration,TypeUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\TypeUtil.cs,,The length of the parameter ConfigurationManagerAssemblyName is 32.
Long Statement,System.Configuration,DpapiProtectedConfigurationProvider,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\DpapiProtectedConfigurationProvider.cs,Initialize,The length of the statement  "                throw new ConfigurationErrorsException(string.Format(SR.Unrecognized_initialization_value' configurationValues.GetKey(0))); " is 123.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //    There is one huge trick though - Location config records are different ( see begining of the func for what a location config record is ) " is 142.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //    A location config record is not locked if the config level of the web.config file in which it lives is not locked. " is 120.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //      a) There is a section record in our immediate parent ( remember our immediate parent is the config file in which we /as a location tag/ are defined ) " is 157.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //         In this case our lock mode is not the LockChildren of this section record because this lock mode applies to child config levels in child config files " is 160.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //      b) There is no section record in our immediate parent - in this case the locking is the same as for normal config - LockChildren value of any section " is 157.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //          A Location config is a bit wierd again in a sence that a location config is unlocked if its in the config file where the section is declared " is 152.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //          I.e. if "this" is a location record then a section is unconditionally unlocked if "this.Parent" is the section declaration level " is 140.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //      b) We are not at section declaration level - in this case the result is whatever the default lock mode for the section is ( remember " is 140.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "            //         that we fall back to the default since we couldn't find a section record with explicit lock mode nowhere above us) " is 125.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "                        // For example imagine a web.config which has a <location path="." overrideMode="Deny"> and we open "locationSubPath" from this web.config " is 138.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ResolveOverrideModeFromParent,The length of the statement  "                        // The lock for the section is not Deny and will be allow ( see the code line above ). However the chidlren of this location tag " is 128.
Long Statement,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanSectionsRecursive,The length of the statement  "                            new ConfigurationErrorsException(string.Format(SR.Config_client_config_too_many_configsections_elements' tagName)' xmlUtil)' " is 124.
Long Statement,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,InitForConfiguration,The length of the statement  "                Host.InitForConfiguration(ref locationSubPath' out configPath' out locationConfigPath' configRoot' null' null' desiredConfigPath); " is 130.
Long Statement,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,IsKnownConfigFile,The length of the statement  "                  string.Equals(filename' ConfigurationManagerInternalFactory.Instance.MachineConfigPath' StringComparison.OrdinalIgnoreCase) || " is 126.
Long Statement,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,IsKnownConfigFile,The length of the statement  "                  string.Equals(filename' ConfigurationManagerInternalFactory.Instance.ApplicationConfigUri' StringComparison.OrdinalIgnoreCase) || " is 129.
Long Statement,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,IsKnownConfigFile,The length of the statement  "                  string.Equals(filename' ConfigurationManagerInternalFactory.Instance.ExeLocalConfigPath' StringComparison.OrdinalIgnoreCase) || " is 127.
Long Statement,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,IsKnownConfigFile,The length of the statement  "                  string.Equals(filename' ConfigurationManagerInternalFactory.Instance.ExeRoamingConfigPath' StringComparison.OrdinalIgnoreCase); " is 127.
Long Statement,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,WriteCompleted,The length of the statement  "                if (string.Equals(streamName' ConfigurationManagerInternalFactory.Instance.ExeLocalConfigPath' StringComparison.OrdinalIgnoreCase) || " is 133.
Long Statement,System.Configuration,ClientSettingsConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientSettingsStore.cs,WriteCompleted,The length of the statement  "                    string.Equals(streamName' ConfigurationManagerInternalFactory.Instance.ExeRoamingConfigPath' StringComparison.OrdinalIgnoreCase)) " is 129.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,MergeLocks,The length of the statement  "                    ConfigurationElementCollection collection = this[Properties.DefaultCollectionProperty] as ConfigurationElementCollection; " is 121.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ResetLockLists,The length of the statement  "                    ConfigurationElementCollection collection = this[Properties.DefaultCollectionProperty] as ConfigurationElementCollection; " is 121.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ResetLockLists,The length of the statement  "                    ConfigurationElementCollection collection = this[Properties.DefaultCollectionProperty] as ConfigurationElementCollection; " is 121.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,CreatePropertyBagFromType,The length of the statement  "            foreach (PropertyInfo propertyInformation in type.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)) " is 134.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,CachePerTypeValidator,The length of the statement  "            // the only way to get to this method is through the code path that locks the property bag cache first ( see PropertiesFromType() ) " is 131.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,CachePerTypeValidator,The length of the statement  "            // NOTE[ Thread Safety ]: Non-guarded access to static variable - since this code is called only from CreatePropertyBagFromType " is 127.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,CachePerTypeValidator,The length of the statement  "            // which in turn is done onle once per type and is guarded by the s_propertyBag.SyncRoot then this call is thread safe as well " is 126.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,CachePerTypeValidator,The length of the statement  "            // A type validator should be cached only once. If it isn't then attribute parsing is done more then once which should be avoided " is 129.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ValidateElement,The length of the statement  "                // Note: this is a bit of a hack - we will exploit the fact that this method is called with recursive == true only when serializing the top level section " is 153.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ValidateElement,The length of the statement  "                // At deserializtion time the per-element validator for collection items will get executed as part of their deserialization logic " is 129.
Long Statement,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ValidateElement,The length of the statement  "                // However we dont perform validation in the serialization logic ( because at that time the object is unmerged and not all data is present ) " is 140.
Long Statement,System.Configuration,ImplicitMachineConfigHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ImplicitMachineConfigHost.cs,InitForConfiguration,The length of the statement  "            base.InitForConfiguration(ref locationSubPath' out configPath' out locationConfigPath' configRoot' hostInitConfigurationParams); " is 128.
Long Statement,System.Configuration,LocalFileSettingsProvider,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\LocalFileSettingsProvider.cs,GetPreviousVersion,The length of the statement  "                SettingsPropertyValueCollection values = GetSettingValuesFromFile(prevConfig' GetSectionName(context)' true' properties); " is 121.
Long Statement,System.Configuration,LocalFileSettingsProvider,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\LocalFileSettingsProvider.cs,IsRoamingSetting,The length of the statement  "            SettingsManageabilityAttribute manageAttr = setting.Attributes[typeof(SettingsManageabilityAttribute)] as SettingsManageabilityAttribute; " is 137.
Long Statement,System.Configuration,LocalFileSettingsProvider,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\LocalFileSettingsProvider.cs,IsRoamingSetting,The length of the statement  "            return manageAttr != null && ((manageAttr.Manageability & SettingsManageability.Roaming) == SettingsManageability.Roaming); " is 123.
Long Statement,System.Configuration,LocalFileSettingsProvider,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\LocalFileSettingsProvider.cs,Upgrade,The length of the statement  "                SettingsPropertyValueCollection values = GetSettingValuesFromFile(prevConfig' GetSectionName(context)' true' upgradeProperties); " is 128.
Long Statement,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,CopyConfig,The length of the statement  "                            "configurationEndElement != null || (reader.NodeType == XmlNodeType.EndElement && reader.Name == KEYWORD_CONFIGURATION)"); " is 122.
Long Statement,System.Configuration,OverrideModeSetting,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\OverrideModeSetting.cs,CanUseSameLocationTag,The length of the statement  "            // 2. When the mode was changed( i.e. API change ) - both must be changed the same way ( i.e. using either allowOverride or OverrideMode ) " is 138.
Long Statement,System.Configuration,OverrideModeSetting,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\OverrideModeSetting.cs,CanUseSameLocationTag,The length of the statement  "            // 3. When mode was not changed the XML - they must've been the same in the xml ( i.e. allowOverride specified on both' or overrideMode or neither of them ) " is 156.
Long Statement,System.Configuration,OverrideModeSetting,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\OverrideModeSetting.cs,CanUseSameLocationTag,The length of the statement  "            // If one mode was set through the API - the other mode has to be set in the same way through the API or has to be using the same type in the xml " is 145.
Long Statement,System.Configuration,OverrideModeSetting,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\OverrideModeSetting.cs,IsMatchingApiChangedLocationTag,The length of the statement  "                // If "y" was modified through the API as well - the modified setting must be the same ( i.e. allowOvverride or overrideMode must be modified in both settings ) " is 160.
Long Statement,System.Configuration,OverrideModeSetting,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\OverrideModeSetting.cs,IsMatchingApiChangedLocationTag,The length of the statement  "                // "y" was not API or XML modified - since "x" was API modified - they are not a match ( i.e. "y" should go to an <location> with no explicit mode written out ) " is 160.
Long Statement,System.Configuration,ProtectedConfigurationSection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ProtectedConfigurationSection.cs,GetProviderFromName,The length of the statement  "                throw new ArgumentException(string.Format(SR.ProtectedConfigurationProvider_not_found' providerName)' nameof(providerName)); " is 124.
Long Statement,System.Configuration,SettingsProviderCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsProviderCollection.cs,Add,The length of the statement  "                throw new ArgumentException(string.Format(SR.Config_provider_must_implement_type' typeof(SettingsProvider).ToString())' nameof(provider)); " is 138.
Long Statement,System.Configuration,ValidatorUtils,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ValidatorUtils.cs,ValidateRangeImpl,The length of the statement  "                // First group of errors - the min and max range are the same. i.e. the valid value must be the same/equal to the min(max) " is 122.
Long Statement,System.Configuration,SettingsPropertyValue,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValue.cs,GetObjectFromString,The length of the statement  "            if (type == typeof(string) && (serializedValue == null || serializedValue.Length < 1 || serializeAs == SettingsSerializeAs.String)) " is 131.
Long Statement,System.Configuration.Internal,InternalConfigRoot,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\InternalConfigRoot.cs,AcquireHierarchyLockForRead,The length of the statement  "                    "System.Configuration.Internal.InternalConfigRoot::AcquireHierarchyLockForRead - reader lock already held by this thread"); " is 123.
Long Statement,System.Configuration.Internal,InternalConfigRoot,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\InternalConfigRoot.cs,AcquireHierarchyLockForRead,The length of the statement  "                    "System.Configuration.Internal.InternalConfigRoot::AcquireHierarchyLockForRead - writer lock already held by this thread"); " is 123.
Long Statement,System.Configuration.Internal,InternalConfigRoot,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\InternalConfigRoot.cs,AcquireHierarchyLockForWrite,The length of the statement  "                    "System.Configuration.Internal.InternalConfigRoot::AcquireHierarchyLockForWrite - reader lock already held by this thread"); " is 124.
Long Statement,System.Configuration.Internal,InternalConfigRoot,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\InternalConfigRoot.cs,AcquireHierarchyLockForWrite,The length of the statement  "                    "System.Configuration.Internal.InternalConfigRoot::AcquireHierarchyLockForWrite - writer lock already held by this thread"); " is 124.
Complex Conditional,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,Init,The conditional expression  "IsLocationConfig &&                                          // Check #2.1                                          UrlPath.IsSubpath(locationSectionRecord.SectionXmlInfo.TargetConfigPath' ConfigPath) &&                                          // Check #2.2                                          UrlPath.IsSubpath(parent.ConfigPath' locationSectionRecord.SectionXmlInfo.TargetConfigPath) &&                                          // Check #3                                          !ShouldSkipDueToInheritInChildApplications(                                              locationSectionRecord.SectionXmlInfo.SkipInChildApps'                                              locationSectionRecord.SectionXmlInfo.TargetConfigPath)"  is complex.
Complex Conditional,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanLocationSection,The conditional expression  "this is RuntimeConfigurationRecord && (host != null) && (locationSubPath.Length != 0) &&                  (locationSubPath[0] != '.')"  is complex.
Complex Conditional,System.Configuration,ClientConfigPaths,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigPaths.cs,SetNamesAndVersion,The conditional expression  "!isHttp &&                  (string.IsNullOrEmpty(_companyName) || string.IsNullOrEmpty(ProductName) ||                  string.IsNullOrEmpty(ProductVersion))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,HandleLockedAttributes,The conditional expression  "((source._lockedAttributesList != null) &&                      (source._lockedAttributesList.Contains(propInfo.Name) ||                      source._lockedAttributesList.Contains(LockAll))) ||                      ((source._lockedAllExceptAttributesList != null) &&                      !source._lockedAllExceptAttributesList.Contains(propInfo.Name))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,IsModified,The conditional expression  "_modified                  || ((_lockedAttributesList != null) && _lockedAttributesList.IsModified)                  || ((_lockedAllExceptAttributesList != null) && _lockedAllExceptAttributesList.IsModified)                  || ((_lockedElementsList != null) && _lockedElementsList.IsModified)                  || ((_lockedAllExceptElementsList != null) && _lockedAllExceptElementsList.IsModified)                  || ((_itemLockedFlag & ConfigurationValueFlags.Modified) != 0)"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,CheckLockedElement,The conditional expression  "lockedInParent ||                      ((_lockedAllExceptElementsList != null) && (_lockedAllExceptElementsList.Count != 0) &&                      _lockedAllExceptElementsList.HasParentElements &&                      !_lockedAllExceptElementsList.DefinedInParent(elementName)) ||                      ((_itemLockedFlag & ConfigurationValueFlags.Inherited) != 0)"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,Equals,The conditional expression  "!((IsNullOrNullProperty(thisValue) && Equals(otherValue' configProperty.DefaultValue))                          || (IsNullOrNullProperty(otherValue) && Equals(thisValue' configProperty.DefaultValue)))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,SetPropertyValue,The conditional expression  "(ignoreLocks == false) &&                  (((_lockedAllExceptAttributesList != null) && _lockedAllExceptAttributesList.HasParentElements &&                  !_lockedAllExceptAttributesList.DefinedInParent(prop.Name)) ||                  ((_lockedAttributesList != null) &&                  (_lockedAttributesList.DefinedInParent(prop.Name) || _lockedAttributesList.DefinedInParent(LockAll))) ||                  (((_itemLockedFlag & ConfigurationValueFlags.Locked) != 0) &&                  ((_itemLockedFlag & ConfigurationValueFlags.Inherited) != 0)))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,Unmerge,The conditional expression  "prop.IsRequired || modified || !inherited ||                                  ((parentElement == null) && inherited && !Equals(value' value2))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,SerializeToXmlElement,The conditional expression  "((_lockedElementsList != null) && _lockedElementsList.DefinedInParent(elementName)) ||                  ((_lockedAllExceptElementsList != null) && _lockedAllExceptElementsList.HasParentElements &&                  !_lockedAllExceptElementsList.DefinedInParent(elementName))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,SerializeElement,The conditional expression  "((_lockedAllExceptAttributesList != null) && _lockedAllExceptAttributesList.HasParentElements &&                          !_lockedAllExceptAttributesList.DefinedInParent(prop.Name)) ||                          ((_lockedAttributesList != null) && _lockedAttributesList.DefinedInParent(prop.Name))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,SerializeElement,The conditional expression  "((_lockedElementsList != null) && _lockedElementsList.DefinedInParent(key)) ||                          ((_lockedAllExceptElementsList != null) &&                          _lockedAllExceptElementsList.HasParentElements &&                          !_lockedAllExceptElementsList.DefinedInParent(key))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ReportInvalidLock,The conditional expression  "(validProp.Name != LockAttributesKey) &&                      (validProp.Name != LockAllAttributesExceptKey) &&                      (validProp.Name != LockElementsKey) &&                      (validProp.Name != LockAllElementsExceptKey)"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ParseLockedAttributes,The conditional expression  "(propToLock == null) || // if the prop does not exist                              (attribToLockTrim == LockAttributesKey) || // or it is the lockattributes keyword                              (attribToLockTrim == LockAllAttributesExceptKey) || // or it is the lockattributes keyword                              (attribToLockTrim == LockElementsKey) || // or it is the lockelements keyword                              ((lockType != ConfigurationLockCollectionType.LockedElements) &&                              (lockType != ConfigurationLockCollectionType.LockedElementsExceptionList) &&                              typeof(ConfigurationElement).IsAssignableFrom(propToLock.Type)) ||                              // or if not locking elements but the property is an element                              (((lockType == ConfigurationLockCollectionType.LockedElements) ||                              (lockType == ConfigurationLockCollectionType.LockedElementsExceptionList)) &&                              !typeof(ConfigurationElement).IsAssignableFrom(propToLock.Type))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,DeserializeElement,The conditional expression  "((_lockedElementsList != null) && (_lockedElementsList.Contains(reader.Name) ||                  (_lockedElementsList.Contains(LockAll) && (reader.Name != ElementTagName)))) ||                  ((_lockedAllExceptElementsList != null) && (_lockedAllExceptElementsList.Count != 0) &&                  !_lockedAllExceptElementsList.Contains(reader.Name)) ||                  (((_itemLockedFlag & ConfigurationValueFlags.Locked) != 0) &&                  ((_itemLockedFlag & ConfigurationValueFlags.Inherited) != 0))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,DeserializeElement,The conditional expression  "((_lockedAttributesList != null) &&                          (_lockedAttributesList.Contains(propertyName) || _lockedAttributesList.Contains(LockAll))) ||                          ((_lockedAllExceptAttributesList != null) &&                          !_lockedAllExceptAttributesList.Contains(propertyName))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,Unmerge,The conditional expression  "inParent && ((saveMode != ConfigurationSaveMode.Modified) || !sourceItem.IsModified()) &&                              (saveMode != ConfigurationSaveMode.Full)"  is complex.
Complex Conditional,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,Reset,The conditional expression  "((CollectionType == ConfigurationElementCollectionType.AddRemoveClearMap) ||                          (CollectionType == ConfigurationElementCollectionType.AddRemoveClearMapAlternate)) &&                          ((entry.EntryType == EntryType.Added) ||                          (entry.EntryType == EntryType.Replaced))"  is complex.
Complex Conditional,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,BaseAdd,The conditional expression  "((CollectionType == ConfigurationElementCollectionType.AddRemoveClearMap) ||                          (CollectionType == ConfigurationElementCollectionType.AddRemoveClearMapAlternate)) &&                          (entry.EntryType == EntryType.Removed) &&                          (_removedItemCount > 0)"  is complex.
Complex Conditional,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,BaseClear,The conditional expression  "((CollectionType == ConfigurationElementCollectionType.AddRemoveClearMap) &&                          (removeIndex < _inheritedCount)) ||                          ((CollectionType == ConfigurationElementCollectionType.AddRemoveClearMapAlternate) &&                          (removeIndex >= initialCount - _inheritedCount))"  is complex.
Complex Conditional,System.Configuration,ConfigurationManager,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationManager.cs,OpenExeConfigurationImpl,The conditional expression  "!isMachine &&                  (((fileMap == null) && (exePath == null)) ||                  ((fileMap != null) && (((ExeConfigurationFileMap)fileMap).ExeConfigFilename == null)))"  is complex.
Complex Conditional,System.Configuration,FactoryRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\FactoryRecord.cs,IsEquivalentSectionFactory,The conditional expression  "(allowLocation != AllowLocation) ||                  (allowDefinition != AllowDefinition) ||                  (allowExeDefinition != AllowExeDefinition) ||                  (restartOnExternalChanges != RestartOnExternalChanges) ||                  (requirePermission != RequirePermission)"  is complex.
Complex Conditional,System.Configuration,GenericEnumConverter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\GenericEnumConverter.cs,ConvertFrom,The conditional expression  "(!char.IsDigit(value[0])) && (value[0] != '-') && (value[0] != '+') &&                      (!char.IsWhiteSpace(value[0])) && (!char.IsWhiteSpace(value[value.Length - 1]))"  is complex.
Complex Conditional,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetUpdatedSectionDeclarationXml,The conditional expression  "!configSection.SectionInformation.AllowLocation ||                  (saveMode == ConfigurationSaveMode.Full) ||                  ((saveMode == ConfigurationSaveMode.Modified) &&                  configSection.SectionInformation.AllowLocationModified)"  is complex.
Complex Conditional,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetUpdatedSectionDeclarationXml,The conditional expression  "(configSection.SectionInformation.AllowDefinition != ConfigurationAllowDefinition.Everywhere) ||                  (saveMode == ConfigurationSaveMode.Full) ||                  ((saveMode == ConfigurationSaveMode.Modified) &&                  configSection.SectionInformation.AllowDefinitionModified)"  is complex.
Complex Conditional,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetUpdatedSectionDeclarationXml,The conditional expression  "(configSection.SectionInformation.AllowExeDefinition !=                  ConfigurationAllowExeDefinition.MachineToApplication) ||                  (saveMode == ConfigurationSaveMode.Full) ||                  ((saveMode == ConfigurationSaveMode.Modified) &&                  configSection.SectionInformation.AllowExeDefinitionModified)"  is complex.
Complex Conditional,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetUpdatedSectionDeclarationXml,The conditional expression  "(configSection.SectionInformation.OverrideModeDefaultSetting.IsDefaultForSection == false) ||                  (saveMode == ConfigurationSaveMode.Full) ||                  ((saveMode == ConfigurationSaveMode.Modified) &&                  configSection.SectionInformation.OverrideModeDefaultModified)"  is complex.
Complex Conditional,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,UpdateRecords,The conditional expression  "!IsLocationConfig && (_locationSections != null) && (_removedSections != null) &&                  (_removedSections.Count > 0)"  is complex.
Complex Conditional,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendEscapeXmlString,The conditional expression  "((ch < 32) && (ch != '\t') && (ch != '\r') && (ch != '\n')) || (ch > 0xFFFD)"  is complex.
Complex Conditional,System.Configuration,SettingsPropertyValue,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValue.cs,GetObjectFromString,The conditional expression  "type == typeof(string) && (serializedValue == null || serializedValue.Length < 1 || serializeAs == SettingsSerializeAs.String)"  is complex.
Complex Conditional,System.Configuration.Internal,WriteFileContext,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\WriteFileContext.cs,ReplaceFile,The conditional expression  "!writeSucceeded &&                  (duration < SavingTimeout) &&                  File.Exists(target) &&                  !FileIsWriteLocked(target)"  is complex.
Virtual Method Call from Constructor,System.Configuration,Enumerator,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,Enumerator,The constructor "Enumerator" calls a virtual method "GetEnumerator".
Virtual Method Call from Constructor,System.Configuration,ConfigurationErrorsException,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationErrorsException.cs,ConfigurationErrorsException,The constructor "ConfigurationErrorsException" calls a virtual method "CopyTo".
Virtual Method Call from Constructor,System.Configuration,ConfigurationLocationCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationLocationCollection.cs,ConfigurationLocationCollection,The constructor "ConfigurationLocationCollection" calls a virtual method "AddRange".
Virtual Method Call from Constructor,System.Configuration,SettingsPropertyCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyCollection.cs,SettingsPropertyCollection,The constructor "SettingsPropertyCollection" calls a virtual method "Clone".
Virtual Method Call from Constructor,System.Configuration,SettingsPropertyValueCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValueCollection.cs,SettingsPropertyValueCollection,The constructor "SettingsPropertyValueCollection" calls a virtual method "Clone".
Virtual Method Call from Constructor,System.Configuration,SettingsPropertyValueCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValueCollection.cs,SettingsPropertyValueCollection,The constructor "SettingsPropertyValueCollection" calls a virtual method "Clone".
Empty Catch Block,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,Evaluate,The method has an empty catch block.
Empty Catch Block,System.Configuration,ClientConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigurationHost.cs,OpenStreamForRead,The method has an empty catch block.
Empty Catch Block,System.Configuration,ClientConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigurationHost.cs,OpenStreamForRead,The method has an empty catch block.
Empty Catch Block,System.Configuration,FactoryRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\FactoryRecord.cs,IsEquivalentType,The method has an empty catch block.
Empty Catch Block,System.Configuration,GenericEnumConverter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\GenericEnumConverter.cs,ConvertFrom,The method has an empty catch block.
Empty Catch Block,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,SaveAs,The method has an empty catch block.
Empty Catch Block,System.Configuration,TypeUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\TypeUtil.cs,GetImplicitType,The method has an empty catch block.
Empty Catch Block,System.Configuration,TypeUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\TypeUtil.cs,GetImplicitType,The method has an empty catch block.
Empty Catch Block,System.Configuration,SettingsPropertyValue,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValue.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,System.Configuration,SettingsPropertyValue,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValue.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,System.Configuration.Internal,WriteFileContext,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Internal\WriteFileContext.cs,ValidateWriteAccess,The method has an empty catch block.
Empty Catch Block,System.IO.Internal,TempFileCollection,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\TempFileCollection.cs,Delete,The method has an empty catch block.
Magic Number,System.Configuration,AppSettingsReader,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\AppSettingsReader.cs,GetValue,The following statement contains a magic number: if (type == s_stringType)              {                  // It's a string' so we can ALMOST just return the value.  The only                  // tricky point is that if it's the string "(None)"' then we want to                  // return null.  And of course we need a way to represent the string                  // (None)' so we use ((None))' and so on... so it's a little complicated.                  int NoneNesting = GetNoneNesting(val);                  if (NoneNesting == 0)                  {                      // val is not of the form ((..((None))..))                      return val;                  }                  else if (NoneNesting == 1)                  {                      // val is (None)                      return null;                  }                  else                  {                      // val is of the form ((..((None))..))                      return val.Substring(1' val.Length - 2);                  }              }              else              {                  try                  {                      return Convert.ChangeType(val' type' CultureInfo.InvariantCulture);                  }                  catch (Exception)                  {                      string displayString = (val.Length == 0) ? SR.AppSettingsReaderEmptyString : val;                      throw new InvalidOperationException(string.Format(SR.AppSettingsReaderCantParse' displayString' key' type.ToString()));                  }              }
Magic Number,System.Configuration,AppSettingsReader,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\AppSettingsReader.cs,GetNoneNesting,The following statement contains a magic number: if (len > 1)              {                  while (val[count] == '(' && val[len - count - 1] == ')')                  {                      count++;                  }                  if (count > 0 && string.Compare(NullString' 0' val' count' len - 2 * count' StringComparison.Ordinal) != 0)                  {                      // the stuff between the parens is not "None"                      count = 0;                  }              }
Magic Number,System.Configuration,ClientConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigurationHost.cs,InitForConfiguration,The following statement contains a magic number: configPath = (string)hostInitConfigurationParams[2];
Magic Number,System.Configuration,ConfigPathUtility,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigPathUtility.cs,IsValid,The following statement contains a magic number: for (int examine = 0; examine <= configPath.Length; examine++)              {                  char ch;                    ch = examine < configPath.Length ? configPath[examine] : SeparatorChar;                    // backslash disallowed                  if (ch == '\\')                      return false;                    if (ch == SeparatorChar)                  {                      // double slash disallowed                      // note this check also purposefully catches starting and ending slash                      if (examine == start + 1)                          return false;                        // "." disallowed                      if ((examine == start + 2) && (configPath[start + 1] == '.'))                          return false;                        // ".." disallowed                      if ((examine == start + 3) && (configPath[start + 1] == '.') && (configPath[start + 2] == '.'))                          return false;                        start = examine;                  }              }
Magic Number,System.Configuration,ConfigPathUtility,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigPathUtility.cs,IsValid,The following statement contains a magic number: for (int examine = 0; examine <= configPath.Length; examine++)              {                  char ch;                    ch = examine < configPath.Length ? configPath[examine] : SeparatorChar;                    // backslash disallowed                  if (ch == '\\')                      return false;                    if (ch == SeparatorChar)                  {                      // double slash disallowed                      // note this check also purposefully catches starting and ending slash                      if (examine == start + 1)                          return false;                        // "." disallowed                      if ((examine == start + 2) && (configPath[start + 1] == '.'))                          return false;                        // ".." disallowed                      if ((examine == start + 3) && (configPath[start + 1] == '.') && (configPath[start + 2] == '.'))                          return false;                        start = examine;                  }              }
Magic Number,System.Configuration,ConfigPathUtility,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigPathUtility.cs,IsValid,The following statement contains a magic number: for (int examine = 0; examine <= configPath.Length; examine++)              {                  char ch;                    ch = examine < configPath.Length ? configPath[examine] : SeparatorChar;                    // backslash disallowed                  if (ch == '\\')                      return false;                    if (ch == SeparatorChar)                  {                      // double slash disallowed                      // note this check also purposefully catches starting and ending slash                      if (examine == start + 1)                          return false;                        // "." disallowed                      if ((examine == start + 2) && (configPath[start + 1] == '.'))                          return false;                        // ".." disallowed                      if ((examine == start + 3) && (configPath[start + 1] == '.') && (configPath[start + 2] == '.'))                          return false;                        start = examine;                  }              }
Magic Number,System.Configuration,ConfigurationSection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationSection.cs,SerializeSection,The following statement contains a magic number: XmlTextWriter writer = new XmlTextWriter(strWriter)              {                  Formatting = Formatting.Indented'                  Indentation = 4'                  IndentChar = ' '              };
Magic Number,System.Configuration,InfiniteIntConverter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\InfiniteIntConverter.cs,ConvertFrom,The following statement contains a magic number: return (string)data == "Infinite" ? int.MaxValue : Convert.ToInt32((string)data' 10);
Magic Number,System.Configuration,SettingsPropertyCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyCollection.cs,SettingsPropertyCollection,The following statement contains a magic number: _hashtable = new Hashtable(10' StringComparer.CurrentCultureIgnoreCase);
Magic Number,System.Configuration,SettingsPropertyValueCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValueCollection.cs,SettingsPropertyValueCollection,The following statement contains a magic number: _indices = new Hashtable(10' StringComparer.CurrentCultureIgnoreCase);
Magic Number,System.Configuration,UrlPath,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\UrlPath.cs,IsAbsoluteLocalPhysicalPath,The following statement contains a magic number: if ((path == null) || (path.Length < 3))                  return false;
Magic Number,System.Configuration,UrlPath,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\UrlPath.cs,IsAbsoluteLocalPhysicalPath,The following statement contains a magic number: return (path[1] == ':') && IsDirectorySeparatorChar(path[2]);
Magic Number,System.Configuration,UrlPath,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\UrlPath.cs,IsAbsoluteUncPhysicalPath,The following statement contains a magic number: if ((path == null) || (path.Length < 3))                  return false;
Magic Number,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,CopyXmlNode,The following statement contains a magic number: if (nodeType == XmlNodeType.Whitespace) utilWriter.Write(Reader.Value);              else              {                  if (nodeType == XmlNodeType.Element)                  {                      close = Reader.IsEmptyElement ? "/>" : ">";                        // get the line position after the element declaration:                      //      <element    attr="value"                      //              ^                      //              linePosition                      lineNumber = Reader.LineNumber;                      linePosition = Reader.LinePosition + Reader.Name.Length;                        utilWriter.Write('<');                      utilWriter.Write(Reader.Name);                        // Note that there is no way to get spacing between attribute name and value                      // For example:                      //                      //          <elem attr="value" />                      //                      // is reported with the same position as                      //                      //          <elem attr = "value" />                      //                      // The first example has no spaces around '='' the second example does.                      while (Reader.MoveToNextAttribute())                      {                          // get line position of the attribute declaration                          //      <element attr="value"                          //               ^                          //               attrLinePosition                          int attrLineNumber = Reader.LineNumber;                          int attrLinePosition = Reader.LinePosition;                            // Write the whitespace before the attribute                          utilWriter.AppendRequiredWhiteSpace(lineNumber' linePosition' attrLineNumber' attrLinePosition);                            // Write the attribute and value                          int charactersWritten = utilWriter.Write(Reader.Name);                          charactersWritten += utilWriter.Write('=');                          charactersWritten += utilWriter.AppendAttributeValue(Reader);                            // Update position. Note that the attribute value is escaped to always be on a single line.                          lineNumber = attrLineNumber;                          linePosition = attrLinePosition + charactersWritten;                      }                  }                  else                  {                      if (nodeType == XmlNodeType.EndElement)                      {                          close = ">";                            // get line position after the end element declaration:                          //      </element    >                          //               ^                          //               linePosition                          lineNumber = Reader.LineNumber;                          linePosition = Reader.LinePosition + Reader.Name.Length;                            utilWriter.Write("</");                          utilWriter.Write(Reader.Name);                      }                      else                      {                          if (nodeType == XmlNodeType.Comment) utilWriter.AppendComment(Reader.Value);                          else                          {                              if (nodeType == XmlNodeType.Text) utilWriter.AppendEscapeTextString(Reader.Value);                              else                              {                                  if (nodeType == XmlNodeType.XmlDeclaration)                                  {                                      close = "?>";                                        // get line position after the xml declaration:                                      //      <?xml    version="1.0"                                      //           ^                                      //           linePosition                                      lineNumber = Reader.LineNumber;                                      linePosition = Reader.LinePosition + 3;                                        utilWriter.Write("<?xml");                                        // Note that there is no way to get spacing between attribute name and value                                      // For example:                                      //                                      //          <?xml attr="value" ?>                                      //                                      // is reported with the same position as                                      //                                      //          <?xml attr = "value" ?>                                      //                                      // The first example has no spaces around '='' the second example does.                                      while (Reader.MoveToNextAttribute())                                      {                                          // get line position of the attribute declaration                                          //      <?xml    version="1.0"                                          //               ^                                          //               attrLinePosition                                          int attrLineNumber = Reader.LineNumber;                                          int attrLinePosition = Reader.LinePosition;                                            // Write the whitespace before the attribute                                          utilWriter.AppendRequiredWhiteSpace(lineNumber' linePosition' attrLineNumber'                                              attrLinePosition);                                            // Write the attribute and value                                          int charactersWritten = utilWriter.Write(Reader.Name);                                          charactersWritten += utilWriter.Write('=');                                          charactersWritten += utilWriter.AppendAttributeValue(Reader);                                            // Update position. Note that the attribute value is escaped to always be on a single line.                                          lineNumber = attrLineNumber;                                          linePosition = attrLinePosition + charactersWritten;                                      }                                        // Position reader at beginning of node                                      Reader.MoveToElement();                                  }                                  else                                  {                                      if (nodeType == XmlNodeType.SignificantWhitespace) utilWriter.Write(Reader.Value);                                      else                                      {                                          if (nodeType == XmlNodeType.ProcessingInstruction)                                          {                                              // Note that there is no way to get spacing between attribute name and value                                              // For example:                                              //                                              //          <?pi "value" ?>                                              //                                              // is reported with the same position as                                              //                                              //          <?pi    "value" ?>                                              //                                              // The first example has one space between 'pi' and "value"' the second has multiple spaces.                                              utilWriter.AppendProcessingInstruction(Reader.Name' Reader.Value);                                          }                                          else                                          {                                              if (nodeType == XmlNodeType.EntityReference)                                                  utilWriter.AppendEntityRef(Reader.Name);                                              else                                              {                                                  if (nodeType == XmlNodeType.CDATA)                                                      utilWriter.AppendCData(Reader.Value);                                                  else                                                  {                                                      if (nodeType == XmlNodeType.DocumentType)                                                      {                                                          // XmlNodeType.DocumentType has the following format:                                                          //                                                          //      <!DOCTYPE rootElementName {(SYSTEM uriRef)|(PUBLIC id uriRef)} {[ dtdDecls ]} >                                                          //                                                          // The reader only gives us the position of 'rootElementName'' so we must track what was                                                          // written before "<!DOCTYPE" in order to correctly determine the position of the                                                          // <!DOCTYPE tag                                                          Debug.Assert(utilWriter.TrackPosition'                                                              "utilWriter.TrackPosition");                                                          int c = utilWriter.Write("<!DOCTYPE");                                                            // Write the space between <!DOCTYPE and the rootElementName                                                          utilWriter.AppendRequiredWhiteSpace(_lastLineNumber'                                                              _lastLinePosition + c' Reader.LineNumber'                                                              Reader.LinePosition);                                                            // Write the rootElementName                                                          utilWriter.Write(Reader.Name);                                                            // Get the dtd declarations' if any                                                          string dtdValue = null;                                                          if (Reader.HasValue) dtdValue = Reader.Value;                                                            // get line position after the !DOCTYPE declaration:                                                          //      <!DOCTYPE  rootElement     SYSTEM rootElementDtdUri >                                                          //                            ^                                                          //                            linePosition                                                          lineNumber = Reader.LineNumber;                                                          linePosition = Reader.LinePosition + Reader.Name.Length;                                                            // Note that there is no way to get the spacing after PUBLIC or SYSTEM attributes and their values                                                          if (Reader.MoveToFirstAttribute())                                                          {                                                              // Write the space before SYSTEM or PUBLIC                                                              utilWriter.AppendRequiredWhiteSpace(lineNumber' linePosition'                                                                  Reader.LineNumber' Reader.LinePosition);                                                                // Write SYSTEM or PUBLIC and the 1st value of the attribute                                                              string attrName = Reader.Name;                                                              utilWriter.Write(attrName);                                                              utilWriter.AppendSpace();                                                              utilWriter.AppendAttributeValue(Reader);                                                              Reader.MoveToAttribute(0);                                                                // If PUBLIC' write the second value of the attribute                                                              if (attrName == "PUBLIC")                                                              {                                                                  Reader.MoveToAttribute(1);                                                                  utilWriter.AppendSpace();                                                                  utilWriter.AppendAttributeValue(Reader);                                                                  Reader.MoveToAttribute(1);                                                              }                                                          }                                                            // If there is a dtd' write it                                                          if (!string.IsNullOrEmpty(dtdValue))                                                          {                                                              utilWriter.Write(" [");                                                              utilWriter.Write(dtdValue);                                                              utilWriter.Write(']');                                                          }                                                            utilWriter.Write('>');                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              }
Magic Number,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,RetrieveFullOpenElementTag,The following statement contains a magic number: StringBuilder element = new StringBuilder(64);
Magic Number,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,UpdateStartElement,The following statement contains a magic number: if (updatedStartElement == null)              {                  // If no changes to the start element are required' just copy it.                  CopyXmlNode(utilWriter);              }              else              {                  // Format a new start element/end element pair                  string updatedEndElement = "</" + elementName + ">";                  string updatedElement = updatedStartElement + updatedEndElement;                  string formattedElement = FormatXmlElement(updatedElement' linePosition' indent' true);                    // Get the start and end element strings from the formatted element.                  int iEndElement = formattedElement.LastIndexOf('\n') + 1;                  string startElement;                  if (needsEndElement)                  {                      endElement = formattedElement.Substring(iEndElement);                        // Include a newline in the start element as we are expanding an empty element.                      startElement = formattedElement.Substring(0' iEndElement);                  }                  else                  {                      // Omit the newline from the start element.                      startElement = formattedElement.Substring(0' iEndElement - 2);                  }                    // Write the new start element.                  utilWriter.Write(startElement);                    // Skip over the existing start element.                  Reader.Read();              }
Magic Number,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,ResetCachedStringWriter,The following statement contains a magic number: if (_cachedStringWriter == null)                  _cachedStringWriter = new StringWriter(new StringBuilder(64)' CultureInfo.InvariantCulture);              else _cachedStringWriter.GetStringBuilder().Length = 0;
Magic Number,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,FormatXmlElement,The following statement contains a magic number: StringWriter stringWriter = new StringWriter(new StringBuilder(64)' CultureInfo.InvariantCulture);
Magic Number,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,FormatXmlElement,The following statement contains a magic number: while (reader.Read())              {                  XmlNodeType nodeType = reader.NodeType;                    int lineWidth;                  if (lastWasText)                  {                      utilWriter.Flush();                      lineWidth = sbLengthLastNewLine - ((StringWriter)utilWriter.Writer).GetStringBuilder().Length;                  }                  else lineWidth = 0;                    switch (nodeType)                  {                      case XmlNodeType.CDATA:                      case XmlNodeType.Element:                      case XmlNodeType.EndElement:                      case XmlNodeType.Comment:                          // Do not indent if the last node was text - doing so would add whitespace                          // that is included as part of the text.                          if (!skipFirstIndent && !lastWasText)                          {                              utilWriter.AppendIndent(linePosition' indent' reader.Depth' newLine);                                if (newLine)                              {                                  utilWriter.Flush();                                  sbLengthLastNewLine = ((StringWriter)utilWriter.Writer).GetStringBuilder().Length;                              }                          }                          break;                  }                    lastWasText = false;                  switch (nodeType)                  {                      case XmlNodeType.Whitespace:                          break;                      case XmlNodeType.SignificantWhitespace:                          utilWriter.Write(reader.Value);                          break;                      case XmlNodeType.CDATA:                          utilWriter.AppendCData(reader.Value);                          break;                      case XmlNodeType.ProcessingInstruction:                          utilWriter.AppendProcessingInstruction(reader.Name' reader.Value);                          break;                      case XmlNodeType.Comment:                          utilWriter.AppendComment(reader.Value);                          break;                      case XmlNodeType.Text:                          utilWriter.AppendEscapeTextString(reader.Value);                          lastWasText = true;                          break;                      case XmlNodeType.Element:                          {                              // Write "<elem"                              utilWriter.Write('<');                              utilWriter.Write(reader.Name);                                lineWidth += reader.Name.Length + 2;                                int c = reader.AttributeCount;                              for (int i = 0; i < c; i++)                              {                                  // Add new line if we've exceeded the line width                                  bool writeSpace;                                  if (lineWidth > MaxLineWidth)                                  {                                      utilWriter.AppendIndent(linePosition' indent' reader.Depth - 1' true);                                      lineWidth = indent;                                      writeSpace = false;                                      utilWriter.Flush();                                      sbLengthLastNewLine = ((StringWriter)utilWriter.Writer).GetStringBuilder().Length;                                  }                                  else writeSpace = true;                                    // Write the attribute                                  reader.MoveToNextAttribute();                                  utilWriter.Flush();                                  int startLength = ((StringWriter)utilWriter.Writer).GetStringBuilder().Length;                                  if (writeSpace) utilWriter.AppendSpace();                                    utilWriter.Write(reader.Name);                                  utilWriter.Write('=');                                  utilWriter.AppendAttributeValue(reader);                                  utilWriter.Flush();                                  lineWidth += ((StringWriter)utilWriter.Writer).GetStringBuilder().Length - startLength;                              }                          }                            // position reader back on element                          reader.MoveToElement();                            // write closing tag                          if (reader.IsEmptyElement) utilWriter.Write(" />");                          else utilWriter.Write('>');                            break;                      case XmlNodeType.EndElement:                          utilWriter.Write("</");                          utilWriter.Write(reader.Name);                          utilWriter.Write('>');                          break;                      case XmlNodeType.EntityReference:                          utilWriter.AppendEntityRef(reader.Name);                          break;                        // Ignore <?xml and <!DOCTYPE nodes                      // case XmlNodeType.XmlDeclaration:                      // case XmlNodeType.DocumentType:                  }                    // put each new element on a new line                  newLine = true;                    // do not skip any more indents                  skipFirstIndent = false;              }
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,XmlUtilWriter,The following statement contains a magic number: s_spaces8 = new string(Space' 8);
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,XmlUtilWriter,The following statement contains a magic number: s_spaces4 = new string(Space' 4);
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,XmlUtilWriter,The following statement contains a magic number: s_spaces2 = new string(Space' 2);
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendEscapeXmlString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  char ch = s[i];                    bool appendCharEntity = false;                  string entityRef = null;                  if (((ch < 32) && (ch != '\t') && (ch != '\r') && (ch != '\n')) || (ch > 0xFFFD))                      appendCharEntity = true;                  else                  {                      switch (ch)                      {                          case '<':                              entityRef = "lt";                              break;                          case '>':                              entityRef = "gt";                              break;                          case '&':                              entityRef = "amp";                              break;                          case '\'':                              if (inAttribute && (quoteChar == ch)) entityRef = "apos";                              break;                          case '"':                              if (inAttribute && (quoteChar == ch)) entityRef = "quot";                              break;                          case '\n':                          case '\r':                              appendCharEntity = inAttribute;                              break;                      }                  }                    if (appendCharEntity) charactersWritten += AppendCharEntity(ch);                  else                  {                      if (entityRef != null) charactersWritten += AppendEntityRef(entityRef);                      else charactersWritten += Write(ch);                  }              }
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendEntityRef,The following statement contains a magic number: return entityRef.Length + 2;
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendCharEntity,The following statement contains a magic number: return numberToWrite.Length + 4;
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendCData,The following statement contains a magic number: return cdata.Length + 12;
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendProcessingInstruction,The following statement contains a magic number: return name.Length + value.Length + 5;
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendComment,The following statement contains a magic number: return comment.Length + 7;
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendSpaces,The following statement contains a magic number: while (c > 0)                  if (c >= 8)                  {                      Write(s_spaces8);                      c -= 8;                  }                  else                  {                      if (c >= 4)                      {                          Write(s_spaces4);                          c -= 4;                      }                      else                      {                          if (c >= 2)                          {                              Write(s_spaces2);                              c -= 2;                          }                          else                          {                              Write(Space);                              break;                          }                      }                  }
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendSpaces,The following statement contains a magic number: while (c > 0)                  if (c >= 8)                  {                      Write(s_spaces8);                      c -= 8;                  }                  else                  {                      if (c >= 4)                      {                          Write(s_spaces4);                          c -= 4;                      }                      else                      {                          if (c >= 2)                          {                              Write(s_spaces2);                              c -= 2;                          }                          else                          {                              Write(Space);                              break;                          }                      }                  }
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendSpaces,The following statement contains a magic number: while (c > 0)                  if (c >= 8)                  {                      Write(s_spaces8);                      c -= 8;                  }                  else                  {                      if (c >= 4)                      {                          Write(s_spaces4);                          c -= 4;                      }                      else                      {                          if (c >= 2)                          {                              Write(s_spaces2);                              c -= 2;                          }                          else                          {                              Write(Space);                              break;                          }                      }                  }
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendSpaces,The following statement contains a magic number: while (c > 0)                  if (c >= 8)                  {                      Write(s_spaces8);                      c -= 8;                  }                  else                  {                      if (c >= 4)                      {                          Write(s_spaces4);                          c -= 4;                      }                      else                      {                          if (c >= 2)                          {                              Write(s_spaces2);                              c -= 2;                          }                          else                          {                              Write(Space);                              break;                          }                      }                  }
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendSpaces,The following statement contains a magic number: while (c > 0)                  if (c >= 8)                  {                      Write(s_spaces8);                      c -= 8;                  }                  else                  {                      if (c >= 4)                      {                          Write(s_spaces4);                          c -= 4;                      }                      else                      {                          if (c >= 2)                          {                              Write(s_spaces2);                              c -= 2;                          }                          else                          {                              Write(Space);                              break;                          }                      }                  }
Magic Number,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendSpaces,The following statement contains a magic number: while (c > 0)                  if (c >= 8)                  {                      Write(s_spaces8);                      c -= 8;                  }                  else                  {                      if (c >= 4)                      {                          Write(s_spaces4);                          c -= 4;                      }                      else                      {                          if (c >= 2)                          {                              Write(s_spaces2);                              c -= 2;                          }                          else                          {                              Write(Space);                              break;                          }                      }                  }
Magic Number,System.Configuration.Provider,ProviderCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\Provider\ProviderCollection.cs,ProviderCollection,The following statement contains a magic number: _hashtable = new Hashtable(10' StringComparer.OrdinalIgnoreCase);
Magic Number,System.Security,IdentityHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Security\IdentityHelper.cs,ToBase32StringSuitableForDirName,The following statement contains a magic number: Debug.Assert(((buff.Length % 5) == 0)' "Unexpected hash length");
Magic Number,System.Security,IdentityHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Security\IdentityHelper.cs,ToBase32StringSuitableForDirName,The following statement contains a magic number: do              {                  byte b0 = (i < l) ? buff[i++] : (byte)0;                  byte b1 = (i < l) ? buff[i++] : (byte)0;                  byte b2 = (i < l) ? buff[i++] : (byte)0;                  byte b3 = (i < l) ? buff[i++] : (byte)0;                  byte b4 = (i < l) ? buff[i++] : (byte)0;                    // Consume the 5 Least significant bits of each byte                  sb.Append(s_base32Char[b0 & 0x1F]);                  sb.Append(s_base32Char[b1 & 0x1F]);                  sb.Append(s_base32Char[b2 & 0x1F]);                  sb.Append(s_base32Char[b3 & 0x1F]);                  sb.Append(s_base32Char[b4 & 0x1F]);                    // Consume 3 MSB of b0' b1' MSB bits 6' 7 of b3' b4                  sb.Append(s_base32Char[(                          ((b0 & 0xE0) >> 5) |                          ((b3 & 0x60) >> 2))]);                    sb.Append(s_base32Char[(                          ((b1 & 0xE0) >> 5) |                          ((b4 & 0x60) >> 2))]);                    // Consume 3 MSB bits of b2' 1 MSB bit of b3' b4                    b2 >>= 5;                    Debug.Assert(((b2 & 0xF8) == 0)' "Unexpected set bits");                    if ((b3 & 0x80) != 0)                      b2 |= 0x08;                  if ((b4 & 0x80) != 0)                      b2 |= 0x10;                    sb.Append(s_base32Char[b2]);                } while (i < l);
Magic Number,System.Security,IdentityHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Security\IdentityHelper.cs,ToBase32StringSuitableForDirName,The following statement contains a magic number: do              {                  byte b0 = (i < l) ? buff[i++] : (byte)0;                  byte b1 = (i < l) ? buff[i++] : (byte)0;                  byte b2 = (i < l) ? buff[i++] : (byte)0;                  byte b3 = (i < l) ? buff[i++] : (byte)0;                  byte b4 = (i < l) ? buff[i++] : (byte)0;                    // Consume the 5 Least significant bits of each byte                  sb.Append(s_base32Char[b0 & 0x1F]);                  sb.Append(s_base32Char[b1 & 0x1F]);                  sb.Append(s_base32Char[b2 & 0x1F]);                  sb.Append(s_base32Char[b3 & 0x1F]);                  sb.Append(s_base32Char[b4 & 0x1F]);                    // Consume 3 MSB of b0' b1' MSB bits 6' 7 of b3' b4                  sb.Append(s_base32Char[(                          ((b0 & 0xE0) >> 5) |                          ((b3 & 0x60) >> 2))]);                    sb.Append(s_base32Char[(                          ((b1 & 0xE0) >> 5) |                          ((b4 & 0x60) >> 2))]);                    // Consume 3 MSB bits of b2' 1 MSB bit of b3' b4                    b2 >>= 5;                    Debug.Assert(((b2 & 0xF8) == 0)' "Unexpected set bits");                    if ((b3 & 0x80) != 0)                      b2 |= 0x08;                  if ((b4 & 0x80) != 0)                      b2 |= 0x10;                    sb.Append(s_base32Char[b2]);                } while (i < l);
Magic Number,System.Security,IdentityHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Security\IdentityHelper.cs,ToBase32StringSuitableForDirName,The following statement contains a magic number: do              {                  byte b0 = (i < l) ? buff[i++] : (byte)0;                  byte b1 = (i < l) ? buff[i++] : (byte)0;                  byte b2 = (i < l) ? buff[i++] : (byte)0;                  byte b3 = (i < l) ? buff[i++] : (byte)0;                  byte b4 = (i < l) ? buff[i++] : (byte)0;                    // Consume the 5 Least significant bits of each byte                  sb.Append(s_base32Char[b0 & 0x1F]);                  sb.Append(s_base32Char[b1 & 0x1F]);                  sb.Append(s_base32Char[b2 & 0x1F]);                  sb.Append(s_base32Char[b3 & 0x1F]);                  sb.Append(s_base32Char[b4 & 0x1F]);                    // Consume 3 MSB of b0' b1' MSB bits 6' 7 of b3' b4                  sb.Append(s_base32Char[(                          ((b0 & 0xE0) >> 5) |                          ((b3 & 0x60) >> 2))]);                    sb.Append(s_base32Char[(                          ((b1 & 0xE0) >> 5) |                          ((b4 & 0x60) >> 2))]);                    // Consume 3 MSB bits of b2' 1 MSB bit of b3' b4                    b2 >>= 5;                    Debug.Assert(((b2 & 0xF8) == 0)' "Unexpected set bits");                    if ((b3 & 0x80) != 0)                      b2 |= 0x08;                  if ((b4 & 0x80) != 0)                      b2 |= 0x10;                    sb.Append(s_base32Char[b2]);                } while (i < l);
Magic Number,System.Security,IdentityHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Security\IdentityHelper.cs,ToBase32StringSuitableForDirName,The following statement contains a magic number: do              {                  byte b0 = (i < l) ? buff[i++] : (byte)0;                  byte b1 = (i < l) ? buff[i++] : (byte)0;                  byte b2 = (i < l) ? buff[i++] : (byte)0;                  byte b3 = (i < l) ? buff[i++] : (byte)0;                  byte b4 = (i < l) ? buff[i++] : (byte)0;                    // Consume the 5 Least significant bits of each byte                  sb.Append(s_base32Char[b0 & 0x1F]);                  sb.Append(s_base32Char[b1 & 0x1F]);                  sb.Append(s_base32Char[b2 & 0x1F]);                  sb.Append(s_base32Char[b3 & 0x1F]);                  sb.Append(s_base32Char[b4 & 0x1F]);                    // Consume 3 MSB of b0' b1' MSB bits 6' 7 of b3' b4                  sb.Append(s_base32Char[(                          ((b0 & 0xE0) >> 5) |                          ((b3 & 0x60) >> 2))]);                    sb.Append(s_base32Char[(                          ((b1 & 0xE0) >> 5) |                          ((b4 & 0x60) >> 2))]);                    // Consume 3 MSB bits of b2' 1 MSB bit of b3' b4                    b2 >>= 5;                    Debug.Assert(((b2 & 0xF8) == 0)' "Unexpected set bits");                    if ((b3 & 0x80) != 0)                      b2 |= 0x08;                  if ((b4 & 0x80) != 0)                      b2 |= 0x10;                    sb.Append(s_base32Char[b2]);                } while (i < l);
Magic Number,System.Security,IdentityHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Security\IdentityHelper.cs,ToBase32StringSuitableForDirName,The following statement contains a magic number: do              {                  byte b0 = (i < l) ? buff[i++] : (byte)0;                  byte b1 = (i < l) ? buff[i++] : (byte)0;                  byte b2 = (i < l) ? buff[i++] : (byte)0;                  byte b3 = (i < l) ? buff[i++] : (byte)0;                  byte b4 = (i < l) ? buff[i++] : (byte)0;                    // Consume the 5 Least significant bits of each byte                  sb.Append(s_base32Char[b0 & 0x1F]);                  sb.Append(s_base32Char[b1 & 0x1F]);                  sb.Append(s_base32Char[b2 & 0x1F]);                  sb.Append(s_base32Char[b3 & 0x1F]);                  sb.Append(s_base32Char[b4 & 0x1F]);                    // Consume 3 MSB of b0' b1' MSB bits 6' 7 of b3' b4                  sb.Append(s_base32Char[(                          ((b0 & 0xE0) >> 5) |                          ((b3 & 0x60) >> 2))]);                    sb.Append(s_base32Char[(                          ((b1 & 0xE0) >> 5) |                          ((b4 & 0x60) >> 2))]);                    // Consume 3 MSB bits of b2' 1 MSB bit of b3' b4                    b2 >>= 5;                    Debug.Assert(((b2 & 0xF8) == 0)' "Unexpected set bits");                    if ((b3 & 0x80) != 0)                      b2 |= 0x08;                  if ((b4 & 0x80) != 0)                      b2 |= 0x10;                    sb.Append(s_base32Char[b2]);                } while (i < l);
Magic Number,System.IO.Internal,TempFileCollection,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\TempFileCollection.cs,EnsureTempNameCreated,The following statement contains a magic number: if (_basePath == null)              {                  string tempFileName = null;                  bool uniqueFile = false;                  int retryCount = 5000;                  do                  {                      _basePath = Path.Combine(                          string.IsNullOrEmpty(TempDir) ? Path.GetTempPath() : TempDir'                          Path.GetFileNameWithoutExtension(Path.GetRandomFileName()));                      tempFileName = _basePath + ".tmp";                        try                      {                          new FileStream(tempFileName' FileMode.CreateNew' FileAccess.Write).Dispose();                          uniqueFile = true;                      }                      catch (IOException ex)                      {                          retryCount--;                          if (retryCount == 0 || ex is DirectoryNotFoundException)                          {                              throw;                          }                          uniqueFile = false;                      }                  } while (!uniqueFile);                  _files.Add(tempFileName' KeepFiles);              }
Missing Default,System.Configuration,UriIdnScopeTypeConverter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\IdnElement.cs,ConvertFrom,The following switch statement is missing a default case: switch (s)                      {                          case "all":                              return UriIdnScope.All;                          case "none":                              return UriIdnScope.None;                          case "allexceptintranet":                              return UriIdnScope.AllExceptIntranet;                      }
Missing Default,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ShouldPrefetchRawXml,The following switch statement is missing a default case: switch (factoryRecord.ConfigKey)              {                  case ReservedSectionProtectedConfiguration:                  case "system.diagnostics":                  case "appSettings":                  case "connectionStrings":                      return true;              }
Missing Default,System.Configuration,BaseConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\BaseConfigurationRecord.cs,ScanSectionsRecursive,The following switch statement is missing a default case: switch (tagName)                  {                      case ConfigSectionsTag: // <configSections>                          // Either a duplicate or not the first tag under <configuration>                          xmlUtil.SchemaErrors.AddError(                              new ConfigurationErrorsException(string.Format(SR.Config_client_config_too_many_configsections_elements' tagName)' xmlUtil)'                              ExceptionAction.NonSpecific);                          xmlUtil.StrictSkipToNextElement(ExceptionAction.NonSpecific);                          continue;                      case LocationTag: // <location>                          if ((parentConfigKey.Length > 0) || inLocation)                          {                              // The section isn't at the top level                              xmlUtil.SchemaErrors.AddError(                                  new ConfigurationErrorsException(SR.Config_location_location_not_allowed' xmlUtil)'                                  ExceptionAction.Global);                              xmlUtil.StrictSkipToNextElement(ExceptionAction.NonSpecific);                          }                          else                          {                              // Recurse into the location section                              ScanLocationSection(xmlUtil);                          }                          continue;                  }
Missing Default,System.Configuration,ClientConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigurationHost.cs,OpenExeConfiguration,The following switch statement is missing a default case: switch (userLevel)                      {                          case ConfigurationUserLevel.None:                              if (string.IsNullOrEmpty(exeFileMap.ExeConfigFilename))                                  throw ExceptionUtil.ParameterNullOrEmpty(nameof(fileMap) + "." + nameof(exeFileMap.ExeConfigFilename));                              break;                          case ConfigurationUserLevel.PerUserRoaming:                              if (string.IsNullOrEmpty(exeFileMap.RoamingUserConfigFilename))                                  throw ExceptionUtil.ParameterNullOrEmpty(nameof(fileMap) + "." + nameof(exeFileMap.RoamingUserConfigFilename));                              goto case ConfigurationUserLevel.None;                          case ConfigurationUserLevel.PerUserRoamingAndLocal:                              if (string.IsNullOrEmpty(exeFileMap.LocalUserConfigFilename))                                  throw ExceptionUtil.ParameterNullOrEmpty(nameof(fileMap) + "." + nameof(exeFileMap.LocalUserConfigFilename));                              goto case ConfigurationUserLevel.PerUserRoaming;                      }
Missing Default,System.Configuration,ClientConfigurationHost,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ClientConfigurationHost.cs,OpenExeConfiguration,The following switch statement is missing a default case: switch (userLevel)                  {                      case ConfigurationUserLevel.None:                          configPath = ExeConfigPath;                          break;                      case ConfigurationUserLevel.PerUserRoaming:                          configPath = RoamingUserConfigPath;                          break;                      case ConfigurationUserLevel.PerUserRoamingAndLocal:                          configPath = LocalUserConfigPath;                          break;                  }
Missing Default,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,Unmerge,The following switch statement is missing a default case: switch (saveMode)                      {                          case ConfigurationSaveMode.Minimal:                              if (!Equals(value' value2) || prop.IsRequired)                                  Values[prop.Name] = value;                              break;                          case ConfigurationSaveMode.Modified:                              bool modified = sourceElement.Values.IsModified(prop.Name);                              bool inherited = sourceElement.Values.IsInherited(prop.Name);                                // update the value if the property is required' modified or it was not inherited                              // Also update properties that ARE inherited when we are resetting the object                              // as long as the property is not the same as the default value for the property                              if (prop.IsRequired || modified || !inherited ||                                  ((parentElement == null) && inherited && !Equals(value' value2)))                                  Values[prop.Name] = value;                              break;                          case ConfigurationSaveMode.Full:                              if (IsNullOrNullProperty(value))                                  Values[prop.Name] = value;                              else                                  Values[prop.Name] = value2;                              break;                      }
Missing Default,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,ParseLockedAttributes,The following switch statement is missing a default case: switch (lockType)                  {                      case ConfigurationLockCollectionType.LockedAttributes:                          throw new ConfigurationErrorsException(string.Format(SR.Empty_attribute' LockAttributesKey)'                              value.SourceInfo.FileName' value.SourceInfo.LineNumber);                      case ConfigurationLockCollectionType.LockedElements:                          throw new ConfigurationErrorsException(string.Format(SR.Empty_attribute' LockElementsKey)'                              value.SourceInfo.FileName' value.SourceInfo.LineNumber);                      case ConfigurationLockCollectionType.LockedExceptionList:                          throw new ConfigurationErrorsException(                              string.Format(SR.Config_empty_lock_attributes_except' LockAllAttributesExceptKey'                                  LockAttributesKey)' value.SourceInfo.FileName' value.SourceInfo.LineNumber);                      case ConfigurationLockCollectionType.LockedElementsExceptionList:                          throw new ConfigurationErrorsException(                              string.Format(SR.Config_empty_lock_element_except' LockAllElementsExceptKey' LockElementsKey)'                              value.SourceInfo.FileName' value.SourceInfo.LineNumber);                  }
Missing Default,System.Configuration,ConfigurationElement,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElement.cs,UnMergeLockList,The following switch statement is missing a default case: switch (saveMode)                  {                      case ConfigurationSaveMode.Modified:                          {                              ConfigurationLockCollection tempLockList = new ConfigurationLockCollection(this'                                  sourceLockList.LockType);                              foreach (string lockedAttributeName in sourceLockList)                                  if (!parentLockList.Contains(lockedAttributeName) ||                                      sourceLockList.IsValueModified(lockedAttributeName))                                      tempLockList.Add(lockedAttributeName' ConfigurationValueFlags.Default);                              return tempLockList;                          }                      case ConfigurationSaveMode.Minimal:                          {                              ConfigurationLockCollection tempLockList = new ConfigurationLockCollection(this'                                  sourceLockList.LockType);                              foreach (string lockedAttributeName in sourceLockList)                                  if (!parentLockList.Contains(lockedAttributeName))                                      tempLockList.Add(lockedAttributeName' ConfigurationValueFlags.Default);                              return tempLockList;                          }                  }
Missing Default,System.Configuration,ConfigurationElementCollection,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationElementCollection.cs,SerializeElement,The following switch statement is missing a default case: switch (type)                  {                      case ConfigurationElementCollectionType.BasicMap:                      case ConfigurationElementCollectionType.BasicMapAlternate:                          if ((entry.EntryType == EntryType.Added) || (entry.EntryType == EntryType.Replaced))                          {                              if (!string.IsNullOrEmpty(ElementName))                              {                                  if (BaseConfigurationRecord.IsReservedAttributeName(ElementName))                                  {                                      throw new ArgumentException(string.Format(SR.Basicmap_item_name_reserved'                                          ElementName));                                  }                                    dataToWrite |= entry.Value.SerializeToXmlElement(writer' ElementName);                              }                              else dataToWrite |= entry.Value.SerializeElement(writer' false);                          }                          break;                      case ConfigurationElementCollectionType.AddRemoveClearMap:                      case ConfigurationElementCollectionType.AddRemoveClearMapAlternate:                          if (((entry.EntryType == EntryType.Removed) ||                              (entry.EntryType == EntryType.Replaced)) &&                              (entry.Value != null))                          {                              writer?.WriteStartElement(_removeElement);                              entry.Value.SerializeElement(writer' true);                              writer?.WriteEndElement();                              dataToWrite = true;                          }                            if ((entry.EntryType == EntryType.Added) || (entry.EntryType == EntryType.Replaced))                              dataToWrite |= entry.Value.SerializeToXmlElement(writer' _addElement);                            break;                  }
Missing Default,System.Configuration,ConfigurationSchemaErrors,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\ConfigurationSchemaErrors.cs,AddError,The following switch statement is missing a default case: switch (action)              {                  case ExceptionAction.Global:                      ErrorsHelper.AddError(ref _errorsAll' ce);                      ErrorsHelper.AddError(ref _errorsGlobal' ce);                      break;                  case ExceptionAction.NonSpecific:                      ErrorsHelper.AddError(ref _errorsAll' ce);                      break;                  case ExceptionAction.Local:                      ErrorsHelper.AddError(ref _errorsLocal' ce);                      break;              }
Missing Default,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,ValidateSectionXml,The following switch statement is missing a default case: switch (reader.NodeType)                      {                          // disallowed node types within a section                          case XmlNodeType.XmlDeclaration:                          case XmlNodeType.DocumentType:                              throw new ConfigurationErrorsException(SR.Config_invalid_node_type' reader);                      }
Missing Default,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,GetUpdatedSectionDeclarationXml,The following switch statement is missing a default case: switch (configSection.SectionInformation.AllowDefinition)                  {                      case ConfigurationAllowDefinition.Everywhere:                          v = AllowDefinitionEverywhere;                          break;                      case ConfigurationAllowDefinition.MachineOnly:                          v = AllowDefinitionMachineOnly;                          break;                      case ConfigurationAllowDefinition.MachineToWebRoot:                          v = AllowDefinitionMachineToWebRoot;                          break;                      case ConfigurationAllowDefinition.MachineToApplication:                          v = AllowDefinitionMachineToApplication;                          break;                  }
Missing Default,System.Configuration,MgmtConfigurationRecord,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\MgmtConfigurationRecord.cs,ExeDefinitionToString,The following switch statement is missing a default case: switch (allowDefinition)              {                  case ConfigurationAllowExeDefinition.MachineOnly:                      return AllowDefinitionMachineOnly;                    case ConfigurationAllowExeDefinition.MachineToApplication:                      return AllowDefinitionMachineToApplication;                    case ConfigurationAllowExeDefinition.MachineToRoamingUser:                      return AllowExeDefinitionMachineToRoaming;                    case ConfigurationAllowExeDefinition.MachineToLocalUser:                      return AllowExeDefinitionMachineToLocal;              }
Missing Default,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,FormatXmlElement,The following switch statement is missing a default case: switch (nodeType)                  {                      case XmlNodeType.CDATA:                      case XmlNodeType.Element:                      case XmlNodeType.EndElement:                      case XmlNodeType.Comment:                          // Do not indent if the last node was text - doing so would add whitespace                          // that is included as part of the text.                          if (!skipFirstIndent && !lastWasText)                          {                              utilWriter.AppendIndent(linePosition' indent' reader.Depth' newLine);                                if (newLine)                              {                                  utilWriter.Flush();                                  sbLengthLastNewLine = ((StringWriter)utilWriter.Writer).GetStringBuilder().Length;                              }                          }                          break;                  }
Missing Default,System.Configuration,XmlUtil,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtil.cs,FormatXmlElement,The following switch statement is missing a default case: switch (nodeType)                  {                      case XmlNodeType.Whitespace:                          break;                      case XmlNodeType.SignificantWhitespace:                          utilWriter.Write(reader.Value);                          break;                      case XmlNodeType.CDATA:                          utilWriter.AppendCData(reader.Value);                          break;                      case XmlNodeType.ProcessingInstruction:                          utilWriter.AppendProcessingInstruction(reader.Name' reader.Value);                          break;                      case XmlNodeType.Comment:                          utilWriter.AppendComment(reader.Value);                          break;                      case XmlNodeType.Text:                          utilWriter.AppendEscapeTextString(reader.Value);                          lastWasText = true;                          break;                      case XmlNodeType.Element:                          {                              // Write "<elem"                              utilWriter.Write('<');                              utilWriter.Write(reader.Name);                                lineWidth += reader.Name.Length + 2;                                int c = reader.AttributeCount;                              for (int i = 0; i < c; i++)                              {                                  // Add new line if we've exceeded the line width                                  bool writeSpace;                                  if (lineWidth > MaxLineWidth)                                  {                                      utilWriter.AppendIndent(linePosition' indent' reader.Depth - 1' true);                                      lineWidth = indent;                                      writeSpace = false;                                      utilWriter.Flush();                                      sbLengthLastNewLine = ((StringWriter)utilWriter.Writer).GetStringBuilder().Length;                                  }                                  else writeSpace = true;                                    // Write the attribute                                  reader.MoveToNextAttribute();                                  utilWriter.Flush();                                  int startLength = ((StringWriter)utilWriter.Writer).GetStringBuilder().Length;                                  if (writeSpace) utilWriter.AppendSpace();                                    utilWriter.Write(reader.Name);                                  utilWriter.Write('=');                                  utilWriter.AppendAttributeValue(reader);                                  utilWriter.Flush();                                  lineWidth += ((StringWriter)utilWriter.Writer).GetStringBuilder().Length - startLength;                              }                          }                            // position reader back on element                          reader.MoveToElement();                            // write closing tag                          if (reader.IsEmptyElement) utilWriter.Write(" />");                          else utilWriter.Write('>');                            break;                      case XmlNodeType.EndElement:                          utilWriter.Write("</");                          utilWriter.Write(reader.Name);                          utilWriter.Write('>');                          break;                      case XmlNodeType.EntityReference:                          utilWriter.AppendEntityRef(reader.Name);                          break;                        // Ignore <?xml and <!DOCTYPE nodes                      // case XmlNodeType.XmlDeclaration:                      // case XmlNodeType.DocumentType:                  }
Missing Default,System.Configuration,XmlUtilWriter,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\XmlUtilWriter.cs,AppendEscapeXmlString,The following switch statement is missing a default case: switch (ch)                      {                          case '<':                              entityRef = "lt";                              break;                          case '>':                              entityRef = "gt";                              break;                          case '&':                              entityRef = "amp";                              break;                          case '\'':                              if (inAttribute && (quoteChar == ch)) entityRef = "apos";                              break;                          case '"':                              if (inAttribute && (quoteChar == ch)) entityRef = "quot";                              break;                          case '\n':                          case '\r':                              appendCharEntity = inAttribute;                              break;                      }
Missing Default,System.Configuration,SettingsPropertyValue,C:\selectedRepos\dotnet_corefx\src\System.Configuration.ConfigurationManager\src\System\Configuration\SettingsPropertyValue.cs,ConvertObjectToString,The following switch statement is missing a default case: switch (serializeAs)                  {                      case SettingsSerializeAs.String:                          TypeConverter converter = TypeDescriptor.GetConverter(type);                          if (converter != null && converter.CanConvertTo(typeof(string)) && converter.CanConvertFrom(typeof(string)))                              return converter.ConvertToInvariantString(propertyValue);                          throw new ArgumentException(string.Format(SR.Unable_to_convert_type_to_string' type.ToString())' nameof(type));                      case SettingsSerializeAs.Xml:                          XmlSerializer xs = new XmlSerializer(type);                          StringWriter sw = new StringWriter(CultureInfo.InvariantCulture);                            xs.Serialize(sw' propertyValue);                          return sw.ToString();                      case SettingsSerializeAs.Binary:                          Debug.Fail("Should not have gotten here with Binary formatting");                          break;                  }
