Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Diagnostics,EventTypeFilter,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\SeverityFilter.cs,ShouldTrace,The method has 8 parameters. Parameters: cache' source' eventType' id' formatOrMessage' args' data1' data
Long Parameter List,System.Diagnostics,SourceFilter,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\SourceFilter.cs,ShouldTrace,The method has 8 parameters. Parameters: cache' source' eventType' id' formatOrMessage' args' data1' data
Long Parameter List,System.Diagnostics,TraceFilter,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceFilter.cs,ShouldTrace,The method has 8 parameters. Parameters: cache' source' eventType' id' formatOrMessage' args' data1' data
Long Parameter List,System.Diagnostics,TraceFilter,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceFilter.cs,ShouldTrace,The method has 5 parameters. Parameters: cache' source' eventType' id' formatOrMessage
Long Parameter List,System.Diagnostics,TraceFilter,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceFilter.cs,ShouldTrace,The method has 6 parameters. Parameters: cache' source' eventType' id' formatOrMessage' args
Long Parameter List,System.Diagnostics,TraceFilter,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceFilter.cs,ShouldTrace,The method has 7 parameters. Parameters: cache' source' eventType' id' formatOrMessage' args' data1
Long Parameter List,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,TraceTransfer,The method has 5 parameters. Parameters: eventCache' source' id' message' relatedActivityId
Long Parameter List,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Statement,System.Diagnostics,Switch,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\Switch.cs,InitializeWithStatus,The length of the statement  "                    // This method is re-entrent during initialization' since calls to OnValueChanged() in subclasses could end up having InitializeWithStatus() " is 140.
Long Statement,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,TraceTransfer,The length of the statement  "            TraceEvent(eventCache' source' TraceEventType.Transfer' id' message + "' relatedActivityId=" + relatedActivityId.ToString());  " is 125.
Long Statement,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,WriteHeader,The length of the statement  "            Write(String.Format(CultureInfo.InvariantCulture' "{0} {1}: {2} : "' source' eventType.ToString()' id.ToString(CultureInfo.InvariantCulture))); " is 143.
Magic Number,System.Diagnostics,Switch,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\Switch.cs,_pruneCachedSwitches,The following statement contains a magic number: lock (s_switches)              {                  if (s_LastCollectionCount != GC.CollectionCount(2))                  {                      List<WeakReference> buffer = new List<WeakReference>(s_switches.Count);                      for (int i = 0; i < s_switches.Count; i++)                      {                          Switch s = ((Switch)s_switches[i].Target);                          if (s != null)                          {                              buffer.Add(s_switches[i]);                          }                      }                      if (buffer.Count < s_switches.Count)                      {                          s_switches.Clear();                          s_switches.AddRange(buffer);                          s_switches.TrimExcess();                      }                      s_LastCollectionCount = GC.CollectionCount(2);                  }              }
Magic Number,System.Diagnostics,Switch,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\Switch.cs,_pruneCachedSwitches,The following statement contains a magic number: lock (s_switches)              {                  if (s_LastCollectionCount != GC.CollectionCount(2))                  {                      List<WeakReference> buffer = new List<WeakReference>(s_switches.Count);                      for (int i = 0; i < s_switches.Count; i++)                      {                          Switch s = ((Switch)s_switches[i].Target);                          if (s != null)                          {                              buffer.Add(s_switches[i]);                          }                      }                      if (buffer.Count < s_switches.Count)                      {                          s_switches.Clear();                          s_switches.AddRange(buffer);                          s_switches.TrimExcess();                      }                      s_LastCollectionCount = GC.CollectionCount(2);                  }              }
Magic Number,System.Diagnostics,TraceListener,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceListener.cs,WriteIndent,The following statement contains a magic number: for (int i = 0; i < _indentLevel; i++)              {                  if (_indentSize == 4)                      Write("    ");                  else                  {                      for (int j = 0; j < _indentSize; j++)                      {                          Write(" ");                      }                  }              }
Magic Number,System.Diagnostics,TraceSource,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceSource.cs,_pruneCachedTraceSources,The following statement contains a magic number: lock (s_tracesources)              {                  if (s_LastCollectionCount != GC.CollectionCount(2))                  {                      List<WeakReference> buffer = new List<WeakReference>(s_tracesources.Count);                      for (int i = 0; i < s_tracesources.Count; i++)                      {                          TraceSource tracesource = ((TraceSource)s_tracesources[i].Target);                          if (tracesource != null)                          {                              buffer.Add(s_tracesources[i]);                          }                      }                      if (buffer.Count < s_tracesources.Count)                      {                          s_tracesources.Clear();                          s_tracesources.AddRange(buffer);                          s_tracesources.TrimExcess();                      }                      s_LastCollectionCount = GC.CollectionCount(2);                  }              }
Magic Number,System.Diagnostics,TraceSource,C:\selectedRepos\dotnet_corefx\src\System.Diagnostics.TraceSource\src\System\Diagnostics\TraceSource.cs,_pruneCachedTraceSources,The following statement contains a magic number: lock (s_tracesources)              {                  if (s_LastCollectionCount != GC.CollectionCount(2))                  {                      List<WeakReference> buffer = new List<WeakReference>(s_tracesources.Count);                      for (int i = 0; i < s_tracesources.Count; i++)                      {                          TraceSource tracesource = ((TraceSource)s_tracesources[i].Target);                          if (tracesource != null)                          {                              buffer.Add(s_tracesources[i]);                          }                      }                      if (buffer.Count < s_tracesources.Count)                      {                          s_tracesources.Clear();                          s_tracesources.AddRange(buffer);                          s_tracesources.TrimExcess();                      }                      s_LastCollectionCount = GC.CollectionCount(2);                  }              }
