Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Runtime.Serialization.Json,JavaScriptReader,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JavaScriptReader.cs,ReadNumericLiteral,The method has 112 lines of code.
Complex Method,System.Json,JsonValue,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JsonValue.cs,ToJsonValue,Cyclomatic complexity of the method is 10
Complex Method,System.Runtime.Serialization.Json,JavaScriptReader,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JavaScriptReader.cs,ReadNumericLiteral,Cyclomatic complexity of the method is 17
Long Statement,System.Runtime.Serialization.Json,JavaScriptReader,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JavaScriptReader.cs,ReadNumericLiteral,The length of the statement  "                if (decimal.TryParse(sb.ToString()' NumberStyles.Float' CultureInfo.InvariantCulture' out valueDecimal) && valueDecimal != 0) " is 125.
Magic Number,System.Json,JsonValue,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JsonValue.cs,NeedEscape,The following statement contains a magic number: return c < 32 || c == '"' || c == '\\'                  // Broken lead surrogate                  || (c >= '\uD800' && c <= '\uDBFF' &&                      (i == src.Length - 1 || src[i + 1] < '\uDC00' || src[i + 1] > '\uDFFF'))                  // Broken tail surrogate                  || (c >= '\uDC00' && c <= '\uDFFF' &&                      (i == 0 || src[i - 1] < '\uD800' || src[i - 1] > '\uDBFF'))                  // To produce valid JavaScript                  || c == '\u2028' || c == '\u2029'                  // Escape "</" for <script> tags                  || (c == '/' && i > 0 && src[i - 1] == '<');
Magic Number,System.Runtime.Serialization.Json,JavaScriptReader,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JavaScriptReader.cs,ReadStringLiteral,The following statement contains a magic number: while (true)              {                  int c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_StringNotClosed);                  }                    if (c == '"')                  {                      return _vb.ToString();                  }                  else if (c != '\\')                  {                      _vb.Append((char)c);                      continue;                  }                    // escaped expression                  c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_IncompleteEscapeSequence);                  }                  switch (c)                  {                      case '"':                      case '\\':                      case '/':                          _vb.Append((char)c);                          break;                      case 'b':                          _vb.Append('\x8');                          break;                      case 'f':                          _vb.Append('\f');                          break;                      case 'n':                          _vb.Append('\n');                          break;                      case 'r':                          _vb.Append('\r');                          break;                      case 't':                          _vb.Append('\t');                          break;                      case 'u':                          ushort cp = 0;                          for (int i = 0; i < 4; i++)                          {                              cp <<= 4;                              if ((c = ReadChar()) < 0)                              {                                  throw JsonError(SR.ArgumentException_IncompleteEscapeLiteral);                              }                                if ('0' <= c && c <= '9')                              {                                  cp += (ushort)(c - '0');                              }                              if ('A' <= c && c <= 'F')                              {                                  cp += (ushort)(c - 'A' + 10);                              }                              if ('a' <= c && c <= 'f')                              {                                  cp += (ushort)(c - 'a' + 10);                              }                          }                          _vb.Append((char)cp);                          break;                      default:                          throw JsonError(SR.ArgumentException_UnexpectedEscapeCharacter);                  }              }
Magic Number,System.Runtime.Serialization.Json,JavaScriptReader,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JavaScriptReader.cs,ReadStringLiteral,The following statement contains a magic number: while (true)              {                  int c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_StringNotClosed);                  }                    if (c == '"')                  {                      return _vb.ToString();                  }                  else if (c != '\\')                  {                      _vb.Append((char)c);                      continue;                  }                    // escaped expression                  c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_IncompleteEscapeSequence);                  }                  switch (c)                  {                      case '"':                      case '\\':                      case '/':                          _vb.Append((char)c);                          break;                      case 'b':                          _vb.Append('\x8');                          break;                      case 'f':                          _vb.Append('\f');                          break;                      case 'n':                          _vb.Append('\n');                          break;                      case 'r':                          _vb.Append('\r');                          break;                      case 't':                          _vb.Append('\t');                          break;                      case 'u':                          ushort cp = 0;                          for (int i = 0; i < 4; i++)                          {                              cp <<= 4;                              if ((c = ReadChar()) < 0)                              {                                  throw JsonError(SR.ArgumentException_IncompleteEscapeLiteral);                              }                                if ('0' <= c && c <= '9')                              {                                  cp += (ushort)(c - '0');                              }                              if ('A' <= c && c <= 'F')                              {                                  cp += (ushort)(c - 'A' + 10);                              }                              if ('a' <= c && c <= 'f')                              {                                  cp += (ushort)(c - 'a' + 10);                              }                          }                          _vb.Append((char)cp);                          break;                      default:                          throw JsonError(SR.ArgumentException_UnexpectedEscapeCharacter);                  }              }
Magic Number,System.Runtime.Serialization.Json,JavaScriptReader,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JavaScriptReader.cs,ReadStringLiteral,The following statement contains a magic number: while (true)              {                  int c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_StringNotClosed);                  }                    if (c == '"')                  {                      return _vb.ToString();                  }                  else if (c != '\\')                  {                      _vb.Append((char)c);                      continue;                  }                    // escaped expression                  c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_IncompleteEscapeSequence);                  }                  switch (c)                  {                      case '"':                      case '\\':                      case '/':                          _vb.Append((char)c);                          break;                      case 'b':                          _vb.Append('\x8');                          break;                      case 'f':                          _vb.Append('\f');                          break;                      case 'n':                          _vb.Append('\n');                          break;                      case 'r':                          _vb.Append('\r');                          break;                      case 't':                          _vb.Append('\t');                          break;                      case 'u':                          ushort cp = 0;                          for (int i = 0; i < 4; i++)                          {                              cp <<= 4;                              if ((c = ReadChar()) < 0)                              {                                  throw JsonError(SR.ArgumentException_IncompleteEscapeLiteral);                              }                                if ('0' <= c && c <= '9')                              {                                  cp += (ushort)(c - '0');                              }                              if ('A' <= c && c <= 'F')                              {                                  cp += (ushort)(c - 'A' + 10);                              }                              if ('a' <= c && c <= 'f')                              {                                  cp += (ushort)(c - 'a' + 10);                              }                          }                          _vb.Append((char)cp);                          break;                      default:                          throw JsonError(SR.ArgumentException_UnexpectedEscapeCharacter);                  }              }
Magic Number,System.Runtime.Serialization.Json,JavaScriptReader,C:\selectedRepos\dotnet_corefx\src\System.Json\src\System\Json\JavaScriptReader.cs,ReadStringLiteral,The following statement contains a magic number: while (true)              {                  int c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_StringNotClosed);                  }                    if (c == '"')                  {                      return _vb.ToString();                  }                  else if (c != '\\')                  {                      _vb.Append((char)c);                      continue;                  }                    // escaped expression                  c = ReadChar();                  if (c < 0)                  {                      throw JsonError(SR.ArgumentException_IncompleteEscapeSequence);                  }                  switch (c)                  {                      case '"':                      case '\\':                      case '/':                          _vb.Append((char)c);                          break;                      case 'b':                          _vb.Append('\x8');                          break;                      case 'f':                          _vb.Append('\f');                          break;                      case 'n':                          _vb.Append('\n');                          break;                      case 'r':                          _vb.Append('\r');                          break;                      case 't':                          _vb.Append('\t');                          break;                      case 'u':                          ushort cp = 0;                          for (int i = 0; i < 4; i++)                          {                              cp <<= 4;                              if ((c = ReadChar()) < 0)                              {                                  throw JsonError(SR.ArgumentException_IncompleteEscapeLiteral);                              }                                if ('0' <= c && c <= '9')                              {                                  cp += (ushort)(c - '0');                              }                              if ('A' <= c && c <= 'F')                              {                                  cp += (ushort)(c - 'A' + 10);                              }                              if ('a' <= c && c <= 'f')                              {                                  cp += (ushort)(c - 'a' + 10);                              }                          }                          _vb.Append((char)cp);                          break;                      default:                          throw JsonError(SR.ArgumentException_UnexpectedEscapeCharacter);                  }              }
