Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,FillAttributes,The method has 154 lines of code.
Long Method,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtenders,The method has 114 lines of code.
Long Method,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,SearchIntrinsicTable,The method has 101 lines of code.
Long Method,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetAttributes,The method has 101 lines of code.
Long Method,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineFilter,The method has 175 lines of code.
Long Method,System.ComponentModel,CultureInfoMapper,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\CultureInfoConverter.cs,CreateMap,The method has 281 lines of code.
Long Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Initialize,The method has 123 lines of code.
Long Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,The method has 103 lines of code.
Long Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,TestChar,The method has 159 lines of code.
Long Method,System.ComponentModel,ComponentResourceManager,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ComponentResourceManager.cs,ApplyResources,The method has 117 lines of code.
Complex Method,System.ComponentModel,EnumConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\EnumConverter.cs,ConvertTo,Cyclomatic complexity of the method is 12
Complex Method,System.ComponentModel,EnumConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\EnumConverter.cs,GetStandardValues,Cyclomatic complexity of the method is 10
Complex Method,System.ComponentModel,PropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptor.cs,GetEditor,Cyclomatic complexity of the method is 12
Complex Method,System.ComponentModel,AttributeCollection,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\AttributeCollection.cs,FromExisting,Cyclomatic complexity of the method is 9
Complex Method,System.ComponentModel,EventDescriptorCollection,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\EventDescriptorCollection.cs,InternalSort,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,MemberDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MemberDescriptor.cs,Equals,Cyclomatic complexity of the method is 12
Complex Method,System.ComponentModel,PropertyDescriptorCollection,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptorCollection.cs,InternalSort,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReflectEventDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectEventDescriptor.cs,AddEventHandler,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReflectEventDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectEventDescriptor.cs,FillEventInfoAttribute,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReflectEventDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectEventDescriptor.cs,FillSingleMethodAttribute,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ReflectPropertyDescriptor,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,FillAttributes,Cyclomatic complexity of the method is 20
Complex Method,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtendedProperties,Cyclomatic complexity of the method is 12
Complex Method,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtenders,Cyclomatic complexity of the method is 15
Complex Method,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetAttributes,Cyclomatic complexity of the method is 11
Complex Method,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetConverter,Cyclomatic complexity of the method is 9
Complex Method,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetEditor,Cyclomatic complexity of the method is 10
Complex Method,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineAttributeFilter,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineFilter,Cyclomatic complexity of the method is 9
Complex Method,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineMerge,Cyclomatic complexity of the method is 13
Complex Method,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,CreateDesigner,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,WeakHashtable,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\WeakHashtable.cs,ScavengeKeys,Cyclomatic complexity of the method is 10
Complex Method,System.ComponentModel,ReferenceConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReferenceConverter.cs,ConvertTo,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,CultureInfoConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\CultureInfoConverter.cs,ConvertFrom,Cyclomatic complexity of the method is 13
Complex Method,System.ComponentModel,LicenseManager,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\LicenseManager.cs,ValidateInternalRecursive,Cyclomatic complexity of the method is 9
Complex Method,System.ComponentModel,LicFileLicenseProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\LicFileLicenseProvider.cs,GetLicense,Cyclomatic complexity of the method is 11
Complex Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,MaskedTextProvider,Cyclomatic complexity of the method is 10
Complex Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,InsertAtInt,Cyclomatic complexity of the method is 15
Complex Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,RemoveAtInt,Cyclomatic complexity of the method is 14
Complex Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,Cyclomatic complexity of the method is 10
Complex Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,TestChar,Cyclomatic complexity of the method is 12
Complex Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,TestString,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,System.ComponentModel,ComponentResourceManager,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ComponentResourceManager.cs,ApplyResources,Cyclomatic complexity of the method is 14
Complex Method,System.ComponentModel.Design,RuntimeLicenseContext,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesigntimeLicenseContext.cs,GetSavedLicenseKey,Cyclomatic complexity of the method is 9
Complex Method,System.ComponentModel.Design,ServiceContainer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\ServiceObjectContainer.cs,GetService,Cyclomatic complexity of the method is 8
Complex Method,System.Drawing,ColorConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\ColorConverter.cs,ConvertTo,Cyclomatic complexity of the method is 8
Long Parameter List,System.ComponentModel,MemberDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MemberDescriptor.cs,FindMethod,The method has 5 parameters. Parameters: componentClass' name' args' returnType' publicOnly
Long Parameter List,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ReflectPropertyDescriptor,The method has 7 parameters. Parameters: componentClass' name' type' propInfo' getMethod' setMethod' attrs
Long Parameter List,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ReflectPropertyDescriptor,The method has 7 parameters. Parameters: componentClass' name' type' receiverType' getMethod' setMethod' attrs
Long Parameter List,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineAttributeFilter,The method has 5 parameters. Parameters: pipelineType' members' filter' instance' cache
Long Parameter List,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineMerge,The method has 5 parameters. Parameters: pipelineType' primary' secondary' instance' cache
Long Parameter List,System.ComponentModel,LicenseManager,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\LicenseManager.cs,ValidateInternalRecursive,The method has 6 parameters. Parameters: context' type' instance' allowExceptions' license' licenseKey
Long Parameter List,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,MaskedTextProvider,The method has 6 parameters. Parameters: mask' culture' allowPromptAsInput' promptChar' passwordChar' restrictToAscii
Long Parameter List,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,InsertAtInt,The method has 5 parameters. Parameters: input' position' testPosition' resultHint' testOnly
Long Parameter List,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,RemoveAtInt,The method has 5 parameters. Parameters: startPosition' endPosition' testPosition' resultHint' testOnly
Long Parameter List,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,The method has 5 parameters. Parameters: input' startPosition' endPosition' testPosition' resultHint
Long Parameter List,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,The method has 5 parameters. Parameters: input' startPosition' endPosition' testPosition' resultHint
Long Parameter List,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,ToString,The method has 5 parameters. Parameters: ignorePasswordChar' includePrompt' includeLiterals' startPosition' length
Long Identifier,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,,The length of the parameter s_extenderProviderPropertiesKey is 31.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListSortByDefaultSort is 30.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByCategoryCodeSense is 38.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByCategoryCompiler is 37.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByCategoryComment is 36.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByCategoryUser is 33.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByCategoryShortcut is 37.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByCategoryHTML is 33.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByCurrentFile is 32.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListFilterByUnchecked is 30.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter cmdidTaskListSortByDescription is 30.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidHorizontalSpaceWellMenu is 30.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidStatementBuilderWellMenu is 31.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBProjWinContextBreakMenu is 32.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBPreviewWinContextMenu is 30.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBForms3ControlCMenuGroup is 32.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBToolBoxGroupContextMenu is 32.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBPropBrsHostContextMenu is 31.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBProjWinProjectContextMenu is 34.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBProjWinFormContextMenu is 31.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBProjWinModClassContextMenu is 35.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBProjWinRelDocContextMenu is 33.
Long Identifier,System.ComponentModel.Design,VSStandardCommands,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter msotcidVBDockedWindowContextMenu is 32.
Long Identifier,System.ComponentModel.Design,ShellGuids,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter GUID_VSTASKCATEGORY_DATADESIGNER is 32.
Long Identifier,System.ComponentModel.Design,ShellGuids,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\StandardCommands.cs,,The length of the parameter GUID_PropertyBrowserToolWindow is 30.
Long Statement,System.ComponentModel,DecimalConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\DecimalConverter.cs,ConvertTo,The length of the statement  "                Debug.Assert(member != null' "Could not convert decimal to member.  Did someone change method name / signature and not update DecimalConverter?"); " is 146.
Long Statement,System.ComponentModel,TypeConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeConverter.cs,GetConvertToException,The length of the statement  "            throw new NotSupportedException(SR.Format(SR.ConvertToException' GetType().Name' valueTypeName' destinationType.FullName)); " is 123.
Long Statement,System.ComponentModel,ExtenderProvidedPropertyAttribute,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ExtenderProvidedPropertyAttribute.cs,Equals,The length of the statement  "            return (other != null) && other.ExtenderProperty.Equals(ExtenderProperty) && other.Provider.Equals(Provider) && other.ReceiverType.Equals(ReceiverType); " is 152.
Long Statement,System.ComponentModel,MemberDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MemberDescriptor.cs,FindMethod,The length of the statement  "                // The original impementation requires the method https://msdn.microsoft.com/en-us/library/5fed8f59(v=vs.110).aspx which is not  " is 127.
Long Statement,System.ComponentModel,MemberDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MemberDescriptor.cs,FindMethod,The length of the statement  "                // available on .NET Core. The replacement will use the default BindingFlags' which may miss some methods that had been found " is 125.
Long Statement,System.ComponentModel,MemberDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MemberDescriptor.cs,FindMethod,The length of the statement  "                result = componentClass.GetMethod(name' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' args' null); " is 150.
Long Statement,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ExtenderResetValue,The length of the statement  "                    Debug.Assert(!CompModSwitches.CommonDesignerServices.Enabled || changeService != null' "IComponentChangeService not found"); " is 124.
Long Statement,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ExtenderSetValue,The length of the statement  "                    Debug.Assert(!CompModSwitches.CommonDesignerServices.Enabled || changeService != null' "IComponentChangeService not found"); " is 124.
Long Statement,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,FillAttributes,The length of the statement  "                    BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.DeclaredOnly; " is 125.
Long Statement,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,FillAttributes,The length of the statement  "                        memberInfo = currentReflectType.GetProperty(Name' bindingFlags' null' PropertyType' Array.Empty<Type>()' Array.Empty<ParameterModifier>()); " is 139.
Long Statement,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ResetValue,The length of the statement  "                    Debug.Assert(!CompModSwitches.CommonDesignerServices.Enabled || changeService != null' "IComponentChangeService not found"); " is 124.
Long Statement,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,SetValue,The length of the statement  "                        Debug.Assert(!CompModSwitches.CommonDesignerServices.Enabled || changeService != null' "IComponentChangeService not found"); " is 124.
Long Statement,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtendedProperties,The length of the statement  "                    ExtenderProvidedPropertyAttribute eppa = prop.Attributes[typeof(ExtenderProvidedPropertyAttribute)] as ExtenderProvidedPropertyAttribute; " is 137.
Long Statement,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtenders,The length of the statement  "            //CanExtend is expensive. We will remember results of CanExtend for the first 64 extenders and using "long canExtend" as a bit vector. " is 134.
Long Statement,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtenders,The length of the statement  "            // we want to avoid memory allocation as well so we don't use some more sophisticated data structure like an array of booleans " is 126.
Long Statement,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,ReflectGetEvents,The length of the statement  "                        if ((!(eventInfo.DeclaringType.IsPublic || eventInfo.DeclaringType.IsNestedPublic)) && (eventInfo.DeclaringType.Assembly == typeof(ReflectTypeDescriptionProvider).Assembly)) " is 173.
Long Statement,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,ReflectGetExtendedProperties,The length of the statement  "                                        MethodInfo setMethod = providerType.GetMethod("Set" + provideAttr.PropertyName' new Type[] { receiverType' getMethod.ReturnType }); " is 131.
Long Statement,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,ReflectGetExtendedProperties,The length of the statement  "                                        extendedList.Add(new ReflectPropertyDescriptor(providerType' provideAttr.PropertyName' getMethod.ReturnType' receiverType' getMethod' setMethod' null)); " is 152.
Long Statement,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetConverter,The length of the statement  "                    TypeConverterAttribute instanceAttr = (TypeConverterAttribute)TypeDescriptor.GetAttributes(instance)[typeof(TypeConverterAttribute)]; " is 133.
Long Statement,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetEditor,The length of the statement  "                        Debug.Fail($"Editor {editor.GetType().FullName} is not an instance of {editorBaseType.FullName} but it is in that base types table."); " is 134.
Long Statement,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetExtenderCollisionSuffix,The length of the statement  "            ExtenderProvidedPropertyAttribute exAttr = member.Attributes[typeof(ExtenderProvidedPropertyAttribute)] as ExtenderProvidedPropertyAttribute; " is 141.
Long Statement,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                    properties = new PropertyDescriptorCollection((PropertyDescriptor[])filteredProperties.ToArray(typeof(PropertyDescriptor))' true); " is 130.
Long Statement,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineFilter,The length of the statement  "                Debug.Assert(cache == null || list == null || !cache.Contains(s_pipelineFilterKeys[pipelineType])' "Earlier pipeline stage should have removed our cache"); " is 155.
Long Statement,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineFilter,The length of the statement  "                            throw new ArgumentException(SR.GetResourceString(SR.TypeDescriptorExpectedElementType' typeof(PropertyDescriptor).FullName)); " is 125.
Long Statement,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,PipelineFilter,The length of the statement  "                            throw new ArgumentException(SR.GetResourceString(SR.TypeDescriptorExpectedElementType' typeof(EventDescriptor).FullName)); " is 122.
Long Statement,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,CreateDesigner,The length of the statement  "                        ITypeResolutionService typeResolutionService = (ITypeResolutionService) site?.GetService(typeof(ITypeResolutionService)); " is 121.
Long Statement,System.ComponentModel,ComNativeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetTypeDescriptor,The length of the statement  "                    throw new ArgumentException(SR.Format(SR.ConvertToException' nameof(objectType)' instance.GetType()) ' nameof(instance)); " is 121.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetAttributes,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetAttributes,The length of the statement  "                    if (attrs == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetAttributes")); " is 150.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetClassName,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetComponentName,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetConverter,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetConverter,The length of the statement  "                    if (converter == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetConverter")); " is 153.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetDefaultEvent,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetDefaultProperty,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEditor,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                    if (events == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetEvents")); " is 147.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                    if (evts == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetEvents")); " is 145.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                    if (properties == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetProperties")); " is 155.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                    if (properties == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetProperties")); " is 155.
Long Statement,System.ComponentModel,DefaultExtendedTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetPropertyOwner,The length of the statement  "                    if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetExtendedTypeDescriptor")); " is 161.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetAttributes,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetAttributes,The length of the statement  "                        if (attrs == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetAttributes")); " is 150.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetClassName,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetComponentName,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetConverter,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetConverter,The length of the statement  "                        if (converter == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetConverter")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetDefaultEvent,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetDefaultProperty,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEditor,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                        if (events == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetEvents")); " is 147.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetEvents,The length of the statement  "                        if (events == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetEvents")); " is 147.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                        if (properties == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetProperties")); " is 155.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetProperties,The length of the statement  "                        if (properties == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetProperties")); " is 155.
Long Statement,System.ComponentModel,DefaultTypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,GetPropertyOwner,The length of the statement  "                        if (desc == null) throw new InvalidOperationException(SR.Format(SR.TypeDescriptorProviderError' _node.Provider.GetType().FullName' "GetTypeDescriptor")); " is 153.
Long Statement,System.ComponentModel,Container,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Container.cs,ValidateName,The length of the statement  "                        InheritanceAttribute inheritanceAttribute = (InheritanceAttribute)TypeDescriptor.GetAttributes(s.Component)[typeof(InheritanceAttribute)]; " is 138.
Long Statement,System.ComponentModel,CultureInfoConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\CultureInfoConverter.cs,GetStandardValues,The length of the statement  "                CultureInfo[] installedCultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures | CultureTypes.NeutralCultures); " is 120.
Long Statement,System.ComponentModel,DesignerAttribute,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\DesignerAttribute.cs,Equals,The length of the statement  "            return (other != null) && other.DesignerBaseTypeName == DesignerBaseTypeName && other.DesignerTypeName == DesignerTypeName; " is 123.
Long Statement,System.ComponentModel,LicenseManager,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\LicenseManager.cs,ValidateInternalRecursive,The length of the statement  "                LicenseProviderAttribute attr = (LicenseProviderAttribute)Attribute.GetCustomAttribute(type' typeof(LicenseProviderAttribute)' false); " is 134.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,InsertAtInt,The length of the statement  "            // Now check if we need to open room for the input characters (shift characters right) and if so test the shifting characters. " is 126.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,RemoveAtInt,The length of the statement  "            Debug.Assert(startPosition >= 0 && startPosition <= endPosition && endPosition < _testString.Length' "Out of range input value."); " is 130.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,RemoveAtInt,The length of the statement  "            // if there are assigned characters to be removed (could be that the range doesn't have one' in such case we may be just  " is 120.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,RemoveAtInt,The length of the statement  "                // shifting characters is a resultHint == sideEffect' update hint if no characters removed (which would be hint == success). " is 124.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,RemoveAtInt,The length of the statement  "                // If shifting character are less than characters to remove in the range' we need to remove the remaining ones in the range;  " is 124.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,The length of the statement  "            // If replacing the entire text with a same-lenght text' we are just setting (not replacing) the test string to the new value; " is 126.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,The length of the statement  "            // If the text length is different than the specified range we would need to remove or insert characters; there are three possible " is 130.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,The length of the statement  "            // 1. The text length is the same as edit positions in the range (or no assigned chars): just replace the text' no additional operations needed. " is 144.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,Replace,The length of the statement  "                        // If current result hint is not success (no effect)' and character shifting is actually performed' hint = success effect. " is 122.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,ResetString,The length of the statement  "            Debug.Assert(startPosition >= 0 && endPosition >= 0 && endPosition >= startPosition && endPosition < _testString.Length' "position out of range."); " is 147.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,TestSetChar,The length of the statement  "                if (resultHint == MaskedTextResultHint.Success || resultHint == MaskedTextResultHint.SideEffect) // the character is not to be escaped. " is 135.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,ToString,The length of the statement  "                int lastLiteralPos = includeLiterals ? FindNonEditPositionInRange(startPosition' lastPosition' BACKWARD) : InvalidIndex; " is 120.
Long Statement,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,ToString,The length of the statement  "                int lastAssignedPos = FindAssignedEditPositionInRange(lastLiteralPos == InvalidIndex ? startPosition : lastLiteralPos' lastPosition' BACKWARD); " is 143.
Long Statement,System.ComponentModel.Design,RuntimeLicenseContext,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesigntimeLicenseContext.cs,GetLocalPath,The length of the statement  "            System.Diagnostics.Debug.Assert(fileName != null && fileName.Length > 0' "Cannot get local path' fileName is not valid"); " is 121.
Long Statement,System.ComponentModel.Design,RuntimeLicenseContext,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesigntimeLicenseContext.cs,GetSavedLicenseKey,The length of the statement  "                        // by looking at the assembly name (which doesn't change even after a file rename) + ".exe.licenses" or + ".dll.licenses" " is 121.
Long Statement,System.ComponentModel.Design,RuntimeLicenseContext,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesigntimeLicenseContext.cs,GetSavedLicenseKey,The length of the statement  "            Debug.WriteLineIf(s_runtimeLicenseContextSwitch.TraceVerbose' $"returning : {(string)savedLicenseKeys[type.AssemblyQualifiedName]}"); " is 133.
Long Statement,System.ComponentModel.Design,DesignerTransaction,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesignerTransaction.cs,Dispose,The length of the statement  "                System.Diagnostics.Debug.Fail("Invalid state. Dispose(true) should have called cancel which does the SuppressFinalize"); " is 120.
Long Statement,System.ComponentModel.Design,DesignerTransaction,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesignerTransaction.cs,Dispose,The length of the statement  "            System.Diagnostics.Debug.Assert(disposing' "Designer transaction garbage collected' unable to cancel' please Cancel' Close' or Dispose your transaction."); " is 155.
Long Statement,System.ComponentModel.Design,DesignerTransaction,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesignerTransaction.cs,Dispose,The length of the statement  "            System.Diagnostics.Debug.Assert(disposing || Canceled || Committed' "Disposing DesignerTransaction that has not been comitted or canceled; forcing Cancel"); " is 156.
Long Statement,System.ComponentModel.Design,DesignerOptionService,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesignerOptionService.cs,CreateOptionCollection,The length of the statement  "                throw new ArgumentException(SR.Format(SR.InvalidArgument' name.Length.ToString(CultureInfo.CurrentCulture)' (0).ToString(CultureInfo.CurrentCulture))' "name.Length"); " is 166.
Long Statement,System.ComponentModel.Design,ServiceContainer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\ServiceObjectContainer.cs,AddService,The length of the statement  "            Debug.WriteLineIf(s_TRACESERVICE.TraceVerbose' $"Adding service (instance) {serviceType.Name}.  Promoting: {promote.ToString()}"); " is 130.
Long Statement,System.ComponentModel.Design,ServiceContainer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\ServiceObjectContainer.cs,AddService,The length of the statement  "            if (!(serviceInstance is ServiceCreatorCallback) && !serviceInstance.GetType().IsCOMObject && !serviceType.IsInstanceOfType(serviceInstance)) " is 141.
Long Statement,System.ComponentModel.Design,ServiceContainer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\ServiceObjectContainer.cs,AddService,The length of the statement  "            Debug.WriteLineIf(s_TRACESERVICE.TraceVerbose' $"Adding service (callback) {serviceType.Name}.  Promoting: {promote.ToString()}"); " is 130.
Long Statement,System.ComponentModel.Design,ServiceContainer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\ServiceObjectContainer.cs,GetService,The length of the statement  "                Debug.WriteLineIf(s_TRACESERVICE.TraceVerbose' $"Callback return object: {(service == null ? "(null)" : service.ToString())}"); " is 127.
Long Statement,System.ComponentModel.Design,ServiceContainer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\ServiceObjectContainer.cs,GetService,The length of the statement  "                    Debug.Fail($"Object {service.GetType().Name} was returned from a service creator callback but it does not implement the registered type of {serviceType.Name}"); " is 160.
Long Statement,System.Drawing,ColorConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\ColorConverter.cs,ConvertTo,The length of the statement  "                    Debug.Assert(member != null' "Could not convert color to member.  Did someone change method name / signature and not update Colorconverter?"); " is 142.
Long Statement,System.ComponentModel.Design.Serialization,MemberRelationshipService,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\Serialization\MemberRelationshipService.cs,GetRelationship,The length of the statement  "            if (_relationships != null && _relationships.TryGetValue(new RelationshipEntry(source)' out retVal) && retVal.Owner.IsAlive) " is 124.
Long Statement,System.ComponentModel.Design.Serialization,MemberRelationshipService,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\Serialization\MemberRelationshipService.cs,SetRelationship,The length of the statement  "                throw new ArgumentException(SR.Format(SR.MemberRelationshipService_RelationshipNotSupported' sourceName' source.Member.Name' relName' relationship.Member.Name)); " is 161.
Complex Conditional,System.ComponentModel,PropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptor.cs,Equals,The conditional expression  "pd != null && pd.NameHashCode == NameHashCode                      && pd.PropertyType == PropertyType                      && pd.Name.Equals(Name)"  is complex.
Complex Conditional,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtenders,The conditional expression  "(curIdx < maxCanExtendResults && (canExtend & ((UInt64)1 << curIdx)) != 0) ||                                              (curIdx >= maxCanExtendResults && currentExtenders[curIdx].CanExtend(instance))"  is complex.
Complex Conditional,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtenders,The conditional expression  "p != null && ((curIdx < maxCanExtendResults && (canExtend & ((UInt64)1 << curIdx)) != 0) ||                                                  (curIdx >= maxCanExtendResults && p.CanExtend(instance)))"  is complex.
Complex Conditional,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,TestChar,The conditional expression  "!Char.IsDigit(input) && (input != '-') && (input != '+') && input != SPACE_CHAR"  is complex.
Complex Conditional,System.ComponentModel,MaskedTextProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\MaskedTextProvider.cs,TestEscapeChar,The conditional expression  "(ResetOnPrompt && (input == _promptChar)) || (ResetOnSpace && (input == SPACE_CHAR))"  is complex.
Complex Conditional,System.ComponentModel,ComponentResourceManager,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ComponentResourceManager.cs,ApplyResources,The conditional expression  "prop != null && !prop.IsReadOnly && (kvp.Value == null || prop.PropertyType.IsInstanceOfType(kvp.Value))"  is complex.
Complex Conditional,System.ComponentModel,ComponentResourceManager,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ComponentResourceManager.cs,ApplyResources,The conditional expression  "prop != null && prop.CanWrite && (kvp.Value == null || prop.PropertyType.IsInstanceOfType(kvp.Value))"  is complex.
Complex Conditional,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The conditional expression  "text.Length >= 2 && (text[0] == '\'' || text[0] == '"') && text[0] == text[text.Length - 1]"  is complex.
Complex Conditional,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The conditional expression  "(text.Length == 7 && text[0] == '#') ||                           (text.Length == 8 && (text.StartsWith("0x") || text.StartsWith("0X"))) ||                           (text.Length == 8 && (text.StartsWith("&h") || text.StartsWith("&H")))"  is complex.
Complex Conditional,System.Drawing,PointConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\PointConverter.cs,CreateInstance,The conditional expression  "x == null || y == null ||                  !(x is int) || !(y is int)"  is complex.
Complex Conditional,System.Drawing,RectangleConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\RectangleConverter.cs,CreateInstance,The conditional expression  "x == null || y == null || width == null || height == null ||                  !(x is int) || !(y is int) || !(width is int) || !(height is int)"  is complex.
Complex Conditional,System.Drawing,SizeConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\SizeConverter.cs,CreateInstance,The conditional expression  "width == null || height == null ||                  !(width is int) || !(height is int)"  is complex.
Complex Conditional,System.Drawing,SizeFConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\SizeFConverter.cs,CreateInstance,The conditional expression  "width == null || height == null ||                  !(width is float) || !(height is float)"  is complex.
Virtual Method Call from Constructor,System.ComponentModel,ListSortDescriptionCollection,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ListSortDescriptionCollection.cs,ListSortDescriptionCollection,The constructor "ListSortDescriptionCollection" calls a virtual method "Add".
Virtual Method Call from Constructor,System.ComponentModel.Design,DesignerOptionCollection,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\DesignerOptionService.cs,DesignerOptionCollection,The constructor "DesignerOptionCollection" calls a virtual method "Add".
Empty Catch Block,System.ComponentModel,EnumConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\EnumConverter.cs,GetStandardValues,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,PropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptor.cs,Equals,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ExtenderCanResetValue,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ExtenderShouldSerializeValue,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ExtenderShouldSerializeValue,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,CanResetValue,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ShouldSerializeValue,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,ReflectPropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectPropertyDescriptor.cs,ShouldSerializeValue,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,AmbientValueAttribute,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\AmbientValueAttribute.cs,AmbientValueAttribute,The method has an empty catch block.
Empty Catch Block,System.ComponentModel,CultureInfoConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\CultureInfoConverter.cs,ConvertFrom,The method has an empty catch block.
Empty Catch Block,System.Timers,Timer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Timers\Timer.cs,MyTimerCallback,The method has an empty catch block.
Magic Number,System.ComponentModel,BaseNumberConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\BaseNumberConverter.cs,ConvertFrom,The following statement contains a magic number: if (text != null)              {                  text = text.Trim();                    try                  {                      if (AllowHex && text[0] == '#')                      {                          return FromString(text.Substring(1)' 16);                      }                      else if (AllowHex && text.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                               || text.StartsWith("&h"' StringComparison.OrdinalIgnoreCase))                      {                          return FromString(text.Substring(2)' 16);                      }                      else                      {                          if (culture == null)                          {                              culture = CultureInfo.CurrentCulture;                          }                          NumberFormatInfo formatInfo = (NumberFormatInfo)culture.GetFormat(typeof(NumberFormatInfo));                          return FromString(text' formatInfo);                      }                  }                  catch (Exception e)                  {                      throw FromStringError(text' e);                  }              }
Magic Number,System.ComponentModel,BaseNumberConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\BaseNumberConverter.cs,ConvertFrom,The following statement contains a magic number: if (text != null)              {                  text = text.Trim();                    try                  {                      if (AllowHex && text[0] == '#')                      {                          return FromString(text.Substring(1)' 16);                      }                      else if (AllowHex && text.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                               || text.StartsWith("&h"' StringComparison.OrdinalIgnoreCase))                      {                          return FromString(text.Substring(2)' 16);                      }                      else                      {                          if (culture == null)                          {                              culture = CultureInfo.CurrentCulture;                          }                          NumberFormatInfo formatInfo = (NumberFormatInfo)culture.GetFormat(typeof(NumberFormatInfo));                          return FromString(text' formatInfo);                      }                  }                  catch (Exception e)                  {                      throw FromStringError(text' e);                  }              }
Magic Number,System.ComponentModel,BaseNumberConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\BaseNumberConverter.cs,ConvertFrom,The following statement contains a magic number: if (text != null)              {                  text = text.Trim();                    try                  {                      if (AllowHex && text[0] == '#')                      {                          return FromString(text.Substring(1)' 16);                      }                      else if (AllowHex && text.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                               || text.StartsWith("&h"' StringComparison.OrdinalIgnoreCase))                      {                          return FromString(text.Substring(2)' 16);                      }                      else                      {                          if (culture == null)                          {                              culture = CultureInfo.CurrentCulture;                          }                          NumberFormatInfo formatInfo = (NumberFormatInfo)culture.GetFormat(typeof(NumberFormatInfo));                          return FromString(text' formatInfo);                      }                  }                  catch (Exception e)                  {                      throw FromStringError(text' e);                  }              }
Magic Number,System.ComponentModel,PropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptor.cs,GetEditor,The following statement contains a magic number: if (editor == null)              {                  for (int i = 0; i < attrs.Count; i++)                  {                      EditorAttribute attr = attrs[i] as EditorAttribute;                      if (attr == null)                      {                          continue;                      }                        Type editorType = GetTypeFromName(attr.EditorBaseTypeName);                        if (editorBaseType == editorType)                      {                          Type type = GetTypeFromName(attr.EditorTypeName);                          if (type != null)                          {                              editor = CreateInstance(type);                              break;                          }                      }                  }                    // Now' if we failed to find it in our own attributes' go to the                  // component descriptor.                  //                  if (editor == null)                  {                      editor = TypeDescriptor.GetEditor(PropertyType' editorBaseType);                  }                    // Now' another slot in our editor cache for next time                  //                  if (_editorTypes == null)                  {                      _editorTypes = new Type[5];                      _editors = new object[5];                  }                    if (_editorCount >= _editorTypes.Length)                  {                      Type[] newTypes = new Type[_editorTypes.Length * 2];                      object[] newEditors = new object[_editors.Length * 2];                      Array.Copy(_editorTypes' newTypes' _editorTypes.Length);                      Array.Copy(_editors' newEditors' _editors.Length);                      _editorTypes = newTypes;                      _editors = newEditors;                  }                    _editorTypes[_editorCount] = editorBaseType;                  _editors[_editorCount++] = editor;              }
Magic Number,System.ComponentModel,PropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptor.cs,GetEditor,The following statement contains a magic number: if (editor == null)              {                  for (int i = 0; i < attrs.Count; i++)                  {                      EditorAttribute attr = attrs[i] as EditorAttribute;                      if (attr == null)                      {                          continue;                      }                        Type editorType = GetTypeFromName(attr.EditorBaseTypeName);                        if (editorBaseType == editorType)                      {                          Type type = GetTypeFromName(attr.EditorTypeName);                          if (type != null)                          {                              editor = CreateInstance(type);                              break;                          }                      }                  }                    // Now' if we failed to find it in our own attributes' go to the                  // component descriptor.                  //                  if (editor == null)                  {                      editor = TypeDescriptor.GetEditor(PropertyType' editorBaseType);                  }                    // Now' another slot in our editor cache for next time                  //                  if (_editorTypes == null)                  {                      _editorTypes = new Type[5];                      _editors = new object[5];                  }                    if (_editorCount >= _editorTypes.Length)                  {                      Type[] newTypes = new Type[_editorTypes.Length * 2];                      object[] newEditors = new object[_editors.Length * 2];                      Array.Copy(_editorTypes' newTypes' _editorTypes.Length);                      Array.Copy(_editors' newEditors' _editors.Length);                      _editorTypes = newTypes;                      _editors = newEditors;                  }                    _editorTypes[_editorCount] = editorBaseType;                  _editors[_editorCount++] = editor;              }
Magic Number,System.ComponentModel,PropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptor.cs,GetEditor,The following statement contains a magic number: if (editor == null)              {                  for (int i = 0; i < attrs.Count; i++)                  {                      EditorAttribute attr = attrs[i] as EditorAttribute;                      if (attr == null)                      {                          continue;                      }                        Type editorType = GetTypeFromName(attr.EditorBaseTypeName);                        if (editorBaseType == editorType)                      {                          Type type = GetTypeFromName(attr.EditorTypeName);                          if (type != null)                          {                              editor = CreateInstance(type);                              break;                          }                      }                  }                    // Now' if we failed to find it in our own attributes' go to the                  // component descriptor.                  //                  if (editor == null)                  {                      editor = TypeDescriptor.GetEditor(PropertyType' editorBaseType);                  }                    // Now' another slot in our editor cache for next time                  //                  if (_editorTypes == null)                  {                      _editorTypes = new Type[5];                      _editors = new object[5];                  }                    if (_editorCount >= _editorTypes.Length)                  {                      Type[] newTypes = new Type[_editorTypes.Length * 2];                      object[] newEditors = new object[_editors.Length * 2];                      Array.Copy(_editorTypes' newTypes' _editorTypes.Length);                      Array.Copy(_editors' newEditors' _editors.Length);                      _editorTypes = newTypes;                      _editors = newEditors;                  }                    _editorTypes[_editorCount] = editorBaseType;                  _editors[_editorCount++] = editor;              }
Magic Number,System.ComponentModel,PropertyDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptor.cs,GetEditor,The following statement contains a magic number: if (editor == null)              {                  for (int i = 0; i < attrs.Count; i++)                  {                      EditorAttribute attr = attrs[i] as EditorAttribute;                      if (attr == null)                      {                          continue;                      }                        Type editorType = GetTypeFromName(attr.EditorBaseTypeName);                        if (editorBaseType == editorType)                      {                          Type type = GetTypeFromName(attr.EditorTypeName);                          if (type != null)                          {                              editor = CreateInstance(type);                              break;                          }                      }                  }                    // Now' if we failed to find it in our own attributes' go to the                  // component descriptor.                  //                  if (editor == null)                  {                      editor = TypeDescriptor.GetEditor(PropertyType' editorBaseType);                  }                    // Now' another slot in our editor cache for next time                  //                  if (_editorTypes == null)                  {                      _editorTypes = new Type[5];                      _editors = new object[5];                  }                    if (_editorCount >= _editorTypes.Length)                  {                      Type[] newTypes = new Type[_editorTypes.Length * 2];                      object[] newEditors = new object[_editors.Length * 2];                      Array.Copy(_editorTypes' newTypes' _editorTypes.Length);                      Array.Copy(_editors' newEditors' _editors.Length);                      _editorTypes = newTypes;                      _editors = newEditors;                  }                    _editorTypes[_editorCount] = editorBaseType;                  _editors[_editorCount++] = editor;              }
Magic Number,System.ComponentModel,EventDescriptorCollection,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\EventDescriptorCollection.cs,EnsureSize,The following statement contains a magic number: int newSize = Math.Max(sizeNeeded' _events.Length * 2);
Magic Number,System.ComponentModel,PropertyDescriptorCollection,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\PropertyDescriptorCollection.cs,EnsureSize,The following statement contains a magic number: int newSize = Math.Max(sizeNeeded' _properties.Length * 2);
Magic Number,System.ComponentModel,ReflectTypeDescriptionProvider,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.cs,GetExtenders,The following statement contains a magic number: int maxCanExtendResults = 64;
Magic Number,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetEditor,The following statement contains a magic number: if (editor != null)                  {                      lock (this)                      {                          if (_editorTypes == null || _editorTypes.Length == _editorCount)                          {                              int newLength = (_editorTypes == null ? 4 : _editorTypes.Length * 2);                                Type[] newTypes = new Type[newLength];                              object[] newEditors = new object[newLength];                                if (_editorTypes != null)                              {                                  _editorTypes.CopyTo(newTypes' 0);                                  _editors.CopyTo(newEditors' 0);                              }                                _editorTypes = newTypes;                              _editors = newEditors;                                _editorTypes[_editorCount] = editorBaseType;                              _editors[_editorCount++] = editor;                          }                      }                  }
Magic Number,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetEditor,The following statement contains a magic number: if (editor != null)                  {                      lock (this)                      {                          if (_editorTypes == null || _editorTypes.Length == _editorCount)                          {                              int newLength = (_editorTypes == null ? 4 : _editorTypes.Length * 2);                                Type[] newTypes = new Type[newLength];                              object[] newEditors = new object[newLength];                                if (_editorTypes != null)                              {                                  _editorTypes.CopyTo(newTypes' 0);                                  _editors.CopyTo(newEditors' 0);                              }                                _editorTypes = newTypes;                              _editors = newEditors;                                _editorTypes[_editorCount] = editorBaseType;                              _editors[_editorCount++] = editor;                          }                      }                  }
Magic Number,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetEvents,The following statement contains a magic number: if (_events == null)                  {                      EventDescriptor[] eventArray;                      Dictionary<string' EventDescriptor> eventList = new Dictionary<string' EventDescriptor>(16);                      Type baseType = _type;                      Type objType = typeof(object);                        do                      {                          eventArray = ReflectGetEvents(baseType);                          foreach (EventDescriptor ed in eventArray)                          {                              eventList.TryAdd(ed.Name' ed);                          }                          baseType = baseType.BaseType;                      }                      while (baseType != null && baseType != objType);                        eventArray = new EventDescriptor[eventList.Count];                      eventList.Values.CopyTo(eventArray' 0);                      _events = new EventDescriptorCollection(eventArray' true);                  }
Magic Number,System.ComponentModel,ReflectedTypeData,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\ReflectTypeDescriptionProvider.ReflectedTypeData.cs,GetProperties,The following statement contains a magic number: if (_properties == null)                  {                      PropertyDescriptor[] propertyArray;                      Dictionary<string' PropertyDescriptor> propertyList = new Dictionary<string' PropertyDescriptor>(10);                      Type baseType = _type;                      Type objType = typeof(object);                        do                      {                          propertyArray = ReflectGetProperties(baseType);                          foreach (PropertyDescriptor p in propertyArray)                          {                              propertyList.TryAdd(p.Name' p);                          }                          baseType = baseType.BaseType;                      }                      while (baseType != null && baseType != objType);                        propertyArray = new PropertyDescriptor[propertyList.Count];                      propertyList.Values.CopyTo(propertyArray' 0);                      _properties = new PropertyDescriptorCollection(propertyArray' true);                  }
Magic Number,System.ComponentModel,TypeDescriptor,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeDescriptor.cs,CreateAssociation,The following statement contains a magic number: if (associations == null)              {                  lock (associationTable)                  {                      associations = (IList)associationTable[primary];                      if (associations == null)                      {                          associations = new ArrayList(4);                          associationTable.SetWeak(primary' associations);                      }                  }              }              else              {                  for (int idx = associations.Count - 1; idx >= 0; idx--)                  {                      WeakReference r = (WeakReference)associations[idx];                      if (r.IsAlive && r.Target == secondary)                      {                          throw new ArgumentException(SR.TypeDescriptorAlreadyAssociated);                      }                  }              }
Magic Number,System.ComponentModel,Container,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Container.cs,Add,The following statement contains a magic number: lock (_syncObj)              {                  if (component == null)                  {                      return;                  }                    ISite site = component.Site;                  if (site != null && site.Container == this)                  {                      return;                  }                    if (_sites == null)                  {                      _sites = new ISite[4];                  }                  else                  {                      // Validate that new components                      // have either a null name or a unique one.                      //                      ValidateName(component' name);                        if (_sites.Length == _siteCount)                      {                          ISite[] newSites = new ISite[_siteCount * 2];                          Array.Copy(_sites' 0' newSites' 0' _siteCount);                          _sites = newSites;                      }                  }                    site?.Container.Remove(component);                    ISite newSite = CreateSite(component' name);                  _sites[_siteCount++] = newSite;                  component.Site = newSite;                  _components = null;              }
Magic Number,System.ComponentModel,Container,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Container.cs,Add,The following statement contains a magic number: lock (_syncObj)              {                  if (component == null)                  {                      return;                  }                    ISite site = component.Site;                  if (site != null && site.Container == this)                  {                      return;                  }                    if (_sites == null)                  {                      _sites = new ISite[4];                  }                  else                  {                      // Validate that new components                      // have either a null name or a unique one.                      //                      ValidateName(component' name);                        if (_sites.Length == _siteCount)                      {                          ISite[] newSites = new ISite[_siteCount * 2];                          Array.Copy(_sites' 0' newSites' 0' _siteCount);                          _sites = newSites;                      }                  }                    site?.Container.Remove(component);                    ISite newSite = CreateSite(component' name);                  _sites[_siteCount++] = newSite;                  component.Site = newSite;                  _components = null;              }
Magic Number,System.ComponentModel,CultureInfoMapper,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\CultureInfoConverter.cs,CreateMap,The following statement contains a magic number: const int Count = 274;
Magic Number,System.Timers,Timer,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Timers\Timer.cs,Timer,The following statement contains a magic number: _interval = 100;
Magic Number,System.ComponentModel.Design,CommandID,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\Design\CommandID.cs,GetHashCode,The following statement contains a magic number: return Guid.GetHashCode() << 2 | ID;
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: if (text.IndexOf(sep) == -1)              {                  // text can be '' (empty quoted string)                  if (text.Length >= 2 && (text[0] == '\'' || text[0] == '"') && text[0] == text[text.Length - 1])                  {                      // In quotes means a named value                      string colorName = text.Substring(1' text.Length - 2);                      return Color.FromName(colorName);                  }                  else if ((text.Length == 7 && text[0] == '#') ||                           (text.Length == 8 && (text.StartsWith("0x") || text.StartsWith("0X"))) ||                           (text.Length == 8 && (text.StartsWith("&h") || text.StartsWith("&H"))))                  {                      // Note: int.Parse will raise exception if value cannot be converted.                      return PossibleKnownColor(Color.FromArgb(unchecked((int)(0xFF000000 | (uint)IntFromString(text' culture)))));                  }              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: if (text.IndexOf(sep) == -1)              {                  // text can be '' (empty quoted string)                  if (text.Length >= 2 && (text[0] == '\'' || text[0] == '"') && text[0] == text[text.Length - 1])                  {                      // In quotes means a named value                      string colorName = text.Substring(1' text.Length - 2);                      return Color.FromName(colorName);                  }                  else if ((text.Length == 7 && text[0] == '#') ||                           (text.Length == 8 && (text.StartsWith("0x") || text.StartsWith("0X"))) ||                           (text.Length == 8 && (text.StartsWith("&h") || text.StartsWith("&H"))))                  {                      // Note: int.Parse will raise exception if value cannot be converted.                      return PossibleKnownColor(Color.FromArgb(unchecked((int)(0xFF000000 | (uint)IntFromString(text' culture)))));                  }              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: if (text.IndexOf(sep) == -1)              {                  // text can be '' (empty quoted string)                  if (text.Length >= 2 && (text[0] == '\'' || text[0] == '"') && text[0] == text[text.Length - 1])                  {                      // In quotes means a named value                      string colorName = text.Substring(1' text.Length - 2);                      return Color.FromName(colorName);                  }                  else if ((text.Length == 7 && text[0] == '#') ||                           (text.Length == 8 && (text.StartsWith("0x") || text.StartsWith("0X"))) ||                           (text.Length == 8 && (text.StartsWith("&h") || text.StartsWith("&H"))))                  {                      // Note: int.Parse will raise exception if value cannot be converted.                      return PossibleKnownColor(Color.FromArgb(unchecked((int)(0xFF000000 | (uint)IntFromString(text' culture)))));                  }              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: if (text.IndexOf(sep) == -1)              {                  // text can be '' (empty quoted string)                  if (text.Length >= 2 && (text[0] == '\'' || text[0] == '"') && text[0] == text[text.Length - 1])                  {                      // In quotes means a named value                      string colorName = text.Substring(1' text.Length - 2);                      return Color.FromName(colorName);                  }                  else if ((text.Length == 7 && text[0] == '#') ||                           (text.Length == 8 && (text.StartsWith("0x") || text.StartsWith("0X"))) ||                           (text.Length == 8 && (text.StartsWith("&h") || text.StartsWith("&H"))))                  {                      // Note: int.Parse will raise exception if value cannot be converted.                      return PossibleKnownColor(Color.FromArgb(unchecked((int)(0xFF000000 | (uint)IntFromString(text' culture)))));                  }              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: if (text.IndexOf(sep) == -1)              {                  // text can be '' (empty quoted string)                  if (text.Length >= 2 && (text[0] == '\'' || text[0] == '"') && text[0] == text[text.Length - 1])                  {                      // In quotes means a named value                      string colorName = text.Substring(1' text.Length - 2);                      return Color.FromName(colorName);                  }                  else if ((text.Length == 7 && text[0] == '#') ||                           (text.Length == 8 && (text.StartsWith("0x") || text.StartsWith("0X"))) ||                           (text.Length == 8 && (text.StartsWith("&h") || text.StartsWith("&H"))))                  {                      // Note: int.Parse will raise exception if value cannot be converted.                      return PossibleKnownColor(Color.FromArgb(unchecked((int)(0xFF000000 | (uint)IntFromString(text' culture)))));                  }              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: switch (values.Length)              {                  case 1:                      return PossibleKnownColor(Color.FromArgb(values[0]));                    case 3:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]));                    case 4:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]' values[3]));              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: switch (values.Length)              {                  case 1:                      return PossibleKnownColor(Color.FromArgb(values[0]));                    case 3:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]));                    case 4:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]' values[3]));              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: switch (values.Length)              {                  case 1:                      return PossibleKnownColor(Color.FromArgb(values[0]));                    case 3:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]));                    case 4:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]' values[3]));              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: switch (values.Length)              {                  case 1:                      return PossibleKnownColor(Color.FromArgb(values[0]));                    case 3:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]));                    case 4:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]' values[3]));              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following statement contains a magic number: switch (values.Length)              {                  case 1:                      return PossibleKnownColor(Color.FromArgb(values[0]));                    case 3:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]));                    case 4:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]' values[3]));              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,IntFromString,The following statement contains a magic number: try              {                  if (text[0] == '#')                  {                      return IntFromString(text.Substring(1)' 16);                  }                  else if (text.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                           || text.StartsWith("&h"' StringComparison.OrdinalIgnoreCase))                  {                      return IntFromString(text.Substring(2)' 16);                  }                  else                  {                      Debug.Assert(culture != null);                      NumberFormatInfo formatInfo = (NumberFormatInfo)culture.GetFormat(typeof(NumberFormatInfo));                      return IntFromString(text' formatInfo);                  }              }              catch (Exception e)              {                  throw new Exception(SR.Format(SR.ConvertInvalidPrimitive' text' typeof(int).Name)' e);              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,IntFromString,The following statement contains a magic number: try              {                  if (text[0] == '#')                  {                      return IntFromString(text.Substring(1)' 16);                  }                  else if (text.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                           || text.StartsWith("&h"' StringComparison.OrdinalIgnoreCase))                  {                      return IntFromString(text.Substring(2)' 16);                  }                  else                  {                      Debug.Assert(culture != null);                      NumberFormatInfo formatInfo = (NumberFormatInfo)culture.GetFormat(typeof(NumberFormatInfo));                      return IntFromString(text' formatInfo);                  }              }              catch (Exception e)              {                  throw new Exception(SR.Format(SR.ConvertInvalidPrimitive' text' typeof(int).Name)' e);              }
Magic Number,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,IntFromString,The following statement contains a magic number: try              {                  if (text[0] == '#')                  {                      return IntFromString(text.Substring(1)' 16);                  }                  else if (text.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                           || text.StartsWith("&h"' StringComparison.OrdinalIgnoreCase))                  {                      return IntFromString(text.Substring(2)' 16);                  }                  else                  {                      Debug.Assert(culture != null);                      NumberFormatInfo formatInfo = (NumberFormatInfo)culture.GetFormat(typeof(NumberFormatInfo));                      return IntFromString(text' formatInfo);                  }              }              catch (Exception e)              {                  throw new Exception(SR.Format(SR.ConvertInvalidPrimitive' text' typeof(int).Name)' e);              }
Magic Number,System.Drawing,ColorConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\ColorConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Color)              {                  if (destinationType == typeof(string))                  {                      Color c = (Color)value;                        if (c == Color.Empty)                      {                          return string.Empty;                      }                      else                      {                          // If this is a known color' then Color can provide its own                          // name.  Otherwise' we fabricate an ARGB value for it.                          //                          if (ColorTable.IsKnownNamedColor(c.Name))                          {                              return c.Name;                          }                          else if (c.IsNamedColor)                          {                              return "'" + c.Name + "'";                          }                          else                          {                              if (culture == null)                              {                                  culture = CultureInfo.CurrentCulture;                              }                              string sep = culture.TextInfo.ListSeparator + " ";                              TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                              string[] args;                              int nArg = 0;                                if (c.A < 255)                              {                                  args = new string[4];                                  args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.A);                              }                              else                              {                                  args = new string[3];                              }                                // Note: ConvertToString will raise exception if value cannot be converted.                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.R);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.G);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.B);                                // Now slam all of these together with the fantastic Join                              // method.                              //                              return string.Join(sep' args);                          }                      }                  }                    if (destinationType == typeof(InstanceDescriptor))                  {                      MemberInfo member = null;                      object[] args = null;                        Color c = (Color)value;                        if (c.IsEmpty)                      {                          member = typeof(Color).GetField("Empty");                      }                      else if (ColorTable.IsKnownNamedColor(c.Name))                      {                          member = typeof(Color).GetProperty(c.Name);                      }                      else if (c.A != 255)                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.A' c.R' c.G' c.B };                      }                      else if (c.IsNamedColor)                      {                          member = typeof(Color).GetMethod("FromName"' new Type[] { typeof(string) });                          args = new object[] { c.Name };                      }                      else                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.R' c.G' c.B };                      }                        Debug.Assert(member != null' "Could not convert color to member.  Did someone change method name / signature and not update Colorconverter?");                      if (member != null)                      {                          return new InstanceDescriptor(member' args);                      }                      else                      {                          return null;                      }                  }              }
Magic Number,System.Drawing,ColorConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\ColorConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Color)              {                  if (destinationType == typeof(string))                  {                      Color c = (Color)value;                        if (c == Color.Empty)                      {                          return string.Empty;                      }                      else                      {                          // If this is a known color' then Color can provide its own                          // name.  Otherwise' we fabricate an ARGB value for it.                          //                          if (ColorTable.IsKnownNamedColor(c.Name))                          {                              return c.Name;                          }                          else if (c.IsNamedColor)                          {                              return "'" + c.Name + "'";                          }                          else                          {                              if (culture == null)                              {                                  culture = CultureInfo.CurrentCulture;                              }                              string sep = culture.TextInfo.ListSeparator + " ";                              TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                              string[] args;                              int nArg = 0;                                if (c.A < 255)                              {                                  args = new string[4];                                  args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.A);                              }                              else                              {                                  args = new string[3];                              }                                // Note: ConvertToString will raise exception if value cannot be converted.                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.R);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.G);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.B);                                // Now slam all of these together with the fantastic Join                              // method.                              //                              return string.Join(sep' args);                          }                      }                  }                    if (destinationType == typeof(InstanceDescriptor))                  {                      MemberInfo member = null;                      object[] args = null;                        Color c = (Color)value;                        if (c.IsEmpty)                      {                          member = typeof(Color).GetField("Empty");                      }                      else if (ColorTable.IsKnownNamedColor(c.Name))                      {                          member = typeof(Color).GetProperty(c.Name);                      }                      else if (c.A != 255)                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.A' c.R' c.G' c.B };                      }                      else if (c.IsNamedColor)                      {                          member = typeof(Color).GetMethod("FromName"' new Type[] { typeof(string) });                          args = new object[] { c.Name };                      }                      else                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.R' c.G' c.B };                      }                        Debug.Assert(member != null' "Could not convert color to member.  Did someone change method name / signature and not update Colorconverter?");                      if (member != null)                      {                          return new InstanceDescriptor(member' args);                      }                      else                      {                          return null;                      }                  }              }
Magic Number,System.Drawing,ColorConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\ColorConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Color)              {                  if (destinationType == typeof(string))                  {                      Color c = (Color)value;                        if (c == Color.Empty)                      {                          return string.Empty;                      }                      else                      {                          // If this is a known color' then Color can provide its own                          // name.  Otherwise' we fabricate an ARGB value for it.                          //                          if (ColorTable.IsKnownNamedColor(c.Name))                          {                              return c.Name;                          }                          else if (c.IsNamedColor)                          {                              return "'" + c.Name + "'";                          }                          else                          {                              if (culture == null)                              {                                  culture = CultureInfo.CurrentCulture;                              }                              string sep = culture.TextInfo.ListSeparator + " ";                              TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                              string[] args;                              int nArg = 0;                                if (c.A < 255)                              {                                  args = new string[4];                                  args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.A);                              }                              else                              {                                  args = new string[3];                              }                                // Note: ConvertToString will raise exception if value cannot be converted.                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.R);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.G);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.B);                                // Now slam all of these together with the fantastic Join                              // method.                              //                              return string.Join(sep' args);                          }                      }                  }                    if (destinationType == typeof(InstanceDescriptor))                  {                      MemberInfo member = null;                      object[] args = null;                        Color c = (Color)value;                        if (c.IsEmpty)                      {                          member = typeof(Color).GetField("Empty");                      }                      else if (ColorTable.IsKnownNamedColor(c.Name))                      {                          member = typeof(Color).GetProperty(c.Name);                      }                      else if (c.A != 255)                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.A' c.R' c.G' c.B };                      }                      else if (c.IsNamedColor)                      {                          member = typeof(Color).GetMethod("FromName"' new Type[] { typeof(string) });                          args = new object[] { c.Name };                      }                      else                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.R' c.G' c.B };                      }                        Debug.Assert(member != null' "Could not convert color to member.  Did someone change method name / signature and not update Colorconverter?");                      if (member != null)                      {                          return new InstanceDescriptor(member' args);                      }                      else                      {                          return null;                      }                  }              }
Magic Number,System.Drawing,ColorConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\ColorConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Color)              {                  if (destinationType == typeof(string))                  {                      Color c = (Color)value;                        if (c == Color.Empty)                      {                          return string.Empty;                      }                      else                      {                          // If this is a known color' then Color can provide its own                          // name.  Otherwise' we fabricate an ARGB value for it.                          //                          if (ColorTable.IsKnownNamedColor(c.Name))                          {                              return c.Name;                          }                          else if (c.IsNamedColor)                          {                              return "'" + c.Name + "'";                          }                          else                          {                              if (culture == null)                              {                                  culture = CultureInfo.CurrentCulture;                              }                              string sep = culture.TextInfo.ListSeparator + " ";                              TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                              string[] args;                              int nArg = 0;                                if (c.A < 255)                              {                                  args = new string[4];                                  args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.A);                              }                              else                              {                                  args = new string[3];                              }                                // Note: ConvertToString will raise exception if value cannot be converted.                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.R);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.G);                              args[nArg++] = intConverter.ConvertToString(context' culture' (object)c.B);                                // Now slam all of these together with the fantastic Join                              // method.                              //                              return string.Join(sep' args);                          }                      }                  }                    if (destinationType == typeof(InstanceDescriptor))                  {                      MemberInfo member = null;                      object[] args = null;                        Color c = (Color)value;                        if (c.IsEmpty)                      {                          member = typeof(Color).GetField("Empty");                      }                      else if (ColorTable.IsKnownNamedColor(c.Name))                      {                          member = typeof(Color).GetProperty(c.Name);                      }                      else if (c.A != 255)                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.A' c.R' c.G' c.B };                      }                      else if (c.IsNamedColor)                      {                          member = typeof(Color).GetMethod("FromName"' new Type[] { typeof(string) });                          args = new object[] { c.Name };                      }                      else                      {                          member = typeof(Color).GetMethod("FromArgb"' new Type[] { typeof(int)' typeof(int)' typeof(int) });                          args = new object[] { c.R' c.G' c.B };                      }                        Debug.Assert(member != null' "Could not convert color to member.  Did someone change method name / signature and not update Colorconverter?");                      if (member != null)                      {                          return new InstanceDescriptor(member' args);                      }                      else                      {                          return null;                      }                  }              }
Magic Number,System.Drawing,PointConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\PointConverter.cs,ConvertFrom,The following statement contains a magic number: if (strValue != null)              {                  string text = strValue.Trim();                    if (text.Length == 0)                  {                      return null;                  }                  else                  {                      // Parse 2 integer values.                      //                      if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      char sep = culture.TextInfo.ListSeparator[0];                      string[] tokens = text.Split(sep);                      int[] values = new int[tokens.Length];                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      for (int i = 0; i < values.Length; i++)                      {                          // Note: ConvertFromString will raise exception if value cannot be converted.                          values[i] = (int)intConverter.ConvertFromString(context' culture' tokens[i]);                      }                        if (values.Length == 2)                      {                          return new Point(values[0]' values[1]);                      }                      else                      {                          throw new ArgumentException(SR.Format(SR.TextParseFailedFormat'                                                                    text'                                                                    "x' y"));                      }                  }              }
Magic Number,System.Drawing,PointConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\PointConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Point)              {                  if (destinationType == typeof(string))                  {                      Point pt = (Point)value;                        if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      string sep = culture.TextInfo.ListSeparator + " ";                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      string[] args = new string[2];                      int nArg = 0;                        // Note: ConvertToString will raise exception if value cannot be converted.                      args[nArg++] = intConverter.ConvertToString(context' culture' pt.X);                      args[nArg++] = intConverter.ConvertToString(context' culture' pt.Y);                        return string.Join(sep' args);                  }                                    if (destinationType == typeof(InstanceDescriptor))                  {                      Point pt = (Point)value;                        ConstructorInfo ctor = typeof(Point).GetConstructor(new Type[] { typeof(int)' typeof(int) });                      if (ctor != null)                      {                          return new InstanceDescriptor(ctor' new object[] { pt.X' pt.Y });                      }                  }              }
Magic Number,System.Drawing,RectangleConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\RectangleConverter.cs,ConvertFrom,The following statement contains a magic number: if (strValue != null)              {                  string text = strValue.Trim();                    if (text.Length == 0)                  {                      return null;                  }                  else                  {                      // Parse 4 integer values.                      //                      if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      char sep = culture.TextInfo.ListSeparator[0];                      string[] tokens = text.Split(new char[] { sep });                      int[] values = new int[tokens.Length];                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      for (int i = 0; i < values.Length; i++)                      {                          // Note: ConvertFromString will raise exception if value cannot be converted.                          values[i] = (int)intConverter.ConvertFromString(context' culture' tokens[i]);                      }                        if (values.Length == 4)                      {                          return new Rectangle(values[0]' values[1]' values[2]' values[3]);                      }                      else                      {                          throw new ArgumentException(SR.Format(SR.TextParseFailedFormat'                                                                    "text"'                                                                    text'                                                                    "x' y' width' height"));                      }                  }              }
Magic Number,System.Drawing,RectangleConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\RectangleConverter.cs,ConvertFrom,The following statement contains a magic number: if (strValue != null)              {                  string text = strValue.Trim();                    if (text.Length == 0)                  {                      return null;                  }                  else                  {                      // Parse 4 integer values.                      //                      if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      char sep = culture.TextInfo.ListSeparator[0];                      string[] tokens = text.Split(new char[] { sep });                      int[] values = new int[tokens.Length];                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      for (int i = 0; i < values.Length; i++)                      {                          // Note: ConvertFromString will raise exception if value cannot be converted.                          values[i] = (int)intConverter.ConvertFromString(context' culture' tokens[i]);                      }                        if (values.Length == 4)                      {                          return new Rectangle(values[0]' values[1]' values[2]' values[3]);                      }                      else                      {                          throw new ArgumentException(SR.Format(SR.TextParseFailedFormat'                                                                    "text"'                                                                    text'                                                                    "x' y' width' height"));                      }                  }              }
Magic Number,System.Drawing,RectangleConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\RectangleConverter.cs,ConvertFrom,The following statement contains a magic number: if (strValue != null)              {                  string text = strValue.Trim();                    if (text.Length == 0)                  {                      return null;                  }                  else                  {                      // Parse 4 integer values.                      //                      if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      char sep = culture.TextInfo.ListSeparator[0];                      string[] tokens = text.Split(new char[] { sep });                      int[] values = new int[tokens.Length];                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      for (int i = 0; i < values.Length; i++)                      {                          // Note: ConvertFromString will raise exception if value cannot be converted.                          values[i] = (int)intConverter.ConvertFromString(context' culture' tokens[i]);                      }                        if (values.Length == 4)                      {                          return new Rectangle(values[0]' values[1]' values[2]' values[3]);                      }                      else                      {                          throw new ArgumentException(SR.Format(SR.TextParseFailedFormat'                                                                    "text"'                                                                    text'                                                                    "x' y' width' height"));                      }                  }              }
Magic Number,System.Drawing,RectangleConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\RectangleConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Rectangle)              {                  if (destinationType == typeof(string))                  {                      Rectangle rect = (Rectangle)value;                        if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      string sep = culture.TextInfo.ListSeparator + " ";                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      string[] args = new string[4];                      int nArg = 0;                        // Note: ConvertToString will raise exception if value cannot be converted.                      args[nArg++] = intConverter.ConvertToString(context' culture' rect.X);                      args[nArg++] = intConverter.ConvertToString(context' culture' rect.Y);                      args[nArg++] = intConverter.ConvertToString(context' culture' rect.Width);                      args[nArg++] = intConverter.ConvertToString(context' culture' rect.Height);                        return string.Join(sep' args);                  }                                    if (destinationType == typeof(InstanceDescriptor))                  {                      Rectangle rect = (Rectangle)value;                      ConstructorInfo ctor = typeof(Rectangle).GetConstructor(new Type[] {                          typeof(int)' typeof(int)' typeof(int)' typeof(int)});                        if (ctor != null)                      {                          return new InstanceDescriptor(ctor' new object[] {                              rect.X' rect.Y' rect.Width' rect.Height});                      }                  }              }
Magic Number,System.Drawing,SizeConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\SizeConverter.cs,ConvertFrom,The following statement contains a magic number: if (strValue != null)              {                  string text = strValue.Trim();                    if (text.Length == 0)                  {                      return null;                  }                  else                  {                      // Parse 2 integer values.                      //                      if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      char sep = culture.TextInfo.ListSeparator[0];                      string[] tokens = text.Split(sep);                      int[] values = new int[tokens.Length];                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      for (int i = 0; i < values.Length; i++)                      {                          // Note: ConvertFromString will raise exception if value cannot be converted.                          values[i] = (int)intConverter.ConvertFromString(context' culture' tokens[i]);                      }                        if (values.Length == 2)                      {                          return new Size(values[0]' values[1]);                      }                      else                      {                          throw new ArgumentException(SR.Format(SR.TextParseFailedFormat'                                                                    text'                                                                    "Width'Height"));                      }                  }              }
Magic Number,System.Drawing,SizeConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\SizeConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Size)              {                  if (destinationType == typeof(string))                  {                      Size size = (Size)value;                        if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      string sep = culture.TextInfo.ListSeparator + " ";                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      string[] args = new string[2];                      int nArg = 0;                        // Note: ConvertToString will raise exception if value cannot be converted.                      args[nArg++] = intConverter.ConvertToString(context' culture' size.Width);                      args[nArg++] = intConverter.ConvertToString(context' culture' size.Height);                        return string.Join(sep' args);                  }                                    if (destinationType == typeof(InstanceDescriptor))                  {                      Size size = (Size)value;                        ConstructorInfo ctor = typeof(Size).GetConstructor(new Type[] { typeof(int)' typeof(int) });                      if (ctor != null)                      {                          return new InstanceDescriptor(ctor' new object[] { size.Width' size.Height });                      }                  }              }
Magic Number,System.Drawing,SizeFConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\SizeFConverter.cs,ConvertFrom,The following statement contains a magic number: if (strValue != null)              {                  string text = strValue.Trim();                    if (text.Length == 0)                  {                      return null;                  }                  else                  {                      // Parse 2 integer values.                      //                      if (culture == null)                      {                          culture = CultureInfo.CurrentCulture;                      }                      char sep = culture.TextInfo.ListSeparator[0];                      string[] tokens = text.Split(sep);                      float[] values = new float[tokens.Length];                      TypeConverter floatConverter = TypeDescriptor.GetConverter(typeof(float));                      for (int i = 0; i < values.Length; i++)                      {                          values[i] = (float)floatConverter.ConvertFromString(context' culture' tokens[i]);                      }                        if (values.Length == 2)                      {                          return new SizeF(values[0]' values[1]);                      }                      else                      {                          throw new ArgumentException(SR.Format(SR.TextParseFailedFormat' text' "Width'Height"));                      }                  }              }
Magic Number,System.Drawing,SizeFConverter,C:\selectedRepos\dotnet_corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\SizeFConverter.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string) && value is SizeF)              {                  SizeF size = (SizeF)value;                    if (culture == null)                  {                      culture = CultureInfo.CurrentCulture;                  }                  string sep = culture.TextInfo.ListSeparator + " ";                  TypeConverter floatConverter = TypeDescriptor.GetConverter(typeof(float));                  string[] args = new string[2];                  int nArg = 0;                    args[nArg++] = floatConverter.ConvertToString(context' culture' size.Width);                  args[nArg++] = floatConverter.ConvertToString(context' culture' size.Height);                    return string.Join(sep' args);              }
Missing Default,System.Drawing,ColorConverterCommon,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\ColorConverterCommon.cs,ConvertFromString,The following switch statement is missing a default case: switch (values.Length)              {                  case 1:                      return PossibleKnownColor(Color.FromArgb(values[0]));                    case 3:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]));                    case 4:                      return PossibleKnownColor(Color.FromArgb(values[0]' values[1]' values[2]' values[3]));              }
