Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,The method has 107 lines of code.
Long Method,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetDigestTokenForCredential,The method has 115 lines of code.
Long Method,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The method has 218 lines of code.
Long Method,System.Net.Http,DiagnosticsHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\DiagnosticsHandler.cs,SendAsync,The method has 109 lines of code.
Long Method,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The method has 193 lines of code.
Complex Method,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetExpressionLength,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,Cyclomatic complexity of the method is 13
Complex Method,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetDigestTokenForCredential,Cyclomatic complexity of the method is 14
Complex Method,System.Net.Http,DigestResponse,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Digest.cs,GetNextValue,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,Cyclomatic complexity of the method is 18
Complex Method,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseHeaderNameValue,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http,HttpConnectionPool,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionPool.cs,CleanCacheAndDisposeIfUnused,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Headers,AuthenticationHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\AuthenticationHeaderValue.cs,GetAuthenticationLength,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,TrySetOptionalTokenList,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Headers,ContentRangeHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentRangeHeaderValue.cs,GetContentRangeLength,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http.Headers,ContentRangeHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,AreEqualCollections,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http.Headers,HttpHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaders.cs,AddHeaders,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Headers,HttpHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaders.cs,TryParseAndAddRawHeaderValue,Cyclomatic complexity of the method is 12
Complex Method,System.Net.Http.Headers,HttpHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaders.cs,ParseAndAddValue,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Http.Headers,RangeItemHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\RangeItemHeaderValue.cs,GetRangeItemLength,Cyclomatic complexity of the method is 10
Complex Method,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Format,Cyclomatic complexity of the method is 8
Long Parameter List,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,AssertEncodingConstants,The method has 5 parameters. Parameters: encoding' codePage' preambleLength' first2Bytes' preamble
Long Parameter List,System.Net.Http,LimitMemoryStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http,LimitArrayPoolWriteStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' asyncCallback' asyncState
Long Parameter List,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetExpressionLength,The method has 7 parameters. Parameters: input' startIndex' openChar' closeChar' supportsNesting' nestedCount' length
Long Parameter List,System.Net.Http,ContentReadStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,BeginRead,The method has 5 parameters. Parameters: array' offset' count' asyncCallback' asyncState
Long Parameter List,System.Net.Http,StreamToStreamCopy,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\StreamToStreamCopy.cs,CopyAsync,The method has 5 parameters. Parameters: source' destination' bufferSize' disposeSource' cancellationToken
Long Parameter List,System.Net.Http,DelegatingStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\DelegatingStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http,DelegatingStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\DelegatingStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,AuthenticateAndRedirectHandler,The method has 5 parameters. Parameters: preAuthenticate' credentials' allowRedirect' maxAutomaticRedirections' innerHandler
Long Parameter List,System.Net.Http,StringBuilderExtensions,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Digest.cs,AppendKeyValue,The method has 5 parameters. Parameters: sb' key' value' includeQuotes' includeComma
Long Parameter List,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,HttpConnection,The method has 6 parameters. Parameters: pool' key' requestIdnHost' stream' transportContext' usingProxy
Long Parameter List,System.Net.Http,HttpContentStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpContentStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http,HttpContentStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpContentStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http.Headers,ContentRangeHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentRangeHeaderValue.cs,TryGetRangeLength,The method has 5 parameters. Parameters: input' current' fromLength' toStartIndex' toLength
Long Parameter List,System.Net.Http.Headers,ContentRangeHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,The method has 9 parameters. Parameters: input' unit' fromStartIndex' fromLength' toStartIndex' toLength' lengthStartIndex' lengthLength' parsedValue
Long Parameter List,System.Net.Http.Headers,HttpHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaders.cs,ReadStoreValues,The method has 5 parameters. Parameters: values' storeValue' parser' exclude' currentIndex
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,HandlerMessage,The method has 5 parameters. Parameters: handlerId' workerId' requestId' memberName' message
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The method has 6 parameters. Parameters: eventId' arg1' arg2' arg3' arg4' arg5
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Enter,The method has 5 parameters. Parameters: thisOrContextObject' arg0' arg1' arg2' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,DumpBuffer,The method has 5 parameters. Parameters: thisOrContextObject' buffer' offset' count' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.IO,ReadOnlyMemoryStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\ReadOnlyMemoryStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,ReadQuotedString,The method has 5 parameters. Parameters: data' offset' builder' doesntRequireQuotes' permitUnicodeInDisplayName
Long Identifier,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,,The length of the parameter UTF32OrUnicodePreambleFirst2Bytes is 33.
Long Identifier,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,,The length of the parameter BigEndianUnicodePreambleLength is 30.
Long Identifier,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,,The length of the parameter BigEndianUnicodePreambleFirst2Bytes is 35.
Long Identifier,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,GetSupportedAuthScheme,The length of the parameter basicAuthenticationHeaderValue is 30.
Long Identifier,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,,The length of the parameter s_contentLength0NewlineAsciiBytes is 33.
Long Identifier,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,,The length of the parameter s_spaceHttp10NewlineAsciiBytes is 30.
Long Identifier,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,,The length of the parameter s_spaceHttp11NewlineAsciiBytes is 30.
Long Identifier,System.Net.Http,ConnectionWaiter,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionPool.cs,,The length of the parameter _cancellationTokenRegistration is 30.
Long Identifier,System.Net.Http,HttpConnectionSettings,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionSettings.cs,,The length of the parameter _serverCertificateCustomValidationCallback is 42.
Long Identifier,System.Net.Http,HttpConnectionSettings,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionSettings.cs,,The length of the parameter _checkCertificateRevocationList is 31.
Long Identifier,System.Net.Http.Headers,GenericHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\GenericHeaderParser.cs,,The length of the parameter SingleValueNameValueWithParametersParser is 40.
Long Identifier,System.Net.Http.Headers,GenericHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\GenericHeaderParser.cs,,The length of the parameter MultipleValueNameValueWithParametersParser is 42.
Long Identifier,System.Net.Http.Headers,GenericHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\GenericHeaderParser.cs,,The length of the parameter SingleValueAuthenticationParser is 31.
Long Identifier,System.Net.Http.Headers,GenericHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\GenericHeaderParser.cs,,The length of the parameter MultipleValueAuthenticationParser is 33.
Long Identifier,System.Net.Http.Headers,GenericHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\GenericHeaderParser.cs,,The length of the parameter SingleValueStringWithQualityParser is 34.
Long Identifier,System.Net.Http.Headers,GenericHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\GenericHeaderParser.cs,,The length of the parameter MultipleValueStringWithQualityParser is 36.
Long Identifier,System.Net.Http.Headers,TransferCodingHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\TransferCodingHeaderParser.cs,,The length of the parameter MultipleValueWithQualityParser is 30.
Long Statement,System.Net.Http,HttpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs,GetStringAsyncCore,The length of the statement  "                    using (var buffer = new HttpContent.LimitArrayPoolWriteStream(_maxResponseContentBufferSize' (int)headers.ContentLength.GetValueOrDefault())) " is 141.
Long Statement,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,CreateMemoryStream,The length of the statement  "                    error = new HttpRequestException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_content_buffersize_exceeded' maxBufferSize)); " is 155.
Long Statement,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,TryDetectEncoding,The length of the statement  "                        if (dataLength >= UTF32PreambleLength && data[offset + 2] == UTF32PreambleByte2 && data[offset + 3] == UTF32PreambleByte3) " is 122.
Long Statement,System.Net.Http,HttpResponseMessage,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpResponseMessage.cs,EnsureSuccessStatusCode,The length of the statement  "                throw new HttpRequestException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_message_not_success_statuscode' (int)_statusCode' " is 157.
Long Statement,System.Net.Http,MultipartContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,ValidateBoundary,The length of the statement  "                throw new ArgumentException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' boundary)' nameof(boundary)); " is 157.
Long Statement,System.Net.Http,MultipartContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,ValidateBoundary,The length of the statement  "                    throw new ArgumentException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' boundary)' nameof(boundary)); " is 157.
Long Statement,System.Net.Http,StreamToStreamCopy,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\StreamToStreamCopy.cs,DisposeSourceWhenCompleteAsync,The length of the statement  "                    source' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.DenyChildAttach' TaskScheduler.Default); " is 143.
Long Statement,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,The length of the statement  "                        await AuthenticationHelper.TrySetDigestAuthToken(request' currentCredential' _digestResponse' HttpKnownHeaderNames.Authorization).ConfigureAwait(false); " is 152.
Long Statement,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,The length of the statement  "                                if (await AuthenticationHelper.TrySetDigestAuthToken(request' currentCredential' _digestResponse' HttpKnownHeaderNames.Authorization).ConfigureAwait(false)) " is 156.
Long Statement,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,The length of the statement  "                                                    await AuthenticationHelper.TrySetDigestAuthToken(request' currentCredential' _digestResponse' HttpKnownHeaderNames.Authorization).ConfigureAwait(false)) " is 152.
Long Statement,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,The length of the statement  "                    (HttpUtilities.IsSupportedNonSecureScheme(request.RequestUri.Scheme) && HttpUtilities.IsSupportedScheme(location.Scheme)) || " is 124.
Long Statement,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,The length of the statement  "                    (HttpUtilities.IsSupportedSecureScheme(request.RequestUri.Scheme) && HttpUtilities.IsSupportedSecureScheme(location.Scheme)); " is 125.
Long Statement,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetDigestTokenForCredential,The length of the statement  "                string content = request.Content == null ? string.Empty : await request.Content.ReadAsStringAsync().ConfigureAwait(false); " is 122.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                        _sendRequestContentTask = SendRequestContentWithExpect100ContinueAsync(request' allowExpect100ToContinue.Task' stream' expect100Timer); " is 135.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                var response = new HttpResponseMessage() { RequestMessage = request' Content = new HttpConnectionContent(CancellationToken.None) }; " is 131.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                        (request.Content.Headers.ContentLength == null || request.Content.Headers.ContentLength.GetValueOrDefault() > Expect100ErrorSendThreshold)) " is 139.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                        // If we already sent a header detailing the size of the payload' if we then don't send that payload' the server may wait " is 121.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                        // for it and assume that the next request on the connection is actually this request's payload.  Thus we mark the connection " is 125.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                        // to be closed.  However' we may have also lost a race condition with the Expect: 100-continue timeout' so if it turns out " is 123.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                        // we've already started sending the payload (we weren't able to cancel it)' then we don't need to force close the connection. " is 126.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The length of the statement  "                        if (!allowExpect100ToContinue.Task.Result) // if Result is true' the timeout already expired and we started sending content " is 123.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,WriteBytesSlowAsync,The length of the statement  "                Debug.Assert(_writeOffset <= _writeBuffer.Length' $"Expected {nameof(_writeOffset)} to be <= {_writeBuffer.Length}' got {_writeOffset}"); " is 137.
Long Statement,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,FillAsync,The length of the statement  "                ValueTask<int> vt = _stream.ReadAsync(new Memory<byte>(_readBuffer' _readLength' _readBuffer.Length - _readLength)' cancellationToken); " is 135.
Long Statement,System.Net.Http,ChunkedEncodingWriteStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingWriteStream.cs,WriteChunkAsync,The length of the statement  "                        await _connection.WriteByteAsync((byte)(digit < 10 ? '0' + digit : 'A' + digit - 10)' RequestCancellationToken).ConfigureAwait(false); " is 134.
Long Statement,System.Net.Http,DecompressedContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\DecompressionHandler.cs,CreateContentReadStreamAsync,The length of the statement  "                Stream originalStream = _originalContent.TryReadAsStream() ?? await _originalContent.ReadAsStreamAsync().ConfigureAwait(false); " is 127.
Long Statement,System.Net.Http,HttpConnectionHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionHandler.cs,EstablishSslConnection,The length of the statement  "                        return _settings._serverCertificateCustomValidationCallback(request' certificate as X509Certificate2' chain' sslPolicyErrors); " is 126.
Long Statement,System.Net.Http,HttpConnectionHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionHandler.cs,EstablishSslConnection,The length of the statement  "                    CertificateRevocationCheckMode = _settings._checkCertificateRevocationList ? X509RevocationMode.Online : X509RevocationMode.NoCheck' " is 132.
Long Statement,System.Net.Http,HttpConnectionPool,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionPool.cs,DecrementConnectionCount,The length of the statement  "                    Debug.Assert(waiter.Task.Status == TaskStatus.WaitingForActivation' $"Expected {waiter.Task.Status} == {nameof(TaskStatus.WaitingForActivation)}"); " is 147.
Long Statement,System.Net.Http,HttpProxyConnectionHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpProxyConnectionHandler.cs,SendWithProxyAsync,The length of the statement  "                            if (await AuthenticationHelper.TrySetDigestAuthToken(request' credential' digestResponse' HttpKnownHeaderNames.ProxyAuthorization).ConfigureAwait(false)) " is 153.
Long Statement,System.Net.Http,HttpProxyConnectionHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpProxyConnectionHandler.cs,SendWithProxyAsync,The length of the statement  "                                                await AuthenticationHelper.TrySetDigestAuthToken(request' credential' digestResponse' HttpKnownHeaderNames.ProxyAuthorization).ConfigureAwait(false)) " is 149.
Long Statement,System.Net.Http,HttpProxyConnectionHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpProxyConnectionHandler.cs,GetOrCreateConnection,The length of the statement  "                Stream stream = await ConnectHelper.ConnectAsync(state.proxyUri.IdnHost' state.proxyUri.Port' ct).ConfigureAwait(false); " is 120.
Long Statement,System.Net.Http,ManagedHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ManagedHandler.cs,SetupHandlerChain,The length of the statement  "                handler = new AuthenticateAndRedirectHandler(_settings._preAuthenticate' _settings._credentials' _settings._allowAutoRedirect' _settings._maxAutomaticRedirections' handler); " is 173.
Long Statement,System.Net.Http,DiagnosticsHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\DiagnosticsHandler.cs,SendAsync,The length of the statement  "                    s_diagnosticListener.Write(DiagnosticsHandlerLoggingStrings.ExceptionEventName' new { Exception = ex' Request = request }); " is 123.
Long Statement,System.Net.Http.Headers,ByteArrayHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ByteArrayHeaderParser.cs,TryParseValue,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(this' SR.Format(SR.net_http_parser_invalid_base64_string' base64String' e.Message)); " is 135.
Long Statement,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,GetQuality,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' SR.Format(SR.net_http_log_headers_invalid_quality' qualityParameter.Value)); " is 133.
Long Statement,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,CheckValidToken,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' value)); " is 134.
Long Statement,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,CheckValidComment,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' value)); " is 134.
Long Statement,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,CheckValidQuotedString,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' value)); " is 134.
Long Statement,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,IsValidEmailAddress,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' SR.Format(SR.net_http_log_headers_wrong_email_format' value' e.Message)); " is 130.
Long Statement,System.Net.Http.Headers,HttpHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaderParser.cs,ParseValue,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' " is 125.
Long Statement,System.Net.Http.Headers,HttpHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaders.cs,GetEnumerator,The length of the statement  "                ((IEnumerable<KeyValuePair<string' IEnumerable<string>>>)Array.Empty<KeyValuePair<string' IEnumerable<string>>>()).GetEnumerator(); " is 131.
Long Statement,System.Net.Http.Headers,HttpHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaders.cs,ParseAndAddValue,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_single_value_header' descriptor.Name)); " is 150.
Long Statement,System.Net.Http.Headers,MediaTypeHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\MediaTypeHeaderValue.cs,CheckMediaTypeFormat,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' mediaType)); " is 138.
Long Statement,System.Net.Http.Headers,NameValueHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\NameValueHeaderValue.cs,CheckValueFormat,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' value)); " is 134.
Long Statement,System.Net.Http.Headers,ProductInfoHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ProductInfoHeaderValue.cs,Parse,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' input.Substring(index))); " is 151.
Long Statement,System.Net.Http.Headers,UriHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\UriHeaderParser.cs,DecodeUtf8FromString,The length of the statement  "                    System.Text.Encoding decoder = new System.Text.UTF8Encoding(encoderShouldEmitUTF8Identifier: true' throwOnInvalidBytes: true); " is 126.
Long Statement,System.Net.Http.Headers,ViaHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ViaHeaderValue.cs,CheckReceivedBy,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' receivedBy)); " is 139.
Long Statement,System.Net.Http.Headers,WarningHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\WarningHeaderValue.cs,CheckAgent,The length of the statement  "                throw new FormatException(string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_headers_invalid_value' agent)); " is 134.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Enter,The length of the statement  "            if (IsEnabled) Log.Enter(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 134.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Exit,The length of the statement  "            if (IsEnabled) Log.Exit(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Info,The length of the statement  "            if (IsEnabled) Log.Info(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,DumpBuffer,The length of the statement  "                    Fail(thisOrContextObject' $"Invalid {nameof(DumpBuffer)} Args. Length={buffer.Length}' Offset={offset}' Count={count}"' memberName); " is 132.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is ValueType)' $"Should not be passing value type {arg?.GetType()} to logging without IsEnabled check"); " is 123.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is FormattableString)' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 124.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,DebugValidateArg,The length of the statement  "            Debug.Assert(IsEnabled || arg == null' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 121.
Long Statement,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInAtoms,The length of the statement  "            // atext = ALPHA / DIGIT / "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "/" / "=" / "?" / "^" / "_" / "`" / "{" / "|" / "}" / "~" " is 138.
Complex Conditional,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,BufferHasPrefix,The conditional expression  "prefix == null || byteArray == null || prefix.Length > buffer.Count || prefix.Length == 0"  is complex.
Complex Conditional,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetHostLength,The conditional expression  "(c == ' ') || (c == '\t') || (c == '\r') || (c == ''')"  is complex.
Complex Conditional,System.Net.Http,MultipartContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,ValidateBoundary,The conditional expression  "('0' <= ch && ch <= '9') || // Digit.                      ('a' <= ch && ch <= 'z') || // alpha.                      ('A' <= ch && ch <= 'Z') || // ALPHA.                      (AllowedMarks.IndexOf(ch) >= 0)"  is complex.
Complex Conditional,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,RequestRequiresForceGet,The conditional expression  "statusCode == HttpStatusCode.Moved ||                  statusCode == HttpStatusCode.Found ||                  statusCode == HttpStatusCode.SeeOther ||                  statusCode == HttpStatusCode.MultipleChoices"  is complex.
Complex Conditional,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetDigestTokenForCredential,The conditional expression  "algorithm != Sha256 && algorithm != Md5 && algorithm != Sha256Sess && algorithm != MD5Sess"  is complex.
Complex Conditional,System.Net.Http,DigestResponse,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Digest.cs,GetNextValue,The conditional expression  "(quotedValue && *temp != '"') || (!quotedValue && *temp != ''' && *temp != '\0')"  is complex.
Complex Conditional,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The conditional expression  "request.Content != null &&                      (!request.HasHeaders || request.Headers.TransferEncodingChunked != true) &&                      request.Content.Headers.ContentLength == null"  is complex.
Complex Conditional,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The conditional expression  "line.Length < 14 || // "HTTP/1.1 123\r\n" with optional phrase before the crlf                  line[0] != 'H' ||                  line[1] != 'T' ||                  line[2] != 'T' ||                  line[3] != 'P' ||                  line[4] != '/' ||                  line[8] != ' '"  is complex.
Complex Conditional,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The conditional expression  "!IsDigit(majorVersion) || line[6] != (byte)'.' || !IsDigit(minorVersion) ||                  !IsDigit(status1) || !IsDigit(status2) || !IsDigit(status3)"  is complex.
Complex Conditional,System.Net.Http.Headers,BaseHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\BaseHeaderParser.cs,TryParseValue,The conditional expression  "(separatorFound && !SupportsMultipleValues) || (!separatorFound && (current < value.Length))"  is complex.
Complex Conditional,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,Equals,The conditional expression  "(_noCache != other._noCache) || (_noStore != other._noStore) || (_maxAge != other._maxAge) ||                  (_sharedMaxAge != other._sharedMaxAge) || (_maxStale != other._maxStale) ||                  (_maxStaleLimit != other._maxStaleLimit) || (_minFresh != other._minFresh) ||                  (_noTransform != other._noTransform) || (_onlyIfCached != other._onlyIfCached) ||                  (_publicField != other._publicField) || (_privateField != other._privateField) ||                  (_mustRevalidate != other._mustRevalidate) || (_proxyRevalidate != other._proxyRevalidate)"  is complex.
Complex Conditional,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The conditional expression  "parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\"" || parts[2].ToLowerInvariant() != "b""  is complex.
Complex Conditional,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,IsInputEncoded5987,The conditional expression  "!HttpRuleParser.IsTokenChar(c) || c == '*' || c == '\'' || c == '%'"  is complex.
Complex Conditional,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,AreEqualCollections,The conditional expression  "((comparer == null) && xItem.Equals(yItem)) ||                              ((comparer != null) && comparer.Equals(xItem' yItem))"  is complex.
Complex Conditional,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt32,The conditional expression  "(uint)digit > 9 || // invalid digit                      tmpResult > int.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == int.MaxValue / 10 && digit > 7)"  is complex.
Complex Conditional,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt64,The conditional expression  "(uint)digit > 9 || // invalid digit                      tmpResult > long.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == long.MaxValue / 10 && digit > 7)"  is complex.
Complex Conditional,System.Net.Http.Headers,RangeConditionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\RangeConditionHeaderValue.cs,GetRangeConditionLength,The conditional expression  "(firstChar == '\"') || (((firstChar == 'w') || (firstChar == 'W')) && (secondChar == '/'))"  is complex.
Complex Conditional,System.Net.Mail,MailAddressParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailAddressParser.cs,ParseLocalPart,The conditional expression  "index >= 0 &&                          !(                              MailBnfHelper.IsAllowedWhiteSpace(data[index]) // < local@domain >                              || data[index] == MailBnfHelper.EndComment // <(comment)local@domain>                              || (expectAngleBracket && data[index] == MailBnfHelper.StartAngleBracket) // <local@domain>                              || (expectMultipleAddresses && data[index] == MailBnfHelper.Comma) // local@dom'local@dom                                                                                                 // Note: The following condition is more lax than the RFC.  This is done so we could support                                                                                                  // a common invalid formats as shown below.                              || data[index] == MailBnfHelper.Quote // "display"local@domain                          )"  is complex.
Complex Conditional,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,ReadQuotedString,The conditional expression  "data[offset] == '=' &&                      data.Length > offset + 3 &&                      data[offset + 1] == '\r' &&                      data[offset + 2] == '\n' &&                      (data[offset + 3] == ' ' || data[offset + 3] == '\t')"  is complex.
Virtual Method Call from Constructor,System.Net.Http,DecompressedContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\DecompressionHandler.cs,DecompressedContent,The constructor "DecompressedContent" calls a virtual method "AddHeaders".
Empty Catch Block,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ReturnConnectionToPoolCore,The method has an empty catch block.
Empty Catch Block,System.Net.Http,HttpProxyConnectionHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpProxyConnectionHandler.cs,SendAsync,The method has an empty catch block.
Empty Catch Block,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The method has an empty catch block.
Empty Catch Block,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The method has an empty catch block.
Empty Catch Block,System.Net.Http.Headers,UriHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\UriHeaderParser.cs,DecodeUtf8FromString,The method has an empty catch block.
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,AssertEncodingConstants,The following statement contains a magic number: Debug.Assert(actualPreamble.Length >= 2);
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,AssertEncodingConstants,The following statement contains a magic number: int actualFirst2Bytes = actualPreamble[0] << 8 | actualPreamble[1];
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,GetPreambleLength,The following statement contains a magic number: switch (encoding.CodePage)              {                  case UTF8CodePage:                      return (dataLength >= UTF8PreambleLength                          && data[offset + 0] == UTF8PreambleByte0                          && data[offset + 1] == UTF8PreambleByte1                          && data[offset + 2] == UTF8PreambleByte2) ? UTF8PreambleLength : 0;  #if !uap                  // UTF32 not supported on Phone                  case UTF32CodePage:                      return (dataLength >= UTF32PreambleLength                          && data[offset + 0] == UTF32PreambleByte0                          && data[offset + 1] == UTF32PreambleByte1                          && data[offset + 2] == UTF32PreambleByte2                          && data[offset + 3] == UTF32PreambleByte3) ? UTF32PreambleLength : 0;  #endif                  case UnicodeCodePage:                      return (dataLength >= UnicodePreambleLength                          && data[offset + 0] == UnicodePreambleByte0                          && data[offset + 1] == UnicodePreambleByte1) ? UnicodePreambleLength : 0;                    case BigEndianUnicodeCodePage:                      return (dataLength >= BigEndianUnicodePreambleLength                          && data[offset + 0] == BigEndianUnicodePreambleByte0                          && data[offset + 1] == BigEndianUnicodePreambleByte1) ? BigEndianUnicodePreambleLength : 0;                    default:                      byte[] preamble = encoding.GetPreamble();                      return BufferHasPrefix(buffer' preamble) ? preamble.Length : 0;              }
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,GetPreambleLength,The following statement contains a magic number: switch (encoding.CodePage)              {                  case UTF8CodePage:                      return (dataLength >= UTF8PreambleLength                          && data[offset + 0] == UTF8PreambleByte0                          && data[offset + 1] == UTF8PreambleByte1                          && data[offset + 2] == UTF8PreambleByte2) ? UTF8PreambleLength : 0;  #if !uap                  // UTF32 not supported on Phone                  case UTF32CodePage:                      return (dataLength >= UTF32PreambleLength                          && data[offset + 0] == UTF32PreambleByte0                          && data[offset + 1] == UTF32PreambleByte1                          && data[offset + 2] == UTF32PreambleByte2                          && data[offset + 3] == UTF32PreambleByte3) ? UTF32PreambleLength : 0;  #endif                  case UnicodeCodePage:                      return (dataLength >= UnicodePreambleLength                          && data[offset + 0] == UnicodePreambleByte0                          && data[offset + 1] == UnicodePreambleByte1) ? UnicodePreambleLength : 0;                    case BigEndianUnicodeCodePage:                      return (dataLength >= BigEndianUnicodePreambleLength                          && data[offset + 0] == BigEndianUnicodePreambleByte0                          && data[offset + 1] == BigEndianUnicodePreambleByte1) ? BigEndianUnicodePreambleLength : 0;                    default:                      byte[] preamble = encoding.GetPreamble();                      return BufferHasPrefix(buffer' preamble) ? preamble.Length : 0;              }
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,GetPreambleLength,The following statement contains a magic number: switch (encoding.CodePage)              {                  case UTF8CodePage:                      return (dataLength >= UTF8PreambleLength                          && data[offset + 0] == UTF8PreambleByte0                          && data[offset + 1] == UTF8PreambleByte1                          && data[offset + 2] == UTF8PreambleByte2) ? UTF8PreambleLength : 0;  #if !uap                  // UTF32 not supported on Phone                  case UTF32CodePage:                      return (dataLength >= UTF32PreambleLength                          && data[offset + 0] == UTF32PreambleByte0                          && data[offset + 1] == UTF32PreambleByte1                          && data[offset + 2] == UTF32PreambleByte2                          && data[offset + 3] == UTF32PreambleByte3) ? UTF32PreambleLength : 0;  #endif                  case UnicodeCodePage:                      return (dataLength >= UnicodePreambleLength                          && data[offset + 0] == UnicodePreambleByte0                          && data[offset + 1] == UnicodePreambleByte1) ? UnicodePreambleLength : 0;                    case BigEndianUnicodeCodePage:                      return (dataLength >= BigEndianUnicodePreambleLength                          && data[offset + 0] == BigEndianUnicodePreambleByte0                          && data[offset + 1] == BigEndianUnicodePreambleByte1) ? BigEndianUnicodePreambleLength : 0;                    default:                      byte[] preamble = encoding.GetPreamble();                      return BufferHasPrefix(buffer' preamble) ? preamble.Length : 0;              }
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,TryDetectEncoding,The following statement contains a magic number: if (dataLength >= 2)              {                  int first2Bytes = data[offset + 0] << 8 | data[offset + 1];                    switch (first2Bytes)                  {                      case UTF8PreambleFirst2Bytes:                          if (dataLength >= UTF8PreambleLength && data[offset + 2] == UTF8PreambleByte2)                          {                              encoding = Encoding.UTF8;                              preambleLength = UTF8PreambleLength;                              return true;                          }                          break;                        case UTF32OrUnicodePreambleFirst2Bytes:  #if !uap                          // UTF32 not supported on Phone                          if (dataLength >= UTF32PreambleLength && data[offset + 2] == UTF32PreambleByte2 && data[offset + 3] == UTF32PreambleByte3)                          {                              encoding = Encoding.UTF32;                              preambleLength = UTF32PreambleLength;                          }                          else  #endif                          {                              encoding = Encoding.Unicode;                              preambleLength = UnicodePreambleLength;                          }                          return true;                        case BigEndianUnicodePreambleFirst2Bytes:                          encoding = Encoding.BigEndianUnicode;                          preambleLength = BigEndianUnicodePreambleLength;                          return true;                  }              }
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,TryDetectEncoding,The following statement contains a magic number: if (dataLength >= 2)              {                  int first2Bytes = data[offset + 0] << 8 | data[offset + 1];                    switch (first2Bytes)                  {                      case UTF8PreambleFirst2Bytes:                          if (dataLength >= UTF8PreambleLength && data[offset + 2] == UTF8PreambleByte2)                          {                              encoding = Encoding.UTF8;                              preambleLength = UTF8PreambleLength;                              return true;                          }                          break;                        case UTF32OrUnicodePreambleFirst2Bytes:  #if !uap                          // UTF32 not supported on Phone                          if (dataLength >= UTF32PreambleLength && data[offset + 2] == UTF32PreambleByte2 && data[offset + 3] == UTF32PreambleByte3)                          {                              encoding = Encoding.UTF32;                              preambleLength = UTF32PreambleLength;                          }                          else  #endif                          {                              encoding = Encoding.Unicode;                              preambleLength = UnicodePreambleLength;                          }                          return true;                        case BigEndianUnicodePreambleFirst2Bytes:                          encoding = Encoding.BigEndianUnicode;                          preambleLength = BigEndianUnicodePreambleLength;                          return true;                  }              }
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,TryDetectEncoding,The following statement contains a magic number: if (dataLength >= 2)              {                  int first2Bytes = data[offset + 0] << 8 | data[offset + 1];                    switch (first2Bytes)                  {                      case UTF8PreambleFirst2Bytes:                          if (dataLength >= UTF8PreambleLength && data[offset + 2] == UTF8PreambleByte2)                          {                              encoding = Encoding.UTF8;                              preambleLength = UTF8PreambleLength;                              return true;                          }                          break;                        case UTF32OrUnicodePreambleFirst2Bytes:  #if !uap                          // UTF32 not supported on Phone                          if (dataLength >= UTF32PreambleLength && data[offset + 2] == UTF32PreambleByte2 && data[offset + 3] == UTF32PreambleByte3)                          {                              encoding = Encoding.UTF32;                              preambleLength = UTF32PreambleLength;                          }                          else  #endif                          {                              encoding = Encoding.Unicode;                              preambleLength = UnicodePreambleLength;                          }                          return true;                        case BigEndianUnicodePreambleFirst2Bytes:                          encoding = Encoding.BigEndianUnicode;                          preambleLength = BigEndianUnicodePreambleLength;                          return true;                  }              }
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,TryDetectEncoding,The following statement contains a magic number: if (dataLength >= 2)              {                  int first2Bytes = data[offset + 0] << 8 | data[offset + 1];                    switch (first2Bytes)                  {                      case UTF8PreambleFirst2Bytes:                          if (dataLength >= UTF8PreambleLength && data[offset + 2] == UTF8PreambleByte2)                          {                              encoding = Encoding.UTF8;                              preambleLength = UTF8PreambleLength;                              return true;                          }                          break;                        case UTF32OrUnicodePreambleFirst2Bytes:  #if !uap                          // UTF32 not supported on Phone                          if (dataLength >= UTF32PreambleLength && data[offset + 2] == UTF32PreambleByte2 && data[offset + 3] == UTF32PreambleByte3)                          {                              encoding = Encoding.UTF32;                              preambleLength = UTF32PreambleLength;                          }                          else  #endif                          {                              encoding = Encoding.Unicode;                              preambleLength = UnicodePreambleLength;                          }                          return true;                        case BigEndianUnicodePreambleFirst2Bytes:                          encoding = Encoding.BigEndianUnicode;                          preambleLength = BigEndianUnicodePreambleLength;                          return true;                  }              }
Magic Number,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,TryDetectEncoding,The following statement contains a magic number: if (dataLength >= 2)              {                  int first2Bytes = data[offset + 0] << 8 | data[offset + 1];                    switch (first2Bytes)                  {                      case UTF8PreambleFirst2Bytes:                          if (dataLength >= UTF8PreambleLength && data[offset + 2] == UTF8PreambleByte2)                          {                              encoding = Encoding.UTF8;                              preambleLength = UTF8PreambleLength;                              return true;                          }                          break;                        case UTF32OrUnicodePreambleFirst2Bytes:  #if !uap                          // UTF32 not supported on Phone                          if (dataLength >= UTF32PreambleLength && data[offset + 2] == UTF32PreambleByte2 && data[offset + 3] == UTF32PreambleByte3)                          {                              encoding = Encoding.UTF32;                              preambleLength = UTF32PreambleLength;                          }                          else  #endif                          {                              encoding = Encoding.Unicode;                              preambleLength = UnicodePreambleLength;                          }                          return true;                        case BigEndianUnicodePreambleFirst2Bytes:                          encoding = Encoding.BigEndianUnicode;                          preambleLength = BigEndianUnicodePreambleLength;                          return true;                  }              }
Magic Number,System.Net.Http,LimitArrayPoolWriteStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,Grow,The following statement contains a magic number: uint twiceLength = 2 * (uint)currentBuffer.Length;
Magic Number,System.Net.Http,HttpResponseMessage,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpResponseMessage.cs,HttpResponseMessage,The following statement contains a magic number: if (((int)statusCode < 0) || ((int)statusCode > 999))              {                  throw new ArgumentOutOfRangeException(nameof(statusCode));              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: var tokenChars = new bool[128];
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: for (int i = 33; i < 127; i++) // Skip Space (32) & DEL (127).              {                  tokenChars[i] = true;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: for (int i = 33; i < 127; i++) // Skip Space (32) & DEL (127).              {                  tokenChars[i] = true;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,IsTokenChar,The following statement contains a magic number: if (character > 127)              {                  return false;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: while (current < input.Length)              {                  c = input[current];                    if ((c == ' ') || (c == '\t'))                  {                      current++;                      continue;                  }                    if (c == '\r')                  {                      // If we have a #13 char' it must be followed by #10 and then at least one SP or HT.                      if ((current + 2 < input.Length) && (input[current + 1] == '\n'))                      {                          char spaceOrTab = input[current + 2];                          if ((spaceOrTab == ' ') || (spaceOrTab == '\t'))                          {                              current += 3;                              continue;                          }                      }                  }                    return current - startIndex;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: while (current < input.Length)              {                  c = input[current];                    if ((c == ' ') || (c == '\t'))                  {                      current++;                      continue;                  }                    if (c == '\r')                  {                      // If we have a #13 char' it must be followed by #10 and then at least one SP or HT.                      if ((current + 2 < input.Length) && (input[current + 1] == '\n'))                      {                          char spaceOrTab = input[current + 2];                          if ((spaceOrTab == ' ') || (spaceOrTab == '\t'))                          {                              current += 3;                              continue;                          }                      }                  }                    return current - startIndex;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: while (current < input.Length)              {                  c = input[current];                    if ((c == ' ') || (c == '\t'))                  {                      current++;                      continue;                  }                    if (c == '\r')                  {                      // If we have a #13 char' it must be followed by #10 and then at least one SP or HT.                      if ((current + 2 < input.Length) && (input[current + 1] == '\n'))                      {                          char spaceOrTab = input[current + 2];                          if ((spaceOrTab == ' ') || (spaceOrTab == '\t'))                          {                              current += 3;                              continue;                          }                      }                  }                    return current - startIndex;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: if ((startIndex + 2 > input.Length) || (input[startIndex + 1] > 127))              {                  return HttpParseResult.InvalidFormat;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: if ((startIndex + 2 > input.Length) || (input[startIndex + 1] > 127))              {                  return HttpParseResult.InvalidFormat;              }
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: length = 2;
Magic Number,System.Net.Http,HttpRuleParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpRuleParser.cs,GetExpressionLength,The following statement contains a magic number: while (current < input.Length)              {                  // Only check whether we have a quoted char' if we have at least 3 characters left to read (i.e.                  // quoted char + closing char). Otherwise the closing char may be considered part of the quoted char.                  int quotedPairLength = 0;                  if ((current + 2 < input.Length) &&                      (GetQuotedPairLength(input' current' out quotedPairLength) == HttpParseResult.Parsed))                  {                      // We ignore invalid quoted-pairs. Invalid quoted-pairs may mean that it looked like a quoted pair'                      // but we actually have a quoted-string: e.g. "\ü" ('\' followed by a char >127 - quoted-pair only                      // allows ASCII chars after '\'; qdtext allows both '\' and >127 chars).                      current = current + quotedPairLength;                      continue;                  }                    // If we support nested expressions and we find an open-char' then parse the nested expressions.                  if (supportsNesting && (input[current] == openChar))                  {                      nestedCount++;                      try                      {                          // Check if we exceeded the number of nested calls.                          if (nestedCount > maxNestedCount)                          {                              return HttpParseResult.InvalidFormat;                          }                            int nestedLength = 0;                          HttpParseResult nestedResult = GetExpressionLength(input' current' openChar' closeChar'                              supportsNesting' ref nestedCount' out nestedLength);                            switch (nestedResult)                          {                              case HttpParseResult.Parsed:                                  current += nestedLength; // Add the length of the nested expression and continue.                                  break;                                case HttpParseResult.NotParsed:                                  Debug.Assert(false' "'NotParsed' is unexpected: We started nested expression " +                                      "parsing' because we found the open-char. So either it's a valid nested " +                                      "expression or it has invalid format.");                                  break;                                case HttpParseResult.InvalidFormat:                                  // If the nested expression is invalid' we can't continue' so we fail with invalid format.                                  return HttpParseResult.InvalidFormat;                                default:                                  Debug.Assert(false' "Unknown enum result: " + nestedResult);                                  break;                          }                      }                      finally                      {                          nestedCount--;                      }                  }                    if (input[current] == closeChar)                  {                      length = current - startIndex + 1;                      return HttpParseResult.Parsed;                  }                  current++;              }
Magic Number,System.Net.Http,MultipartContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,ValidateBoundary,The following statement contains a magic number: if (boundary.Length > 70)              {                  throw new ArgumentOutOfRangeException(nameof(boundary)' boundary'                      string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_content_field_too_long' 70));              }
Magic Number,System.Net.Http,MultipartContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,ValidateBoundary,The following statement contains a magic number: if (boundary.Length > 70)              {                  throw new ArgumentOutOfRangeException(nameof(boundary)' boundary'                      string.Format(System.Globalization.CultureInfo.InvariantCulture' SR.net_http_content_field_too_long' 70));              }
Magic Number,System.Net.Http,MultipartContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,CreateContentReadStreamAsync,The following statement contains a magic number: try              {                  var streams = new Stream[2 + (_nestedContent.Count*2)];                  var scratch = new StringBuilder();                  int streamIndex = 0;                    // Start boundary.                  streams[streamIndex++] = EncodeStringToNewStream("--" + _boundary + CrLf);                    // Each nested content.                  for (int contentIndex = 0; contentIndex < _nestedContent.Count; contentIndex++)                  {                      HttpContent nestedContent = _nestedContent[contentIndex];                      streams[streamIndex++] = EncodeStringToNewStream(SerializeHeadersToString(scratch' contentIndex' nestedContent));                        Stream readStream = (await nestedContent.ReadAsStreamAsync().ConfigureAwait(false)) ?? new MemoryStream();                      if (!readStream.CanSeek)                      {                          // Seekability impacts whether HttpClientHandlers are able to rewind.  To maintain compat                          // and to allow such use cases when a nested stream isn't seekable (which should be rare)'                          // we fall back to the base behavior.  We don't dispose of the streams already obtained                          // as we don't necessarily own them yet.                          return await base.CreateContentReadStreamAsync().ConfigureAwait(false);                      }                      streams[streamIndex++] = readStream;                  }                    // Footer boundary.                  streams[streamIndex] = EncodeStringToNewStream(CrLf + "--" + _boundary + "--" + CrLf);                    return new ContentReadStream(streams);              }              catch (Exception ex)              {                  if (NetEventSource.IsEnabled) NetEventSource.Error(this' ex);                  throw;              }
Magic Number,System.Net.Http,MultipartContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\MultipartContent.cs,CreateContentReadStreamAsync,The following statement contains a magic number: try              {                  var streams = new Stream[2 + (_nestedContent.Count*2)];                  var scratch = new StringBuilder();                  int streamIndex = 0;                    // Start boundary.                  streams[streamIndex++] = EncodeStringToNewStream("--" + _boundary + CrLf);                    // Each nested content.                  for (int contentIndex = 0; contentIndex < _nestedContent.Count; contentIndex++)                  {                      HttpContent nestedContent = _nestedContent[contentIndex];                      streams[streamIndex++] = EncodeStringToNewStream(SerializeHeadersToString(scratch' contentIndex' nestedContent));                        Stream readStream = (await nestedContent.ReadAsStreamAsync().ConfigureAwait(false)) ?? new MemoryStream();                      if (!readStream.CanSeek)                      {                          // Seekability impacts whether HttpClientHandlers are able to rewind.  To maintain compat                          // and to allow such use cases when a nested stream isn't seekable (which should be rare)'                          // we fall back to the base behavior.  We don't dispose of the streams already obtained                          // as we don't necessarily own them yet.                          return await base.CreateContentReadStreamAsync().ConfigureAwait(false);                      }                      streams[streamIndex++] = readStream;                  }                    // Footer boundary.                  streams[streamIndex] = EncodeStringToNewStream(CrLf + "--" + _boundary + "--" + CrLf);                    return new ContentReadStream(streams);              }              catch (Exception ex)              {                  if (NetEventSource.IsEnabled) NetEventSource.Error(this' ex);                  throw;              }
Magic Number,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetRandomAlphaNumericString,The following statement contains a magic number: const int Length = 16;
Magic Number,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetRandomAlphaNumericString,The following statement contains a magic number: Span<byte> randomNumbers = stackalloc byte[Length * 2];
Magic Number,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetRandomAlphaNumericString,The following statement contains a magic number: for (int i = 0; i < randomNumbers.Length; )              {                  // Get a random digit 0-9' a random alphabet in a-z' or a random alphabeta in A-Z                  int rangeIndex = randomNumbers[i++] % 3;                  int value = randomNumbers[i++] % (rangeIndex == 0 ? 10 : 26);                  sb.Append((char)(s_alphaNumChooser[rangeIndex] + value));              }
Magic Number,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetRandomAlphaNumericString,The following statement contains a magic number: for (int i = 0; i < randomNumbers.Length; )              {                  // Get a random digit 0-9' a random alphabet in a-z' or a random alphabeta in A-Z                  int rangeIndex = randomNumbers[i++] % 3;                  int value = randomNumbers[i++] % (rangeIndex == 0 ? 10 : 26);                  sb.Append((char)(s_alphaNumChooser[rangeIndex] + value));              }
Magic Number,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,GetRandomAlphaNumericString,The following statement contains a magic number: for (int i = 0; i < randomNumbers.Length; )              {                  // Get a random digit 0-9' a random alphabet in a-z' or a random alphabeta in A-Z                  int rangeIndex = randomNumbers[i++] % 3;                  int value = randomNumbers[i++] % (rangeIndex == 0 ? 10 : 26);                  sb.Append((char)(s_alphaNumChooser[rangeIndex] + value));              }
Magic Number,System.Net.Http,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticationHelper.Basic.cs,ComputeHash,The following statement contains a magic number: using (HashAlgorithm hash = algorithm == Sha256 ? SHA256.Create() : (HashAlgorithm)MD5.Create())  #pragma warning restore CA5351              {                  Encoding enc = Encoding.UTF8;                  byte[] result = hash.ComputeHash(enc.GetBytes(data));                    StringBuilder sb = StringBuilderCache.Acquire(result.Length * 2);                  foreach (byte b in result)                      sb.Append(b.ToString("x2"));                    return StringBuilderCache.GetStringAndRelease(sb);              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,WriteFormattedInt32Async,The following statement contains a magic number: const int MaxFormattedInt32Length = 10;
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,WriteFormattedInt32Async,The following statement contains a magic number: if (_writeOffset <= _writeBuffer.Length - MaxFormattedInt32Length)              {                  if (value == 0)                  {                      _writeBuffer[_writeOffset++] = (byte)'0';                  }                  else                  {                      int initialOffset = _writeOffset;                      while (value > 0)                      {                          value = Math.DivRem(value' 10' out int digit);                          _writeBuffer[_writeOffset++] = (byte)('0' + digit);                      }                      Array.Reverse(_writeBuffer' initialOffset' _writeOffset - initialOffset);                  }                  return Task.CompletedTask;              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The following statement contains a magic number: try              {                  bool isHttp10 = request.Version.Major == 1 && request.Version.Minor == 0;                    // Send the request.                  if (NetEventSource.IsEnabled) Trace($"Sending request: {request}");                    // Add headers to define content transfer' if not present                  if (request.Content != null &&                      (!request.HasHeaders || request.Headers.TransferEncodingChunked != true) &&                      request.Content.Headers.ContentLength == null)                  {                      // We have content' but neither Transfer-Encoding or Content-Length is set.                      request.Headers.TransferEncodingChunked = true;                  }                    if (isHttp10 && request.HasHeaders && request.Headers.TransferEncodingChunked == true)                  {                      // HTTP 1.0 does not support chunking                      throw new NotSupportedException(SR.net_http_unsupported_chunking);                  }                    // Write request line                  await WriteStringAsync(request.Method.Method' cancellationToken).ConfigureAwait(false);                  await WriteByteAsync((byte)' '' cancellationToken).ConfigureAwait(false);                  await WriteStringAsync(                      _usingProxy ? request.RequestUri.AbsoluteUri : request.RequestUri.PathAndQuery'                      cancellationToken).ConfigureAwait(false);                    // fall-back to 1.1 for all versions other than 1.0                  await WriteBytesAsync(isHttp10 ? s_spaceHttp10NewlineAsciiBytes : s_spaceHttp11NewlineAsciiBytes'                                        cancellationToken).ConfigureAwait(false);                    // Write request headers                  if (request.HasHeaders)                  {                      await WriteHeadersAsync(request.Headers' cancellationToken).ConfigureAwait(false);                  }                    if (request.Content == null)                  {                      // Write out Content-Length: 0 header to indicate no body'                      // unless this is a method that never has a body.                      if (request.Method != HttpMethod.Get && request.Method != HttpMethod.Head)                      {                          await WriteBytesAsync(s_contentLength0NewlineAsciiBytes' cancellationToken).ConfigureAwait(false);                      }                  }                  else                  {                      // Write content headers                      await WriteHeadersAsync(request.Content.Headers' cancellationToken).ConfigureAwait(false);                  }                    // Write special additional headers.  If a host isn't in the headers list' then a Host header                  // wasn't sent' so as it's required by HTTP 1.1 spec' send one based on the Request Uri.                  if (!request.HasHeaders || request.Headers.Host == null)                  {                      await WriteHostHeaderAsync(request.RequestUri' cancellationToken).ConfigureAwait(false);                  }                    // CRLF for end of headers.                  await WriteTwoBytesAsync((byte)'\r'' (byte)'\n'' cancellationToken).ConfigureAwait(false);                    Debug.Assert(_sendRequestContentTask == null);                  if (request.Content == null)                  {                      // We have nothing more to send' so flush out any headers we haven't yet sent.                      await FlushAsync(cancellationToken).ConfigureAwait(false);                  }                  else                  {                      // Asynchronously send the body if there is one.  This can run concurrently with receiving                      // the response. The write content streams will handle ensuring appropriate flushes are done                      // to ensure the headers and content are sent.                      bool transferEncodingChunked = request.HasHeaders && request.Headers.TransferEncodingChunked == true;                      HttpContentWriteStream stream = transferEncodingChunked ? (HttpContentWriteStream)                          new ChunkedEncodingWriteStream(this' cancellationToken) :                          new ContentLengthWriteStream(this' cancellationToken);                        if (!request.HasHeaders || request.Headers.ExpectContinue != true)                      {                          // Start the copy from the request.  We do this here in case it synchronously throws                          // an exception' e.g. StreamContent throwing for non-rewindable content' and because if                          // we did it in SendRequestContentAsync' that exception would get trapped in the returned                          // task... at that point' we might get stuck waiting to receive a response from the server                          // that'll never come' as the server is still expecting us to send data.                          _sendRequestContentTask = SendRequestContentAsync(request.Content.CopyToAsync(stream' _transportContext)' stream);                      }                      else                      {                          // We're sending an Expect: 100-continue header. We need to flush headers so that the server receives                          // all of them' and we need to do so before initiating the send' as once we do that' it effectively                          // owns the right to write' and we don't want to concurrently be accessing the write buffer.                          await FlushAsync(cancellationToken).ConfigureAwait(false);                            // Create a TCS we'll use to block the request content from being sent' and create a timer that's used                          // as a fail-safe to unblock the request content if we don't hear back from the server in a timely manner.                          // Then kick off the request.  The TCS' result indicates whether content should be sent or not.                          allowExpect100ToContinue = new TaskCompletionSource<bool>();                          var expect100Timer = new Timer(                              s => ((TaskCompletionSource<bool>)s).TrySetResult(true)'                              allowExpect100ToContinue' TimeSpan.FromMilliseconds(Expect100TimeoutMilliseconds)' Timeout.InfiniteTimeSpan);                          _sendRequestContentTask = SendRequestContentWithExpect100ContinueAsync(request' allowExpect100ToContinue.Task' stream' expect100Timer);                      }                  }                    // Parse the response status line.                  var response = new HttpResponseMessage() { RequestMessage = request' Content = new HttpConnectionContent(CancellationToken.None) };                  ParseStatusLine(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)' response);                                    // If we sent an Expect: 100-continue header' handle the response accordingly.                  if (allowExpect100ToContinue != null)                  {                      if ((int)response.StatusCode >= 300 &&                          (request.Content.Headers.ContentLength == null || request.Content.Headers.ContentLength.GetValueOrDefault() > Expect100ErrorSendThreshold))                      {                          // For error final status codes' try to avoid sending the payload if its size is unknown or if it's known to be "big".                          // If we already sent a header detailing the size of the payload' if we then don't send that payload' the server may wait                          // for it and assume that the next request on the connection is actually this request's payload.  Thus we mark the connection                          // to be closed.  However' we may have also lost a race condition with the Expect: 100-continue timeout' so if it turns out                          // we've already started sending the payload (we weren't able to cancel it)' then we don't need to force close the connection.                          allowExpect100ToContinue.TrySetResult(false);                          if (!allowExpect100ToContinue.Task.Result) // if Result is true' the timeout already expired and we started sending content                          {                              _connectionClose = true;                          }                      }                      else                      {                          // For any success or informational status codes (including 100 continue)' send the payload.                          allowExpect100ToContinue.TrySetResult(true);                            // And if this was 100 continue' deal with the extra headers.                          if (response.StatusCode == HttpStatusCode.Continue)                          {                              // We got our continue header.  Read the subsequent \r\n and parse the additional status line.                              if (!LineIsEmpty(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)))                              {                                  ThrowInvalidHttpResponse();                              }                                ParseStatusLine(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)' response);                          }                      }                  }                    // Parse the response headers.                  while (true)                  {                      ArraySegment<byte> line = await ReadNextLineAsync(cancellationToken).ConfigureAwait(false);                      if (LineIsEmpty(line))                      {                          break;                      }                      ParseHeaderNameValue(line' response);                  }                    // Determine whether we need to force close the connection when the request/response has completed.                  if (response.Headers.ConnectionClose.GetValueOrDefault())                  {                      _connectionClose = true;                  }                    // Before creating the response stream' check to see if we're done sending any content'                  // and propagate any exceptions that may have occurred.  The most common case is that                  // the server won't send back response content until it's received the whole request'                  // so the majority of the time this task will be complete.                  Task sendRequestContentTask = _sendRequestContentTask;                  if (sendRequestContentTask != null && sendRequestContentTask.IsCompleted)                  {                      sendRequestContentTask.GetAwaiter().GetResult();                      _sendRequestContentTask = null;                  }                    // Create the response stream.                  HttpContentStream responseStream;                  if (request.Method == HttpMethod.Head || (int)response.StatusCode == 204 || (int)response.StatusCode == 304)                  {                      responseStream = EmptyReadStream.Instance;                      ReturnConnectionToPool();                  }                  else if (response.Content.Headers.ContentLength != null)                  {                      long contentLength = response.Content.Headers.ContentLength.GetValueOrDefault();                      if (contentLength <= 0)                      {                          responseStream = EmptyReadStream.Instance;                          ReturnConnectionToPool();                      }                      else                      {                          responseStream = new ContentLengthReadStream(this' (ulong)contentLength);                      }                  }                  else if (response.Headers.TransferEncodingChunked == true)                  {                      responseStream = new ChunkedEncodingReadStream(this);                  }                  else if (response.StatusCode == HttpStatusCode.SwitchingProtocols)                  {                      responseStream = new RawConnectionStream(this);                  }                  else                  {                      responseStream = new ConnectionCloseReadStream(this);                  }                  ((HttpConnectionContent)response.Content).SetStream(responseStream);                    if (NetEventSource.IsEnabled) Trace($"Received response: {response}");                  return response;              }              catch (Exception error)              {                  // Make sure to complete the allowExpect100ToContinue task if it exists.                  allowExpect100ToContinue?.TrySetResult(false);                    if (NetEventSource.IsEnabled) Trace($"Error sending request: {error}");                  Dispose();                    if (_pendingException != null)                  {                      // If we incurred an exception in non-linear control flow such that                      // the exception didn't bubble up here (e.g. concurrent sending of                      // the request content)' use that error instead.                      throw new HttpRequestException(SR.net_http_client_execution_error' _pendingException);                  }                    // Otherwise' propagate this exception' wrapping it if necessary to                  // match exception type expectations.                  if (error is InvalidOperationException || error is IOException)                  {                      throw new HttpRequestException(SR.net_http_client_execution_error' error);                  }                  throw;              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The following statement contains a magic number: try              {                  bool isHttp10 = request.Version.Major == 1 && request.Version.Minor == 0;                    // Send the request.                  if (NetEventSource.IsEnabled) Trace($"Sending request: {request}");                    // Add headers to define content transfer' if not present                  if (request.Content != null &&                      (!request.HasHeaders || request.Headers.TransferEncodingChunked != true) &&                      request.Content.Headers.ContentLength == null)                  {                      // We have content' but neither Transfer-Encoding or Content-Length is set.                      request.Headers.TransferEncodingChunked = true;                  }                    if (isHttp10 && request.HasHeaders && request.Headers.TransferEncodingChunked == true)                  {                      // HTTP 1.0 does not support chunking                      throw new NotSupportedException(SR.net_http_unsupported_chunking);                  }                    // Write request line                  await WriteStringAsync(request.Method.Method' cancellationToken).ConfigureAwait(false);                  await WriteByteAsync((byte)' '' cancellationToken).ConfigureAwait(false);                  await WriteStringAsync(                      _usingProxy ? request.RequestUri.AbsoluteUri : request.RequestUri.PathAndQuery'                      cancellationToken).ConfigureAwait(false);                    // fall-back to 1.1 for all versions other than 1.0                  await WriteBytesAsync(isHttp10 ? s_spaceHttp10NewlineAsciiBytes : s_spaceHttp11NewlineAsciiBytes'                                        cancellationToken).ConfigureAwait(false);                    // Write request headers                  if (request.HasHeaders)                  {                      await WriteHeadersAsync(request.Headers' cancellationToken).ConfigureAwait(false);                  }                    if (request.Content == null)                  {                      // Write out Content-Length: 0 header to indicate no body'                      // unless this is a method that never has a body.                      if (request.Method != HttpMethod.Get && request.Method != HttpMethod.Head)                      {                          await WriteBytesAsync(s_contentLength0NewlineAsciiBytes' cancellationToken).ConfigureAwait(false);                      }                  }                  else                  {                      // Write content headers                      await WriteHeadersAsync(request.Content.Headers' cancellationToken).ConfigureAwait(false);                  }                    // Write special additional headers.  If a host isn't in the headers list' then a Host header                  // wasn't sent' so as it's required by HTTP 1.1 spec' send one based on the Request Uri.                  if (!request.HasHeaders || request.Headers.Host == null)                  {                      await WriteHostHeaderAsync(request.RequestUri' cancellationToken).ConfigureAwait(false);                  }                    // CRLF for end of headers.                  await WriteTwoBytesAsync((byte)'\r'' (byte)'\n'' cancellationToken).ConfigureAwait(false);                    Debug.Assert(_sendRequestContentTask == null);                  if (request.Content == null)                  {                      // We have nothing more to send' so flush out any headers we haven't yet sent.                      await FlushAsync(cancellationToken).ConfigureAwait(false);                  }                  else                  {                      // Asynchronously send the body if there is one.  This can run concurrently with receiving                      // the response. The write content streams will handle ensuring appropriate flushes are done                      // to ensure the headers and content are sent.                      bool transferEncodingChunked = request.HasHeaders && request.Headers.TransferEncodingChunked == true;                      HttpContentWriteStream stream = transferEncodingChunked ? (HttpContentWriteStream)                          new ChunkedEncodingWriteStream(this' cancellationToken) :                          new ContentLengthWriteStream(this' cancellationToken);                        if (!request.HasHeaders || request.Headers.ExpectContinue != true)                      {                          // Start the copy from the request.  We do this here in case it synchronously throws                          // an exception' e.g. StreamContent throwing for non-rewindable content' and because if                          // we did it in SendRequestContentAsync' that exception would get trapped in the returned                          // task... at that point' we might get stuck waiting to receive a response from the server                          // that'll never come' as the server is still expecting us to send data.                          _sendRequestContentTask = SendRequestContentAsync(request.Content.CopyToAsync(stream' _transportContext)' stream);                      }                      else                      {                          // We're sending an Expect: 100-continue header. We need to flush headers so that the server receives                          // all of them' and we need to do so before initiating the send' as once we do that' it effectively                          // owns the right to write' and we don't want to concurrently be accessing the write buffer.                          await FlushAsync(cancellationToken).ConfigureAwait(false);                            // Create a TCS we'll use to block the request content from being sent' and create a timer that's used                          // as a fail-safe to unblock the request content if we don't hear back from the server in a timely manner.                          // Then kick off the request.  The TCS' result indicates whether content should be sent or not.                          allowExpect100ToContinue = new TaskCompletionSource<bool>();                          var expect100Timer = new Timer(                              s => ((TaskCompletionSource<bool>)s).TrySetResult(true)'                              allowExpect100ToContinue' TimeSpan.FromMilliseconds(Expect100TimeoutMilliseconds)' Timeout.InfiniteTimeSpan);                          _sendRequestContentTask = SendRequestContentWithExpect100ContinueAsync(request' allowExpect100ToContinue.Task' stream' expect100Timer);                      }                  }                    // Parse the response status line.                  var response = new HttpResponseMessage() { RequestMessage = request' Content = new HttpConnectionContent(CancellationToken.None) };                  ParseStatusLine(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)' response);                                    // If we sent an Expect: 100-continue header' handle the response accordingly.                  if (allowExpect100ToContinue != null)                  {                      if ((int)response.StatusCode >= 300 &&                          (request.Content.Headers.ContentLength == null || request.Content.Headers.ContentLength.GetValueOrDefault() > Expect100ErrorSendThreshold))                      {                          // For error final status codes' try to avoid sending the payload if its size is unknown or if it's known to be "big".                          // If we already sent a header detailing the size of the payload' if we then don't send that payload' the server may wait                          // for it and assume that the next request on the connection is actually this request's payload.  Thus we mark the connection                          // to be closed.  However' we may have also lost a race condition with the Expect: 100-continue timeout' so if it turns out                          // we've already started sending the payload (we weren't able to cancel it)' then we don't need to force close the connection.                          allowExpect100ToContinue.TrySetResult(false);                          if (!allowExpect100ToContinue.Task.Result) // if Result is true' the timeout already expired and we started sending content                          {                              _connectionClose = true;                          }                      }                      else                      {                          // For any success or informational status codes (including 100 continue)' send the payload.                          allowExpect100ToContinue.TrySetResult(true);                            // And if this was 100 continue' deal with the extra headers.                          if (response.StatusCode == HttpStatusCode.Continue)                          {                              // We got our continue header.  Read the subsequent \r\n and parse the additional status line.                              if (!LineIsEmpty(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)))                              {                                  ThrowInvalidHttpResponse();                              }                                ParseStatusLine(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)' response);                          }                      }                  }                    // Parse the response headers.                  while (true)                  {                      ArraySegment<byte> line = await ReadNextLineAsync(cancellationToken).ConfigureAwait(false);                      if (LineIsEmpty(line))                      {                          break;                      }                      ParseHeaderNameValue(line' response);                  }                    // Determine whether we need to force close the connection when the request/response has completed.                  if (response.Headers.ConnectionClose.GetValueOrDefault())                  {                      _connectionClose = true;                  }                    // Before creating the response stream' check to see if we're done sending any content'                  // and propagate any exceptions that may have occurred.  The most common case is that                  // the server won't send back response content until it's received the whole request'                  // so the majority of the time this task will be complete.                  Task sendRequestContentTask = _sendRequestContentTask;                  if (sendRequestContentTask != null && sendRequestContentTask.IsCompleted)                  {                      sendRequestContentTask.GetAwaiter().GetResult();                      _sendRequestContentTask = null;                  }                    // Create the response stream.                  HttpContentStream responseStream;                  if (request.Method == HttpMethod.Head || (int)response.StatusCode == 204 || (int)response.StatusCode == 304)                  {                      responseStream = EmptyReadStream.Instance;                      ReturnConnectionToPool();                  }                  else if (response.Content.Headers.ContentLength != null)                  {                      long contentLength = response.Content.Headers.ContentLength.GetValueOrDefault();                      if (contentLength <= 0)                      {                          responseStream = EmptyReadStream.Instance;                          ReturnConnectionToPool();                      }                      else                      {                          responseStream = new ContentLengthReadStream(this' (ulong)contentLength);                      }                  }                  else if (response.Headers.TransferEncodingChunked == true)                  {                      responseStream = new ChunkedEncodingReadStream(this);                  }                  else if (response.StatusCode == HttpStatusCode.SwitchingProtocols)                  {                      responseStream = new RawConnectionStream(this);                  }                  else                  {                      responseStream = new ConnectionCloseReadStream(this);                  }                  ((HttpConnectionContent)response.Content).SetStream(responseStream);                    if (NetEventSource.IsEnabled) Trace($"Received response: {response}");                  return response;              }              catch (Exception error)              {                  // Make sure to complete the allowExpect100ToContinue task if it exists.                  allowExpect100ToContinue?.TrySetResult(false);                    if (NetEventSource.IsEnabled) Trace($"Error sending request: {error}");                  Dispose();                    if (_pendingException != null)                  {                      // If we incurred an exception in non-linear control flow such that                      // the exception didn't bubble up here (e.g. concurrent sending of                      // the request content)' use that error instead.                      throw new HttpRequestException(SR.net_http_client_execution_error' _pendingException);                  }                    // Otherwise' propagate this exception' wrapping it if necessary to                  // match exception type expectations.                  if (error is InvalidOperationException || error is IOException)                  {                      throw new HttpRequestException(SR.net_http_client_execution_error' error);                  }                  throw;              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,SendAsync,The following statement contains a magic number: try              {                  bool isHttp10 = request.Version.Major == 1 && request.Version.Minor == 0;                    // Send the request.                  if (NetEventSource.IsEnabled) Trace($"Sending request: {request}");                    // Add headers to define content transfer' if not present                  if (request.Content != null &&                      (!request.HasHeaders || request.Headers.TransferEncodingChunked != true) &&                      request.Content.Headers.ContentLength == null)                  {                      // We have content' but neither Transfer-Encoding or Content-Length is set.                      request.Headers.TransferEncodingChunked = true;                  }                    if (isHttp10 && request.HasHeaders && request.Headers.TransferEncodingChunked == true)                  {                      // HTTP 1.0 does not support chunking                      throw new NotSupportedException(SR.net_http_unsupported_chunking);                  }                    // Write request line                  await WriteStringAsync(request.Method.Method' cancellationToken).ConfigureAwait(false);                  await WriteByteAsync((byte)' '' cancellationToken).ConfigureAwait(false);                  await WriteStringAsync(                      _usingProxy ? request.RequestUri.AbsoluteUri : request.RequestUri.PathAndQuery'                      cancellationToken).ConfigureAwait(false);                    // fall-back to 1.1 for all versions other than 1.0                  await WriteBytesAsync(isHttp10 ? s_spaceHttp10NewlineAsciiBytes : s_spaceHttp11NewlineAsciiBytes'                                        cancellationToken).ConfigureAwait(false);                    // Write request headers                  if (request.HasHeaders)                  {                      await WriteHeadersAsync(request.Headers' cancellationToken).ConfigureAwait(false);                  }                    if (request.Content == null)                  {                      // Write out Content-Length: 0 header to indicate no body'                      // unless this is a method that never has a body.                      if (request.Method != HttpMethod.Get && request.Method != HttpMethod.Head)                      {                          await WriteBytesAsync(s_contentLength0NewlineAsciiBytes' cancellationToken).ConfigureAwait(false);                      }                  }                  else                  {                      // Write content headers                      await WriteHeadersAsync(request.Content.Headers' cancellationToken).ConfigureAwait(false);                  }                    // Write special additional headers.  If a host isn't in the headers list' then a Host header                  // wasn't sent' so as it's required by HTTP 1.1 spec' send one based on the Request Uri.                  if (!request.HasHeaders || request.Headers.Host == null)                  {                      await WriteHostHeaderAsync(request.RequestUri' cancellationToken).ConfigureAwait(false);                  }                    // CRLF for end of headers.                  await WriteTwoBytesAsync((byte)'\r'' (byte)'\n'' cancellationToken).ConfigureAwait(false);                    Debug.Assert(_sendRequestContentTask == null);                  if (request.Content == null)                  {                      // We have nothing more to send' so flush out any headers we haven't yet sent.                      await FlushAsync(cancellationToken).ConfigureAwait(false);                  }                  else                  {                      // Asynchronously send the body if there is one.  This can run concurrently with receiving                      // the response. The write content streams will handle ensuring appropriate flushes are done                      // to ensure the headers and content are sent.                      bool transferEncodingChunked = request.HasHeaders && request.Headers.TransferEncodingChunked == true;                      HttpContentWriteStream stream = transferEncodingChunked ? (HttpContentWriteStream)                          new ChunkedEncodingWriteStream(this' cancellationToken) :                          new ContentLengthWriteStream(this' cancellationToken);                        if (!request.HasHeaders || request.Headers.ExpectContinue != true)                      {                          // Start the copy from the request.  We do this here in case it synchronously throws                          // an exception' e.g. StreamContent throwing for non-rewindable content' and because if                          // we did it in SendRequestContentAsync' that exception would get trapped in the returned                          // task... at that point' we might get stuck waiting to receive a response from the server                          // that'll never come' as the server is still expecting us to send data.                          _sendRequestContentTask = SendRequestContentAsync(request.Content.CopyToAsync(stream' _transportContext)' stream);                      }                      else                      {                          // We're sending an Expect: 100-continue header. We need to flush headers so that the server receives                          // all of them' and we need to do so before initiating the send' as once we do that' it effectively                          // owns the right to write' and we don't want to concurrently be accessing the write buffer.                          await FlushAsync(cancellationToken).ConfigureAwait(false);                            // Create a TCS we'll use to block the request content from being sent' and create a timer that's used                          // as a fail-safe to unblock the request content if we don't hear back from the server in a timely manner.                          // Then kick off the request.  The TCS' result indicates whether content should be sent or not.                          allowExpect100ToContinue = new TaskCompletionSource<bool>();                          var expect100Timer = new Timer(                              s => ((TaskCompletionSource<bool>)s).TrySetResult(true)'                              allowExpect100ToContinue' TimeSpan.FromMilliseconds(Expect100TimeoutMilliseconds)' Timeout.InfiniteTimeSpan);                          _sendRequestContentTask = SendRequestContentWithExpect100ContinueAsync(request' allowExpect100ToContinue.Task' stream' expect100Timer);                      }                  }                    // Parse the response status line.                  var response = new HttpResponseMessage() { RequestMessage = request' Content = new HttpConnectionContent(CancellationToken.None) };                  ParseStatusLine(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)' response);                                    // If we sent an Expect: 100-continue header' handle the response accordingly.                  if (allowExpect100ToContinue != null)                  {                      if ((int)response.StatusCode >= 300 &&                          (request.Content.Headers.ContentLength == null || request.Content.Headers.ContentLength.GetValueOrDefault() > Expect100ErrorSendThreshold))                      {                          // For error final status codes' try to avoid sending the payload if its size is unknown or if it's known to be "big".                          // If we already sent a header detailing the size of the payload' if we then don't send that payload' the server may wait                          // for it and assume that the next request on the connection is actually this request's payload.  Thus we mark the connection                          // to be closed.  However' we may have also lost a race condition with the Expect: 100-continue timeout' so if it turns out                          // we've already started sending the payload (we weren't able to cancel it)' then we don't need to force close the connection.                          allowExpect100ToContinue.TrySetResult(false);                          if (!allowExpect100ToContinue.Task.Result) // if Result is true' the timeout already expired and we started sending content                          {                              _connectionClose = true;                          }                      }                      else                      {                          // For any success or informational status codes (including 100 continue)' send the payload.                          allowExpect100ToContinue.TrySetResult(true);                            // And if this was 100 continue' deal with the extra headers.                          if (response.StatusCode == HttpStatusCode.Continue)                          {                              // We got our continue header.  Read the subsequent \r\n and parse the additional status line.                              if (!LineIsEmpty(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)))                              {                                  ThrowInvalidHttpResponse();                              }                                ParseStatusLine(await ReadNextLineAsync(cancellationToken).ConfigureAwait(false)' response);                          }                      }                  }                    // Parse the response headers.                  while (true)                  {                      ArraySegment<byte> line = await ReadNextLineAsync(cancellationToken).ConfigureAwait(false);                      if (LineIsEmpty(line))                      {                          break;                      }                      ParseHeaderNameValue(line' response);                  }                    // Determine whether we need to force close the connection when the request/response has completed.                  if (response.Headers.ConnectionClose.GetValueOrDefault())                  {                      _connectionClose = true;                  }                    // Before creating the response stream' check to see if we're done sending any content'                  // and propagate any exceptions that may have occurred.  The most common case is that                  // the server won't send back response content until it's received the whole request'                  // so the majority of the time this task will be complete.                  Task sendRequestContentTask = _sendRequestContentTask;                  if (sendRequestContentTask != null && sendRequestContentTask.IsCompleted)                  {                      sendRequestContentTask.GetAwaiter().GetResult();                      _sendRequestContentTask = null;                  }                    // Create the response stream.                  HttpContentStream responseStream;                  if (request.Method == HttpMethod.Head || (int)response.StatusCode == 204 || (int)response.StatusCode == 304)                  {                      responseStream = EmptyReadStream.Instance;                      ReturnConnectionToPool();                  }                  else if (response.Content.Headers.ContentLength != null)                  {                      long contentLength = response.Content.Headers.ContentLength.GetValueOrDefault();                      if (contentLength <= 0)                      {                          responseStream = EmptyReadStream.Instance;                          ReturnConnectionToPool();                      }                      else                      {                          responseStream = new ContentLengthReadStream(this' (ulong)contentLength);                      }                  }                  else if (response.Headers.TransferEncodingChunked == true)                  {                      responseStream = new ChunkedEncodingReadStream(this);                  }                  else if (response.StatusCode == HttpStatusCode.SwitchingProtocols)                  {                      responseStream = new RawConnectionStream(this);                  }                  else                  {                      responseStream = new ConnectionCloseReadStream(this);                  }                  ((HttpConnectionContent)response.Content).SetStream(responseStream);                    if (NetEventSource.IsEnabled) Trace($"Received response: {response}");                  return response;              }              catch (Exception error)              {                  // Make sure to complete the allowExpect100ToContinue task if it exists.                  allowExpect100ToContinue?.TrySetResult(false);                    if (NetEventSource.IsEnabled) Trace($"Error sending request: {error}");                  Dispose();                    if (_pendingException != null)                  {                      // If we incurred an exception in non-linear control flow such that                      // the exception didn't bubble up here (e.g. concurrent sending of                      // the request content)' use that error instead.                      throw new HttpRequestException(SR.net_http_client_execution_error' _pendingException);                  }                    // Otherwise' propagate this exception' wrapping it if necessary to                  // match exception type expectations.                  if (error is InvalidOperationException || error is IOException)                  {                      throw new HttpRequestException(SR.net_http_client_execution_error' error);                  }                  throw;              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,LineIsEmpty,The following statement contains a magic number: Debug.Assert(line.Count >= 2' "Lines should always be \r\n terminated.");
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,LineIsEmpty,The following statement contains a magic number: return line.Count == 2;
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (line.Length < 14 || // "HTTP/1.1 123\r\n" with optional phrase before the crlf                  line[0] != 'H' ||                  line[1] != 'T' ||                  line[2] != 'T' ||                  line[3] != 'P' ||                  line[4] != '/' ||                  line[8] != ' ')              {                  ThrowInvalidHttpResponse();              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (line.Length < 14 || // "HTTP/1.1 123\r\n" with optional phrase before the crlf                  line[0] != 'H' ||                  line[1] != 'T' ||                  line[2] != 'T' ||                  line[3] != 'P' ||                  line[4] != '/' ||                  line[8] != ' ')              {                  ThrowInvalidHttpResponse();              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (line.Length < 14 || // "HTTP/1.1 123\r\n" with optional phrase before the crlf                  line[0] != 'H' ||                  line[1] != 'T' ||                  line[2] != 'T' ||                  line[3] != 'P' ||                  line[4] != '/' ||                  line[8] != ' ')              {                  ThrowInvalidHttpResponse();              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (line.Length < 14 || // "HTTP/1.1 123\r\n" with optional phrase before the crlf                  line[0] != 'H' ||                  line[1] != 'T' ||                  line[2] != 'T' ||                  line[3] != 'P' ||                  line[4] != '/' ||                  line[8] != ' ')              {                  ThrowInvalidHttpResponse();              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (line.Length < 14 || // "HTTP/1.1 123\r\n" with optional phrase before the crlf                  line[0] != 'H' ||                  line[1] != 'T' ||                  line[2] != 'T' ||                  line[3] != 'P' ||                  line[4] != '/' ||                  line[8] != ' ')              {                  ThrowInvalidHttpResponse();              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: byte majorVersion = line[5]' minorVersion = line[7];
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: byte majorVersion = line[5]' minorVersion = line[7];
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: byte status1 = line[9]' status2 = line[10]' status3 = line[11];
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: byte status1 = line[9]' status2 = line[10]' status3 = line[11];
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: byte status1 = line[9]' status2 = line[10]' status3 = line[11];
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (!IsDigit(majorVersion) || line[6] != (byte)'.' || !IsDigit(minorVersion) ||                  !IsDigit(status1) || !IsDigit(status2) || !IsDigit(status3))              {                  ThrowInvalidHttpResponse();              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: response.StatusCode =                  (HttpStatusCode)(100 * (status1 - '0') + 10 * (status2 - '0') + (status3 - '0'));
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: response.StatusCode =                  (HttpStatusCode)(100 * (status1 - '0') + 10 * (status2 - '0') + (status3 - '0'));
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: byte c = line[12];
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (c == '\r')              {                  response.ReasonPhrase = string.Empty;              }              else if (c != ' ')              {                  ThrowInvalidHttpResponse();              }              else              {                  Span<byte> reasonBytes = line.Slice(13' line.Length - 13 - 2); // 2 == \r\n ending trimmed off                  string knownReasonPhrase = HttpStatusDescription.Get(response.StatusCode);                  if (knownReasonPhrase != null && EqualsOrdinal(knownReasonPhrase' reasonBytes))                  {                      response.ReasonPhrase = knownReasonPhrase;                  }                  else                  {                      unsafe                      {                          try                          {                              fixed (byte* reasonPtr = &reasonBytes.DangerousGetPinnableReference())                              {                                  response.ReasonPhrase = Encoding.ASCII.GetString(reasonPtr' reasonBytes.Length);                              }                          }                          catch (FormatException e)                          {                              ThrowInvalidHttpResponse(e);                          }                      }                  }              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (c == '\r')              {                  response.ReasonPhrase = string.Empty;              }              else if (c != ' ')              {                  ThrowInvalidHttpResponse();              }              else              {                  Span<byte> reasonBytes = line.Slice(13' line.Length - 13 - 2); // 2 == \r\n ending trimmed off                  string knownReasonPhrase = HttpStatusDescription.Get(response.StatusCode);                  if (knownReasonPhrase != null && EqualsOrdinal(knownReasonPhrase' reasonBytes))                  {                      response.ReasonPhrase = knownReasonPhrase;                  }                  else                  {                      unsafe                      {                          try                          {                              fixed (byte* reasonPtr = &reasonBytes.DangerousGetPinnableReference())                              {                                  response.ReasonPhrase = Encoding.ASCII.GetString(reasonPtr' reasonBytes.Length);                              }                          }                          catch (FormatException e)                          {                              ThrowInvalidHttpResponse(e);                          }                      }                  }              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseStatusLine,The following statement contains a magic number: if (c == '\r')              {                  response.ReasonPhrase = string.Empty;              }              else if (c != ' ')              {                  ThrowInvalidHttpResponse();              }              else              {                  Span<byte> reasonBytes = line.Slice(13' line.Length - 13 - 2); // 2 == \r\n ending trimmed off                  string knownReasonPhrase = HttpStatusDescription.Get(response.StatusCode);                  if (knownReasonPhrase != null && EqualsOrdinal(knownReasonPhrase' reasonBytes))                  {                      response.ReasonPhrase = knownReasonPhrase;                  }                  else                  {                      unsafe                      {                          try                          {                              fixed (byte* reasonPtr = &reasonBytes.DangerousGetPinnableReference())                              {                                  response.ReasonPhrase = Encoding.ASCII.GetString(reasonPtr' reasonBytes.Length);                              }                          }                          catch (FormatException e)                          {                              ThrowInvalidHttpResponse(e);                          }                      }                  }              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseHeaderNameValue,The following statement contains a magic number: string headerValue = descriptor.GetHeaderValue(line.Slice(pos' line.Length - pos - 2));
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,WriteTwoBytesAsync,The following statement contains a magic number: if (_writeOffset <= _writeBuffer.Length - 2)              {                  byte[] buffer = _writeBuffer;                  buffer[_writeOffset++] = b1;                  buffer[_writeOffset++] = b2;                  return Task.CompletedTask;              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ReadNextLineAsync,The following statement contains a magic number: while (true)              {                  int startIndex = _readOffset + searchOffset;                  int length = _readLength - startIndex;                  int crPos = Array.IndexOf(_readBuffer' (byte)'\r'' startIndex' length);                  if (crPos < 0)                  {                      // Couldn't find a \r.  Read more.                      searchOffset = length;                      await FillAsync(cancellationToken).ConfigureAwait(false);                  }                  else if (crPos + 1 >= _readLength)                  {                      // We found a \r' but we don't have enough data buffered to read the \n.                      searchOffset = length - 1;                      await FillAsync(cancellationToken).ConfigureAwait(false);                  }                  else if (_readBuffer[crPos + 1] == '\n')                  {                      // We found a \r\n.  Return the data up to and including it.                      int lineLength = crPos - _readOffset + 2;                      var result = new ArraySegment<byte>(_readBuffer' _readOffset' lineLength);                      _readOffset += lineLength;                      return result;                  }                  else                  {                      ThrowInvalidHttpResponse();                  }              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ReadCrLfAsync,The following statement contains a magic number: while (_readLength - _readOffset < 2)              {                  // We have fewer than 2 chars buffered.  Get more.                  await FillAsync(cancellationToken).ConfigureAwait(false);              }
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ReadCrLfAsync,The following statement contains a magic number: _readOffset += 2;
Magic Number,System.Net.Http,HttpConnection,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,FillAsync,The following statement contains a magic number: if (remaining == 0)              {                  // No data in the buffer.  Simply reset the offset and length to 0 to allow                  // the whole buffer to be filled.                  _readOffset = _readLength = 0;              }              else if (_readOffset > 0)              {                  // There's some data in the buffer but it's not at the beginning.  Shift it                  // down to make room for more.                  Buffer.BlockCopy(_readBuffer' _readOffset' _readBuffer' 0' remaining);                  _readOffset = 0;                  _readLength = remaining;              }              else if (remaining == _readBuffer.Length)              {                  // The whole buffer is full' but the caller is still requesting more data'                  // so increase the size of the buffer.                  Debug.Assert(_readOffset == 0);                  Debug.Assert(_readLength == _readBuffer.Length);                    byte[] newReadBuffer = new byte[_readBuffer.Length * 2];                  Buffer.BlockCopy(_readBuffer' 0' newReadBuffer' 0' remaining);                  _readBuffer = newReadBuffer;                  _readOffset = 0;                  _readLength = remaining;              }
Magic Number,System.Net.Http,ChunkedEncodingReadStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseHexSize,The following statement contains a magic number: try                  {                      for (int i = 0; i < line.Count; i++)                      {                          char c = (char)line[i];                          if ((uint)(c - '0') <= '9' - '0')                          {                              size = checked(size * 16 + ((ulong)c - '0'));                          }                          else if ((uint)(c - 'a') <= ('f' - 'a'))                          {                              size = checked(size * 16 + ((ulong)c - 'a' + 10));                          }                          else if ((uint)(c - 'A') <= ('F' - 'A'))                          {                              size = checked(size * 16 + ((ulong)c - 'A' + 10));                          }                          else                          {                              if (c == '\r' && i > 0)                              {                                  break;                              }                              throw new IOException(SR.net_http_invalid_response);                          }                      }                  }                  catch (OverflowException e)                  {                      throw new IOException(SR.net_http_invalid_response' e);                  }
Magic Number,System.Net.Http,ChunkedEncodingReadStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseHexSize,The following statement contains a magic number: try                  {                      for (int i = 0; i < line.Count; i++)                      {                          char c = (char)line[i];                          if ((uint)(c - '0') <= '9' - '0')                          {                              size = checked(size * 16 + ((ulong)c - '0'));                          }                          else if ((uint)(c - 'a') <= ('f' - 'a'))                          {                              size = checked(size * 16 + ((ulong)c - 'a' + 10));                          }                          else if ((uint)(c - 'A') <= ('F' - 'A'))                          {                              size = checked(size * 16 + ((ulong)c - 'A' + 10));                          }                          else                          {                              if (c == '\r' && i > 0)                              {                                  break;                              }                              throw new IOException(SR.net_http_invalid_response);                          }                      }                  }                  catch (OverflowException e)                  {                      throw new IOException(SR.net_http_invalid_response' e);                  }
Magic Number,System.Net.Http,ChunkedEncodingReadStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseHexSize,The following statement contains a magic number: try                  {                      for (int i = 0; i < line.Count; i++)                      {                          char c = (char)line[i];                          if ((uint)(c - '0') <= '9' - '0')                          {                              size = checked(size * 16 + ((ulong)c - '0'));                          }                          else if ((uint)(c - 'a') <= ('f' - 'a'))                          {                              size = checked(size * 16 + ((ulong)c - 'a' + 10));                          }                          else if ((uint)(c - 'A') <= ('F' - 'A'))                          {                              size = checked(size * 16 + ((ulong)c - 'A' + 10));                          }                          else                          {                              if (c == '\r' && i > 0)                              {                                  break;                              }                              throw new IOException(SR.net_http_invalid_response);                          }                      }                  }                  catch (OverflowException e)                  {                      throw new IOException(SR.net_http_invalid_response' e);                  }
Magic Number,System.Net.Http,ChunkedEncodingReadStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseHexSize,The following statement contains a magic number: try                  {                      for (int i = 0; i < line.Count; i++)                      {                          char c = (char)line[i];                          if ((uint)(c - '0') <= '9' - '0')                          {                              size = checked(size * 16 + ((ulong)c - '0'));                          }                          else if ((uint)(c - 'a') <= ('f' - 'a'))                          {                              size = checked(size * 16 + ((ulong)c - 'a' + 10));                          }                          else if ((uint)(c - 'A') <= ('F' - 'A'))                          {                              size = checked(size * 16 + ((ulong)c - 'A' + 10));                          }                          else                          {                              if (c == '\r' && i > 0)                              {                                  break;                              }                              throw new IOException(SR.net_http_invalid_response);                          }                      }                  }                  catch (OverflowException e)                  {                      throw new IOException(SR.net_http_invalid_response' e);                  }
Magic Number,System.Net.Http,ChunkedEncodingReadStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingReadStream.cs,ParseHexSize,The following statement contains a magic number: try                  {                      for (int i = 0; i < line.Count; i++)                      {                          char c = (char)line[i];                          if ((uint)(c - '0') <= '9' - '0')                          {                              size = checked(size * 16 + ((ulong)c - '0'));                          }                          else if ((uint)(c - 'a') <= ('f' - 'a'))                          {                              size = checked(size * 16 + ((ulong)c - 'a' + 10));                          }                          else if ((uint)(c - 'A') <= ('F' - 'A'))                          {                              size = checked(size * 16 + ((ulong)c - 'A' + 10));                          }                          else                          {                              if (c == '\r' && i > 0)                              {                                  break;                              }                              throw new IOException(SR.net_http_invalid_response);                          }                      }                  }                  catch (OverflowException e)                  {                      throw new IOException(SR.net_http_invalid_response' e);                  }
Magic Number,System.Net.Http,ChunkedEncodingWriteStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingWriteStream.cs,WriteChunkAsync,The following statement contains a magic number: for (int i = 7; i >= 0; i--)                  {                      int shift = i * 4;                      int mask = 0xF << shift;                      int digit = (source.Length & mask) >> shift;                      if (digitWritten || digit != 0)                      {                          await _connection.WriteByteAsync((byte)(digit < 10 ? '0' + digit : 'A' + digit - 10)' RequestCancellationToken).ConfigureAwait(false);                          digitWritten = true;                      }                  }
Magic Number,System.Net.Http,ChunkedEncodingWriteStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingWriteStream.cs,WriteChunkAsync,The following statement contains a magic number: for (int i = 7; i >= 0; i--)                  {                      int shift = i * 4;                      int mask = 0xF << shift;                      int digit = (source.Length & mask) >> shift;                      if (digitWritten || digit != 0)                      {                          await _connection.WriteByteAsync((byte)(digit < 10 ? '0' + digit : 'A' + digit - 10)' RequestCancellationToken).ConfigureAwait(false);                          digitWritten = true;                      }                  }
Magic Number,System.Net.Http,ChunkedEncodingWriteStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingWriteStream.cs,WriteChunkAsync,The following statement contains a magic number: for (int i = 7; i >= 0; i--)                  {                      int shift = i * 4;                      int mask = 0xF << shift;                      int digit = (source.Length & mask) >> shift;                      if (digitWritten || digit != 0)                      {                          await _connection.WriteByteAsync((byte)(digit < 10 ? '0' + digit : 'A' + digit - 10)' RequestCancellationToken).ConfigureAwait(false);                          digitWritten = true;                      }                  }
Magic Number,System.Net.Http,ChunkedEncodingWriteStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\ChunkedEncodingWriteStream.cs,WriteChunkAsync,The following statement contains a magic number: for (int i = 7; i >= 0; i--)                  {                      int shift = i * 4;                      int mask = 0xF << shift;                      int digit = (source.Length & mask) >> shift;                      if (digitWritten || digit != 0)                      {                          await _connection.WriteByteAsync((byte)(digit < 10 ? '0' + digit : 'A' + digit - 10)' RequestCancellationToken).ConfigureAwait(false);                          digitWritten = true;                      }                  }
Magic Number,System.Net.Http,HttpConnectionContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\HttpConnectionContent.cs,SerializeToStreamAsync,The following statement contains a magic number: using (HttpContentStream contentStream = ConsumeStream())                  {                      const int BufferSize = 8192;                      await contentStream.CopyToAsync(stream' BufferSize' _cancellationToken).ConfigureAwait(false);                  }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following statement contains a magic number: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_publicField.GetHashCode() << 5) ^ (_privateField.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_publicField.GetHashCode() << 5) ^ (_privateField.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_publicField.GetHashCode() << 5) ^ (_privateField.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_publicField.GetHashCode() << 5) ^ (_privateField.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_publicField.GetHashCode() << 5) ^ (_privateField.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_publicField.GetHashCode() << 5) ^ (_privateField.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_publicField.GetHashCode() << 5) ^ (_privateField.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.Value.GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.Value.GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.Value.GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.Value.GetHashCode() ^ 8 : 0);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.Value.GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.Value.GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.Value.GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.Value.GetHashCode() ^ 8 : 0);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.Value.GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.Value.GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.Value.GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.Value.GetHashCode() ^ 8 : 0);
Magic Number,System.Net.Http.Headers,CacheControlHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\CacheControlHeaderValue.cs,TrySetOptionalTokenList,The following statement contains a magic number: if ((valueString.Length < 3) || (valueString[0] != '\"') || (valueString[valueString.Length - 1] != '\"'))              {                  return false;              }
Magic Number,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,GetDate,The following statement contains a magic number: if (dateParameter != null)              {                  string dateString = dateParameter.Value;                  // Should have quotes' remove them.                  if (IsQuoted(dateString))                  {                      dateString = dateString.Substring(1' dateString.Length - 2);                  }                  if (HttpRuleParser.TryStringToDate(dateString' out date))                  {                      return date;                  }              }
Magic Number,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,EncodeAndQuoteMime,The following statement contains a magic number: if (IsQuoted(result))              {                  result = result.Substring(1' result.Length - 2);                  needsQuotes = true;              }
Magic Number,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (!IsQuoted(processedInput) || processedInput.Length < 10)              {                  return false;              }
Magic Number,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\"" || parts[2].ToLowerInvariant() != "b")              {                  // Not encoded.                    // This does not support multi-line encoding.                  // Only base64 encoding is supported' not quoted printable.                  return false;              }
Magic Number,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\"" || parts[2].ToLowerInvariant() != "b")              {                  // Not encoded.                    // This does not support multi-line encoding.                  // Only base64 encoding is supported' not quoted printable.                  return false;              }
Magic Number,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\"" || parts[2].ToLowerInvariant() != "b")              {                  // Not encoded.                    // This does not support multi-line encoding.                  // Only base64 encoding is supported' not quoted printable.                  return false;              }
Magic Number,System.Net.Http.Headers,ContentDispositionHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: try              {                  Encoding encoding = Encoding.GetEncoding(parts[1]);                  byte[] bytes = Convert.FromBase64String(parts[3]);                  output = encoding.GetString(bytes' 0' bytes.Length);                  return true;              }              catch (ArgumentException)              {                  // Unknown encoding or bad characters.              }              catch (FormatException)              {                  // Bad base64 decoding.              }
Magic Number,System.Net.Http.Headers,EntityTagHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\EntityTagHeaderValue.cs,GetEntityTagLength,The following statement contains a magic number: if (firstChar == '*')              {                  // We have '*' value' indicating "any" ETag.                  parsedValue = Any;                  current++;              }              else              {                  // The RFC defines 'W/' as prefix' but we'll be flexible and also accept lower-case 'w'.                  if ((firstChar == 'W') || (firstChar == 'w'))                  {                      current++;                      // We need at least 3 more chars: the '/' character followed by two quotes.                      if ((current + 2 >= input.Length) || (input[current] != '/'))                      {                          return 0;                      }                      isWeak = true;                      current++; // we have a weak-entity tag.                      current = current + HttpRuleParser.GetWhitespaceLength(input' current);                  }                    int tagStartIndex = current;                  int tagLength = 0;                  if (HttpRuleParser.GetQuotedStringLength(input' current' out tagLength) != HttpParseResult.Parsed)                  {                      return 0;                  }                    parsedValue = new EntityTagHeaderValue();                  if (tagLength == input.Length)                  {                      // Most of the time we'll have strong ETags without leading/trailing whitespace.                      Debug.Assert(startIndex == 0);                      Debug.Assert(!isWeak);                      parsedValue._tag = input;                      parsedValue._isWeak = false;                  }                  else                  {                      parsedValue._tag = input.Substring(tagStartIndex' tagLength);                      parsedValue._isWeak = isWeak;                  }                    current = current + tagLength;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,AddHexEscaped,The following statement contains a magic number: destination.Append(s_hexUpperChars[(c & 0xf0) >> 4]);
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt32,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > int.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == int.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt32,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > int.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == int.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt32,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > int.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == int.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt32,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > int.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == int.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt32,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > int.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == int.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt64,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > long.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == long.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt64,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > long.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == long.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt64,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > long.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == long.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt64,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > long.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == long.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HeaderUtilities,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HeaderUtilities.cs,TryParseInt64,The following statement contains a magic number: while (pos < endPos)              {                  char c = value[pos++];                  int digit = c - '0';                  if ((uint)digit > 9 || // invalid digit                      tmpResult > long.MaxValue / 10 || // will overflow when shifting digits                      (tmpResult == long.MaxValue / 10 && digit > 7)) // will overflow when adding in digit                  {                      result = 0;                      return false;                  }                  tmpResult = (tmpResult * 10) + digit;              }
Magic Number,System.Net.Http.Headers,HttpHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\HttpHeaders.cs,AddValueToStoreValue,The following statement contains a magic number: if (currentStoreValue == null)              {                  currentStoreValue = value;              }              else              {                  List<T> storeValues = currentStoreValue as List<T>;                    if (storeValues == null)                  {                      storeValues = new List<T>(2);                      Debug.Assert(value is T);                      storeValues.Add(currentStoreValue as T);                      currentStoreValue = storeValues;                  }                  Debug.Assert(value is T);                  storeValues.Add(value as T);              }
Magic Number,System.Net.Http.Headers,UriHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\UriHeaderParser.cs,DecodeUtf8FromString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  if (input[i] > (char)255)                  {                      return input; // This couldn't have come from the wire' someone assigned it directly.                  }                  else if (input[i] > (char)127)                  {                      possibleUtf8 = true;                      break;                  }              }
Magic Number,System.Net.Http.Headers,UriHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\UriHeaderParser.cs,DecodeUtf8FromString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  if (input[i] > (char)255)                  {                      return input; // This couldn't have come from the wire' someone assigned it directly.                  }                  else if (input[i] > (char)127)                  {                      possibleUtf8 = true;                      break;                  }              }
Magic Number,System.Net.Http.Headers,UriHeaderParser,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\UriHeaderParser.cs,DecodeUtf8FromString,The following statement contains a magic number: if (possibleUtf8)              {                  byte[] rawBytes = new byte[input.Length];                  for (int i = 0; i < input.Length; i++)                  {                      if (input[i] > (char)255)                      {                          return input; // This couldn't have come from the wire' someone assigned it directly.                      }                      rawBytes[i] = (byte)input[i];                  }                  try                  {                      // We don't want '?' replacement characters' just fail.  #if uap                      System.Text.Encoding decoder = new System.Text.UTF8Encoding(encoderShouldEmitUTF8Identifier: true' throwOnInvalidBytes: true);  #else                      System.Text.Encoding decoder = System.Text.Encoding.GetEncoding("utf-8"' System.Text.EncoderFallback.ExceptionFallback'                          System.Text.DecoderFallback.ExceptionFallback);  #endif                      return decoder.GetString(rawBytes' 0' rawBytes.Length);                  }                  catch (ArgumentException) { } // Not actually Utf-8              }
Magic Number,System.Net.Http.Headers,WarningHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\WarningHeaderValue.cs,TryReadCode,The following statement contains a magic number: if ((codeLength == 0) || (codeLength > 3))              {                  return false;              }
Magic Number,System.Net.Http.Headers,WarningHeaderValue,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\WarningHeaderValue.cs,CheckCode,The following statement contains a magic number: if ((code < 0) || (code > 999))              {                  throw new ArgumentOutOfRangeException(nameof(code));              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg4 == null) arg4 = "";                  if (arg5 == null) arg5 = "";                    fixed (char* string4Bytes = arg4)                  fixed (char* string5Bytes = arg5)                  {                      const int NumEventDatas = 5;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(&arg1);                      descrs[0].Size = sizeof(int);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        descrs[4].DataPointer = (IntPtr)string5Bytes;                      descrs[4].Size = ((arg5.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\NetEventSource.Http.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net.Mail,MailAddressParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailAddressParser.cs,ParseDisplayName,The following statement contains a magic number: if (firstNonCommentIndex >= 0 && data[firstNonCommentIndex] == MailBnfHelper.Quote)              {                  // The preceding comment was not part of the display name.  Read just the quoted string.                  index = QuotedStringFormatReader.ReadReverseQuoted(data' firstNonCommentIndex' true);                    Debug.Assert(data[index + 1] == MailBnfHelper.Quote' "Mis-aligned index: " + index);                    // Do not include the bounding quotes on the display name                  int leftIndex = index + 2;                  displayName = data.Substring(leftIndex' firstNonCommentIndex - leftIndex);                    // Skip any CFWS after the display name                  index = WhitespaceReader.ReadCfwsReverse(data' index);                    // Check for completion. We are valid if we hit the end of the data string or if the rest of the data                   // belongs to another address.                  if (index >= 0 && !(expectMultipleAddresses && data[index] == MailBnfHelper.Comma))                  {                      // If there was still data' only a comma could have been the next valid character                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[index]));                  }              }              else              {                  // The comment (if any) should be part of the display name.                  int startingIndex = index;                    // Read until the dividing comma or the end of the line.                  index = QuotedStringFormatReader.ReadReverseUnQuoted(data' index' true' expectMultipleAddresses);                    Debug.Assert(index < 0 || data[index] == MailBnfHelper.Comma' "Mis-aligned index: " + index);                    // Do not include the Comma (if any)' and because there were no bounding quotes'                   // trim extra whitespace.                  displayName = data.SubstringTrim(index + 1' startingIndex - index);              }
Magic Number,System.Net.Mail,QuotedPairReader,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\QuotedPairReader.cs,CountQuotedChars,The following statement contains a magic number: if (backslashCount % 2 == 0)              {                  return 0; // No quoted pair to skip              }              else              {                  if (!permitUnicodeEscaping && data[index] > MailBnfHelper.Ascii7bitMaxValue)                  {                      // Cannot accept quoted Unicode                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[index]));                  }                  // Skip the quoted char' and the odd number of backslashes preceding it                  return backslashCount + 1;              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInAtoms,The following statement contains a magic number: var atext = new bool[128];
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: var qtext = new bool[128];
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: for (int i = 1; i <= 9; i++) { qtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: qtext[11] = true;
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: qtext[12] = true;
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: for (int i = 14; i <= 33; i++) { qtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: for (int i = 14; i <= 33; i++) { qtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: for (int i = 35; i <= 91; i++) { qtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: for (int i = 35; i <= 91; i++) { qtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: for (int i = 93; i <= 127; i++) { qtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInQuotedStrings,The following statement contains a magic number: for (int i = 93; i <= 127; i++) { qtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: var dtext = new bool[128];
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: for (int i = 1; i <= 8; i++) { dtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: dtext[11] = true;
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: dtext[12] = true;
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: for (int i = 14; i <= 31; i++) { dtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: for (int i = 14; i <= 31; i++) { dtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: for (int i = 33; i <= 90; i++) { dtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: for (int i = 33; i <= 90; i++) { dtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: for (int i = 94; i <= 127; i++) { dtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInDomainLiterals,The following statement contains a magic number: for (int i = 94; i <= 127; i++) { dtext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInHeaderNames,The following statement contains a magic number: var ftext = new bool[128];
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInHeaderNames,The following statement contains a magic number: for (int i = 33; i <= 57; i++) { ftext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInHeaderNames,The following statement contains a magic number: for (int i = 33; i <= 57; i++) { ftext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInHeaderNames,The following statement contains a magic number: for (int i = 59; i <= 126; i++) { ftext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInHeaderNames,The following statement contains a magic number: for (int i = 59; i <= 126; i++) { ftext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInTokens,The following statement contains a magic number: var ttext = new bool[128];
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInTokens,The following statement contains a magic number: for (int i = 33; i <= 126; i++) { ttext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInTokens,The following statement contains a magic number: for (int i = 33; i <= 126; i++) { ttext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: var ctext = new bool[128];
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 1; i <= 8; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: ctext[11] = true;
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: ctext[12] = true;
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 14; i <= 31; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 14; i <= 31; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 33; i <= 39; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 33; i <= 39; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 42; i <= 91; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 42; i <= 91; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 93; i <= 127; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,CreateCharactersAllowedInComments,The following statement contains a magic number: for (int i = 93; i <= 127; i++) { ctext[i] = true; }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,SkipCFWS,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (data[offset] > 127)                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  else if (data[offset] == '\\' && comments > 0)                      offset += 2;                  else if (data[offset] == '(')                      comments++;                  else if (data[offset] == ')')                      comments--;                  else if (data[offset] != ' ' && data[offset] != '\t' && comments == 0)                      return true;                    if (comments < 0)                  {                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,SkipCFWS,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (data[offset] > 127)                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  else if (data[offset] == '\\' && comments > 0)                      offset += 2;                  else if (data[offset] == '(')                      comments++;                  else if (data[offset] == ')')                      comments--;                  else if (data[offset] != ' ' && data[offset] != '\t' && comments == 0)                      return true;                    if (comments < 0)                  {                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,ReadQuotedString,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (data[offset] == '\\')                  {                      localBuilder.Append(data' start' offset - start);                      start = ++offset;                  }                  else if (data[offset] == '"')                  {                      localBuilder.Append(data' start' offset - start);                      offset++;                      return (builder != null ? null : localBuilder.ToString());                  }                  else if (data[offset] == '=' &&                      data.Length > offset + 3 &&                      data[offset + 1] == '\r' &&                      data[offset + 2] == '\n' &&                      (data[offset + 3] == ' ' || data[offset + 3] == '\t'))                  {                      //it's a soft crlf so it's ok                      offset += 3;                  }                  else if (permitUnicodeInDisplayName)                  {                      //if data contains Unicode and Unicode is permitted' then                       //it is valid in a quoted string in a header.                      if (data[offset] <= Ascii7bitMaxValue && !Qtext[data[offset]])                          throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }                  //not permitting Unicode' in which case Unicode is a formatting error                  else if (data[offset] > Ascii7bitMaxValue || !Qtext[data[offset]])                  {                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,ReadQuotedString,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (data[offset] == '\\')                  {                      localBuilder.Append(data' start' offset - start);                      start = ++offset;                  }                  else if (data[offset] == '"')                  {                      localBuilder.Append(data' start' offset - start);                      offset++;                      return (builder != null ? null : localBuilder.ToString());                  }                  else if (data[offset] == '=' &&                      data.Length > offset + 3 &&                      data[offset + 1] == '\r' &&                      data[offset + 2] == '\n' &&                      (data[offset + 3] == ' ' || data[offset + 3] == '\t'))                  {                      //it's a soft crlf so it's ok                      offset += 3;                  }                  else if (permitUnicodeInDisplayName)                  {                      //if data contains Unicode and Unicode is permitted' then                       //it is valid in a quoted string in a header.                      if (data[offset] <= Ascii7bitMaxValue && !Qtext[data[offset]])                          throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }                  //not permitting Unicode' in which case Unicode is a formatting error                  else if (data[offset] > Ascii7bitMaxValue || !Qtext[data[offset]])                  {                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,ReadQuotedString,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (data[offset] == '\\')                  {                      localBuilder.Append(data' start' offset - start);                      start = ++offset;                  }                  else if (data[offset] == '"')                  {                      localBuilder.Append(data' start' offset - start);                      offset++;                      return (builder != null ? null : localBuilder.ToString());                  }                  else if (data[offset] == '=' &&                      data.Length > offset + 3 &&                      data[offset + 1] == '\r' &&                      data[offset + 2] == '\n' &&                      (data[offset + 3] == ' ' || data[offset + 3] == '\t'))                  {                      //it's a soft crlf so it's ok                      offset += 3;                  }                  else if (permitUnicodeInDisplayName)                  {                      //if data contains Unicode and Unicode is permitted' then                       //it is valid in a quoted string in a header.                      if (data[offset] <= Ascii7bitMaxValue && !Qtext[data[offset]])                          throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }                  //not permitting Unicode' in which case Unicode is a formatting error                  else if (data[offset] > Ascii7bitMaxValue || !Qtext[data[offset]])                  {                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,ReadQuotedString,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (data[offset] == '\\')                  {                      localBuilder.Append(data' start' offset - start);                      start = ++offset;                  }                  else if (data[offset] == '"')                  {                      localBuilder.Append(data' start' offset - start);                      offset++;                      return (builder != null ? null : localBuilder.ToString());                  }                  else if (data[offset] == '=' &&                      data.Length > offset + 3 &&                      data[offset + 1] == '\r' &&                      data[offset + 2] == '\n' &&                      (data[offset + 3] == ' ' || data[offset + 3] == '\t'))                  {                      //it's a soft crlf so it's ok                      offset += 3;                  }                  else if (permitUnicodeInDisplayName)                  {                      //if data contains Unicode and Unicode is permitted' then                       //it is valid in a quoted string in a header.                      if (data[offset] <= Ascii7bitMaxValue && !Qtext[data[offset]])                          throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }                  //not permitting Unicode' in which case Unicode is a formatting error                  else if (data[offset] > Ascii7bitMaxValue || !Qtext[data[offset]])                  {                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,ReadQuotedString,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (data[offset] == '\\')                  {                      localBuilder.Append(data' start' offset - start);                      start = ++offset;                  }                  else if (data[offset] == '"')                  {                      localBuilder.Append(data' start' offset - start);                      offset++;                      return (builder != null ? null : localBuilder.ToString());                  }                  else if (data[offset] == '=' &&                      data.Length > offset + 3 &&                      data[offset + 1] == '\r' &&                      data[offset + 2] == '\n' &&                      (data[offset + 3] == ' ' || data[offset + 3] == '\t'))                  {                      //it's a soft crlf so it's ok                      offset += 3;                  }                  else if (permitUnicodeInDisplayName)                  {                      //if data contains Unicode and Unicode is permitted' then                       //it is valid in a quoted string in a header.                      if (data[offset] <= Ascii7bitMaxValue && !Qtext[data[offset]])                          throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }                  //not permitting Unicode' in which case Unicode is a formatting error                  else if (data[offset] > Ascii7bitMaxValue || !Qtext[data[offset]])                  {                      throw new FormatException(SR.Format(SR.MailHeaderFieldInvalidCharacter' data[offset]));                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,GetDateTimeString,The following statement contains a magic number: if (value.Hour <= 9)              {                  localBuilder.Append('0');              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,GetDateTimeString,The following statement contains a magic number: if (value.Minute <= 9)              {                  localBuilder.Append('0');              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,GetDateTimeString,The following statement contains a magic number: if (value.Second <= 9)              {                  localBuilder.Append('0');              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,GetTokenOrQuotedString,The following statement contains a magic number: for (; offset < data.Length; offset++)              {                  if (CheckForUnicode(data[offset]' allowUnicode))                  {                      continue;                  }                    if (!Ttext[data[offset]] || data[offset] == ' ')                  {                      builder.Append('"');                      for (; offset < data.Length; offset++)                      {                          if (CheckForUnicode(data[offset]' allowUnicode))                          {                              continue;                          }                          else if (IsFWSAt(data' offset)) // Allow FWS == "\r\n "                          {                              // No-op' skip these three chars                              offset += 2;                          }                          else if (!Qtext[data[offset]])                          {                              builder.Append(data' start' offset - start);                              builder.Append('\\');                              start = offset;                          }                      }                      builder.Append(data' start' offset - start);                      builder.Append('"');                      return;                  }              }
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,IsFWSAt,The following statement contains a magic number: return (data[index] == MailBnfHelper.CR                      && index + 2 < data.Length                      && data[index + 1] == MailBnfHelper.LF                      && (data[index + 2] == MailBnfHelper.Space                          || data[index + 2] == MailBnfHelper.Tab));
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,IsFWSAt,The following statement contains a magic number: return (data[index] == MailBnfHelper.CR                      && index + 2 < data.Length                      && data[index + 1] == MailBnfHelper.LF                      && (data[index + 2] == MailBnfHelper.Space                          || data[index + 2] == MailBnfHelper.Tab));
Magic Number,System.Net.Mime,MailBnfHelper,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Mail\MailBnfHelper.cs,IsFWSAt,The following statement contains a magic number: return (data[index] == MailBnfHelper.CR                      && index + 2 < data.Length                      && data[index + 1] == MailBnfHelper.LF                      && (data[index + 2] == MailBnfHelper.Space                          || data[index + 2] == MailBnfHelper.Tab));
Missing Default,System.Net.Http,HttpContent,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs,TryDetectEncoding,The following switch statement is missing a default case: switch (first2Bytes)                  {                      case UTF8PreambleFirst2Bytes:                          if (dataLength >= UTF8PreambleLength && data[offset + 2] == UTF8PreambleByte2)                          {                              encoding = Encoding.UTF8;                              preambleLength = UTF8PreambleLength;                              return true;                          }                          break;                        case UTF32OrUnicodePreambleFirst2Bytes:  #if !uap                          // UTF32 not supported on Phone                          if (dataLength >= UTF32PreambleLength && data[offset + 2] == UTF32PreambleByte2 && data[offset + 3] == UTF32PreambleByte3)                          {                              encoding = Encoding.UTF32;                              preambleLength = UTF32PreambleLength;                          }                          else  #endif                          {                              encoding = Encoding.Unicode;                              preambleLength = UnicodePreambleLength;                          }                          return true;                        case BigEndianUnicodePreambleFirst2Bytes:                          encoding = Encoding.BigEndianUnicode;                          preambleLength = BigEndianUnicodePreambleLength;                          return true;                  }
Missing Default,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,SendAsync,The following switch statement is missing a default case: switch (selectedAuth.Scheme)                          {                              case AuthenticationHelper.Digest:                                  // Update digest response with new parameter from WWWAuthenticate                                  _digestResponse = new AuthenticationHelper.DigestResponse(selectedAuth.Parameter);                                  if (await AuthenticationHelper.TrySetDigestAuthToken(request' currentCredential' _digestResponse' HttpKnownHeaderNames.Authorization).ConfigureAwait(false))                                  {                                      response.Dispose();                                      response = await _innerHandler.SendAsync(request' cancellationToken).ConfigureAwait(false);                                        // Retry in case of nonce timeout in server.                                      if (response.StatusCode == HttpStatusCode.Unauthorized)                                      {                                          foreach (AuthenticationHeaderValue ahv in response.Headers.WwwAuthenticate)                                          {                                              if (ahv.Scheme == AuthenticationHelper.Digest)                                              {                                                  _digestResponse = new AuthenticationHelper.DigestResponse(ahv.Parameter);                                                  if (AuthenticationHelper.IsServerNonceStale(_digestResponse) &&                                                      await AuthenticationHelper.TrySetDigestAuthToken(request' currentCredential' _digestResponse' HttpKnownHeaderNames.Authorization).ConfigureAwait(false))                                                  {                                                      response.Dispose();                                                      response = await _innerHandler.SendAsync(request' cancellationToken).ConfigureAwait(false);                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  break;                                case AuthenticationHelper.Basic:                                  if (AuthenticationHelper.TrySetBasicAuthToken(request' currentCredential))                                  {                                      response.Dispose();                                      response = await _innerHandler.SendAsync(request' cancellationToken).ConfigureAwait(false);                                  }                                  break;                          }
Missing Default,System.Net.Http,AuthenticateAndRedirectHandler,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Managed\AuthenticateAndRedirectHandler.cs,RequestNeedsRedirect,The following switch statement is missing a default case: switch (response.StatusCode)              {                  case HttpStatusCode.Moved:                  case HttpStatusCode.Found:                  case HttpStatusCode.SeeOther:                  case HttpStatusCode.TemporaryRedirect:                      needRedirect = true;                      break;                    case HttpStatusCode.MultipleChoices:                      needRedirect = response.Headers.Location != null; // Don't redirect if no Location specified                      break;              }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (length)              {                  case 2:                      return TE; // TE                    case 3:                      switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }                      break;                    case 4:                      switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }                      break;                    case 5:                      switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }                      break;                    case 6:                      switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }                      break;                    case 7:                      switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }                      break;                    case 8:                      switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }                      break;                    case 10:                      switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }                      break;                    case 11:                      switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }                      break;                    case 12:                      switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }                      break;                    case 13:                      switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }                      break;                    case 14:                      switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }                      break;                    case 15:                      switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }                      break;                    case 16:                      switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }                      break;                    case 17:                      switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }                      break;                    case 18:                      switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }                      break;                    case 19:                      switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }                      break;                    case 20:                      return SecWebSocketAccept; // Sec-WebSocket-Accept                    case 21:                      return SecWebSocketVersion; // Sec-WebSocket-Version                    case 22:                      switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }                      break;                    case 23:                      return ContentSecurityPolicy; // Content-Security-Policy                    case 24:                      return SecWebSocketExtensions; // Sec-WebSocket-Extensions                    case 25:                      switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }                      break;                    case 27:                      return AccessControlAllowOrigin; // Access-Control-Allow-Origin                    case 28:                      switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }                      break;                    case 29:                      return AccessControlExposeHeaders; // Access-Control-Expose-Headers                    case 32:                      return AccessControlAllowCredentials; // Access-Control-Allow-Credentials              }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'A': case 'a': return Age; // [A]ge                          case 'P': case 'p': return P3P; // [P]3P                          case 'T': case 't': return TSV; // [T]SV                          case 'V': case 'v': return Via; // [V]ia                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'D': case 'd': return Date; // [D]ate                          case 'E': case 'e': return ETag; // [E]Tag                          case 'F': case 'f': return From; // [F]rom                          case 'H': case 'h': return Host; // [H]ost                          case 'L': case 'l': return Link; // [L]ink                          case 'V': case 'v': return Vary; // [V]ary                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'A': case 'a': return Allow; // [A]llow                          case 'R': case 'r': return Range; // [R]ange                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'A': case 'a': return Accept; // [A]ccept                          case 'C': case 'c': return Cookie; // [C]ookie                          case 'E': case 'e': return Expect; // [E]xpect                          case 'O': case 'o': return Origin; // [O]rigin                          case 'P': case 'p': return Pragma; // [P]ragma                          case 'S': case 's': return Server; // [S]erver                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'A': case 'a': return AltSvc;  // [A]lt-Svc                          case 'C': case 'c': return Cookie2; // [C]ookie2                          case 'E': case 'e': return Expires; // [E]xpires                          case 'R': case 'r': return Referer; // [R]eferer                          case 'T': case 't': return Trailer; // [T]railer                          case 'U': case 'u': return Upgrade; // [U]pgrade                          case 'W': case 'w': return Warning; // [W]arning                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[3])                      {                          case 'M': case 'm': return IfMatch;  // If-[M]atch                          case 'R': case 'r': return IfRange;  // If-[R]ange                          case 'A': case 'a': return Location; // Loc[a]tion                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'C': case 'c': return Connection; // [C]onnection                          case 'K': case 'k': return KeepAlive;  // [K]eep-Alive                          case 'S': case 's': return SetCookie;  // [S]et-Cookie                          case 'U': case 'u': return UserAgent;  // [U]ser-Agent                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'C': case 'c': return ContentMD5; // [C]ontent-MD5                          case 'R': case 'r': return RetryAfter; // [R]etry-After                          case 'S': case 's': return SetCookie2; // [S]et-Cookie2                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[2])                      {                          case 'C': case 'c': return AcceptPatch; // Ac[c]ept-Patch                          case 'N': case 'n': return ContentType; // Co[n]tent-Type                          case 'X': case 'x': return MaxForwards; // Ma[x]-Forwards                          case 'M': case 'm': return XMSEdgeRef;  // X-[M]SEdge-Ref                          case 'P': case 'p': return XPoweredBy;  // X-[P]owered-By                          case 'R': case 'r': return XRequestID;  // X-[R]equest-ID                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[6])                      {                          case '-': return AcceptRanges;            // Accept[-]Ranges                          case 'I': case 'i': return Authorization; // Author[i]zation                          case 'C': case 'c': return CacheControl;  // Cache-[C]ontrol                          case 'T': case 't': return ContentRange;  // Conten[t]-Range                          case 'E': case 'e': return IfNoneMatch;   // If-Non[e]-Match                          case 'O': case 'o': return LastModified;  // Last-M[o]dified                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'A': case 'a': return AcceptCharset; // [A]ccept-Charset                          case 'C': case 'c': return ContentLength; // [C]ontent-Length                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[7])                      {                          case '-': return XFrameOptions;  // X-Frame[-]Options                          case 'M': case 'm': return XUACompatible;  // X-UA-Co[m]patible                          case 'E': case 'e': return AcceptEncoding; // Accept-[E]ncoding                          case 'K': case 'k': return PublicKeyPins;  // Public-[K]ey-Pins                          case 'L': case 'l': return AcceptLanguage; // Accept-[L]anguage                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[11])                      {                          case 'O': case 'o': return ContentEncoding; // Content-Enc[o]ding                          case 'G': case 'g': return ContentLanguage; // Content-Lan[g]uage                          case 'A': case 'a': return ContentLocation; // Content-Loc[a]tion                          case 'C': case 'c': return ProxyConnection; // Proxy-Conne[c]tion                          case 'I': case 'i': return WWWAuthenticate; // WWW-Authent[i]cate                          case 'R': case 'r': return XAspNetVersion;  // X-AspNet-Ve[r]sion                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'I': case 'i': return IfModifiedSince;  // [I]f-Modified-Since                          case 'S': case 's': return SecWebSocketKey;  // [S]ec-WebSocket-Key                          case 'T': case 't': return TransferEncoding; // [T]ransfer-Encoding                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'P': case 'p': return ProxyAuthenticate; // [P]roxy-Authenticate                          case 'X': case 'x': return XContentDuration;  // [X]-Content-Duration                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'C': case 'c': return ContentDisposition; // [C]ontent-Disposition                          case 'I': case 'i': return IfUnmodifiedSince;  // [I]f-Unmodified-Since                          case 'P': case 'p': return ProxyAuthorization; // [P]roxy-Authorization                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'A': case 'a': return AccessControlMaxAge;  // [A]ccess-Control-Max-Age                          case 'S': case 's': return SecWebSocketProtocol; // [S]ec-WebSocket-Protocol                          case 'X': case 'x': return XContentTypeOptions;  // [X]-Content-Type-Options                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[0])                      {                          case 'S': case 's': return StrictTransportSecurity; // [S]trict-Transport-Security                          case 'U': case 'u': return UpgradeInsecureRequests; // [U]pgrade-Insecure-Requests                      }
Missing Default,System.Net.Http.Headers,KnownHeaders,C:\selectedRepos\dotnet_corefx\src\System.Net.Http\src\System\Net\Http\Headers\KnownHeaders.cs,GetCandidate,The following switch statement is missing a default case: switch (key[21])                      {                          case 'H': case 'h': return AccessControlAllowHeaders; // Access-Control-Allow-[H]eaders                          case 'M': case 'm': return AccessControlAllowMethods; // Access-Control-Allow-[M]ethods                      }
