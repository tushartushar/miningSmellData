Implementation smell,Namespace,Class,File,Method,Description
Long Method,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The method has 141 lines of code.
Complex Method,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,Cyclomatic complexity of the method is 11
Long Parameter List,System.Text.Encodings.Web,TextEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\TextEncoder.cs,EncodeIntoBuffer,The method has 5 parameters. Parameters: buffer' bufferLength' value' valueLength' firstCharacterToEncode
Long Identifier,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryWriteEncodedScalarAsNumericEntity,The length of the parameter leadingSurrogateCharactersWritten is 33.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _unifiedCanadianAboriginalSyllabics is 35.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _unifiedCanadianAboriginalSyllabicsExtended is 43.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _combiningDiacriticalMarksExtended is 34.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _combiningDiacriticalMarksSupplement is 36.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _combiningDiacriticalMarksforSymbols is 36.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _miscellaneousMathematicalSymbolsA is 34.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _miscellaneousMathematicalSymbolsB is 34.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _supplementalMathematicalOperators is 34.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _miscellaneousSymbolsandArrows is 30.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _ideographicDescriptionCharacters is 33.
Long Identifier,System.Text.Unicode,UnicodeRanges,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeRanges.cs,,The length of the parameter _cjkUnifiedIdeographsExtensionA is 31.
Long Statement,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            if (!WillEncode(unicodeScalar)) { return TryWriteScalarAsChar(unicodeScalar' buffer' bufferLength' out numberOfCharactersWritten); } " is 132.
Long Statement,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            else if (unicodeScalar == '\"') { return TryCopyCharacters(s_quote' buffer' bufferLength' out numberOfCharactersWritten); } " is 123.
Long Statement,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            else if (unicodeScalar == '&') { return TryCopyCharacters(s_ampersand' buffer' bufferLength' out numberOfCharactersWritten); } " is 126.
Long Statement,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            else if (unicodeScalar == '<') { return TryCopyCharacters(s_lessthan' buffer' bufferLength' out numberOfCharactersWritten); } " is 125.
Long Statement,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            else if (unicodeScalar == '>') { return TryCopyCharacters(s_greaterthan' buffer' bufferLength' out numberOfCharactersWritten); } " is 128.
Long Statement,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            else { return TryWriteEncodedScalarAsNumericEntity(unicodeScalar' buffer' bufferLength' out numberOfCharactersWritten); } " is 121.
Long Statement,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            if (!WillEncode(unicodeScalar)) { return TryWriteScalarAsChar(unicodeScalar' buffer' bufferLength' out numberOfCharactersWritten); } " is 132.
Long Statement,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "                default: return TryWriteEncodedScalarAsNumericEntity(unicodeScalar' buffer' bufferLength' out numberOfCharactersWritten);  " is 121.
Long Statement,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryWriteEncodedScalarAsNumericEntity,The length of the statement  "                    TryWriteEncodedSingleCharacter(trailingSurrogate' buffer + leadingSurrogateCharactersWritten' length - leadingSurrogateCharactersWritten' out numberOfCharactersWritten) " is 168.
Long Statement,System.Text.Encodings.Web,DefaultUrlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UrlEncoder.cs,TryEncodeUnicodeScalar,The length of the statement  "            if (!WillEncode(unicodeScalar)) { return TryWriteScalarAsChar(unicodeScalar' buffer' bufferLength' out numberOfCharactersWritten); } " is 132.
Long Statement,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The length of the statement  "            var stream = typeof(UnicodeRange).GetTypeInfo().Assembly.GetManifestResourceStream("System.Text.Encodings.Web.Resources.unicode8definedcharacters.bin"); " is 152.
Virtual Method Call from Constructor,System.Text.Encodings.Web,TextEncoderSettings,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\TextEncoderSettings.cs,TextEncoderSettings,The constructor "TextEncoderSettings" calls a virtual method "AllowCodePoints".
Virtual Method Call from Constructor,System.Text.Encodings.Web,TextEncoderSettings,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\TextEncoderSettings.cs,TextEncoderSettings,The constructor "TextEncoderSettings" calls a virtual method "GetAllowedCodePoints".
Virtual Method Call from Constructor,System.Text.Encodings.Web,TextEncoderSettings,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\TextEncoderSettings.cs,TextEncoderSettings,The constructor "TextEncoderSettings" calls a virtual method "AllowRanges".
Magic Number,System.Text.Internal,AllowedCharactersBitmap,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\AllowedCharactersBitmap.cs,AllowCharacter,The following statement contains a magic number: int index = codePoint >> 5;
Magic Number,System.Text.Internal,AllowedCharactersBitmap,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\AllowedCharactersBitmap.cs,ForbidCharacter,The following statement contains a magic number: int index = codePoint >> 5;
Magic Number,System.Text.Internal,AllowedCharactersBitmap,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\AllowedCharactersBitmap.cs,IsCharacterAllowed,The following statement contains a magic number: int index = codePoint >> 5;
Magic Number,System.Text.Internal,AllowedCharactersBitmap,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\AllowedCharactersBitmap.cs,IsUnicodeScalarAllowed,The following statement contains a magic number: int index = unicodeScalar >> 5;
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: switch (len)              {                  case 0:                      return;                  case 1:                      *dest = *src;                      return;                  case 2:                      *(short*)dest = *(short*)src;                      return;                  case 3:                      *(short*)dest = *(short*)src;                      *(dest + 2) = *(src + 2);                      return;                  case 4:                      *(int*)dest = *(int*)src;                      return;                  case 5:                      *(int*)dest = *(int*)src;                      *(dest + 4) = *(src + 4);                      return;                  case 6:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      return;                  case 7:                      *(int*)dest = *(int*)src;                      *(short*)(dest + 4) = *(short*)(src + 4);                      *(dest + 6) = *(src + 6);                      return;                  case 8:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      return;                  case 9:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(dest + 8) = *(src + 8);                      return;                  case 10:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      return;                  case 11:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(short*)(dest + 8) = *(short*)(src + 8);                      *(dest + 10) = *(src + 10);                      return;                  case 12:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      return;                  case 13:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(dest + 12) = *(src + 12);                      return;                  case 14:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      return;                  case 15:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(short*)(dest + 12) = *(short*)(src + 12);                      *(dest + 14) = *(src + 14);                      return;                  case 16:                      *(int*)dest = *(int*)src;                      *(int*)(dest + 4) = *(int*)(src + 4);                      *(int*)(dest + 8) = *(int*)(src + 8);                      *(int*)(dest + 12) = *(int*)(src + 12);                      return;                  default:                      break;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((unchecked((int)dest) & 3) != 0)              {                  if (((int)dest & 1) != 0)                  {                      *dest = *src;                      src++;                      dest++;                      len--;                      if (((int)dest & 2) == 0)                          goto Aligned;                  }                  *(short*)dest = *(short*)src;                  src += 2;                  dest += 2;                  len -= 2;              Aligned:;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((unchecked((int)dest) & 3) != 0)              {                  if (((int)dest & 1) != 0)                  {                      *dest = *src;                      src++;                      dest++;                      len--;                      if (((int)dest & 2) == 0)                          goto Aligned;                  }                  *(short*)dest = *(short*)src;                  src += 2;                  dest += 2;                  len -= 2;              Aligned:;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((unchecked((int)dest) & 3) != 0)              {                  if (((int)dest & 1) != 0)                  {                      *dest = *src;                      src++;                      dest++;                      len--;                      if (((int)dest & 2) == 0)                          goto Aligned;                  }                  *(short*)dest = *(short*)src;                  src += 2;                  dest += 2;                  len -= 2;              Aligned:;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((unchecked((int)dest) & 3) != 0)              {                  if (((int)dest & 1) != 0)                  {                      *dest = *src;                      src++;                      dest++;                      len--;                      if (((int)dest & 2) == 0)                          goto Aligned;                  }                  *(short*)dest = *(short*)src;                  src += 2;                  dest += 2;                  len -= 2;              Aligned:;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((unchecked((int)dest) & 3) != 0)              {                  if (((int)dest & 1) != 0)                  {                      *dest = *src;                      src++;                      dest++;                      len--;                      if (((int)dest & 2) == 0)                          goto Aligned;                  }                  *(short*)dest = *(short*)src;                  src += 2;                  dest += 2;                  len -= 2;              Aligned:;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: uint count = len / 16;
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: while (count > 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  ((int*)dest)[2] = ((int*)src)[2];                  ((int*)dest)[3] = ((int*)src)[3];                  dest += 16;                  src += 16;                  count--;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: while (count > 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  ((int*)dest)[2] = ((int*)src)[2];                  ((int*)dest)[3] = ((int*)src)[3];                  dest += 16;                  src += 16;                  count--;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: while (count > 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  ((int*)dest)[2] = ((int*)src)[2];                  ((int*)dest)[3] = ((int*)src)[3];                  dest += 16;                  src += 16;                  count--;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: while (count > 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  ((int*)dest)[2] = ((int*)src)[2];                  ((int*)dest)[3] = ((int*)src)[3];                  dest += 16;                  src += 16;                  count--;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: while (count > 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  ((int*)dest)[2] = ((int*)src)[2];                  ((int*)dest)[3] = ((int*)src)[3];                  dest += 16;                  src += 16;                  count--;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: while (count > 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  ((int*)dest)[2] = ((int*)src)[2];                  ((int*)dest)[3] = ((int*)src)[3];                  dest += 16;                  src += 16;                  count--;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 8) != 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  dest += 8;                  src += 8;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 8) != 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  dest += 8;                  src += 8;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 8) != 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  ((int*)dest)[1] = ((int*)src)[1];                  dest += 8;                  src += 8;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 4) != 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  dest += 4;                  src += 4;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 4) != 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  dest += 4;                  src += 4;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 4) != 0)              {                  ((int*)dest)[0] = ((int*)src)[0];                  dest += 4;                  src += 4;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 2) != 0)              {                  ((short*)dest)[0] = ((short*)src)[0];                  dest += 2;                  src += 2;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 2) != 0)              {                  ((short*)dest)[0] = ((short*)src)[0];                  dest += 2;                  src += 2;              }
Magic Number,System,BufferInternal,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\BufferInternal.cs,Memmove,The following statement contains a magic number: if ((len & 2) != 0)              {                  ((short*)dest)[0] = ((short*)src)[0];                  dest += 2;                  src += 2;              }
Magic Number,System.Text.Encodings.Web,HexUtil,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HexUtil.cs,UInt32LsbToHexDigit,The following statement contains a magic number: Debug.Assert(value < 16);
Magic Number,System.Text.Encodings.Web,HexUtil,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HexUtil.cs,UInt32LsbToHexDigit,The following statement contains a magic number: return (value < 10) ? (char)('0' + value) : (char)('A' + (value - 10));
Magic Number,System.Text.Encodings.Web,HexUtil,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HexUtil.cs,UInt32LsbToHexDigit,The following statement contains a magic number: return (value < 10) ? (char)('0' + value) : (char)('A' + (value - 10));
Magic Number,System.Text.Encodings.Web,HexUtil,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HexUtil.cs,Int32LsbToHexDigit,The following statement contains a magic number: Debug.Assert(value < 16);
Magic Number,System.Text.Encodings.Web,HexUtil,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HexUtil.cs,Int32LsbToHexDigit,The following statement contains a magic number: return (char)((value < 10) ? ('0' + value) : ('A' + (value - 10)));
Magic Number,System.Text.Encodings.Web,HexUtil,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HexUtil.cs,Int32LsbToHexDigit,The following statement contains a magic number: return (char)((value < 10) ? ('0' + value) : ('A' + (value - 10)));
Magic Number,System.Text.Encodings.Web,HexUtil,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HexUtil.cs,ByteToHexDigits,The following statement contains a magic number: firstHexChar = UInt32LsbToHexDigit((uint)value >> 4);
Magic Number,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryWriteEncodedScalarAsNumericEntity,The following statement contains a magic number: const int nibbleSize = 4;
Magic Number,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryWriteEncodedScalarAsNumericEntity,The following statement contains a magic number: do              {                  Debug.Assert(numberOfHexCharacters < 8' "Couldn't have written 8 characters out by this point.");                  numberOfHexCharacters++;                  compareUnicodeScalar >>= nibbleSize;              } while (compareUnicodeScalar != 0);
Magic Number,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryWriteEncodedScalarAsNumericEntity,The following statement contains a magic number: numberOfCharactersWritten = numberOfHexCharacters + 4;
Magic Number,System.Text.Encodings.Web,DefaultHtmlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\HtmlEncoder.cs,TryWriteEncodedScalarAsNumericEntity,The following statement contains a magic number: if (numberOfHexCharacters + 4 > bufferLength)              {                  numberOfCharactersWritten = 0;                  return false;              }
Magic Number,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryWriteEncodedSingleCharacter,The following statement contains a magic number: if (length < 6)              {                  numberOfCharactersWritten = 0;                  return false;              }
Magic Number,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryWriteEncodedSingleCharacter,The following statement contains a magic number: *buffer = HexUtil.Int32LsbToHexDigit(unicodeScalar >> 12);
Magic Number,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryWriteEncodedSingleCharacter,The following statement contains a magic number: *buffer = HexUtil.Int32LsbToHexDigit((int)((unicodeScalar >> 8) & 0xFU));
Magic Number,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryWriteEncodedSingleCharacter,The following statement contains a magic number: *buffer = HexUtil.Int32LsbToHexDigit((int)((unicodeScalar >> 4) & 0xFU));
Magic Number,System.Text.Encodings.Web,DefaultJavaScriptEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\JavaScriptEncoder.cs,TryWriteEncodedSingleCharacter,The following statement contains a magic number: numberOfCharactersWritten = 6;
Magic Number,System.Text.Encodings.Web,TextEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\TextEncoder.cs,Encode,The following statement contains a magic number: unsafe              {                  fixed (char* valuePointer = value)                  {                      int firstCharacterToEncode = FindFirstCharacterToEncode(valuePointer' value.Length);                        if (firstCharacterToEncode == -1)                      {                          return value;                      }                        int bufferSize = MaxOutputCharactersPerInputCharacter * value.Length;                        string result;                      if (bufferSize < 1024)                      {                          char* wholebuffer = stackalloc char[bufferSize];                          int totalWritten = EncodeIntoBuffer(wholebuffer' bufferSize' valuePointer' value.Length' firstCharacterToEncode);                          result = new string(wholebuffer' 0' totalWritten);                      }                      else                      {                          char[] wholebuffer = new char[bufferSize];                          fixed(char* buffer = &wholebuffer[0])                          {                              int totalWritten = EncodeIntoBuffer(buffer' bufferSize' valuePointer' value.Length' firstCharacterToEncode);                              result = new string(wholebuffer' 0' totalWritten);                                                      }                      }                        return result;                  }              }
Magic Number,System.Text.Encodings.Web,DefaultUrlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UrlEncoder.cs,DefaultUrlEncoder,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  _allowedCharacters.ForbidCharacter((char)(0xFFF0 | i));              }
Magic Number,System.Text.Encodings.Web,DefaultUrlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UrlEncoder.cs,TryEncodeUnicodeScalar,The following statement contains a magic number: do              {                  char highNibble' lowNibble;                  HexUtil.ByteToHexDigits(unchecked((byte)asUtf8)' out highNibble' out lowNibble);                    if (numberOfCharactersWritten + 3 > bufferLength)                  {                      numberOfCharactersWritten = 0;                      return false;                  }                    *buffer = '%'; buffer++;                  *buffer = highNibble; buffer++;                  *buffer = lowNibble; buffer++;                    numberOfCharactersWritten += 3;              }              while ((asUtf8 >>= 8) != 0);
Magic Number,System.Text.Encodings.Web,DefaultUrlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UrlEncoder.cs,TryEncodeUnicodeScalar,The following statement contains a magic number: do              {                  char highNibble' lowNibble;                  HexUtil.ByteToHexDigits(unchecked((byte)asUtf8)' out highNibble' out lowNibble);                    if (numberOfCharactersWritten + 3 > bufferLength)                  {                      numberOfCharactersWritten = 0;                      return false;                  }                    *buffer = '%'; buffer++;                  *buffer = highNibble; buffer++;                  *buffer = lowNibble; buffer++;                    numberOfCharactersWritten += 3;              }              while ((asUtf8 >>= 8) != 0);
Magic Number,System.Text.Encodings.Web,DefaultUrlEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UrlEncoder.cs,TryEncodeUnicodeScalar,The following statement contains a magic number: do              {                  char highNibble' lowNibble;                  HexUtil.ByteToHexDigits(unchecked((byte)asUtf8)' out highNibble' out lowNibble);                    if (numberOfCharactersWritten + 3 > bufferLength)                  {                      numberOfCharactersWritten = 0;                      return false;                  }                    *buffer = '%'; buffer++;                  *buffer = highNibble; buffer++;                  *buffer = lowNibble; buffer++;                    numberOfCharactersWritten += 3;              }              while ((asUtf8 >>= 8) != 0);
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: if (stream.Length != 8 * 1024)              {                  Environment.FailFast("Corrupt data detected.");              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: if (stream.Length != 8 * 1024)              {                  Environment.FailFast("Corrupt data detected.");              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: byte[] rawData = new byte[8 * 1024];
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: byte[] rawData = new byte[8 * 1024];
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: uint[] retVal = new uint[2 * 1024];
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: uint[] retVal = new uint[2 * 1024];
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,CreateDefinedCharacterBitmap,The following statement contains a magic number: for (int i = 0; i < retVal.Length; i++)              {                  retVal[i] = (((uint)rawData[4 * i + 3]) << 24)                      | (((uint)rawData[4 * i + 2]) << 16)                      | (((uint)rawData[4 * i + 1]) << 8)                      | (uint)rawData[4 * i];              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetScalarValueFromUtf16SurrogatePair,The following statement contains a magic number: return (lowSurrogate & 0x3ff) | (((highSurrogate & 0x3ff) + (1 << 6)) << 10);
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetScalarValueFromUtf16SurrogatePair,The following statement contains a magic number: return (lowSurrogate & 0x3ff) | (((highSurrogate & 0x3ff) + (1 << 6)) << 10);
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf16SurrogatePairFromAstralScalarValue,The following statement contains a magic number: int u = scalar >> 16;
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf16SurrogatePairFromAstralScalarValue,The following statement contains a magic number: highSurrogate = (char)(0xD800 | (w << 6) | (x >> 10));
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf16SurrogatePairFromAstralScalarValue,The following statement contains a magic number: highSurrogate = (char)(0xD800 | (w << 6) | (x >> 10));
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,GetUtf8RepresentationForScalarValue,The following statement contains a magic number: if (scalar <= 0x7f)              {                  // one byte used: scalar 00000000 0xxxxxxx -> byte sequence 0xxxxxxx                  byte firstByte = (byte)scalar;                  return firstByte;              }              else if (scalar <= 0x7ff)              {                  // two bytes used: scalar 00000yyy yyxxxxxx -> byte sequence 110yyyyy 10xxxxxx                  byte firstByte = (byte)(0xc0 | (scalar >> 6));                  byte secondByteByte = (byte)(0x80 | (scalar & 0x3f));                  return ((secondByteByte << 8) | firstByte);              }              else if (scalar <= 0xffff)              {                  // three bytes used: scalar zzzzyyyy yyxxxxxx -> byte sequence 1110zzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xe0 | (scalar >> 12));                  byte secondByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte thirdByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((thirdByte << 8) | secondByte) << 8) | firstByte);              }              else              {                  // four bytes used: scalar 000uuuuu zzzzyyyy yyxxxxxx -> byte sequence 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx                  byte firstByte = (byte)(0xf0 | (scalar >> 18));                  byte secondByte = (byte)(0x80 | ((scalar >> 12) & 0x3f));                  byte thirdByte = (byte)(0x80 | ((scalar >> 6) & 0x3f));                  byte fourthByte = (byte)(0x80 | (scalar & 0x3f));                  return ((((((fourthByte << 8) | thirdByte) << 8) | secondByte) << 8) | firstByte);              }
Magic Number,System.Text.Unicode,UnicodeHelpers,C:\selectedRepos\dotnet_corefx\src\System.Text.Encodings.Web\src\System\Text\Encodings\Web\UnicodeHelpers.cs,IsCharacterDefined,The following statement contains a magic number: int index = (int)(codePoint >> 5);
