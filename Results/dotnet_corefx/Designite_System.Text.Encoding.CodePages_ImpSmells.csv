Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The method has 109 lines of code.
Long Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The method has 244 lines of code.
Long Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetBytes,The method has 124 lines of code.
Long Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetCharCount,The method has 129 lines of code.
Long Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetChars,The method has 178 lines of code.
Long Method,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The method has 147 lines of code.
Long Method,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetBytes,The method has 133 lines of code.
Long Method,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The method has 313 lines of code.
Long Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The method has 112 lines of code.
Long Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The method has 180 lines of code.
Long Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP50225KR,The method has 110 lines of code.
Long Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,The method has 110 lines of code.
Long Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The method has 206 lines of code.
Long Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The method has 179 lines of code.
Long Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The method has 215 lines of code.
Long Method,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The method has 147 lines of code.
Long Method,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The method has 325 lines of code.
Long Method,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The method has 131 lines of code.
Long Method,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetBytes,The method has 193 lines of code.
Long Method,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetChars,The method has 133 lines of code.
Complex Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetByteCount,Cyclomatic complexity of the method is 10
Complex Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetBytes,Cyclomatic complexity of the method is 13
Complex Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetCharCount,Cyclomatic complexity of the method is 12
Complex Method,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetChars,Cyclomatic complexity of the method is 17
Complex Method,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,TryBestFit,Cyclomatic complexity of the method is 9
Complex Method,System.Text,DecoderFallbackBufferHelper,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderFallbackBufferHelper.cs,InternalFallback,Cyclomatic complexity of the method is 8
Complex Method,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,Cyclomatic complexity of the method is 18
Complex Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,Cyclomatic complexity of the method is 18
Complex Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP50225KR,Cyclomatic complexity of the method is 15
Complex Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,Cyclomatic complexity of the method is 14
Complex Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,Cyclomatic complexity of the method is 18
Complex Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,Cyclomatic complexity of the method is 17
Complex Method,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,Cyclomatic complexity of the method is 29
Complex Method,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,Cyclomatic complexity of the method is 20
Complex Method,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,Cyclomatic complexity of the method is 26
Complex Method,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetByteCount,Cyclomatic complexity of the method is 10
Complex Method,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetBytes,Cyclomatic complexity of the method is 22
Complex Method,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetChars,Cyclomatic complexity of the method is 16
Long Parameter List,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetBytes,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' encoder
Long Parameter List,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' baseDecoder
Long Parameter List,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Parameter List,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,GetChars,The method has 6 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex' flush
Long Parameter List,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' flush
Long Parameter List,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,Convert,The method has 10 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex' charCount' flush' bytesUsed' charsUsed' completed
Long Parameter List,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,Convert,The method has 8 parameters. Parameters: bytes' byteCount' chars' charCount' flush' bytesUsed' charsUsed' completed
Long Parameter List,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,GetBytes,The method has 6 parameters. Parameters: chars' charIndex' charCount' bytes' byteIndex' flush
Long Parameter List,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,GetBytes,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' flush
Long Parameter List,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,Convert,The method has 10 parameters. Parameters: chars' charIndex' charCount' bytes' byteIndex' byteCount' flush' charsUsed' bytesUsed' completed
Long Parameter List,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,Convert,The method has 8 parameters. Parameters: chars' charCount' bytes' byteCount' flush' charsUsed' bytesUsed' completed
Long Parameter List,System.Text,EncodingByteBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingByteBuffer.cs,EncodingByteBuffer,The method has 6 parameters. Parameters: inEncoding' inEncoder' inByteStart' inByteCount' inCharStart' inCharCount
Long Parameter List,System.Text,EncodingCharBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingCharBuffer.cs,EncodingCharBuffer,The method has 6 parameters. Parameters: enc' decoder' charStart' charCount' byteStart' byteCount
Long Parameter List,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetBytes,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' encoder
Long Parameter List,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' decoder
Long Parameter List,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetBytes,The method has 5 parameters. Parameters: s' charIndex' charCount' bytes' byteIndex
Long Parameter List,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetBytes,The method has 5 parameters. Parameters: chars' charIndex' charCount' bytes' byteIndex
Long Parameter List,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Parameter List,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetBytes,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' encoder
Long Parameter List,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' baseDecoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytes,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' baseEncoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' baseDecoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' encoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP50225KR,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' encoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' encoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' decoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' decoder
Long Parameter List,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' decoder
Long Parameter List,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' baseEncoder
Long Parameter List,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' baseDecoder
Long Parameter List,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetBytes,The method has 5 parameters. Parameters: chars' charCount' bytes' byteCount' encoder
Long Parameter List,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteCount' chars' charCount' decoder
Long Identifier,System.Text,BaseCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\BaseCodePageEncoding.cs,,The length of the parameter CODEPAGE_DATA_FILE_HEADER_SIZE is 30.
Long Statement,System.Text,BaseCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\BaseCodePageEncoding.cs,FindCodePage,The length of the statement  "            Debug.Assert(m_codePageHeader != null && m_codePageHeader.Length == CODEPAGE_HEADER_SIZE' "m_codePageHeader expected to match in size the struct CodePageHeader"); " is 162.
Long Statement,System.Text,BaseCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\BaseCodePageEncoding.cs,GetCodePageByteSize,The length of the statement  "                                "[BaseCodePageEncoding] Code page (" + codePage + ") has invalid byte size (" + pCodePageIndex->ByteCount + ") in table"); " is 122.
Long Statement,System.Text,BaseCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\BaseCodePageEncoding.cs,GetBestFitUnicodeToBytesData,The length of the statement  "            Debug.Assert(arrayUnicodeBestFit != null' "[BaseCodePageEncoding.GetBestFitUnicodeToBytesData]Expected non-null arrayUnicodeBestFit"); " is 134.
Long Statement,System.Text,BaseCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\BaseCodePageEncoding.cs,GetBestFitBytesToUnicodeData,The length of the statement  "            Debug.Assert(arrayBytesBestFit != null' "[BaseCodePageEncoding.GetBestFitBytesToUnicodeData]Expected non-null arrayBytesBestFit"); " is 130.
Long Statement,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The length of the statement  "                                "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2); " is 137.
Long Statement,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetByteCount,The length of the statement  "                Debug.Assert(Char.IsHighSurrogate(charLeftOver)' "[DBCSCodePageEncoding.GetByteCount]leftover character should be high surrogate"); " is 131.
Long Statement,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,Fallback,The length of the statement  "            Debug.Assert(iCount < 1' "[DecoderReplacementFallbackBuffer.Fallback] Calling fallback without a previously empty buffer"); " is 123.
Long Statement,System.Text,DecoderFallbackBufferHelper,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderFallbackBufferHelper.cs,InternalFallback,The length of the statement  "            Debug.Assert(byteStart != null' "[DecoderFallback.InternalFallback]Used InternalFallback without calling InternalInitialize"); " is 126.
Long Statement,System.Text,DecoderFallbackBufferHelper,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderFallbackBufferHelper.cs,InternalFallback,The length of the statement  "            Debug.Assert(byteStart != null' "[DecoderFallback.InternalFallback]Used InternalFallback without calling InternalInitialize"); " is 126.
Long Statement,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,GetChars,The length of the statement  "                throw new ArgumentOutOfRangeException((byteIndex < 0 ? nameof(byteIndex): nameof(byteCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,GetChars,The length of the statement  "                throw new ArgumentOutOfRangeException((byteCount < 0 ? nameof(byteCount): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,Convert,The length of the statement  "                throw new ArgumentOutOfRangeException((byteIndex < 0 ? nameof(byteIndex): nameof(byteCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,Convert,The length of the statement  "                throw new ArgumentOutOfRangeException((charIndex < 0 ? nameof(charIndex): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,DecoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderNLS.cs,Convert,The length of the statement  "                throw new ArgumentOutOfRangeException((byteCount < 0 ? nameof(byteCount): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,InternalEncoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderBestFitFallback.cs,Fallback,The length of the statement  "            Debug.Assert(_iCount < 1' "[InternalEncoderBestFitFallbackBuffer.Fallback(non surrogate)] Fallback char " + ((int)_cBestFit).ToString("X4"' CultureInfo.InvariantCulture) + " caused recursive fallback"); " is 202.
Long Statement,System.Text,InternalEncoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderBestFitFallback.cs,Fallback,The length of the statement  "            Debug.Assert(_iCount < 1' "[InternalEncoderBestFitFallbackBuffer.Fallback(surrogate)] Fallback char " + ((int)_cBestFit).ToString("X4"' CultureInfo.InvariantCulture) + " caused recursive fallback"); " is 198.
Long Statement,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,GetBytes,The length of the statement  "                throw new ArgumentOutOfRangeException((charIndex < 0 ? nameof(charIndex): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,GetBytes,The length of the statement  "                throw new ArgumentOutOfRangeException((byteCount < 0 ? nameof(byteCount): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,Convert,The length of the statement  "                throw new ArgumentOutOfRangeException((charIndex < 0 ? nameof(charIndex): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,Convert,The length of the statement  "                throw new ArgumentOutOfRangeException((byteIndex < 0 ? nameof(byteIndex): nameof(byteCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncoderNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderNLS.cs,Convert,The length of the statement  "                throw new ArgumentOutOfRangeException((charCount < 0 ? nameof(charCount): nameof(byteCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetBytes,The length of the statement  "                throw new ArgumentOutOfRangeException((charIndex < 0 ? nameof(charIndex): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetBytes,The length of the statement  "                throw new ArgumentOutOfRangeException((charIndex < 0 ? nameof(charIndex): nameof(charCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetBytes,The length of the statement  "                throw new ArgumentOutOfRangeException((charCount < 0 ? nameof(charCount): nameof(byteCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetChars,The length of the statement  "                throw new ArgumentOutOfRangeException((byteIndex < 0 ? nameof(byteIndex): nameof(byteCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetChars,The length of the statement  "                throw new ArgumentOutOfRangeException((charCount < 0 ? nameof(charCount): nameof(byteCount))' SR.ArgumentOutOfRange_NeedNonNegNum); " is 131.
Long Statement,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,ThrowBytesOverflow,The length of the statement  "            throw new ArgumentException(SR.Format(SR.Argument_EncodingConversionOverflowBytes' EncodingName' EncoderFallback.GetType())' "bytes"); " is 134.
Long Statement,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,ThrowCharsOverflow,The length of the statement  "            throw new ArgumentException(SR.Format(SR.Argument_EncodingConversionOverflowChars' EncodingName' DecoderFallback.GetType())' "chars"); " is 134.
Long Statement,System.Text,EncodingTable,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingTable.cs,InternalGetCodePageFromName,The length of the statement  "                result = CompareOrdinal(name' s_encodingNames' s_encodingNameIndices[index]' s_encodingNameIndices[index + 1] - s_encodingNameIndices[index]); " is 142.
Long Statement,System.Text,EncodingTable,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingTable.cs,InternalGetCodePageFromName,The length of the statement  "                if (CompareOrdinal(name' s_encodingNames' s_encodingNameIndices[left]' s_encodingNameIndices[left + 1] - s_encodingNameIndices[left]) == 0) " is 139.
Long Statement,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The length of the statement  "                "[GB18030Encoding.LoadManagedCodePage] Expected 0x99FB to be last 4 byte offset' found 0x" + count4Byte.ToString("X4"' CultureInfo.InvariantCulture)); " is 150.
Long Statement,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetBytes,The length of the statement  "                        "[GB18030Encoding.GetBytes] leftover character should be high surrogate' not 0x" + ((int)charLeftOver).ToString("X4"' CultureInfo.InvariantCulture)); " is 149.
Long Statement,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The length of the statement  "                    Debug.Assert(Char.IsHighSurrogate(charLeftOver)' "[ISO2022Encoding.GetBytesCP5022xJP]leftover character should be high surrogate"); " is 131.
Long Statement,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP50225KR,The length of the statement  "                    Debug.Assert(Char.IsHighSurrogate(charLeftOver)' "[ISO2022Encoding.GetBytesCP50225KR]leftover character should be high surrogate"); " is 131.
Long Statement,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,The length of the statement  "                    Debug.Assert(Char.IsHighSurrogate(charLeftOver)' "[ISO2022Encoding.GetBytesCP52936]leftover character should be high surrogate"); " is 129.
Long Statement,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The length of the statement  "                    // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode " is 142.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(bLastDevenagariStressAbbr == false' "[ISCIIEncoding.GetChars] Expected no bLastDevenagariStressAbbr in bLastATR mode"); " is 132.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(cLastCharForNextNukta == (char)0' "[ISCIIEncoding.GetChars] Expected no cLastCharForNextNukta in bLastATR mode"); " is 126.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(cLastCharForNoNextNukta == (char)0' "[ISCIIEncoding.GetChars] Expected no cLastCharForNoNextNukta in bLastATR mode"); " is 130.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(bLastDevenagariStressAbbr == false' "[ISCIIEncoding.GetChars] Expected no bLastDevenagariStressAbbr in bLastVirama mode"); " is 135.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(cLastCharForNextNukta == (char)0' "[ISCIIEncoding.GetChars] Expected no cLastCharForNextNukta in bLastVirama mode"); " is 129.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(cLastCharForNoNextNukta == (char)0' "[ISCIIEncoding.GetChars] Expected no cLastCharForNoNextNukta in bLastVirama mode"); " is 133.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(bLastVirama == false' "[ISCIIEncoding.GetChars] Expected no bLastVirama in bLastDevenagariStressAbbr mode"); " is 121.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(cLastCharForNextNukta == (char)0' "[ISCIIEncoding.GetChars] Expected no cLastCharForNextNukta in bLastDevenagariStressAbbr mode"); " is 143.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(cLastCharForNoNextNukta == (char)0' "[ISCIIEncoding.GetChars] Expected no cLastCharForNoNextNukta in bLastDevenagariStressAbbr mode"); " is 147.
Long Statement,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The length of the statement  "                        Debug.Assert(bLastDevenagariStressAbbr == false' "[ISCIIEncoding.GetChars] Expected no bLastDevenagariStressAbbr in cLastCharForNextNukta mode"); " is 145.
Long Statement,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The length of the statement  "                                "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"' " is 132.
Long Statement,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetBytes,The length of the statement  "                    Debug.Assert(fallbackBuffer == null || fallbackHelper.bFallingBack == false' "[SBCSCodePageEncoding.GetBytes]Expected to NOT be falling back"); " is 143.
Long Statement,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,GetBytes,The length of the statement  "            Debug.Assert(fallbackBuffer == null || fallbackBuffer.Remaining == 0' "[SBCSEncoding.GetBytes]Expected Empty fallback buffer at end"); " is 134.
Complex Conditional,System.Text,EUCJPEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EUCJPEncoding.cs,CleanUpBytes,The conditional expression  "(bytes & 0xFF00) < 0xa100 || (bytes & 0xFF00) > 0xfe00 ||                      (bytes & 0xFF) < 0xa1 || (bytes & 0xFF) > 0xfe"  is complex.
Complex Conditional,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The conditional expression  "bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc))"  is complex.
Complex Conditional,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The conditional expression  "bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00)"  is complex.
Complex Conditional,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,The conditional expression  "(bLeadByte != 0 &&                       (bLeadByte < 0xa1 || bLeadByte > 0xf7 || bTrailByte < 0xa1 || bTrailByte > 0xfe)) ||                      (bLeadByte == 0 && bTrailByte > 0x80 && bTrailByte != 0xff)"  is complex.
Complex Conditional,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The conditional expression  "currentMode == ISO2022Modes.ModeKR && ch != ' ' && ch != '\t' && ch != '\n'"  is complex.
Complex Conditional,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The conditional expression  "(ch < 0x21 || ch > 0x77 || ch2 < 0x21 || ch2 > 0x7e) &&                      // Everett allowed high bit mappings for same characters (but only if both bits set)                          (ch < 0xa1 || ch > 0xf7 || ch2 < 0xa1 || ch2 > 0xfe)"  is complex.
Complex Conditional,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetChars,The conditional expression  "!decoder.MustFlush ||                      cLastCharForNoNextNukta != '\0' || bLastATR || bLastDevenagariStressAbbr"  is complex.
Magic Number,System.Text,BaseCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\BaseCodePageEncoding.cs,GetCodePageByteSize,The following statement contains a magic number: lock (s_streamLock)              {                  // seek to the first CodePageIndex entry                  s_codePagesEncodingDataStream.Seek(CODEPAGE_DATA_FILE_HEADER_SIZE' SeekOrigin.Begin);                    int codePagesCount;                  fixed (byte* pBytes = &s_codePagesDataHeader[0])                  {                      CodePageDataFileHeader* pDataHeader = (CodePageDataFileHeader*)pBytes;                      codePagesCount = pDataHeader->CodePageCount;                  }                    fixed (byte* pBytes = &codePageIndex[0])                  {                      CodePageIndex* pCodePageIndex = (CodePageIndex*)pBytes;                      for (int i = 0; i < codePagesCount; i++)                      {                          s_codePagesEncodingDataStream.Read(codePageIndex' 0' codePageIndex.Length);                            if (pCodePageIndex->CodePage == codePage)                          {                              Debug.Assert(pCodePageIndex->ByteCount == 1 || pCodePageIndex->ByteCount == 2'                                  "[BaseCodePageEncoding] Code page (" + codePage + ") has invalid byte size (" + pCodePageIndex->ByteCount + ") in table");                              // Return what it says for byte count                              return pCodePageIndex->ByteCount;                          }                      }                  }              }
Magic Number,System.Text,CodePagesEncodingProvider,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\CodePagesEncodingProvider.cs,GetEncoding,The following statement contains a magic number: if (codepage < 0 || codepage > 65535)                  return null;
Magic Number,System.Text,CodePagesEncodingProvider,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\CodePagesEncodingProvider.cs,GetEncoding,The following statement contains a magic number: try              {                  if (_encodings.TryGetValue(codepage' out result))                      return result;                    int i = BaseCodePageEncoding.GetCodePageByteSize(codepage);                    if (i == 1)                  {                      result = new SBCSCodePageEncoding(codepage);                  }                  else if (i == 2)                  {                      result = new DBCSCodePageEncoding(codepage);                  }                  else                  {                      result = GetEncodingRare(codepage);                      if (result == null)                          return null;                  }                    _cacheLock.EnterWriteLock();                  try                  {                      Encoding cachedEncoding;                      if (_encodings.TryGetValue(codepage' out cachedEncoding))                          return cachedEncoding;                        _encodings.Add(codepage' result);                  }                  finally                  {                      _cacheLock.ExitWriteLock();                  }              }              finally              {                  _cacheLock.ExitUpgradeableReadLock();              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                    // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1-byte code page                  if (pCodePage->ByteCount != 2)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                  // Remember our unknown bytes & chars                  _bytesUnknown = pCodePage->ByteReplace;                  charUnknown = pCodePage->UnicodeReplace;                    // Need to make sure the fallback buffer's fallback char is correct                  if (DecoderFallback is InternalDecoderBestFitFallback)                  {                      ((InternalDecoderBestFitFallback)(DecoderFallback)).cReplacement = charUnknown;                  }                    // Is our replacement bytesUnknown a single or double byte character?                  _byteCountUnknown = 1;                  if (_bytesUnknown > 0xff)                      _byteCountUnknown++;                    // We use fallback encoder' which uses ?' which so far all of our tables do as well                  Debug.Assert(_bytesUnknown == 0x3f'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected 0x3f (?) as unknown byte character");                    // Get our mapped section (bytes to allocate = 2 bytes per 65536 Unicode chars + 2 bytes per 65536 DBCS chars)                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  byte* pNativeMemory = GetNativeMemory(65536 * 2 * 2 + 4 + iExtraBytes);                    mapBytesToUnicode = (char*)pNativeMemory;                  mapUnicodeToBytes = (ushort*)(pNativeMemory + 65536 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Move to the beginning of the data section                    byte[] buffer = new byte[m_dataSize];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                  }                    fixed (byte* pBuffer = buffer)                  {                      char* pData = (char*)pBuffer;                        // We start at bytes position 0                      int bytePosition = 0;                      int useBytes = 0;                        while (bytePosition < 0x10000)                      {                          // Get the next byte                          char input = *pData;                          pData++;                            // build our table:                          if (input == 1)                          {                              // Use next data as our byte position                              bytePosition = (int)(*pData);                              pData++;                              continue;                          }                          else if (input < 0x20 && input > 0)                          {                              // Advance input characters                              bytePosition += input;                              continue;                          }                          else if (input == 0xFFFF)                          {                              // Same as our bytePosition                              useBytes = bytePosition;                              input = unchecked((char)bytePosition);                          }                          else if (input == LEAD_BYTE_CHAR) // 0xfffe                          {                              // Lead byte mark                              Debug.Assert(bytePosition < 0x100' "[DBCSCodePageEncoding.LoadManagedCodePage]expected lead byte to be < 0x100");                              useBytes = bytePosition;                              // input stays 0xFFFE                          }                          else if (input == UNICODE_REPLACEMENT_CHAR)                          {                              // Replacement char is already done                              bytePosition++;                              continue;                          }                          else                          {                              // Use this character                              useBytes = bytePosition;                              // input == input;                          }                            // We may need to clean up the selected character & position                          if (CleanUpBytes(ref useBytes))                          {                              // Use this selected character at the selected position' don't do this if not supposed to.                              if (input != LEAD_BYTE_CHAR)                              {                                  // Don't do this for lead byte marks.                                  mapUnicodeToBytes[input] = unchecked((ushort)useBytes);                              }                              mapBytesToUnicode[useBytes] = input;                          }                          bytePosition++;                      }                  }                    // See if we have any clean up to do                  CleanUpEndBytes(mapBytesToUnicode);              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                    // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1-byte code page                  if (pCodePage->ByteCount != 2)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                  // Remember our unknown bytes & chars                  _bytesUnknown = pCodePage->ByteReplace;                  charUnknown = pCodePage->UnicodeReplace;                    // Need to make sure the fallback buffer's fallback char is correct                  if (DecoderFallback is InternalDecoderBestFitFallback)                  {                      ((InternalDecoderBestFitFallback)(DecoderFallback)).cReplacement = charUnknown;                  }                    // Is our replacement bytesUnknown a single or double byte character?                  _byteCountUnknown = 1;                  if (_bytesUnknown > 0xff)                      _byteCountUnknown++;                    // We use fallback encoder' which uses ?' which so far all of our tables do as well                  Debug.Assert(_bytesUnknown == 0x3f'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected 0x3f (?) as unknown byte character");                    // Get our mapped section (bytes to allocate = 2 bytes per 65536 Unicode chars + 2 bytes per 65536 DBCS chars)                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  byte* pNativeMemory = GetNativeMemory(65536 * 2 * 2 + 4 + iExtraBytes);                    mapBytesToUnicode = (char*)pNativeMemory;                  mapUnicodeToBytes = (ushort*)(pNativeMemory + 65536 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Move to the beginning of the data section                    byte[] buffer = new byte[m_dataSize];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                  }                    fixed (byte* pBuffer = buffer)                  {                      char* pData = (char*)pBuffer;                        // We start at bytes position 0                      int bytePosition = 0;                      int useBytes = 0;                        while (bytePosition < 0x10000)                      {                          // Get the next byte                          char input = *pData;                          pData++;                            // build our table:                          if (input == 1)                          {                              // Use next data as our byte position                              bytePosition = (int)(*pData);                              pData++;                              continue;                          }                          else if (input < 0x20 && input > 0)                          {                              // Advance input characters                              bytePosition += input;                              continue;                          }                          else if (input == 0xFFFF)                          {                              // Same as our bytePosition                              useBytes = bytePosition;                              input = unchecked((char)bytePosition);                          }                          else if (input == LEAD_BYTE_CHAR) // 0xfffe                          {                              // Lead byte mark                              Debug.Assert(bytePosition < 0x100' "[DBCSCodePageEncoding.LoadManagedCodePage]expected lead byte to be < 0x100");                              useBytes = bytePosition;                              // input stays 0xFFFE                          }                          else if (input == UNICODE_REPLACEMENT_CHAR)                          {                              // Replacement char is already done                              bytePosition++;                              continue;                          }                          else                          {                              // Use this character                              useBytes = bytePosition;                              // input == input;                          }                            // We may need to clean up the selected character & position                          if (CleanUpBytes(ref useBytes))                          {                              // Use this selected character at the selected position' don't do this if not supposed to.                              if (input != LEAD_BYTE_CHAR)                              {                                  // Don't do this for lead byte marks.                                  mapUnicodeToBytes[input] = unchecked((ushort)useBytes);                              }                              mapBytesToUnicode[useBytes] = input;                          }                          bytePosition++;                      }                  }                    // See if we have any clean up to do                  CleanUpEndBytes(mapBytesToUnicode);              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                    // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1-byte code page                  if (pCodePage->ByteCount != 2)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                  // Remember our unknown bytes & chars                  _bytesUnknown = pCodePage->ByteReplace;                  charUnknown = pCodePage->UnicodeReplace;                    // Need to make sure the fallback buffer's fallback char is correct                  if (DecoderFallback is InternalDecoderBestFitFallback)                  {                      ((InternalDecoderBestFitFallback)(DecoderFallback)).cReplacement = charUnknown;                  }                    // Is our replacement bytesUnknown a single or double byte character?                  _byteCountUnknown = 1;                  if (_bytesUnknown > 0xff)                      _byteCountUnknown++;                    // We use fallback encoder' which uses ?' which so far all of our tables do as well                  Debug.Assert(_bytesUnknown == 0x3f'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected 0x3f (?) as unknown byte character");                    // Get our mapped section (bytes to allocate = 2 bytes per 65536 Unicode chars + 2 bytes per 65536 DBCS chars)                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  byte* pNativeMemory = GetNativeMemory(65536 * 2 * 2 + 4 + iExtraBytes);                    mapBytesToUnicode = (char*)pNativeMemory;                  mapUnicodeToBytes = (ushort*)(pNativeMemory + 65536 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Move to the beginning of the data section                    byte[] buffer = new byte[m_dataSize];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                  }                    fixed (byte* pBuffer = buffer)                  {                      char* pData = (char*)pBuffer;                        // We start at bytes position 0                      int bytePosition = 0;                      int useBytes = 0;                        while (bytePosition < 0x10000)                      {                          // Get the next byte                          char input = *pData;                          pData++;                            // build our table:                          if (input == 1)                          {                              // Use next data as our byte position                              bytePosition = (int)(*pData);                              pData++;                              continue;                          }                          else if (input < 0x20 && input > 0)                          {                              // Advance input characters                              bytePosition += input;                              continue;                          }                          else if (input == 0xFFFF)                          {                              // Same as our bytePosition                              useBytes = bytePosition;                              input = unchecked((char)bytePosition);                          }                          else if (input == LEAD_BYTE_CHAR) // 0xfffe                          {                              // Lead byte mark                              Debug.Assert(bytePosition < 0x100' "[DBCSCodePageEncoding.LoadManagedCodePage]expected lead byte to be < 0x100");                              useBytes = bytePosition;                              // input stays 0xFFFE                          }                          else if (input == UNICODE_REPLACEMENT_CHAR)                          {                              // Replacement char is already done                              bytePosition++;                              continue;                          }                          else                          {                              // Use this character                              useBytes = bytePosition;                              // input == input;                          }                            // We may need to clean up the selected character & position                          if (CleanUpBytes(ref useBytes))                          {                              // Use this selected character at the selected position' don't do this if not supposed to.                              if (input != LEAD_BYTE_CHAR)                              {                                  // Don't do this for lead byte marks.                                  mapUnicodeToBytes[input] = unchecked((ushort)useBytes);                              }                              mapBytesToUnicode[useBytes] = input;                          }                          bytePosition++;                      }                  }                    // See if we have any clean up to do                  CleanUpEndBytes(mapBytesToUnicode);              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                    // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1-byte code page                  if (pCodePage->ByteCount != 2)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                  // Remember our unknown bytes & chars                  _bytesUnknown = pCodePage->ByteReplace;                  charUnknown = pCodePage->UnicodeReplace;                    // Need to make sure the fallback buffer's fallback char is correct                  if (DecoderFallback is InternalDecoderBestFitFallback)                  {                      ((InternalDecoderBestFitFallback)(DecoderFallback)).cReplacement = charUnknown;                  }                    // Is our replacement bytesUnknown a single or double byte character?                  _byteCountUnknown = 1;                  if (_bytesUnknown > 0xff)                      _byteCountUnknown++;                    // We use fallback encoder' which uses ?' which so far all of our tables do as well                  Debug.Assert(_bytesUnknown == 0x3f'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected 0x3f (?) as unknown byte character");                    // Get our mapped section (bytes to allocate = 2 bytes per 65536 Unicode chars + 2 bytes per 65536 DBCS chars)                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  byte* pNativeMemory = GetNativeMemory(65536 * 2 * 2 + 4 + iExtraBytes);                    mapBytesToUnicode = (char*)pNativeMemory;                  mapUnicodeToBytes = (ushort*)(pNativeMemory + 65536 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Move to the beginning of the data section                    byte[] buffer = new byte[m_dataSize];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                  }                    fixed (byte* pBuffer = buffer)                  {                      char* pData = (char*)pBuffer;                        // We start at bytes position 0                      int bytePosition = 0;                      int useBytes = 0;                        while (bytePosition < 0x10000)                      {                          // Get the next byte                          char input = *pData;                          pData++;                            // build our table:                          if (input == 1)                          {                              // Use next data as our byte position                              bytePosition = (int)(*pData);                              pData++;                              continue;                          }                          else if (input < 0x20 && input > 0)                          {                              // Advance input characters                              bytePosition += input;                              continue;                          }                          else if (input == 0xFFFF)                          {                              // Same as our bytePosition                              useBytes = bytePosition;                              input = unchecked((char)bytePosition);                          }                          else if (input == LEAD_BYTE_CHAR) // 0xfffe                          {                              // Lead byte mark                              Debug.Assert(bytePosition < 0x100' "[DBCSCodePageEncoding.LoadManagedCodePage]expected lead byte to be < 0x100");                              useBytes = bytePosition;                              // input stays 0xFFFE                          }                          else if (input == UNICODE_REPLACEMENT_CHAR)                          {                              // Replacement char is already done                              bytePosition++;                              continue;                          }                          else                          {                              // Use this character                              useBytes = bytePosition;                              // input == input;                          }                            // We may need to clean up the selected character & position                          if (CleanUpBytes(ref useBytes))                          {                              // Use this selected character at the selected position' don't do this if not supposed to.                              if (input != LEAD_BYTE_CHAR)                              {                                  // Don't do this for lead byte marks.                                  mapUnicodeToBytes[input] = unchecked((ushort)useBytes);                              }                              mapBytesToUnicode[useBytes] = input;                          }                          bytePosition++;                      }                  }                    // See if we have any clean up to do                  CleanUpEndBytes(mapBytesToUnicode);              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                    // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1-byte code page                  if (pCodePage->ByteCount != 2)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                  // Remember our unknown bytes & chars                  _bytesUnknown = pCodePage->ByteReplace;                  charUnknown = pCodePage->UnicodeReplace;                    // Need to make sure the fallback buffer's fallback char is correct                  if (DecoderFallback is InternalDecoderBestFitFallback)                  {                      ((InternalDecoderBestFitFallback)(DecoderFallback)).cReplacement = charUnknown;                  }                    // Is our replacement bytesUnknown a single or double byte character?                  _byteCountUnknown = 1;                  if (_bytesUnknown > 0xff)                      _byteCountUnknown++;                    // We use fallback encoder' which uses ?' which so far all of our tables do as well                  Debug.Assert(_bytesUnknown == 0x3f'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected 0x3f (?) as unknown byte character");                    // Get our mapped section (bytes to allocate = 2 bytes per 65536 Unicode chars + 2 bytes per 65536 DBCS chars)                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  byte* pNativeMemory = GetNativeMemory(65536 * 2 * 2 + 4 + iExtraBytes);                    mapBytesToUnicode = (char*)pNativeMemory;                  mapUnicodeToBytes = (ushort*)(pNativeMemory + 65536 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Move to the beginning of the data section                    byte[] buffer = new byte[m_dataSize];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                  }                    fixed (byte* pBuffer = buffer)                  {                      char* pData = (char*)pBuffer;                        // We start at bytes position 0                      int bytePosition = 0;                      int useBytes = 0;                        while (bytePosition < 0x10000)                      {                          // Get the next byte                          char input = *pData;                          pData++;                            // build our table:                          if (input == 1)                          {                              // Use next data as our byte position                              bytePosition = (int)(*pData);                              pData++;                              continue;                          }                          else if (input < 0x20 && input > 0)                          {                              // Advance input characters                              bytePosition += input;                              continue;                          }                          else if (input == 0xFFFF)                          {                              // Same as our bytePosition                              useBytes = bytePosition;                              input = unchecked((char)bytePosition);                          }                          else if (input == LEAD_BYTE_CHAR) // 0xfffe                          {                              // Lead byte mark                              Debug.Assert(bytePosition < 0x100' "[DBCSCodePageEncoding.LoadManagedCodePage]expected lead byte to be < 0x100");                              useBytes = bytePosition;                              // input stays 0xFFFE                          }                          else if (input == UNICODE_REPLACEMENT_CHAR)                          {                              // Replacement char is already done                              bytePosition++;                              continue;                          }                          else                          {                              // Use this character                              useBytes = bytePosition;                              // input == input;                          }                            // We may need to clean up the selected character & position                          if (CleanUpBytes(ref useBytes))                          {                              // Use this selected character at the selected position' don't do this if not supposed to.                              if (input != LEAD_BYTE_CHAR)                              {                                  // Don't do this for lead byte marks.                                  mapUnicodeToBytes[input] = unchecked((ushort)useBytes);                              }                              mapBytesToUnicode[useBytes] = input;                          }                          bytePosition++;                      }                  }                    // See if we have any clean up to do                  CleanUpEndBytes(mapBytesToUnicode);              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                    // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1-byte code page                  if (pCodePage->ByteCount != 2)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                  // Remember our unknown bytes & chars                  _bytesUnknown = pCodePage->ByteReplace;                  charUnknown = pCodePage->UnicodeReplace;                    // Need to make sure the fallback buffer's fallback char is correct                  if (DecoderFallback is InternalDecoderBestFitFallback)                  {                      ((InternalDecoderBestFitFallback)(DecoderFallback)).cReplacement = charUnknown;                  }                    // Is our replacement bytesUnknown a single or double byte character?                  _byteCountUnknown = 1;                  if (_bytesUnknown > 0xff)                      _byteCountUnknown++;                    // We use fallback encoder' which uses ?' which so far all of our tables do as well                  Debug.Assert(_bytesUnknown == 0x3f'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected 0x3f (?) as unknown byte character");                    // Get our mapped section (bytes to allocate = 2 bytes per 65536 Unicode chars + 2 bytes per 65536 DBCS chars)                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  byte* pNativeMemory = GetNativeMemory(65536 * 2 * 2 + 4 + iExtraBytes);                    mapBytesToUnicode = (char*)pNativeMemory;                  mapUnicodeToBytes = (ushort*)(pNativeMemory + 65536 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Move to the beginning of the data section                    byte[] buffer = new byte[m_dataSize];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                  }                    fixed (byte* pBuffer = buffer)                  {                      char* pData = (char*)pBuffer;                        // We start at bytes position 0                      int bytePosition = 0;                      int useBytes = 0;                        while (bytePosition < 0x10000)                      {                          // Get the next byte                          char input = *pData;                          pData++;                            // build our table:                          if (input == 1)                          {                              // Use next data as our byte position                              bytePosition = (int)(*pData);                              pData++;                              continue;                          }                          else if (input < 0x20 && input > 0)                          {                              // Advance input characters                              bytePosition += input;                              continue;                          }                          else if (input == 0xFFFF)                          {                              // Same as our bytePosition                              useBytes = bytePosition;                              input = unchecked((char)bytePosition);                          }                          else if (input == LEAD_BYTE_CHAR) // 0xfffe                          {                              // Lead byte mark                              Debug.Assert(bytePosition < 0x100' "[DBCSCodePageEncoding.LoadManagedCodePage]expected lead byte to be < 0x100");                              useBytes = bytePosition;                              // input stays 0xFFFE                          }                          else if (input == UNICODE_REPLACEMENT_CHAR)                          {                              // Replacement char is already done                              bytePosition++;                              continue;                          }                          else                          {                              // Use this character                              useBytes = bytePosition;                              // input == input;                          }                            // We may need to clean up the selected character & position                          if (CleanUpBytes(ref useBytes))                          {                              // Use this selected character at the selected position' don't do this if not supposed to.                              if (input != LEAD_BYTE_CHAR)                              {                                  // Don't do this for lead byte marks.                                  mapUnicodeToBytes[input] = unchecked((ushort)useBytes);                              }                              mapBytesToUnicode[useBytes] = input;                          }                          bytePosition++;                      }                  }                    // See if we have any clean up to do                  CleanUpEndBytes(mapBytesToUnicode);              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                    // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1-byte code page                  if (pCodePage->ByteCount != 2)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                  // Remember our unknown bytes & chars                  _bytesUnknown = pCodePage->ByteReplace;                  charUnknown = pCodePage->UnicodeReplace;                    // Need to make sure the fallback buffer's fallback char is correct                  if (DecoderFallback is InternalDecoderBestFitFallback)                  {                      ((InternalDecoderBestFitFallback)(DecoderFallback)).cReplacement = charUnknown;                  }                    // Is our replacement bytesUnknown a single or double byte character?                  _byteCountUnknown = 1;                  if (_bytesUnknown > 0xff)                      _byteCountUnknown++;                    // We use fallback encoder' which uses ?' which so far all of our tables do as well                  Debug.Assert(_bytesUnknown == 0x3f'                      "[DBCSCodePageEncoding.LoadManagedCodePage]Expected 0x3f (?) as unknown byte character");                    // Get our mapped section (bytes to allocate = 2 bytes per 65536 Unicode chars + 2 bytes per 65536 DBCS chars)                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  byte* pNativeMemory = GetNativeMemory(65536 * 2 * 2 + 4 + iExtraBytes);                    mapBytesToUnicode = (char*)pNativeMemory;                  mapUnicodeToBytes = (ushort*)(pNativeMemory + 65536 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Move to the beginning of the data section                    byte[] buffer = new byte[m_dataSize];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                  }                    fixed (byte* pBuffer = buffer)                  {                      char* pData = (char*)pBuffer;                        // We start at bytes position 0                      int bytePosition = 0;                      int useBytes = 0;                        while (bytePosition < 0x10000)                      {                          // Get the next byte                          char input = *pData;                          pData++;                            // build our table:                          if (input == 1)                          {                              // Use next data as our byte position                              bytePosition = (int)(*pData);                              pData++;                              continue;                          }                          else if (input < 0x20 && input > 0)                          {                              // Advance input characters                              bytePosition += input;                              continue;                          }                          else if (input == 0xFFFF)                          {                              // Same as our bytePosition                              useBytes = bytePosition;                              input = unchecked((char)bytePosition);                          }                          else if (input == LEAD_BYTE_CHAR) // 0xfffe                          {                              // Lead byte mark                              Debug.Assert(bytePosition < 0x100' "[DBCSCodePageEncoding.LoadManagedCodePage]expected lead byte to be < 0x100");                              useBytes = bytePosition;                              // input stays 0xFFFE                          }                          else if (input == UNICODE_REPLACEMENT_CHAR)                          {                              // Replacement char is already done                              bytePosition++;                              continue;                          }                          else                          {                              // Use this character                              useBytes = bytePosition;                              // input == input;                          }                            // We may need to clean up the selected character & position                          if (CleanUpBytes(ref useBytes))                          {                              // Use this selected character at the selected position' don't do this if not supposed to.                              if (input != LEAD_BYTE_CHAR)                              {                                  // Don't do this for lead byte marks.                                  mapUnicodeToBytes[input] = unchecked((ushort)useBytes);                              }                              mapBytesToUnicode[useBytes] = input;                          }                          bytePosition++;                      }                  }                    // See if we have any clean up to do                  CleanUpEndBytes(mapBytesToUnicode);              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First we have to advance past original character mapping table                      // Move to the beginning of the data section                      byte[] buffer = new byte[m_dataSize];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' m_dataSize);                      }                        fixed (byte* pBuffer = buffer)                      {                          char* pData = (char*)pBuffer;                              // We start at bytes position 0                          int bytesPosition = 0;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // All other cases add 1 to bytes position                                  bytesPosition++;                              }                          }                            // Now bytesPosition is at start of bytes->unicode best fit table                          char* pBytes2Unicode = pData;                            // Now pData should be pointing to first word of bytes -> unicode best fit table                          // (which we're also not using at the moment)                          int iBestFitCount = 0;                          bytesPosition = *pData;                          pData++;                            while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless it's unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them the same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              iBestFitCount++;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // Now we know how big the best fit table has to be                          char[] arrayTemp = new char[iBestFitCount * 2];                            // Now we know how many best fits we have' so go back & read them in                          iBestFitCount = 0;                          pData = pBytes2Unicode;                          bytesPosition = *pData;                          pData++;                          bool bOutOfOrder = false;                            // Read it all in again                          while (bytesPosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  bytesPosition = (int)(*pData);                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  bytesPosition += input;                              }                              else                              {                                  // Use this character (unless its unknown' unk just skips 1)                                  if (input != UNICODE_REPLACEMENT_CHAR)                                  {                                      int correctedChar = bytesPosition;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          // Sometimes correction makes them same as no best fit' skip those.                                          if (mapBytesToUnicode[correctedChar] != input)                                          {                                              if (correctedChar != bytesPosition)                                                  bOutOfOrder = true;                                                arrayTemp[iBestFitCount++] = unchecked((char)correctedChar);                                              arrayTemp[iBestFitCount++] = input;                                          }                                      }                                  }                                    // Position gets incremented in any case.                                  bytesPosition++;                              }                          }                            // If they're out of order we need to sort them.                          if (bOutOfOrder)                          {                              Debug.Assert((arrayTemp.Length / 2) < 20'                                  "[DBCSCodePageEncoding.ReadBestFitTable]Expected small best fit table < 20 for code page " + CodePage + "' not " + arrayTemp.Length / 2);                                for (int i = 0; i < arrayTemp.Length - 2; i += 2)                              {                                  int iSmallest = i;                                  char cSmallest = arrayTemp[i];                                    for (int j = i + 2; j < arrayTemp.Length; j += 2)                                  {                                      // Find smallest one for front                                      if (cSmallest > arrayTemp[j])                                      {                                          cSmallest = arrayTemp[j];                                          iSmallest = j;                                      }                                  }                                    // If smallest one is something else' switch them                                  if (iSmallest != i)                                  {                                      char temp = arrayTemp[iSmallest];                                      arrayTemp[iSmallest] = arrayTemp[i];                                      arrayTemp[i] = temp;                                      temp = arrayTemp[iSmallest + 1];                                      arrayTemp[iSmallest + 1] = arrayTemp[i + 1];                                      arrayTemp[i + 1] = temp;                                  }                              }                          }                            // Remember our array                          arrayBytesBestFit = arrayTemp;                            // Now were at beginning of Unicode -> Bytes best fit table' need to count them                          char* pUnicode2Bytes = pData;                          int unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Same as our unicodePosition or use this character                                  if (input > 0)                                      iBestFitCount++;                                  unicodePosition++;                              }                          }                            // Allocate our table                          arrayTemp = new char[iBestFitCount * 2];                            // Now do it again to fill the array with real values                          pData = pUnicode2Bytes;                          unicodePosition = *(pData++);                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              char input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next data as our byte position                                  unicodePosition = (int)*pData;                                  pData++;                              }                              else if (input < 0x20 && input > 0)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  if (input > 0)                                  {                                      // Use this character' may need to clean it up                                      int correctedChar = (int)input;                                      if (CleanUpBytes(ref correctedChar))                                      {                                          arrayTemp[iBestFitCount++] = unchecked((char)unicodePosition);                                          // Have to map it to Unicode because best fit will need Unicode value of best fit char.                                          arrayTemp[iBestFitCount++] = mapBytesToUnicode[correctedChar];                                      }                                  }                                  unicodePosition++;                              }                          }                            // Remember our array                          arrayUnicodeBestFit = arrayTemp;                      }                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetBytes,The following statement contains a magic number: while ((ch = (fallbackBuffer == null) ? '\0' : fallbackHelper.InternalGetNextChar()) != 0 ||                      chars < charEnd)              {                  // First unwind any fallback                  if (ch == 0)                  {                      // No fallback' just get next char                      ch = *chars;                      chars++;                  }                    // get byte for this char                  ushort sTemp = mapUnicodeToBytes[ch];                    // Check for fallback' this'll catch surrogate pairs too.                  if (sTemp == 0 && ch != (char)0)                  {                      if (fallbackBuffer == null)                      {                          // Initialize the buffer                          Debug.Assert(encoder == null'                              "[DBCSCodePageEncoding.GetBytes]Expected delayed create fallback only if no encoder.");                          fallbackBuffer = EncoderFallback.CreateFallbackBuffer();                          fallbackHelper = new EncoderFallbackBufferHelper(fallbackBuffer);                          fallbackHelper.InternalInitialize(charEnd - charCount' charEnd' encoder' true);                      }                        // Get Fallback                      fallbackHelper.InternalFallback(ch' ref chars);                      continue;                  }                    // We'll use this one (or two)                  // Bounds check                    // Go ahead and add it' lead byte 1st if necessary                  if (sTemp >= 0x100)                  {                      if (bytes + 1 >= byteEnd)                      {                          // didn't use this char' we'll throw or use buffer                          if (fallbackBuffer == null || fallbackHelper.bFallingBack == false)                          {                              Debug.Assert(chars > charStart'                                  "[DBCSCodePageEncoding.GetBytes]Expected chars to have advanced (double byte case)");                              chars--;                                        // don't use last char                          }                          else                              fallbackBuffer.MovePrevious();                  // don't use last fallback                          ThrowBytesOverflow(encoder' chars == charStart);    // throw ?                          break;                                              // don't throw' stop                      }                        *bytes = unchecked((byte)(sTemp >> 8));                      bytes++;                  }                  // Single byte                  else if (bytes >= byteEnd)                  {                      // didn't use this char' we'll throw or use buffer                      if (fallbackBuffer == null || fallbackHelper.bFallingBack == false)                      {                          Debug.Assert(chars > charStart'                              "[DBCSCodePageEncoding.GetBytes]Expected chars to have advanced (single byte case)");                          chars--;                                        // don't use last char                      }                      else                          fallbackBuffer.MovePrevious();                  // don't use last fallback                      ThrowBytesOverflow(encoder' chars == charStart);    // throw ?                      break;                                              // don't throw' stop                  }                    *bytes = unchecked((byte)(sTemp & 0xff));                  bytes++;              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetCharCount,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver > 0)              {                  // We have a left over byte?                  if (count == 0)                  {                      // No input though                      if (!decoder.MustFlush)                      {                          // Don't have to flush                          return 0;                      }                          Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetCharCount]Expected empty fallback buffer");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(bytes' null);                        byte[] byteBuffer = new byte[] { unchecked((byte)decoder.bLeftOver) };                      return fallbackHelper.InternalFallback(byteBuffer' bytes);                  }                    // Get our full info                  int iBytes = decoder.bLeftOver << 8;                  iBytes |= (*bytes);                  bytes++;                    // This is either 1 known char or fallback                  // Already counted 1 char                  // Look up our bytes                  char cDecoder = mapBytesToUnicode[iBytes];                  if (cDecoder == 0 && iBytes != 0)                  {                      // Deallocate preallocated one                      charCount--;                        // We'll need a fallback                      Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetCharCount]Expected empty fallback buffer for unknown pair");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(byteEnd - count' null);                        // Do fallback' we know there are 2 bytes                      byte[] byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      charCount += fallbackHelper.InternalFallback(byteBuffer' bytes);                  }                  // else we already reserved space for this one.              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetCharCount,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver > 0)              {                  // We have a left over byte?                  if (count == 0)                  {                      // No input though                      if (!decoder.MustFlush)                      {                          // Don't have to flush                          return 0;                      }                          Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetCharCount]Expected empty fallback buffer");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(bytes' null);                        byte[] byteBuffer = new byte[] { unchecked((byte)decoder.bLeftOver) };                      return fallbackHelper.InternalFallback(byteBuffer' bytes);                  }                    // Get our full info                  int iBytes = decoder.bLeftOver << 8;                  iBytes |= (*bytes);                  bytes++;                    // This is either 1 known char or fallback                  // Already counted 1 char                  // Look up our bytes                  char cDecoder = mapBytesToUnicode[iBytes];                  if (cDecoder == 0 && iBytes != 0)                  {                      // Deallocate preallocated one                      charCount--;                        // We'll need a fallback                      Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetCharCount]Expected empty fallback buffer for unknown pair");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(byteEnd - count' null);                        // Do fallback' we know there are 2 bytes                      byte[] byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      charCount += fallbackHelper.InternalFallback(byteBuffer' bytes);                  }                  // else we already reserved space for this one.              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetCharCount,The following statement contains a magic number: while (bytes < byteEnd)              {                  // Faster if don't use *bytes++;                  int iBytes = *bytes;                  bytes++;                  char c = mapBytesToUnicode[iBytes];                    // See if it was a double byte character                  if (c == LEAD_BYTE_CHAR)                  {                      // It's a lead byte                      charCount--; // deallocate preallocated lead byte                      if (bytes < byteEnd)                      {                          // Have another to use' so use it                          iBytes <<= 8;                          iBytes |= *bytes;                          bytes++;                          c = mapBytesToUnicode[iBytes];                      }                      else                      {                          // No input left                          if (decoder == null || decoder.MustFlush)                          {                              // have to flush anyway' set to unknown so we use fallback                              charCount++; // reallocate deallocated lead byte                              c = UNKNOWN_CHAR_FLAG;                          }                          else                          {                              // We'll stick it in decoder                              break;                          }                      }                  }                    // See if it was unknown.                  // Unknown and known chars already allocated' but fallbacks aren't                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      if (fallbackBuffer == null)                      {                          if (decoder == null)                              fallbackBuffer = DecoderFallback.CreateFallbackBuffer();                          else                              fallbackBuffer = decoder.FallbackBuffer;                          fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                          fallbackHelper.InternalInitialize(byteEnd - count' null);                      }                        // Do fallback                      charCount--;    // Get rid of preallocated extra char                      byte[] byteBuffer = null;                      if (iBytes < 0x100)                          byteBuffer = new byte[] { unchecked((byte)iBytes) };                      else                          byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      charCount += fallbackHelper.InternalFallback(byteBuffer' bytes);                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetCharCount,The following statement contains a magic number: while (bytes < byteEnd)              {                  // Faster if don't use *bytes++;                  int iBytes = *bytes;                  bytes++;                  char c = mapBytesToUnicode[iBytes];                    // See if it was a double byte character                  if (c == LEAD_BYTE_CHAR)                  {                      // It's a lead byte                      charCount--; // deallocate preallocated lead byte                      if (bytes < byteEnd)                      {                          // Have another to use' so use it                          iBytes <<= 8;                          iBytes |= *bytes;                          bytes++;                          c = mapBytesToUnicode[iBytes];                      }                      else                      {                          // No input left                          if (decoder == null || decoder.MustFlush)                          {                              // have to flush anyway' set to unknown so we use fallback                              charCount++; // reallocate deallocated lead byte                              c = UNKNOWN_CHAR_FLAG;                          }                          else                          {                              // We'll stick it in decoder                              break;                          }                      }                  }                    // See if it was unknown.                  // Unknown and known chars already allocated' but fallbacks aren't                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      if (fallbackBuffer == null)                      {                          if (decoder == null)                              fallbackBuffer = DecoderFallback.CreateFallbackBuffer();                          else                              fallbackBuffer = decoder.FallbackBuffer;                          fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                          fallbackHelper.InternalInitialize(byteEnd - count' null);                      }                        // Do fallback                      charCount--;    // Get rid of preallocated extra char                      byte[] byteBuffer = null;                      if (iBytes < 0x100)                          byteBuffer = new byte[] { unchecked((byte)iBytes) };                      else                          byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      charCount += fallbackHelper.InternalFallback(byteBuffer' bytes);                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetChars,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver > 0)              {                  // We have a left over byte?                  if (byteCount == 0)                  {                      // No input though                      if (!decoder.MustFlush)                      {                          // Don't have to flush                          return 0;                      }                        // Well' we're flushing' so use '?' or fallback                      // fallback leftover byte                      Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetChars]Expected empty fallback");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(bytes' charEnd);                        // If no room' it's hopeless' this was 1st fallback                      byte[] byteBuffer = new byte[] { unchecked((byte)decoder.bLeftOver) };                      if (!fallbackHelper.InternalFallback(byteBuffer' bytes' ref chars))                          ThrowCharsOverflow(decoder' true);                        decoder.bLeftOver = 0;                        // Done' return it                      return (int)(chars - charStart);                  }                    // Get our full info                  int iBytes = decoder.bLeftOver << 8;                  iBytes |= (*bytes);                  bytes++;                    // Look up our bytes                  char cDecoder = mapBytesToUnicode[iBytes];                  if (cDecoder == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetChars]Expected empty fallback for two bytes");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(byteEnd - byteCount' charEnd);                        byte[] byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      if (!fallbackHelper.InternalFallback(byteBuffer' bytes' ref chars))                          ThrowCharsOverflow(decoder' true);                  }                  else                  {                      // Do we have output room?' hopeless if not' this is first char                      if (chars >= charEnd)                          ThrowCharsOverflow(decoder' true);                        *(chars++) = cDecoder;                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetChars,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver > 0)              {                  // We have a left over byte?                  if (byteCount == 0)                  {                      // No input though                      if (!decoder.MustFlush)                      {                          // Don't have to flush                          return 0;                      }                        // Well' we're flushing' so use '?' or fallback                      // fallback leftover byte                      Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetChars]Expected empty fallback");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(bytes' charEnd);                        // If no room' it's hopeless' this was 1st fallback                      byte[] byteBuffer = new byte[] { unchecked((byte)decoder.bLeftOver) };                      if (!fallbackHelper.InternalFallback(byteBuffer' bytes' ref chars))                          ThrowCharsOverflow(decoder' true);                        decoder.bLeftOver = 0;                        // Done' return it                      return (int)(chars - charStart);                  }                    // Get our full info                  int iBytes = decoder.bLeftOver << 8;                  iBytes |= (*bytes);                  bytes++;                    // Look up our bytes                  char cDecoder = mapBytesToUnicode[iBytes];                  if (cDecoder == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      Debug.Assert(fallbackBuffer == null'                          "[DBCSCodePageEncoding.GetChars]Expected empty fallback for two bytes");                      fallbackBuffer = decoder.FallbackBuffer;                      fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                      fallbackHelper.InternalInitialize(byteEnd - byteCount' charEnd);                        byte[] byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      if (!fallbackHelper.InternalFallback(byteBuffer' bytes' ref chars))                          ThrowCharsOverflow(decoder' true);                  }                  else                  {                      // Do we have output room?' hopeless if not' this is first char                      if (chars >= charEnd)                          ThrowCharsOverflow(decoder' true);                        *(chars++) = cDecoder;                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetChars,The following statement contains a magic number: while (bytes < byteEnd)              {                  // Faster if don't use *bytes++;                  int iBytes = *bytes;                  bytes++;                  char c = mapBytesToUnicode[iBytes];                    // See if it was a double byte character                  if (c == LEAD_BYTE_CHAR)                  {                      // Its a lead byte                      if (bytes < byteEnd)                      {                          // Have another to use' so use it                          iBytes <<= 8;                          iBytes |= *bytes;                          bytes++;                          c = mapBytesToUnicode[iBytes];                      }                      else                      {                          // No input left                          if (decoder == null || decoder.MustFlush)                          {                              // have to flush anyway' set to unknown so we use fallback                              c = UNKNOWN_CHAR_FLAG;                          }                          else                          {                              // Stick it in decoder                              bUsedDecoder = true;                              decoder.bLeftOver = (byte)iBytes;                              break;                          }                      }                  }                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      if (fallbackBuffer == null)                      {                          if (decoder == null)                              fallbackBuffer = DecoderFallback.CreateFallbackBuffer();                          else                              fallbackBuffer = decoder.FallbackBuffer;                          fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                          fallbackHelper.InternalInitialize(byteEnd - byteCount' charEnd);                      }                        // Do fallback                      byte[] byteBuffer = null;                      if (iBytes < 0x100)                          byteBuffer = new byte[] { unchecked((byte)iBytes) };                      else                          byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      if (!fallbackHelper.InternalFallback(byteBuffer' bytes' ref chars))                      {                          // May or may not throw' but we didn't get these byte(s)                          Debug.Assert(bytes >= byteStart + byteBuffer.Length'                              "[DBCSCodePageEncoding.GetChars]Expected bytes to have advanced for fallback");                          bytes -= byteBuffer.Length;                           // didn't use these byte(s)                          fallbackHelper.InternalReset();                     // Didn't fall this back                          ThrowCharsOverflow(decoder' bytes == byteStart);    // throw?                          break;                                              // don't throw' but stop loop                      }                  }                  else                  {                      // Do we have buffer room?                      if (chars >= charEnd)                      {                          // May or may not throw' but we didn't get these byte(s)                          Debug.Assert(bytes > byteStart'                              "[DBCSCodePageEncoding.GetChars]Expected bytes to have advanced for lead byte");                          bytes--;                                            // unused byte                          if (iBytes >= 0x100)                          {                              Debug.Assert(bytes > byteStart'                                  "[DBCSCodePageEncoding.GetChars]Expected bytes to have advanced for trail byte");                              bytes--;                                        // 2nd unused byte                          }                          ThrowCharsOverflow(decoder' bytes == byteStart);    // throw?                          break;                                              // don't throw' but stop loop                      }                        *(chars++) = c;                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetChars,The following statement contains a magic number: while (bytes < byteEnd)              {                  // Faster if don't use *bytes++;                  int iBytes = *bytes;                  bytes++;                  char c = mapBytesToUnicode[iBytes];                    // See if it was a double byte character                  if (c == LEAD_BYTE_CHAR)                  {                      // Its a lead byte                      if (bytes < byteEnd)                      {                          // Have another to use' so use it                          iBytes <<= 8;                          iBytes |= *bytes;                          bytes++;                          c = mapBytesToUnicode[iBytes];                      }                      else                      {                          // No input left                          if (decoder == null || decoder.MustFlush)                          {                              // have to flush anyway' set to unknown so we use fallback                              c = UNKNOWN_CHAR_FLAG;                          }                          else                          {                              // Stick it in decoder                              bUsedDecoder = true;                              decoder.bLeftOver = (byte)iBytes;                              break;                          }                      }                  }                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      if (fallbackBuffer == null)                      {                          if (decoder == null)                              fallbackBuffer = DecoderFallback.CreateFallbackBuffer();                          else                              fallbackBuffer = decoder.FallbackBuffer;                          fallbackHelper = new DecoderFallbackBufferHelper(fallbackBuffer);                          fallbackHelper.InternalInitialize(byteEnd - byteCount' charEnd);                      }                        // Do fallback                      byte[] byteBuffer = null;                      if (iBytes < 0x100)                          byteBuffer = new byte[] { unchecked((byte)iBytes) };                      else                          byteBuffer = new byte[] { unchecked((byte)(iBytes >> 8))' unchecked((byte)iBytes) };                      if (!fallbackHelper.InternalFallback(byteBuffer' bytes' ref chars))                      {                          // May or may not throw' but we didn't get these byte(s)                          Debug.Assert(bytes >= byteStart + byteBuffer.Length'                              "[DBCSCodePageEncoding.GetChars]Expected bytes to have advanced for fallback");                          bytes -= byteBuffer.Length;                           // didn't use these byte(s)                          fallbackHelper.InternalReset();                     // Didn't fall this back                          ThrowCharsOverflow(decoder' bytes == byteStart);    // throw?                          break;                                              // don't throw' but stop loop                      }                  }                  else                  {                      // Do we have buffer room?                      if (chars >= charEnd)                      {                          // May or may not throw' but we didn't get these byte(s)                          Debug.Assert(bytes > byteStart'                              "[DBCSCodePageEncoding.GetChars]Expected bytes to have advanced for lead byte");                          bytes--;                                            // unused byte                          if (iBytes >= 0x100)                          {                              Debug.Assert(bytes > byteStart'                                  "[DBCSCodePageEncoding.GetChars]Expected bytes to have advanced for trail byte");                              bytes--;                                        // 2nd unused byte                          }                          ThrowCharsOverflow(decoder' bytes == byteStart);    // throw?                          break;                                              // don't throw' but stop loop                      }                        *(chars++) = c;                  }              }
Magic Number,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,GetMaxByteCount,The following statement contains a magic number: byteCount *= 2;
Magic Number,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: if (bytesCheck.Length == 0 || bytesCheck.Length > 2)                  return '\0';
Magic Number,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: if (bytesCheck.Length == 1)                  cCheck = unchecked((char)bytesCheck[0]);              else                  cCheck = unchecked((char)((bytesCheck[0] << 8) + bytesCheck[1]));
Magic Number,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: if (cCheck < _oFallback.arrayBestFit[0] || cCheck > _oFallback.arrayBestFit[highBound - 2])                  return '\0';
Magic Number,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: while ((iDiff = (highBound - lowBound)) > 6)              {                  // Look in the middle' which is complicated by the fact that we have 2 #s for each pair'                  // so we don't want index to be odd because it must be word aligned.                  // Also note that index can never == highBound (because diff is rounded down)                  index = ((iDiff / 2) + lowBound) & 0xFFFE;                    char cTest = _oFallback.arrayBestFit[index];                  if (cTest == cCheck)                  {                      // We found it                      Debug.Assert(index + 1 < _oFallback.arrayBestFit.Length'                          "[InternalDecoderBestFitFallbackBuffer.TryBestFit]Expected replacement character at end of array");                      return _oFallback.arrayBestFit[index + 1];                  }                  else if (cTest < cCheck)                  {                      // We weren't high enough                      lowBound = index;                  }                  else                  {                      // We weren't low enough                      highBound = index;                  }              }
Magic Number,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: while ((iDiff = (highBound - lowBound)) > 6)              {                  // Look in the middle' which is complicated by the fact that we have 2 #s for each pair'                  // so we don't want index to be odd because it must be word aligned.                  // Also note that index can never == highBound (because diff is rounded down)                  index = ((iDiff / 2) + lowBound) & 0xFFFE;                    char cTest = _oFallback.arrayBestFit[index];                  if (cTest == cCheck)                  {                      // We found it                      Debug.Assert(index + 1 < _oFallback.arrayBestFit.Length'                          "[InternalDecoderBestFitFallbackBuffer.TryBestFit]Expected replacement character at end of array");                      return _oFallback.arrayBestFit[index + 1];                  }                  else if (cTest < cCheck)                  {                      // We weren't high enough                      lowBound = index;                  }                  else                  {                      // We weren't low enough                      highBound = index;                  }              }
Magic Number,System.Text,InternalDecoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: for (index = lowBound; index < highBound; index += 2)              {                  if (_oFallback.arrayBestFit[index] == cCheck)                  {                      // We found it                      Debug.Assert(index + 1 < _oFallback.arrayBestFit.Length'                          "[InternalDecoderBestFitFallbackBuffer.TryBestFit]Expected replacement character at end of array");                      return _oFallback.arrayBestFit[index + 1];                  }              }
Magic Number,System.Text,DecoderFallbackBufferHelper,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderFallbackBufferHelper.cs,ThrowLastBytesRecursive,The following statement contains a magic number: StringBuilder strBytes = new StringBuilder(bytesUnknown.Length * 3);
Magic Number,System.Text,DecoderFallbackBufferHelper,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderFallbackBufferHelper.cs,ThrowLastBytesRecursive,The following statement contains a magic number: for (i = 0; i < bytesUnknown.Length && i < 20; i++)              {                  if (strBytes.Length > 0)                      strBytes.Append(" ");                  strBytes.AppendFormat(CultureInfo.InvariantCulture' "\\x{0:X2}"' bytesUnknown[i]);              }
Magic Number,System.Text,DecoderFallbackBufferHelper,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DecoderFallbackBufferHelper.cs,ThrowLastBytesRecursive,The following statement contains a magic number: if (i == 20)                  strBytes.Append(" ...");
Magic Number,System.Text,InternalEncoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderBestFitFallback.cs,Fallback,The following statement contains a magic number: _iCount = _iSize = 2;
Magic Number,System.Text,InternalEncoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: while ((iDiff = (highBound - lowBound)) > 6)              {                  // Look in the middle' which is complicated by the fact that we have 2 #s for each pair'                  // so we don't want index to be odd because we want to be on word boundaries.                  // Also note that index can never == highBound (because diff is rounded down)                  index = ((iDiff / 2) + lowBound) & 0xFFFE;                    char cTest = _oFallback.arrayBestFit[index];                  if (cTest == cUnknown)                  {                      // We found it                      Debug.Assert(index + 1 < _oFallback.arrayBestFit.Length'                          "[InternalEncoderBestFitFallbackBuffer.TryBestFit]Expected replacement character at end of array");                      return _oFallback.arrayBestFit[index + 1];                  }                  else if (cTest < cUnknown)                  {                      // We weren't high enough                      lowBound = index;                  }                  else                  {                      // We weren't low enough                      highBound = index;                  }              }
Magic Number,System.Text,InternalEncoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: while ((iDiff = (highBound - lowBound)) > 6)              {                  // Look in the middle' which is complicated by the fact that we have 2 #s for each pair'                  // so we don't want index to be odd because we want to be on word boundaries.                  // Also note that index can never == highBound (because diff is rounded down)                  index = ((iDiff / 2) + lowBound) & 0xFFFE;                    char cTest = _oFallback.arrayBestFit[index];                  if (cTest == cUnknown)                  {                      // We found it                      Debug.Assert(index + 1 < _oFallback.arrayBestFit.Length'                          "[InternalEncoderBestFitFallbackBuffer.TryBestFit]Expected replacement character at end of array");                      return _oFallback.arrayBestFit[index + 1];                  }                  else if (cTest < cUnknown)                  {                      // We weren't high enough                      lowBound = index;                  }                  else                  {                      // We weren't low enough                      highBound = index;                  }              }
Magic Number,System.Text,InternalEncoderBestFitFallbackBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncoderBestFitFallback.cs,TryBestFit,The following statement contains a magic number: for (index = lowBound; index < highBound; index += 2)              {                  if (_oFallback.arrayBestFit[index] == cUnknown)                  {                      // We found it                      Debug.Assert(index + 1 < _oFallback.arrayBestFit.Length'                          "[InternalEncoderBestFitFallbackBuffer.TryBestFit]Expected replacement character at end of array");                      return _oFallback.arrayBestFit[index + 1];                  }              }
Magic Number,System.Text,EncodingByteBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingByteBuffer.cs,AddByte,The following statement contains a magic number: return (AddByte(b1' 2 + moreBytesExpected) &&                      AddByte(b2' 1 + moreBytesExpected) &&                      AddByte(b3' moreBytesExpected));
Magic Number,System.Text,EncodingByteBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingByteBuffer.cs,AddByte,The following statement contains a magic number: return (AddByte(b1' 3) &&                      AddByte(b2' 2) &&                      AddByte(b3' 1) &&                      AddByte(b4' 0));
Magic Number,System.Text,EncodingByteBuffer,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingByteBuffer.cs,AddByte,The following statement contains a magic number: return (AddByte(b1' 3) &&                      AddByte(b2' 2) &&                      AddByte(b3' 1) &&                      AddByte(b4' 0));
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingNLS,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingNLS.cs,GetLocalizedEncodingNameResource,The following statement contains a magic number: switch (codePage)              {                  case 37: return SR.Globalization_cp_37;                  case 437: return SR.Globalization_cp_437;                  case 500: return SR.Globalization_cp_500;                  case 708: return SR.Globalization_cp_708;                  case 720: return SR.Globalization_cp_720;                  case 737: return SR.Globalization_cp_737;                  case 775: return SR.Globalization_cp_775;                  case 850: return SR.Globalization_cp_850;                  case 852: return SR.Globalization_cp_852;                  case 855: return SR.Globalization_cp_855;                  case 857: return SR.Globalization_cp_857;                  case 858: return SR.Globalization_cp_858;                  case 860: return SR.Globalization_cp_860;                  case 861: return SR.Globalization_cp_861;                  case 862: return SR.Globalization_cp_862;                  case 863: return SR.Globalization_cp_863;                  case 864: return SR.Globalization_cp_864;                  case 865: return SR.Globalization_cp_865;                  case 866: return SR.Globalization_cp_866;                  case 869: return SR.Globalization_cp_869;                  case 870: return SR.Globalization_cp_870;                  case 874: return SR.Globalization_cp_874;                  case 875: return SR.Globalization_cp_875;                  case 932: return SR.Globalization_cp_932;                  case 936: return SR.Globalization_cp_936;                  case 949: return SR.Globalization_cp_949;                  case 950: return SR.Globalization_cp_950;                  case 1026: return SR.Globalization_cp_1026;                  case 1047: return SR.Globalization_cp_1047;                  case 1140: return SR.Globalization_cp_1140;                  case 1141: return SR.Globalization_cp_1141;                  case 1142: return SR.Globalization_cp_1142;                  case 1143: return SR.Globalization_cp_1143;                  case 1144: return SR.Globalization_cp_1144;                  case 1145: return SR.Globalization_cp_1145;                  case 1146: return SR.Globalization_cp_1146;                  case 1147: return SR.Globalization_cp_1147;                  case 1148: return SR.Globalization_cp_1148;                  case 1149: return SR.Globalization_cp_1149;                  case 1250: return SR.Globalization_cp_1250;                  case 1251: return SR.Globalization_cp_1251;                  case 1252: return SR.Globalization_cp_1252;                  case 1253: return SR.Globalization_cp_1253;                  case 1254: return SR.Globalization_cp_1254;                  case 1255: return SR.Globalization_cp_1255;                  case 1256: return SR.Globalization_cp_1256;                  case 1257: return SR.Globalization_cp_1257;                  case 1258: return SR.Globalization_cp_1258;                  case 1361: return SR.Globalization_cp_1361;                  case 10000: return SR.Globalization_cp_10000;                  case 10001: return SR.Globalization_cp_10001;                  case 10002: return SR.Globalization_cp_10002;                  case 10003: return SR.Globalization_cp_10003;                  case 10004: return SR.Globalization_cp_10004;                  case 10005: return SR.Globalization_cp_10005;                  case 10006: return SR.Globalization_cp_10006;                  case 10007: return SR.Globalization_cp_10007;                  case 10008: return SR.Globalization_cp_10008;                  case 10010: return SR.Globalization_cp_10010;                  case 10017: return SR.Globalization_cp_10017;                  case 10021: return SR.Globalization_cp_10021;                  case 10029: return SR.Globalization_cp_10029;                  case 10079: return SR.Globalization_cp_10079;                  case 10081: return SR.Globalization_cp_10081;                  case 10082: return SR.Globalization_cp_10082;                  case 20000: return SR.Globalization_cp_20000;                  case 20001: return SR.Globalization_cp_20001;                  case 20002: return SR.Globalization_cp_20002;                  case 20003: return SR.Globalization_cp_20003;                  case 20004: return SR.Globalization_cp_20004;                  case 20005: return SR.Globalization_cp_20005;                  case 20105: return SR.Globalization_cp_20105;                  case 20106: return SR.Globalization_cp_20106;                  case 20107: return SR.Globalization_cp_20107;                  case 20108: return SR.Globalization_cp_20108;                  case 20261: return SR.Globalization_cp_20261;                  case 20269: return SR.Globalization_cp_20269;                  case 20273: return SR.Globalization_cp_20273;                  case 20277: return SR.Globalization_cp_20277;                  case 20278: return SR.Globalization_cp_20278;                  case 20280: return SR.Globalization_cp_20280;                  case 20284: return SR.Globalization_cp_20284;                  case 20285: return SR.Globalization_cp_20285;                  case 20290: return SR.Globalization_cp_20290;                  case 20297: return SR.Globalization_cp_20297;                  case 20420: return SR.Globalization_cp_20420;                  case 20423: return SR.Globalization_cp_20423;                  case 20424: return SR.Globalization_cp_20424;                  case 20833: return SR.Globalization_cp_20833;                  case 20838: return SR.Globalization_cp_20838;                  case 20866: return SR.Globalization_cp_20866;                  case 20871: return SR.Globalization_cp_20871;                  case 20880: return SR.Globalization_cp_20880;                  case 20905: return SR.Globalization_cp_20905;                  case 20924: return SR.Globalization_cp_20924;                  case 20932: return SR.Globalization_cp_20932;                  case 20936: return SR.Globalization_cp_20936;                  case 20949: return SR.Globalization_cp_20949;                  case 21025: return SR.Globalization_cp_21025;                  case 21027: return SR.Globalization_cp_21027;                  case 21866: return SR.Globalization_cp_21866;                  case 28592: return SR.Globalization_cp_28592;                  case 28593: return SR.Globalization_cp_28593;                  case 28594: return SR.Globalization_cp_28594;                  case 28595: return SR.Globalization_cp_28595;                  case 28596: return SR.Globalization_cp_28596;                  case 28597: return SR.Globalization_cp_28597;                  case 28598: return SR.Globalization_cp_28598;                  case 28599: return SR.Globalization_cp_28599;                  case 28603: return SR.Globalization_cp_28603;                  case 28605: return SR.Globalization_cp_28605;                  case 29001: return SR.Globalization_cp_29001;                  case 38598: return SR.Globalization_cp_38598;                  case 50000: return SR.Globalization_cp_50000;                  case 50220: return SR.Globalization_cp_50220;                  case 50221: return SR.Globalization_cp_50221;                  case 50222: return SR.Globalization_cp_50222;                  case 50225: return SR.Globalization_cp_50225;                  case 50227: return SR.Globalization_cp_50227;                  case 50229: return SR.Globalization_cp_50229;                  case 50930: return SR.Globalization_cp_50930;                  case 50931: return SR.Globalization_cp_50931;                  case 50933: return SR.Globalization_cp_50933;                  case 50935: return SR.Globalization_cp_50935;                  case 50937: return SR.Globalization_cp_50937;                  case 50939: return SR.Globalization_cp_50939;                  case 51932: return SR.Globalization_cp_51932;                  case 51936: return SR.Globalization_cp_51936;                  case 51949: return SR.Globalization_cp_51949;                  case 52936: return SR.Globalization_cp_52936;                  case 54936: return SR.Globalization_cp_54936;                  case 57002: return SR.Globalization_cp_57002;                  case 57003: return SR.Globalization_cp_57003;                  case 57004: return SR.Globalization_cp_57004;                  case 57005: return SR.Globalization_cp_57005;                  case 57006: return SR.Globalization_cp_57006;                  case 57007: return SR.Globalization_cp_57007;                  case 57008: return SR.Globalization_cp_57008;                  case 57009: return SR.Globalization_cp_57009;                  case 57010: return SR.Globalization_cp_57010;                  case 57011: return SR.Globalization_cp_57011;                  default: return null;              }
Magic Number,System.Text,EncodingTable,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingTable.cs,InternalGetCodePageFromName,The following statement contains a magic number: int right = s_encodingNameIndices.Length - 2;
Magic Number,System.Text,EncodingTable,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingTable.cs,InternalGetCodePageFromName,The following statement contains a magic number: while ((right - left) > 3)              {                  index = ((right - left) / 2) + left;                    Debug.Assert(index < s_encodingNameIndices.Length - 1);                  result = CompareOrdinal(name' s_encodingNames' s_encodingNameIndices[index]' s_encodingNameIndices[index + 1] - s_encodingNameIndices[index]);                  if (result == 0)                  {                      //We found the item' return the associated codePage.                      return (s_codePagesByName[index]);                  }                  else if (result < 0)                  {                      //The name that we're looking for is less than our current index.                      right = index;                  }                  else                  {                      //The name that we're looking for is greater than our current index                      left = index;                  }              }
Magic Number,System.Text,EncodingTable,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EncodingTable.cs,InternalGetCodePageFromName,The following statement contains a magic number: while ((right - left) > 3)              {                  index = ((right - left) / 2) + left;                    Debug.Assert(index < s_encodingNameIndices.Length - 1);                  result = CompareOrdinal(name' s_encodingNames' s_encodingNameIndices[index]' s_encodingNameIndices[index + 1] - s_encodingNameIndices[index]);                  if (result == 0)                  {                      //We found the item' return the associated codePage.                      return (s_codePagesByName[index]);                  }                  else if (result < 0)                  {                      //The name that we're looking for is less than our current index.                      right = index;                  }                  else                  {                      //The name that we're looking for is greater than our current index                      left = index;                  }              }
Magic Number,System.Text,EUCJPEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EUCJPEncoding.cs,CleanUpBytes,The following statement contains a magic number: if (bytes >= 0x100)              {                  // map extended char (0xfa40-0xfc4b) to a special range                  // (ported from mlang)                  if (bytes >= 0xfa40 && bytes <= 0xfc4b)                  {                      if (bytes >= 0xfa40 && bytes <= 0xfa5b)                      {                          if (bytes <= 0xfa49)                              bytes = bytes - 0x0b51;                          else if (bytes >= 0xfa4a && bytes <= 0xfa53)                              bytes = bytes - 0x072f6;                          else if (bytes >= 0xfa54 && bytes <= 0xfa57)                              bytes = bytes - 0x0b5b;                          else if (bytes == 0xfa58)                              bytes = 0x878a;                          else if (bytes == 0xfa59)                              bytes = 0x8782;                          else if (bytes == 0xfa5a)                              bytes = 0x8784;                          else if (bytes == 0xfa5b)                              bytes = 0x879a;                      }                      else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                      {                          byte tc = unchecked((byte)bytes);                          if (tc < 0x5c)                              bytes = bytes - 0x0d5f;                          else if (tc >= 0x80 && tc <= 0x9B)                              bytes = bytes - 0x0d1d;                          else                              bytes = bytes - 0x0d1c;                      }                  }                    // Convert 932 code page to 20932 like code page range                  // (also ported from mlang)                  byte bLead = unchecked((byte)(bytes >> 8));                  byte bTrail = unchecked((byte)bytes);                    bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                  bLead = (byte)((bLead << 1) + 1);                  if (bTrail > (byte)0x9e)                  {                      bTrail -= (byte)0x7e;                      bLead++;                  }                  else                  {                      if (bTrail > (byte)0x7e)                          bTrail--;                      bTrail -= (byte)0x1f;                  }                    bytes = ((int)bLead) << 8 | (int)bTrail | 0x8080;                    // Don't step out of our allocated lead byte area.                  // All DBCS lead and trail bytes should be >= 0xa1 and <= 0xfe                  if ((bytes & 0xFF00) < 0xa100 || (bytes & 0xFF00) > 0xfe00 ||                      (bytes & 0xFF) < 0xa1 || (bytes & 0xFF) > 0xfe)                      return false;                  // WARNING: Our funky mapping allows illegal values' which we continue to use                  // for compatibility purposes.              }              else              {                  // For 51932 1/2 Katakana gets a 0x8E lead byte                  // Adjust 1/2 Katakana                  if (bytes >= 0xa1 && bytes <= 0xdf)                  {                      bytes |= 0x8E00;                      return true;                  }                    // 0x81-0x9f and 0xe0-0xfc CP 932                  // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                  // b0-df is 1/2 Katakana                  // So 81-9f & e0-fc are 932 lead bytes' a1-fe are our lead bytes                  // so ignore everything above 0x80 except 0xa0 and 0xff                  if (bytes >= 0x81 && bytes != 0xa0 && bytes != 0xff)                  {                      // We set different lead bytes later' so just return false                      return false;                  }              }
Magic Number,System.Text,EUCJPEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\EUCJPEncoding.cs,CleanUpBytes,The following statement contains a magic number: if (bytes >= 0x100)              {                  // map extended char (0xfa40-0xfc4b) to a special range                  // (ported from mlang)                  if (bytes >= 0xfa40 && bytes <= 0xfc4b)                  {                      if (bytes >= 0xfa40 && bytes <= 0xfa5b)                      {                          if (bytes <= 0xfa49)                              bytes = bytes - 0x0b51;                          else if (bytes >= 0xfa4a && bytes <= 0xfa53)                              bytes = bytes - 0x072f6;                          else if (bytes >= 0xfa54 && bytes <= 0xfa57)                              bytes = bytes - 0x0b5b;                          else if (bytes == 0xfa58)                              bytes = 0x878a;                          else if (bytes == 0xfa59)                              bytes = 0x8782;                          else if (bytes == 0xfa5a)                              bytes = 0x8784;                          else if (bytes == 0xfa5b)                              bytes = 0x879a;                      }                      else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                      {                          byte tc = unchecked((byte)bytes);                          if (tc < 0x5c)                              bytes = bytes - 0x0d5f;                          else if (tc >= 0x80 && tc <= 0x9B)                              bytes = bytes - 0x0d1d;                          else                              bytes = bytes - 0x0d1c;                      }                  }                    // Convert 932 code page to 20932 like code page range                  // (also ported from mlang)                  byte bLead = unchecked((byte)(bytes >> 8));                  byte bTrail = unchecked((byte)bytes);                    bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                  bLead = (byte)((bLead << 1) + 1);                  if (bTrail > (byte)0x9e)                  {                      bTrail -= (byte)0x7e;                      bLead++;                  }                  else                  {                      if (bTrail > (byte)0x7e)                          bTrail--;                      bTrail -= (byte)0x1f;                  }                    bytes = ((int)bLead) << 8 | (int)bTrail | 0x8080;                    // Don't step out of our allocated lead byte area.                  // All DBCS lead and trail bytes should be >= 0xa1 and <= 0xfe                  if ((bytes & 0xFF00) < 0xa100 || (bytes & 0xFF00) > 0xfe00 ||                      (bytes & 0xFF) < 0xa1 || (bytes & 0xFF) > 0xfe)                      return false;                  // WARNING: Our funky mapping allows illegal values' which we continue to use                  // for compatibility purposes.              }              else              {                  // For 51932 1/2 Katakana gets a 0x8E lead byte                  // Adjust 1/2 Katakana                  if (bytes >= 0xa1 && bytes <= 0xdf)                  {                      bytes |= 0x8E00;                      return true;                  }                    // 0x81-0x9f and 0xe0-0xfc CP 932                  // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                  // b0-df is 1/2 Katakana                  // So 81-9f & e0-fc are 932 lead bytes' a1-fe are our lead bytes                  // so ignore everything above 0x80 except 0xa0 and 0xff                  if (bytes >= 0x81 && bytes != 0xa0 && bytes != 0xff)                  {                      // We set different lead bytes later' so just return false                      return false;                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: iExtraBytes = (GBLast4ByteCode + 1) * 2 + 0x10000 / 8;
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: iExtraBytes = (GBLast4ByteCode + 1) * 2 + 0x10000 / 8;
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: mapUnicodeTo4BytesFlags = pNativeMemory + 65536 * 2 * 2;
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: mapUnicodeTo4BytesFlags = pNativeMemory + 65536 * 2 * 2;
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: mapUnicodeTo4BytesFlags = pNativeMemory + 65536 * 2 * 2;
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: map4BytesToUnicode = (char*)(pNativeMemory + 65536 * 2 * 2 + 0x10000 / 8);
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: map4BytesToUnicode = (char*)(pNativeMemory + 65536 * 2 * 2 + 0x10000 / 8);
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: map4BytesToUnicode = (char*)(pNativeMemory + 65536 * 2 * 2 + 0x10000 / 8);
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: map4BytesToUnicode = (char*)(pNativeMemory + 65536 * 2 * 2 + 0x10000 / 8);
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: for (int index = 0; index < _tableUnicodeToGBDiffs.Length; index++)              {                  ushort data = _tableUnicodeToGBDiffs[index];                    // Check high bit                  if ((data & 0x8000) != 0)                  {                      // Make be exact value                      if (data > 0x9000 && data != 0xD1A6)                      {                          // It was an exact value (gb18040[data] = unicode)                          mapBytesToUnicode[data] = unicodeCount;                          mapUnicodeToBytes[unicodeCount] = data;                          unicodeCount++;                      }                      else                      {                          // It was a CP 936 compatible data' that table's already loaded' just increment our pointer                          unicodeCount += unchecked((char)(data & 0x7FFF));                      }                  }                  else                  {                      // It was GB 18030 4 byte data' next <data> characters are 4 byte sequences.                      while (data > 0)                      {                          Debug.Assert(count4Byte <= GBLast4ByteCode'                              "[GB18030Encoding.LoadManagedCodePage] Found too many 4 byte codes in data table.");                            // Set the 4 byte -> Unicode value                          map4BytesToUnicode[count4Byte] = unicodeCount;                          // Set the unicode -> 4 bytes value' including flag that its a 4 byte sequence                          mapUnicodeToBytes[unicodeCount] = count4Byte;                          // Set the flag saying its a 4 byte sequence                          mapUnicodeTo4BytesFlags[unicodeCount / 8] |= unchecked((byte)(1 << (unicodeCount % 8)));                          unchecked                          {                              unicodeCount++;                          }                          count4Byte++;                          data--;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,LoadManagedCodePage,The following statement contains a magic number: for (int index = 0; index < _tableUnicodeToGBDiffs.Length; index++)              {                  ushort data = _tableUnicodeToGBDiffs[index];                    // Check high bit                  if ((data & 0x8000) != 0)                  {                      // Make be exact value                      if (data > 0x9000 && data != 0xD1A6)                      {                          // It was an exact value (gb18040[data] = unicode)                          mapBytesToUnicode[data] = unicodeCount;                          mapUnicodeToBytes[unicodeCount] = data;                          unicodeCount++;                      }                      else                      {                          // It was a CP 936 compatible data' that table's already loaded' just increment our pointer                          unicodeCount += unchecked((char)(data & 0x7FFF));                      }                  }                  else                  {                      // It was GB 18030 4 byte data' next <data> characters are 4 byte sequences.                      while (data > 0)                      {                          Debug.Assert(count4Byte <= GBLast4ByteCode'                              "[GB18030Encoding.LoadManagedCodePage] Found too many 4 byte codes in data table.");                            // Set the 4 byte -> Unicode value                          map4BytesToUnicode[count4Byte] = unicodeCount;                          // Set the unicode -> 4 bytes value' including flag that its a 4 byte sequence                          mapUnicodeToBytes[unicodeCount] = count4Byte;                          // Set the flag saying its a 4 byte sequence                          mapUnicodeTo4BytesFlags[unicodeCount / 8] |= unchecked((byte)(1 << (unicodeCount % 8)));                          unchecked                          {                              unicodeCount++;                          }                          count4Byte++;                          data--;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,Is4Byte,The following statement contains a magic number: byte b4Byte = mapUnicodeTo4BytesFlags[charTest / 8];
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,Is4Byte,The following statement contains a magic number: return (b4Byte != 0 && (b4Byte & (1 << (charTest % 8))) != 0);
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetBytes,The following statement contains a magic number: TryAgain:                // Go ahead and do it' including the fallback.              while (buffer.MoreData)              {                  // Get next char                  char ch = buffer.GetNextChar();                    // Have to check for charLeftOver                  if (charLeftOver != 0)                  {                      Debug.Assert(Char.IsHighSurrogate(charLeftOver)'                          "[GB18030Encoding.GetBytes] leftover character should be high surrogate' not 0x" + ((int)charLeftOver).ToString("X4"' CultureInfo.InvariantCulture));                        // If our next char isn't a low surrogate' then we need to do fallback.                      if (!Char.IsLowSurrogate(ch))                      {                          // No low surrogate' fallback high surrogate & try this one again                          buffer.MovePrevious(false);                  // (Ignoring this character' don't throw)                          if (!buffer.Fallback(charLeftOver))                          {                              charLeftOver = (char)0;                              break;                          }                          charLeftOver = (char)0;                          continue;                      }                      else                      {                          // Next is a surrogate' add it as surrogate pair                            // Need 4 bytes for surrogates                          // Get our offset                          int offset = ((charLeftOver - 0xd800) << 10) + (ch - 0xdc00);                            byte byte4 = (byte)((offset % 0x0a) + 0x30);                          offset /= 0x0a;                          byte byte3 = (byte)((offset % 0x7e) + 0x81);                          offset /= 0x7e;                          byte byte2 = (byte)((offset % 0x0a) + 0x30);                          offset /= 0x0a;                          Debug.Assert(offset < 0x6f'                              "[GB18030Encoding.GetBytes](1) Expected offset < 0x6f' not 0x" + offset.ToString("X2"' CultureInfo.InvariantCulture));                            charLeftOver = (char)0;                          if (!buffer.AddByte((byte)(offset + 0x90)' byte2' byte3' byte4))                          {                              // Didn't work' need to back up for both surrogates (AddByte already backed up one)                              buffer.MovePrevious(false);             // (don't throw)                              break;                          }                      }                      charLeftOver = '\0';                  }                  // ASCII's easiest                  else if (ch <= 0x7f)                  {                      // Need a byte                      if (!buffer.AddByte((byte)ch))                          break;                  }                  // See if its a surrogate pair                  else if (Char.IsHighSurrogate(ch))                  {                      // Remember it for next time                      charLeftOver = ch;                  }                  else if (Char.IsLowSurrogate(ch))                  {                      // Low surrogates should've been found already                      if (!buffer.Fallback(ch))                          break;                  }                  else                  {                      // Not surrogate or ASCII' get value                      ushort iBytes = mapUnicodeToBytes[ch];                        // See what kind it is                      if (Is4Byte(ch))                      {                          //                          // This Unicode character will be converted to four-byte GB18030.                          //                          // Need 4 bytes                          byte byte4 = (byte)((iBytes % 0x0a) + 0x30);                          iBytes /= 0x0a;                          byte byte3 = (byte)((iBytes % 0x7e) + 0x81);                          iBytes /= 0x7e;                          byte byte2 = (byte)((iBytes % 0x0a) + 0x30);                          iBytes /= 0x0a;                          Debug.Assert(iBytes < 0x7e'                              "[GB18030Encoding.GetBytes]Expected iBytes < 0x7e' not 0x" + iBytes.ToString("X2"' CultureInfo.InvariantCulture));                          if (!buffer.AddByte((byte)(iBytes + 0x81)' byte2' byte3' byte4))                              break;                      }                      else                      {                          // Its 2 byte' use it                          if (!buffer.AddByte(unchecked((byte)(iBytes >> 8))' unchecked((byte)(iBytes & 0xff))))                              break;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetBytes,The following statement contains a magic number: TryAgain:                // Go ahead and do it' including the fallback.              while (buffer.MoreData)              {                  // Get next char                  char ch = buffer.GetNextChar();                    // Have to check for charLeftOver                  if (charLeftOver != 0)                  {                      Debug.Assert(Char.IsHighSurrogate(charLeftOver)'                          "[GB18030Encoding.GetBytes] leftover character should be high surrogate' not 0x" + ((int)charLeftOver).ToString("X4"' CultureInfo.InvariantCulture));                        // If our next char isn't a low surrogate' then we need to do fallback.                      if (!Char.IsLowSurrogate(ch))                      {                          // No low surrogate' fallback high surrogate & try this one again                          buffer.MovePrevious(false);                  // (Ignoring this character' don't throw)                          if (!buffer.Fallback(charLeftOver))                          {                              charLeftOver = (char)0;                              break;                          }                          charLeftOver = (char)0;                          continue;                      }                      else                      {                          // Next is a surrogate' add it as surrogate pair                            // Need 4 bytes for surrogates                          // Get our offset                          int offset = ((charLeftOver - 0xd800) << 10) + (ch - 0xdc00);                            byte byte4 = (byte)((offset % 0x0a) + 0x30);                          offset /= 0x0a;                          byte byte3 = (byte)((offset % 0x7e) + 0x81);                          offset /= 0x7e;                          byte byte2 = (byte)((offset % 0x0a) + 0x30);                          offset /= 0x0a;                          Debug.Assert(offset < 0x6f'                              "[GB18030Encoding.GetBytes](1) Expected offset < 0x6f' not 0x" + offset.ToString("X2"' CultureInfo.InvariantCulture));                            charLeftOver = (char)0;                          if (!buffer.AddByte((byte)(offset + 0x90)' byte2' byte3' byte4))                          {                              // Didn't work' need to back up for both surrogates (AddByte already backed up one)                              buffer.MovePrevious(false);             // (don't throw)                              break;                          }                      }                      charLeftOver = '\0';                  }                  // ASCII's easiest                  else if (ch <= 0x7f)                  {                      // Need a byte                      if (!buffer.AddByte((byte)ch))                          break;                  }                  // See if its a surrogate pair                  else if (Char.IsHighSurrogate(ch))                  {                      // Remember it for next time                      charLeftOver = ch;                  }                  else if (Char.IsLowSurrogate(ch))                  {                      // Low surrogates should've been found already                      if (!buffer.Fallback(ch))                          break;                  }                  else                  {                      // Not surrogate or ASCII' get value                      ushort iBytes = mapUnicodeToBytes[ch];                        // See what kind it is                      if (Is4Byte(ch))                      {                          //                          // This Unicode character will be converted to four-byte GB18030.                          //                          // Need 4 bytes                          byte byte4 = (byte)((iBytes % 0x0a) + 0x30);                          iBytes /= 0x0a;                          byte byte3 = (byte)((iBytes % 0x7e) + 0x81);                          iBytes /= 0x7e;                          byte byte2 = (byte)((iBytes % 0x0a) + 0x30);                          iBytes /= 0x0a;                          Debug.Assert(iBytes < 0x7e'                              "[GB18030Encoding.GetBytes]Expected iBytes < 0x7e' not 0x" + iBytes.ToString("X2"' CultureInfo.InvariantCulture));                          if (!buffer.AddByte((byte)(iBytes + 0x81)' byte2' byte3' byte4))                              break;                      }                      else                      {                          // Its 2 byte' use it                          if (!buffer.AddByte(unchecked((byte)(iBytes >> 8))' unchecked((byte)(iBytes & 0xff))))                              break;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver1 != -1)              {                  // Need temp bytes because we can't muss up decoder                  byte1 = decoder.bLeftOver1;                  byte2 = decoder.bLeftOver2;                  byte3 = decoder.bLeftOver3;                  byte4 = decoder.bLeftOver4;                    // Loop because we might have too many in buffer                  // This could happen if we are working on a 4 byte sequence' but it isn't valid.                  while (byte1 != -1)                  {                      // If its not a lead byte' use ? or its value' then scoot them down & try again                      // This could happen if we previously had a bad 4 byte sequence and this is a trail byte                      if (!IsGBLeadByte(byte1))                      {                          // This is either a ? or ASCII' need 1 char output                          if (byte1 <= 0x7f)                          {                              if (!buffer.AddChar((char)byte1))      // Its ASCII                                  break;                          }                          else                          {                              if (!buffer.Fallback((byte)byte1))     // Not a valid byte                                  break;                          }                            byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                          continue;                      }                        // Read in more bytes as needed                      while (byte2 == -1 ||                             (IsGBFourByteTrailing(byte2) && byte4 == -1))                      {                          // Do we have room?                          if (!buffer.MoreData)                          {                              // No input left to read' do we have to flush?                              if (!decoder.MustFlush)                              {                                  // Don't stick stuff in decoder when counting                                  if (chars != null)                                  {                                      // Don't have to flush' won't have any chars                                      // Decoder is correct' just return                                      decoder.bLeftOver1 = byte1;                                      decoder.bLeftOver2 = byte2;                                      decoder.bLeftOver3 = byte3;                                      decoder.bLeftOver4 = byte4;                                  }                                    decoder.m_bytesUsed = buffer.BytesUsed;                                  return buffer.Count;                              }                                // We'll have to flush' add a ? and scoot them down to try again                              // We could be trying for a 4 byte sequence but byte 3 could be ascii and should be spit out                              // Breaking will do this because we have zeros                              break;                          }                            // Read them in                          if (byte2 == -1) byte2 = buffer.GetNextByte();                          else if (byte3 == -1) byte3 = buffer.GetNextByte();                          else byte4 = buffer.GetNextByte();                      }                        // Now we have our 2 or 4 bytes                      if (IsGBTwoByteTrailing(byte2))                      {                          //                          // The trailing byte is a GB18030 two-byte sequence trailing byte.                          //                          int iTwoBytes = byte1 << 8;                          iTwoBytes |= unchecked((byte)byte2);                          if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                              break;                            // We're done with it                          byte1 = -1;                          byte2 = -1;                      }                      else if (IsGBFourByteTrailing(byte2) &&                               IsGBLeadByte(byte3) &&                               IsGBFourByteTrailing(byte4))                      {                          //                          // Four-byte GB18030                          //                            int sFourBytesOffset = GetFourBytesOffset(                              byte1' byte2' byte3' byte4);                            // What kind is it?                          if (sFourBytesOffset <= GBLast4ByteCode)                          {                              //                              // The Unicode will be in the BMP range.                              //                              if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                  break;                          }                          else if (sFourBytesOffset >= GBSurrogateOffset &&                                   sFourBytesOffset <= GBLastSurrogateOffset)                          {                              //                              // This will be converted to a surrogate pair' need another char                              //                                // Use our surrogate                              sFourBytesOffset -= GBSurrogateOffset;                              if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                  unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                  break;                          }                          else                          {                              // Real GB18030 codepoint' but can't be mapped to unicode                              // We already checked our buffer space.                              // Do fallback here if we implement decoderfallbacks.                              if (!buffer.Fallback((byte)byte1' (byte)byte2' (byte)byte3' (byte)byte4))                                  break;                          }                            // We're done with this one                          byte1 = -1;                          byte2 = -1;                          byte3 = -1;                          byte4 = -1;                      }                      else                      {                          // Not a valid sequence' use '?' for 1st byte & scoot them all down 1                          if (!buffer.Fallback((byte)byte1))                              break;                            // Move all bytes down 1                          byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver1 != -1)              {                  // Need temp bytes because we can't muss up decoder                  byte1 = decoder.bLeftOver1;                  byte2 = decoder.bLeftOver2;                  byte3 = decoder.bLeftOver3;                  byte4 = decoder.bLeftOver4;                    // Loop because we might have too many in buffer                  // This could happen if we are working on a 4 byte sequence' but it isn't valid.                  while (byte1 != -1)                  {                      // If its not a lead byte' use ? or its value' then scoot them down & try again                      // This could happen if we previously had a bad 4 byte sequence and this is a trail byte                      if (!IsGBLeadByte(byte1))                      {                          // This is either a ? or ASCII' need 1 char output                          if (byte1 <= 0x7f)                          {                              if (!buffer.AddChar((char)byte1))      // Its ASCII                                  break;                          }                          else                          {                              if (!buffer.Fallback((byte)byte1))     // Not a valid byte                                  break;                          }                            byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                          continue;                      }                        // Read in more bytes as needed                      while (byte2 == -1 ||                             (IsGBFourByteTrailing(byte2) && byte4 == -1))                      {                          // Do we have room?                          if (!buffer.MoreData)                          {                              // No input left to read' do we have to flush?                              if (!decoder.MustFlush)                              {                                  // Don't stick stuff in decoder when counting                                  if (chars != null)                                  {                                      // Don't have to flush' won't have any chars                                      // Decoder is correct' just return                                      decoder.bLeftOver1 = byte1;                                      decoder.bLeftOver2 = byte2;                                      decoder.bLeftOver3 = byte3;                                      decoder.bLeftOver4 = byte4;                                  }                                    decoder.m_bytesUsed = buffer.BytesUsed;                                  return buffer.Count;                              }                                // We'll have to flush' add a ? and scoot them down to try again                              // We could be trying for a 4 byte sequence but byte 3 could be ascii and should be spit out                              // Breaking will do this because we have zeros                              break;                          }                            // Read them in                          if (byte2 == -1) byte2 = buffer.GetNextByte();                          else if (byte3 == -1) byte3 = buffer.GetNextByte();                          else byte4 = buffer.GetNextByte();                      }                        // Now we have our 2 or 4 bytes                      if (IsGBTwoByteTrailing(byte2))                      {                          //                          // The trailing byte is a GB18030 two-byte sequence trailing byte.                          //                          int iTwoBytes = byte1 << 8;                          iTwoBytes |= unchecked((byte)byte2);                          if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                              break;                            // We're done with it                          byte1 = -1;                          byte2 = -1;                      }                      else if (IsGBFourByteTrailing(byte2) &&                               IsGBLeadByte(byte3) &&                               IsGBFourByteTrailing(byte4))                      {                          //                          // Four-byte GB18030                          //                            int sFourBytesOffset = GetFourBytesOffset(                              byte1' byte2' byte3' byte4);                            // What kind is it?                          if (sFourBytesOffset <= GBLast4ByteCode)                          {                              //                              // The Unicode will be in the BMP range.                              //                              if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                  break;                          }                          else if (sFourBytesOffset >= GBSurrogateOffset &&                                   sFourBytesOffset <= GBLastSurrogateOffset)                          {                              //                              // This will be converted to a surrogate pair' need another char                              //                                // Use our surrogate                              sFourBytesOffset -= GBSurrogateOffset;                              if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                  unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                  break;                          }                          else                          {                              // Real GB18030 codepoint' but can't be mapped to unicode                              // We already checked our buffer space.                              // Do fallback here if we implement decoderfallbacks.                              if (!buffer.Fallback((byte)byte1' (byte)byte2' (byte)byte3' (byte)byte4))                                  break;                          }                            // We're done with this one                          byte1 = -1;                          byte2 = -1;                          byte3 = -1;                          byte4 = -1;                      }                      else                      {                          // Not a valid sequence' use '?' for 1st byte & scoot them all down 1                          if (!buffer.Fallback((byte)byte1))                              break;                            // Move all bytes down 1                          byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver1 != -1)              {                  // Need temp bytes because we can't muss up decoder                  byte1 = decoder.bLeftOver1;                  byte2 = decoder.bLeftOver2;                  byte3 = decoder.bLeftOver3;                  byte4 = decoder.bLeftOver4;                    // Loop because we might have too many in buffer                  // This could happen if we are working on a 4 byte sequence' but it isn't valid.                  while (byte1 != -1)                  {                      // If its not a lead byte' use ? or its value' then scoot them down & try again                      // This could happen if we previously had a bad 4 byte sequence and this is a trail byte                      if (!IsGBLeadByte(byte1))                      {                          // This is either a ? or ASCII' need 1 char output                          if (byte1 <= 0x7f)                          {                              if (!buffer.AddChar((char)byte1))      // Its ASCII                                  break;                          }                          else                          {                              if (!buffer.Fallback((byte)byte1))     // Not a valid byte                                  break;                          }                            byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                          continue;                      }                        // Read in more bytes as needed                      while (byte2 == -1 ||                             (IsGBFourByteTrailing(byte2) && byte4 == -1))                      {                          // Do we have room?                          if (!buffer.MoreData)                          {                              // No input left to read' do we have to flush?                              if (!decoder.MustFlush)                              {                                  // Don't stick stuff in decoder when counting                                  if (chars != null)                                  {                                      // Don't have to flush' won't have any chars                                      // Decoder is correct' just return                                      decoder.bLeftOver1 = byte1;                                      decoder.bLeftOver2 = byte2;                                      decoder.bLeftOver3 = byte3;                                      decoder.bLeftOver4 = byte4;                                  }                                    decoder.m_bytesUsed = buffer.BytesUsed;                                  return buffer.Count;                              }                                // We'll have to flush' add a ? and scoot them down to try again                              // We could be trying for a 4 byte sequence but byte 3 could be ascii and should be spit out                              // Breaking will do this because we have zeros                              break;                          }                            // Read them in                          if (byte2 == -1) byte2 = buffer.GetNextByte();                          else if (byte3 == -1) byte3 = buffer.GetNextByte();                          else byte4 = buffer.GetNextByte();                      }                        // Now we have our 2 or 4 bytes                      if (IsGBTwoByteTrailing(byte2))                      {                          //                          // The trailing byte is a GB18030 two-byte sequence trailing byte.                          //                          int iTwoBytes = byte1 << 8;                          iTwoBytes |= unchecked((byte)byte2);                          if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                              break;                            // We're done with it                          byte1 = -1;                          byte2 = -1;                      }                      else if (IsGBFourByteTrailing(byte2) &&                               IsGBLeadByte(byte3) &&                               IsGBFourByteTrailing(byte4))                      {                          //                          // Four-byte GB18030                          //                            int sFourBytesOffset = GetFourBytesOffset(                              byte1' byte2' byte3' byte4);                            // What kind is it?                          if (sFourBytesOffset <= GBLast4ByteCode)                          {                              //                              // The Unicode will be in the BMP range.                              //                              if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                  break;                          }                          else if (sFourBytesOffset >= GBSurrogateOffset &&                                   sFourBytesOffset <= GBLastSurrogateOffset)                          {                              //                              // This will be converted to a surrogate pair' need another char                              //                                // Use our surrogate                              sFourBytesOffset -= GBSurrogateOffset;                              if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                  unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                  break;                          }                          else                          {                              // Real GB18030 codepoint' but can't be mapped to unicode                              // We already checked our buffer space.                              // Do fallback here if we implement decoderfallbacks.                              if (!buffer.Fallback((byte)byte1' (byte)byte2' (byte)byte3' (byte)byte4))                                  break;                          }                            // We're done with this one                          byte1 = -1;                          byte2 = -1;                          byte3 = -1;                          byte4 = -1;                      }                      else                      {                          // Not a valid sequence' use '?' for 1st byte & scoot them all down 1                          if (!buffer.Fallback((byte)byte1))                              break;                            // Move all bytes down 1                          byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: if (decoder != null && decoder.bLeftOver1 != -1)              {                  // Need temp bytes because we can't muss up decoder                  byte1 = decoder.bLeftOver1;                  byte2 = decoder.bLeftOver2;                  byte3 = decoder.bLeftOver3;                  byte4 = decoder.bLeftOver4;                    // Loop because we might have too many in buffer                  // This could happen if we are working on a 4 byte sequence' but it isn't valid.                  while (byte1 != -1)                  {                      // If its not a lead byte' use ? or its value' then scoot them down & try again                      // This could happen if we previously had a bad 4 byte sequence and this is a trail byte                      if (!IsGBLeadByte(byte1))                      {                          // This is either a ? or ASCII' need 1 char output                          if (byte1 <= 0x7f)                          {                              if (!buffer.AddChar((char)byte1))      // Its ASCII                                  break;                          }                          else                          {                              if (!buffer.Fallback((byte)byte1))     // Not a valid byte                                  break;                          }                            byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                          continue;                      }                        // Read in more bytes as needed                      while (byte2 == -1 ||                             (IsGBFourByteTrailing(byte2) && byte4 == -1))                      {                          // Do we have room?                          if (!buffer.MoreData)                          {                              // No input left to read' do we have to flush?                              if (!decoder.MustFlush)                              {                                  // Don't stick stuff in decoder when counting                                  if (chars != null)                                  {                                      // Don't have to flush' won't have any chars                                      // Decoder is correct' just return                                      decoder.bLeftOver1 = byte1;                                      decoder.bLeftOver2 = byte2;                                      decoder.bLeftOver3 = byte3;                                      decoder.bLeftOver4 = byte4;                                  }                                    decoder.m_bytesUsed = buffer.BytesUsed;                                  return buffer.Count;                              }                                // We'll have to flush' add a ? and scoot them down to try again                              // We could be trying for a 4 byte sequence but byte 3 could be ascii and should be spit out                              // Breaking will do this because we have zeros                              break;                          }                            // Read them in                          if (byte2 == -1) byte2 = buffer.GetNextByte();                          else if (byte3 == -1) byte3 = buffer.GetNextByte();                          else byte4 = buffer.GetNextByte();                      }                        // Now we have our 2 or 4 bytes                      if (IsGBTwoByteTrailing(byte2))                      {                          //                          // The trailing byte is a GB18030 two-byte sequence trailing byte.                          //                          int iTwoBytes = byte1 << 8;                          iTwoBytes |= unchecked((byte)byte2);                          if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                              break;                            // We're done with it                          byte1 = -1;                          byte2 = -1;                      }                      else if (IsGBFourByteTrailing(byte2) &&                               IsGBLeadByte(byte3) &&                               IsGBFourByteTrailing(byte4))                      {                          //                          // Four-byte GB18030                          //                            int sFourBytesOffset = GetFourBytesOffset(                              byte1' byte2' byte3' byte4);                            // What kind is it?                          if (sFourBytesOffset <= GBLast4ByteCode)                          {                              //                              // The Unicode will be in the BMP range.                              //                              if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                  break;                          }                          else if (sFourBytesOffset >= GBSurrogateOffset &&                                   sFourBytesOffset <= GBLastSurrogateOffset)                          {                              //                              // This will be converted to a surrogate pair' need another char                              //                                // Use our surrogate                              sFourBytesOffset -= GBSurrogateOffset;                              if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                  unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                  break;                          }                          else                          {                              // Real GB18030 codepoint' but can't be mapped to unicode                              // We already checked our buffer space.                              // Do fallback here if we implement decoderfallbacks.                              if (!buffer.Fallback((byte)byte1' (byte)byte2' (byte)byte3' (byte)byte4))                                  break;                          }                            // We're done with this one                          byte1 = -1;                          byte2 = -1;                          byte3 = -1;                          byte4 = -1;                      }                      else                      {                          // Not a valid sequence' use '?' for 1st byte & scoot them all down 1                          if (!buffer.Fallback((byte)byte1))                              break;                            // Move all bytes down 1                          byte1 = byte2;                          byte2 = byte3;                          byte3 = byte4;                          byte4 = -1;                      }                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: while (buffer.MoreData)              {                  byte ch = buffer.GetNextByte();                    // ASCII case is easy                  if (ch <= 0x7f)                  {                      // ASCII' have room?                      if (!buffer.AddChar((char)ch))                          break;              // No room in convert buffer' so stop                  }                  // See if its a lead byte                  else if (IsGBLeadByte(ch))                  {                      // ch is a lead byte' have room for more?                      if (buffer.MoreData)                      {                          byte ch2 = buffer.GetNextByte();                          if (IsGBTwoByteTrailing(ch2))                          {                              //                              // The trailing byte is a GB18030 two-byte sequence trailing byte.                              //                                //                              // Two-byte GB18030                              //                              int iTwoBytes = ch << 8;                              iTwoBytes |= ch2;                              if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                                  break;                          }                          else if (IsGBFourByteTrailing(ch2))                          {                              // Do we have room for Four Byte Sequence? (already have 1 byte)                              if (buffer.EvenMoreData(2))                              {                                  // Is it a valid 4 byte sequence?                                  byte ch3 = buffer.GetNextByte();                                  byte ch4 = buffer.GetNextByte();                                  if (IsGBLeadByte(ch3) &&                                      IsGBFourByteTrailing(ch4))                                  {                                      //                                      // Four-byte GB18030                                      //                                      int sFourBytesOffset = GetFourBytesOffset(ch' ch2' ch3' ch4);                                        // What kind is it?                                      // We'll be at least 1 BMP char or a '?' char.                                        if (sFourBytesOffset <= GBLast4ByteCode)                                      {                                          //                                          // The Unicode will be in the BMP range.                                          //                                          if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                              break;                                      }                                      else if (sFourBytesOffset >= GBSurrogateOffset &&                                               sFourBytesOffset <= GBLastSurrogateOffset)                                      {                                          //                                          // This will be converted to a surrogate pair' need another char                                          //                                            // Use our surrogate                                          sFourBytesOffset -= GBSurrogateOffset;                                          if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                               unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                              break;                                      }                                      else                                      {                                          // Real GB18030 codepoint' but can't be mapped to unicode                                          if (!buffer.Fallback(ch' ch2' ch3' ch4))                                              break;                                      }                                  }                                  else                                  {                                      // Not a valid 2 or 4 byte sequence' use '?' for ch and try other 3 again                                      buffer.AdjustBytes(-3);                                      if (!buffer.Fallback(ch))                                          break;                                  }                              }                              else                              {                                  // No room for 4 bytes' have 2 already' may be one more                                  // Lead byte but no place to stick it                                  if (decoder != null && !decoder.MustFlush)                                  {                                      // (make sure not to set decoder if counting' so check chars)                                      if (chars != null)                                      {                                          // We'll be able to stick the remainder in the decoder                                          byte1 = ch;                                          byte2 = ch2;                                            if (buffer.MoreData)                                              byte3 = buffer.GetNextByte();                                          else                                              byte3 = -1;                                            byte4 = -1;                                      }                                      break;                                  }                                    // Won't go in decoder' we'll use '?' for it.                                  if (!buffer.Fallback(ch' ch2))                                      break;                              }                          }                          else                          {                              // Unknown byte sequence' fall back lead byte and try 2nd one again                              buffer.AdjustBytes(-1);                              if (!buffer.Fallback(ch))                                  break;                          }                      }                      else                      {                          // Lead byte but don't know about trail byte                          // (make sure not to set decoder if counting' so check bytes)                          if (decoder != null && !decoder.MustFlush)                          {                              // We'll be able to stick it in the decoder                              // (don't actually do it when counting though)                              if (chars != null)                              {                                  byte1 = ch;                                  byte2 = -1;                                  byte3 = -1;                                  byte4 = -1;                              }                              break;                          }                            if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // Not ASCII and not a lead byte' we'll use '?' for it if we have room                      if (!buffer.Fallback(ch))                          break;                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: while (buffer.MoreData)              {                  byte ch = buffer.GetNextByte();                    // ASCII case is easy                  if (ch <= 0x7f)                  {                      // ASCII' have room?                      if (!buffer.AddChar((char)ch))                          break;              // No room in convert buffer' so stop                  }                  // See if its a lead byte                  else if (IsGBLeadByte(ch))                  {                      // ch is a lead byte' have room for more?                      if (buffer.MoreData)                      {                          byte ch2 = buffer.GetNextByte();                          if (IsGBTwoByteTrailing(ch2))                          {                              //                              // The trailing byte is a GB18030 two-byte sequence trailing byte.                              //                                //                              // Two-byte GB18030                              //                              int iTwoBytes = ch << 8;                              iTwoBytes |= ch2;                              if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                                  break;                          }                          else if (IsGBFourByteTrailing(ch2))                          {                              // Do we have room for Four Byte Sequence? (already have 1 byte)                              if (buffer.EvenMoreData(2))                              {                                  // Is it a valid 4 byte sequence?                                  byte ch3 = buffer.GetNextByte();                                  byte ch4 = buffer.GetNextByte();                                  if (IsGBLeadByte(ch3) &&                                      IsGBFourByteTrailing(ch4))                                  {                                      //                                      // Four-byte GB18030                                      //                                      int sFourBytesOffset = GetFourBytesOffset(ch' ch2' ch3' ch4);                                        // What kind is it?                                      // We'll be at least 1 BMP char or a '?' char.                                        if (sFourBytesOffset <= GBLast4ByteCode)                                      {                                          //                                          // The Unicode will be in the BMP range.                                          //                                          if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                              break;                                      }                                      else if (sFourBytesOffset >= GBSurrogateOffset &&                                               sFourBytesOffset <= GBLastSurrogateOffset)                                      {                                          //                                          // This will be converted to a surrogate pair' need another char                                          //                                            // Use our surrogate                                          sFourBytesOffset -= GBSurrogateOffset;                                          if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                               unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                              break;                                      }                                      else                                      {                                          // Real GB18030 codepoint' but can't be mapped to unicode                                          if (!buffer.Fallback(ch' ch2' ch3' ch4))                                              break;                                      }                                  }                                  else                                  {                                      // Not a valid 2 or 4 byte sequence' use '?' for ch and try other 3 again                                      buffer.AdjustBytes(-3);                                      if (!buffer.Fallback(ch))                                          break;                                  }                              }                              else                              {                                  // No room for 4 bytes' have 2 already' may be one more                                  // Lead byte but no place to stick it                                  if (decoder != null && !decoder.MustFlush)                                  {                                      // (make sure not to set decoder if counting' so check chars)                                      if (chars != null)                                      {                                          // We'll be able to stick the remainder in the decoder                                          byte1 = ch;                                          byte2 = ch2;                                            if (buffer.MoreData)                                              byte3 = buffer.GetNextByte();                                          else                                              byte3 = -1;                                            byte4 = -1;                                      }                                      break;                                  }                                    // Won't go in decoder' we'll use '?' for it.                                  if (!buffer.Fallback(ch' ch2))                                      break;                              }                          }                          else                          {                              // Unknown byte sequence' fall back lead byte and try 2nd one again                              buffer.AdjustBytes(-1);                              if (!buffer.Fallback(ch))                                  break;                          }                      }                      else                      {                          // Lead byte but don't know about trail byte                          // (make sure not to set decoder if counting' so check bytes)                          if (decoder != null && !decoder.MustFlush)                          {                              // We'll be able to stick it in the decoder                              // (don't actually do it when counting though)                              if (chars != null)                              {                                  byte1 = ch;                                  byte2 = -1;                                  byte3 = -1;                                  byte4 = -1;                              }                              break;                          }                            if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // Not ASCII and not a lead byte' we'll use '?' for it if we have room                      if (!buffer.Fallback(ch))                          break;                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: while (buffer.MoreData)              {                  byte ch = buffer.GetNextByte();                    // ASCII case is easy                  if (ch <= 0x7f)                  {                      // ASCII' have room?                      if (!buffer.AddChar((char)ch))                          break;              // No room in convert buffer' so stop                  }                  // See if its a lead byte                  else if (IsGBLeadByte(ch))                  {                      // ch is a lead byte' have room for more?                      if (buffer.MoreData)                      {                          byte ch2 = buffer.GetNextByte();                          if (IsGBTwoByteTrailing(ch2))                          {                              //                              // The trailing byte is a GB18030 two-byte sequence trailing byte.                              //                                //                              // Two-byte GB18030                              //                              int iTwoBytes = ch << 8;                              iTwoBytes |= ch2;                              if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                                  break;                          }                          else if (IsGBFourByteTrailing(ch2))                          {                              // Do we have room for Four Byte Sequence? (already have 1 byte)                              if (buffer.EvenMoreData(2))                              {                                  // Is it a valid 4 byte sequence?                                  byte ch3 = buffer.GetNextByte();                                  byte ch4 = buffer.GetNextByte();                                  if (IsGBLeadByte(ch3) &&                                      IsGBFourByteTrailing(ch4))                                  {                                      //                                      // Four-byte GB18030                                      //                                      int sFourBytesOffset = GetFourBytesOffset(ch' ch2' ch3' ch4);                                        // What kind is it?                                      // We'll be at least 1 BMP char or a '?' char.                                        if (sFourBytesOffset <= GBLast4ByteCode)                                      {                                          //                                          // The Unicode will be in the BMP range.                                          //                                          if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                              break;                                      }                                      else if (sFourBytesOffset >= GBSurrogateOffset &&                                               sFourBytesOffset <= GBLastSurrogateOffset)                                      {                                          //                                          // This will be converted to a surrogate pair' need another char                                          //                                            // Use our surrogate                                          sFourBytesOffset -= GBSurrogateOffset;                                          if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                               unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                              break;                                      }                                      else                                      {                                          // Real GB18030 codepoint' but can't be mapped to unicode                                          if (!buffer.Fallback(ch' ch2' ch3' ch4))                                              break;                                      }                                  }                                  else                                  {                                      // Not a valid 2 or 4 byte sequence' use '?' for ch and try other 3 again                                      buffer.AdjustBytes(-3);                                      if (!buffer.Fallback(ch))                                          break;                                  }                              }                              else                              {                                  // No room for 4 bytes' have 2 already' may be one more                                  // Lead byte but no place to stick it                                  if (decoder != null && !decoder.MustFlush)                                  {                                      // (make sure not to set decoder if counting' so check chars)                                      if (chars != null)                                      {                                          // We'll be able to stick the remainder in the decoder                                          byte1 = ch;                                          byte2 = ch2;                                            if (buffer.MoreData)                                              byte3 = buffer.GetNextByte();                                          else                                              byte3 = -1;                                            byte4 = -1;                                      }                                      break;                                  }                                    // Won't go in decoder' we'll use '?' for it.                                  if (!buffer.Fallback(ch' ch2))                                      break;                              }                          }                          else                          {                              // Unknown byte sequence' fall back lead byte and try 2nd one again                              buffer.AdjustBytes(-1);                              if (!buffer.Fallback(ch))                                  break;                          }                      }                      else                      {                          // Lead byte but don't know about trail byte                          // (make sure not to set decoder if counting' so check bytes)                          if (decoder != null && !decoder.MustFlush)                          {                              // We'll be able to stick it in the decoder                              // (don't actually do it when counting though)                              if (chars != null)                              {                                  byte1 = ch;                                  byte2 = -1;                                  byte3 = -1;                                  byte4 = -1;                              }                              break;                          }                            if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // Not ASCII and not a lead byte' we'll use '?' for it if we have room                      if (!buffer.Fallback(ch))                          break;                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: while (buffer.MoreData)              {                  byte ch = buffer.GetNextByte();                    // ASCII case is easy                  if (ch <= 0x7f)                  {                      // ASCII' have room?                      if (!buffer.AddChar((char)ch))                          break;              // No room in convert buffer' so stop                  }                  // See if its a lead byte                  else if (IsGBLeadByte(ch))                  {                      // ch is a lead byte' have room for more?                      if (buffer.MoreData)                      {                          byte ch2 = buffer.GetNextByte();                          if (IsGBTwoByteTrailing(ch2))                          {                              //                              // The trailing byte is a GB18030 two-byte sequence trailing byte.                              //                                //                              // Two-byte GB18030                              //                              int iTwoBytes = ch << 8;                              iTwoBytes |= ch2;                              if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                                  break;                          }                          else if (IsGBFourByteTrailing(ch2))                          {                              // Do we have room for Four Byte Sequence? (already have 1 byte)                              if (buffer.EvenMoreData(2))                              {                                  // Is it a valid 4 byte sequence?                                  byte ch3 = buffer.GetNextByte();                                  byte ch4 = buffer.GetNextByte();                                  if (IsGBLeadByte(ch3) &&                                      IsGBFourByteTrailing(ch4))                                  {                                      //                                      // Four-byte GB18030                                      //                                      int sFourBytesOffset = GetFourBytesOffset(ch' ch2' ch3' ch4);                                        // What kind is it?                                      // We'll be at least 1 BMP char or a '?' char.                                        if (sFourBytesOffset <= GBLast4ByteCode)                                      {                                          //                                          // The Unicode will be in the BMP range.                                          //                                          if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                              break;                                      }                                      else if (sFourBytesOffset >= GBSurrogateOffset &&                                               sFourBytesOffset <= GBLastSurrogateOffset)                                      {                                          //                                          // This will be converted to a surrogate pair' need another char                                          //                                            // Use our surrogate                                          sFourBytesOffset -= GBSurrogateOffset;                                          if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                               unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                              break;                                      }                                      else                                      {                                          // Real GB18030 codepoint' but can't be mapped to unicode                                          if (!buffer.Fallback(ch' ch2' ch3' ch4))                                              break;                                      }                                  }                                  else                                  {                                      // Not a valid 2 or 4 byte sequence' use '?' for ch and try other 3 again                                      buffer.AdjustBytes(-3);                                      if (!buffer.Fallback(ch))                                          break;                                  }                              }                              else                              {                                  // No room for 4 bytes' have 2 already' may be one more                                  // Lead byte but no place to stick it                                  if (decoder != null && !decoder.MustFlush)                                  {                                      // (make sure not to set decoder if counting' so check chars)                                      if (chars != null)                                      {                                          // We'll be able to stick the remainder in the decoder                                          byte1 = ch;                                          byte2 = ch2;                                            if (buffer.MoreData)                                              byte3 = buffer.GetNextByte();                                          else                                              byte3 = -1;                                            byte4 = -1;                                      }                                      break;                                  }                                    // Won't go in decoder' we'll use '?' for it.                                  if (!buffer.Fallback(ch' ch2))                                      break;                              }                          }                          else                          {                              // Unknown byte sequence' fall back lead byte and try 2nd one again                              buffer.AdjustBytes(-1);                              if (!buffer.Fallback(ch))                                  break;                          }                      }                      else                      {                          // Lead byte but don't know about trail byte                          // (make sure not to set decoder if counting' so check bytes)                          if (decoder != null && !decoder.MustFlush)                          {                              // We'll be able to stick it in the decoder                              // (don't actually do it when counting though)                              if (chars != null)                              {                                  byte1 = ch;                                  byte2 = -1;                                  byte3 = -1;                                  byte4 = -1;                              }                              break;                          }                            if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // Not ASCII and not a lead byte' we'll use '?' for it if we have room                      if (!buffer.Fallback(ch))                          break;                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: while (buffer.MoreData)              {                  byte ch = buffer.GetNextByte();                    // ASCII case is easy                  if (ch <= 0x7f)                  {                      // ASCII' have room?                      if (!buffer.AddChar((char)ch))                          break;              // No room in convert buffer' so stop                  }                  // See if its a lead byte                  else if (IsGBLeadByte(ch))                  {                      // ch is a lead byte' have room for more?                      if (buffer.MoreData)                      {                          byte ch2 = buffer.GetNextByte();                          if (IsGBTwoByteTrailing(ch2))                          {                              //                              // The trailing byte is a GB18030 two-byte sequence trailing byte.                              //                                //                              // Two-byte GB18030                              //                              int iTwoBytes = ch << 8;                              iTwoBytes |= ch2;                              if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                                  break;                          }                          else if (IsGBFourByteTrailing(ch2))                          {                              // Do we have room for Four Byte Sequence? (already have 1 byte)                              if (buffer.EvenMoreData(2))                              {                                  // Is it a valid 4 byte sequence?                                  byte ch3 = buffer.GetNextByte();                                  byte ch4 = buffer.GetNextByte();                                  if (IsGBLeadByte(ch3) &&                                      IsGBFourByteTrailing(ch4))                                  {                                      //                                      // Four-byte GB18030                                      //                                      int sFourBytesOffset = GetFourBytesOffset(ch' ch2' ch3' ch4);                                        // What kind is it?                                      // We'll be at least 1 BMP char or a '?' char.                                        if (sFourBytesOffset <= GBLast4ByteCode)                                      {                                          //                                          // The Unicode will be in the BMP range.                                          //                                          if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                              break;                                      }                                      else if (sFourBytesOffset >= GBSurrogateOffset &&                                               sFourBytesOffset <= GBLastSurrogateOffset)                                      {                                          //                                          // This will be converted to a surrogate pair' need another char                                          //                                            // Use our surrogate                                          sFourBytesOffset -= GBSurrogateOffset;                                          if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                               unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                              break;                                      }                                      else                                      {                                          // Real GB18030 codepoint' but can't be mapped to unicode                                          if (!buffer.Fallback(ch' ch2' ch3' ch4))                                              break;                                      }                                  }                                  else                                  {                                      // Not a valid 2 or 4 byte sequence' use '?' for ch and try other 3 again                                      buffer.AdjustBytes(-3);                                      if (!buffer.Fallback(ch))                                          break;                                  }                              }                              else                              {                                  // No room for 4 bytes' have 2 already' may be one more                                  // Lead byte but no place to stick it                                  if (decoder != null && !decoder.MustFlush)                                  {                                      // (make sure not to set decoder if counting' so check chars)                                      if (chars != null)                                      {                                          // We'll be able to stick the remainder in the decoder                                          byte1 = ch;                                          byte2 = ch2;                                            if (buffer.MoreData)                                              byte3 = buffer.GetNextByte();                                          else                                              byte3 = -1;                                            byte4 = -1;                                      }                                      break;                                  }                                    // Won't go in decoder' we'll use '?' for it.                                  if (!buffer.Fallback(ch' ch2))                                      break;                              }                          }                          else                          {                              // Unknown byte sequence' fall back lead byte and try 2nd one again                              buffer.AdjustBytes(-1);                              if (!buffer.Fallback(ch))                                  break;                          }                      }                      else                      {                          // Lead byte but don't know about trail byte                          // (make sure not to set decoder if counting' so check bytes)                          if (decoder != null && !decoder.MustFlush)                          {                              // We'll be able to stick it in the decoder                              // (don't actually do it when counting though)                              if (chars != null)                              {                                  byte1 = ch;                                  byte2 = -1;                                  byte3 = -1;                                  byte4 = -1;                              }                              break;                          }                            if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // Not ASCII and not a lead byte' we'll use '?' for it if we have room                      if (!buffer.Fallback(ch))                          break;                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The following statement contains a magic number: while (buffer.MoreData)              {                  byte ch = buffer.GetNextByte();                    // ASCII case is easy                  if (ch <= 0x7f)                  {                      // ASCII' have room?                      if (!buffer.AddChar((char)ch))                          break;              // No room in convert buffer' so stop                  }                  // See if its a lead byte                  else if (IsGBLeadByte(ch))                  {                      // ch is a lead byte' have room for more?                      if (buffer.MoreData)                      {                          byte ch2 = buffer.GetNextByte();                          if (IsGBTwoByteTrailing(ch2))                          {                              //                              // The trailing byte is a GB18030 two-byte sequence trailing byte.                              //                                //                              // Two-byte GB18030                              //                              int iTwoBytes = ch << 8;                              iTwoBytes |= ch2;                              if (!buffer.AddChar(mapBytesToUnicode[iTwoBytes]' 2))                                  break;                          }                          else if (IsGBFourByteTrailing(ch2))                          {                              // Do we have room for Four Byte Sequence? (already have 1 byte)                              if (buffer.EvenMoreData(2))                              {                                  // Is it a valid 4 byte sequence?                                  byte ch3 = buffer.GetNextByte();                                  byte ch4 = buffer.GetNextByte();                                  if (IsGBLeadByte(ch3) &&                                      IsGBFourByteTrailing(ch4))                                  {                                      //                                      // Four-byte GB18030                                      //                                      int sFourBytesOffset = GetFourBytesOffset(ch' ch2' ch3' ch4);                                        // What kind is it?                                      // We'll be at least 1 BMP char or a '?' char.                                        if (sFourBytesOffset <= GBLast4ByteCode)                                      {                                          //                                          // The Unicode will be in the BMP range.                                          //                                          if (!buffer.AddChar(map4BytesToUnicode[sFourBytesOffset]' 4))                                              break;                                      }                                      else if (sFourBytesOffset >= GBSurrogateOffset &&                                               sFourBytesOffset <= GBLastSurrogateOffset)                                      {                                          //                                          // This will be converted to a surrogate pair' need another char                                          //                                            // Use our surrogate                                          sFourBytesOffset -= GBSurrogateOffset;                                          if (!buffer.AddChar(unchecked((char)(0xd800 + (sFourBytesOffset / 0x400)))'                                                               unchecked((char)(0xdc00 + (sFourBytesOffset % 0x400)))' 4))                                              break;                                      }                                      else                                      {                                          // Real GB18030 codepoint' but can't be mapped to unicode                                          if (!buffer.Fallback(ch' ch2' ch3' ch4))                                              break;                                      }                                  }                                  else                                  {                                      // Not a valid 2 or 4 byte sequence' use '?' for ch and try other 3 again                                      buffer.AdjustBytes(-3);                                      if (!buffer.Fallback(ch))                                          break;                                  }                              }                              else                              {                                  // No room for 4 bytes' have 2 already' may be one more                                  // Lead byte but no place to stick it                                  if (decoder != null && !decoder.MustFlush)                                  {                                      // (make sure not to set decoder if counting' so check chars)                                      if (chars != null)                                      {                                          // We'll be able to stick the remainder in the decoder                                          byte1 = ch;                                          byte2 = ch2;                                            if (buffer.MoreData)                                              byte3 = buffer.GetNextByte();                                          else                                              byte3 = -1;                                            byte4 = -1;                                      }                                      break;                                  }                                    // Won't go in decoder' we'll use '?' for it.                                  if (!buffer.Fallback(ch' ch2))                                      break;                              }                          }                          else                          {                              // Unknown byte sequence' fall back lead byte and try 2nd one again                              buffer.AdjustBytes(-1);                              if (!buffer.Fallback(ch))                                  break;                          }                      }                      else                      {                          // Lead byte but don't know about trail byte                          // (make sure not to set decoder if counting' so check bytes)                          if (decoder != null && !decoder.MustFlush)                          {                              // We'll be able to stick it in the decoder                              // (don't actually do it when counting though)                              if (chars != null)                              {                                  byte1 = ch;                                  byte2 = -1;                                  byte3 = -1;                                  byte4 = -1;                              }                              break;                          }                            if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // Not ASCII and not a lead byte' we'll use '?' for it if we have room                      if (!buffer.Fallback(ch))                          break;                  }              }
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetMaxByteCount,The following statement contains a magic number: byteCount *= 4;
Magic Number,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetMaxCharCount,The following statement contains a magic number: long charCount = ((long)byteCount) + 3;
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following statement contains a magic number: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytes,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetBytesCP5022xJP(chars' charCount' bytes' byteCount' encoder);                      break;                  case 50225:                      iCount = GetBytesCP50225KR(chars' charCount' bytes' byteCount' encoder);                      break;                  // Everett had 50227 the same as 936                  /*              case 50227:                                      iCount = GetBytesCP50227CN( chars' charCount' bytes' byteCount' encoder );                                      break;                  */                  case 52936:                      iCount = GetBytesCP52936(chars' charCount' bytes' byteCount' encoder);                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytes,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetBytesCP5022xJP(chars' charCount' bytes' byteCount' encoder);                      break;                  case 50225:                      iCount = GetBytesCP50225KR(chars' charCount' bytes' byteCount' encoder);                      break;                  // Everett had 50227 the same as 936                  /*              case 50227:                                      iCount = GetBytesCP50227CN( chars' charCount' bytes' byteCount' encoder );                                      break;                  */                  case 52936:                      iCount = GetBytesCP52936(chars' charCount' bytes' byteCount' encoder);                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytes,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetBytesCP5022xJP(chars' charCount' bytes' byteCount' encoder);                      break;                  case 50225:                      iCount = GetBytesCP50225KR(chars' charCount' bytes' byteCount' encoder);                      break;                  // Everett had 50227 the same as 936                  /*              case 50227:                                      iCount = GetBytesCP50227CN( chars' charCount' bytes' byteCount' encoder );                                      break;                  */                  case 52936:                      iCount = GetBytesCP52936(chars' charCount' bytes' byteCount' encoder);                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytes,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetBytesCP5022xJP(chars' charCount' bytes' byteCount' encoder);                      break;                  case 50225:                      iCount = GetBytesCP50225KR(chars' charCount' bytes' byteCount' encoder);                      break;                  // Everett had 50227 the same as 936                  /*              case 50227:                                      iCount = GetBytesCP50227CN( chars' charCount' bytes' byteCount' encoder );                                      break;                  */                  case 52936:                      iCount = GetBytesCP52936(chars' charCount' bytes' byteCount' encoder);                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytes,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetBytesCP5022xJP(chars' charCount' bytes' byteCount' encoder);                      break;                  case 50225:                      iCount = GetBytesCP50225KR(chars' charCount' bytes' byteCount' encoder);                      break;                  // Everett had 50227 the same as 936                  /*              case 50227:                                      iCount = GetBytesCP50227CN( chars' charCount' bytes' byteCount' encoder );                                      break;                  */                  case 52936:                      iCount = GetBytesCP52936(chars' charCount' bytes' byteCount' encoder);                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetChars,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetCharsCP5022xJP(bytes' byteCount' chars' charCount' decoder);                      break;                  case 50225:                      iCount = GetCharsCP50225KR(bytes' byteCount' chars' charCount' decoder);                      break;                  // Currently 50227 is the same as 936                  //                case 50227:                  //                  iCount = GetCharsCP50227CN( bytes' byteCount' chars' charCount' decoder);                  //                break;                  case 52936:                      iCount = GetCharsCP52936(bytes' byteCount' chars' charCount' decoder);                      break;                  default:                      Debug.Fail("[ISO2022Encoding.GetChars] had unexpected code page");                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetChars,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetCharsCP5022xJP(bytes' byteCount' chars' charCount' decoder);                      break;                  case 50225:                      iCount = GetCharsCP50225KR(bytes' byteCount' chars' charCount' decoder);                      break;                  // Currently 50227 is the same as 936                  //                case 50227:                  //                  iCount = GetCharsCP50227CN( bytes' byteCount' chars' charCount' decoder);                  //                break;                  case 52936:                      iCount = GetCharsCP52936(bytes' byteCount' chars' charCount' decoder);                      break;                  default:                      Debug.Fail("[ISO2022Encoding.GetChars] had unexpected code page");                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetChars,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetCharsCP5022xJP(bytes' byteCount' chars' charCount' decoder);                      break;                  case 50225:                      iCount = GetCharsCP50225KR(bytes' byteCount' chars' charCount' decoder);                      break;                  // Currently 50227 is the same as 936                  //                case 50227:                  //                  iCount = GetCharsCP50227CN( bytes' byteCount' chars' charCount' decoder);                  //                break;                  case 52936:                      iCount = GetCharsCP52936(bytes' byteCount' chars' charCount' decoder);                      break;                  default:                      Debug.Fail("[ISO2022Encoding.GetChars] had unexpected code page");                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetChars,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetCharsCP5022xJP(bytes' byteCount' chars' charCount' decoder);                      break;                  case 50225:                      iCount = GetCharsCP50225KR(bytes' byteCount' chars' charCount' decoder);                      break;                  // Currently 50227 is the same as 936                  //                case 50227:                  //                  iCount = GetCharsCP50227CN( bytes' byteCount' chars' charCount' decoder);                  //                break;                  case 52936:                      iCount = GetCharsCP52936(bytes' byteCount' chars' charCount' decoder);                      break;                  default:                      Debug.Fail("[ISO2022Encoding.GetChars] had unexpected code page");                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetChars,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetCharsCP5022xJP(bytes' byteCount' chars' charCount' decoder);                      break;                  case 50225:                      iCount = GetCharsCP50225KR(bytes' byteCount' chars' charCount' decoder);                      break;                  // Currently 50227 is the same as 936                  //                case 50227:                  //                  iCount = GetCharsCP50227CN( bytes' byteCount' chars' charCount' decoder);                  //                break;                  case 52936:                      iCount = GetCharsCP52936(bytes' byteCount' chars' charCount' decoder);                      break;                  default:                      Debug.Fail("[ISO2022Encoding.GetChars] had unexpected code page");                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort iBytes = mapUnicodeToBytes[ch];                StartConvert:                  // Check for halfwidth bytes                  byte bLeadByte = (byte)(iBytes >> 8);                  byte bTrailByte = (byte)(iBytes & 0xff);                    if (bLeadByte == LEADBYTE_HALFWIDTH)                  {                      // Its Halfwidth Katakana                      if (CodePage == 50220)                      {                          // CodePage 50220 doesn't use halfwidth Katakana' convert to fullwidth                          // See if its out of range' fallback if so' throws if recursive fallback                          if (bTrailByte < 0x21 || bTrailByte >= 0x21 + s_HalfToFullWidthKanaTable.Length)                          {                              buffer.Fallback(ch);                              continue;                          }                            // Get the full width katakana char to use.                          iBytes = unchecked((ushort)(s_HalfToFullWidthKanaTable[bTrailByte - 0x21] & 0x7F7F));                            // May have to do all sorts of fun stuff for mode' go back to start convert                          goto StartConvert;                      }                        // Can use halfwidth Katakana' make sure we're in right mode                        // Make sure we're in right mode                      if (currentMode != ISO2022Modes.ModeHalfwidthKatakana)                      {                          // 50222 or 50221' either shift in/out or escape to get to Katakana mode                          if (CodePage == 50222)                          {                              // Shift Out                              if (!buffer.AddByte(SHIFT_OUT))                                  break;  // convert out of space' stop                                // Don't change modes until after AddByte in case it fails for convert                              // We get to shift out to Katakana' make sure we'll go back to the right mode                              // (This ends up always being ASCII)                              shiftInMode = currentMode;                              currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                          else                          {                              // 50221 does halfwidth katakana by escape sequence                              Debug.Assert(CodePage == 50221' "[ISO2022Encoding.GetBytesCP5022xJP]Expected Code Page 50221");                                // Add our escape sequence                              if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'I')))                                  break;  // convert out of space' stop                                currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                      }                        // We know we're in Katakana mode now' so add it.                      // Go ahead and add the Katakana byte.  Our table tail bytes are 0x80 too big.                      if (!buffer.AddByte(unchecked((byte)(bTrailByte & 0x7F))))                          break;  // convert out of space' stop                        // Done with this one                      continue;                  }                  else if (bLeadByte != 0)                  {                      //                      //  It's a double byte character.                      //                        // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift In                          if (!buffer.AddByte(SHIFT_IN))                              break;    // convert out of space' stop                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Make sure we're in the right mode (JIS 0208 or JIS 0212)                      // Note: Right now we don't use JIS 0212.  Also this table would be wrong                        // Its JIS extension 0208                      if (currentMode != ISO2022Modes.ModeJIS0208)                      {                          // Escape sequence' we can fail after this' mode will be correct for convert                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'$')' unchecked((byte)'B')))                              break;  // Convert out of space' stop                            currentMode = ISO2022Modes.ModeJIS0208;                      }                        // Add our double bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte))' unchecked((byte)(bTrailByte))))                          break; // Convert out of space' stop                      continue;                  }                  else if (iBytes != 0 || ch == 0)                  {                      // Single byte Char                      // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift IN                          if (!buffer.AddByte(SHIFT_IN))                              break; // convert ran out of room                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Its a single byte character' switch to ASCII if we have to                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                              break; // convert ran out of room                            currentMode = ISO2022Modes.ModeASCII;                      }                        // Add the ASCII char                      if (!buffer.AddByte(bTrailByte))                          break; // convert had no room left                      continue;                  }                    // Its unknown' do fallback' throws if recursive (knows because we called InternalGetNextChar)                  buffer.Fallback(ch);              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort iBytes = mapUnicodeToBytes[ch];                StartConvert:                  // Check for halfwidth bytes                  byte bLeadByte = (byte)(iBytes >> 8);                  byte bTrailByte = (byte)(iBytes & 0xff);                    if (bLeadByte == LEADBYTE_HALFWIDTH)                  {                      // Its Halfwidth Katakana                      if (CodePage == 50220)                      {                          // CodePage 50220 doesn't use halfwidth Katakana' convert to fullwidth                          // See if its out of range' fallback if so' throws if recursive fallback                          if (bTrailByte < 0x21 || bTrailByte >= 0x21 + s_HalfToFullWidthKanaTable.Length)                          {                              buffer.Fallback(ch);                              continue;                          }                            // Get the full width katakana char to use.                          iBytes = unchecked((ushort)(s_HalfToFullWidthKanaTable[bTrailByte - 0x21] & 0x7F7F));                            // May have to do all sorts of fun stuff for mode' go back to start convert                          goto StartConvert;                      }                        // Can use halfwidth Katakana' make sure we're in right mode                        // Make sure we're in right mode                      if (currentMode != ISO2022Modes.ModeHalfwidthKatakana)                      {                          // 50222 or 50221' either shift in/out or escape to get to Katakana mode                          if (CodePage == 50222)                          {                              // Shift Out                              if (!buffer.AddByte(SHIFT_OUT))                                  break;  // convert out of space' stop                                // Don't change modes until after AddByte in case it fails for convert                              // We get to shift out to Katakana' make sure we'll go back to the right mode                              // (This ends up always being ASCII)                              shiftInMode = currentMode;                              currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                          else                          {                              // 50221 does halfwidth katakana by escape sequence                              Debug.Assert(CodePage == 50221' "[ISO2022Encoding.GetBytesCP5022xJP]Expected Code Page 50221");                                // Add our escape sequence                              if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'I')))                                  break;  // convert out of space' stop                                currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                      }                        // We know we're in Katakana mode now' so add it.                      // Go ahead and add the Katakana byte.  Our table tail bytes are 0x80 too big.                      if (!buffer.AddByte(unchecked((byte)(bTrailByte & 0x7F))))                          break;  // convert out of space' stop                        // Done with this one                      continue;                  }                  else if (bLeadByte != 0)                  {                      //                      //  It's a double byte character.                      //                        // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift In                          if (!buffer.AddByte(SHIFT_IN))                              break;    // convert out of space' stop                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Make sure we're in the right mode (JIS 0208 or JIS 0212)                      // Note: Right now we don't use JIS 0212.  Also this table would be wrong                        // Its JIS extension 0208                      if (currentMode != ISO2022Modes.ModeJIS0208)                      {                          // Escape sequence' we can fail after this' mode will be correct for convert                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'$')' unchecked((byte)'B')))                              break;  // Convert out of space' stop                            currentMode = ISO2022Modes.ModeJIS0208;                      }                        // Add our double bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte))' unchecked((byte)(bTrailByte))))                          break; // Convert out of space' stop                      continue;                  }                  else if (iBytes != 0 || ch == 0)                  {                      // Single byte Char                      // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift IN                          if (!buffer.AddByte(SHIFT_IN))                              break; // convert ran out of room                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Its a single byte character' switch to ASCII if we have to                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                              break; // convert ran out of room                            currentMode = ISO2022Modes.ModeASCII;                      }                        // Add the ASCII char                      if (!buffer.AddByte(bTrailByte))                          break; // convert had no room left                      continue;                  }                    // Its unknown' do fallback' throws if recursive (knows because we called InternalGetNextChar)                  buffer.Fallback(ch);              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort iBytes = mapUnicodeToBytes[ch];                StartConvert:                  // Check for halfwidth bytes                  byte bLeadByte = (byte)(iBytes >> 8);                  byte bTrailByte = (byte)(iBytes & 0xff);                    if (bLeadByte == LEADBYTE_HALFWIDTH)                  {                      // Its Halfwidth Katakana                      if (CodePage == 50220)                      {                          // CodePage 50220 doesn't use halfwidth Katakana' convert to fullwidth                          // See if its out of range' fallback if so' throws if recursive fallback                          if (bTrailByte < 0x21 || bTrailByte >= 0x21 + s_HalfToFullWidthKanaTable.Length)                          {                              buffer.Fallback(ch);                              continue;                          }                            // Get the full width katakana char to use.                          iBytes = unchecked((ushort)(s_HalfToFullWidthKanaTable[bTrailByte - 0x21] & 0x7F7F));                            // May have to do all sorts of fun stuff for mode' go back to start convert                          goto StartConvert;                      }                        // Can use halfwidth Katakana' make sure we're in right mode                        // Make sure we're in right mode                      if (currentMode != ISO2022Modes.ModeHalfwidthKatakana)                      {                          // 50222 or 50221' either shift in/out or escape to get to Katakana mode                          if (CodePage == 50222)                          {                              // Shift Out                              if (!buffer.AddByte(SHIFT_OUT))                                  break;  // convert out of space' stop                                // Don't change modes until after AddByte in case it fails for convert                              // We get to shift out to Katakana' make sure we'll go back to the right mode                              // (This ends up always being ASCII)                              shiftInMode = currentMode;                              currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                          else                          {                              // 50221 does halfwidth katakana by escape sequence                              Debug.Assert(CodePage == 50221' "[ISO2022Encoding.GetBytesCP5022xJP]Expected Code Page 50221");                                // Add our escape sequence                              if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'I')))                                  break;  // convert out of space' stop                                currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                      }                        // We know we're in Katakana mode now' so add it.                      // Go ahead and add the Katakana byte.  Our table tail bytes are 0x80 too big.                      if (!buffer.AddByte(unchecked((byte)(bTrailByte & 0x7F))))                          break;  // convert out of space' stop                        // Done with this one                      continue;                  }                  else if (bLeadByte != 0)                  {                      //                      //  It's a double byte character.                      //                        // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift In                          if (!buffer.AddByte(SHIFT_IN))                              break;    // convert out of space' stop                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Make sure we're in the right mode (JIS 0208 or JIS 0212)                      // Note: Right now we don't use JIS 0212.  Also this table would be wrong                        // Its JIS extension 0208                      if (currentMode != ISO2022Modes.ModeJIS0208)                      {                          // Escape sequence' we can fail after this' mode will be correct for convert                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'$')' unchecked((byte)'B')))                              break;  // Convert out of space' stop                            currentMode = ISO2022Modes.ModeJIS0208;                      }                        // Add our double bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte))' unchecked((byte)(bTrailByte))))                          break; // Convert out of space' stop                      continue;                  }                  else if (iBytes != 0 || ch == 0)                  {                      // Single byte Char                      // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift IN                          if (!buffer.AddByte(SHIFT_IN))                              break; // convert ran out of room                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Its a single byte character' switch to ASCII if we have to                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                              break; // convert ran out of room                            currentMode = ISO2022Modes.ModeASCII;                      }                        // Add the ASCII char                      if (!buffer.AddByte(bTrailByte))                          break; // convert had no room left                      continue;                  }                    // Its unknown' do fallback' throws if recursive (knows because we called InternalGetNextChar)                  buffer.Fallback(ch);              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort iBytes = mapUnicodeToBytes[ch];                StartConvert:                  // Check for halfwidth bytes                  byte bLeadByte = (byte)(iBytes >> 8);                  byte bTrailByte = (byte)(iBytes & 0xff);                    if (bLeadByte == LEADBYTE_HALFWIDTH)                  {                      // Its Halfwidth Katakana                      if (CodePage == 50220)                      {                          // CodePage 50220 doesn't use halfwidth Katakana' convert to fullwidth                          // See if its out of range' fallback if so' throws if recursive fallback                          if (bTrailByte < 0x21 || bTrailByte >= 0x21 + s_HalfToFullWidthKanaTable.Length)                          {                              buffer.Fallback(ch);                              continue;                          }                            // Get the full width katakana char to use.                          iBytes = unchecked((ushort)(s_HalfToFullWidthKanaTable[bTrailByte - 0x21] & 0x7F7F));                            // May have to do all sorts of fun stuff for mode' go back to start convert                          goto StartConvert;                      }                        // Can use halfwidth Katakana' make sure we're in right mode                        // Make sure we're in right mode                      if (currentMode != ISO2022Modes.ModeHalfwidthKatakana)                      {                          // 50222 or 50221' either shift in/out or escape to get to Katakana mode                          if (CodePage == 50222)                          {                              // Shift Out                              if (!buffer.AddByte(SHIFT_OUT))                                  break;  // convert out of space' stop                                // Don't change modes until after AddByte in case it fails for convert                              // We get to shift out to Katakana' make sure we'll go back to the right mode                              // (This ends up always being ASCII)                              shiftInMode = currentMode;                              currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                          else                          {                              // 50221 does halfwidth katakana by escape sequence                              Debug.Assert(CodePage == 50221' "[ISO2022Encoding.GetBytesCP5022xJP]Expected Code Page 50221");                                // Add our escape sequence                              if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'I')))                                  break;  // convert out of space' stop                                currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                      }                        // We know we're in Katakana mode now' so add it.                      // Go ahead and add the Katakana byte.  Our table tail bytes are 0x80 too big.                      if (!buffer.AddByte(unchecked((byte)(bTrailByte & 0x7F))))                          break;  // convert out of space' stop                        // Done with this one                      continue;                  }                  else if (bLeadByte != 0)                  {                      //                      //  It's a double byte character.                      //                        // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift In                          if (!buffer.AddByte(SHIFT_IN))                              break;    // convert out of space' stop                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Make sure we're in the right mode (JIS 0208 or JIS 0212)                      // Note: Right now we don't use JIS 0212.  Also this table would be wrong                        // Its JIS extension 0208                      if (currentMode != ISO2022Modes.ModeJIS0208)                      {                          // Escape sequence' we can fail after this' mode will be correct for convert                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'$')' unchecked((byte)'B')))                              break;  // Convert out of space' stop                            currentMode = ISO2022Modes.ModeJIS0208;                      }                        // Add our double bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte))' unchecked((byte)(bTrailByte))))                          break; // Convert out of space' stop                      continue;                  }                  else if (iBytes != 0 || ch == 0)                  {                      // Single byte Char                      // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift IN                          if (!buffer.AddByte(SHIFT_IN))                              break; // convert ran out of room                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Its a single byte character' switch to ASCII if we have to                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                              break; // convert ran out of room                            currentMode = ISO2022Modes.ModeASCII;                      }                        // Add the ASCII char                      if (!buffer.AddByte(bTrailByte))                          break; // convert had no room left                      continue;                  }                    // Its unknown' do fallback' throws if recursive (knows because we called InternalGetNextChar)                  buffer.Fallback(ch);              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort iBytes = mapUnicodeToBytes[ch];                StartConvert:                  // Check for halfwidth bytes                  byte bLeadByte = (byte)(iBytes >> 8);                  byte bTrailByte = (byte)(iBytes & 0xff);                    if (bLeadByte == LEADBYTE_HALFWIDTH)                  {                      // Its Halfwidth Katakana                      if (CodePage == 50220)                      {                          // CodePage 50220 doesn't use halfwidth Katakana' convert to fullwidth                          // See if its out of range' fallback if so' throws if recursive fallback                          if (bTrailByte < 0x21 || bTrailByte >= 0x21 + s_HalfToFullWidthKanaTable.Length)                          {                              buffer.Fallback(ch);                              continue;                          }                            // Get the full width katakana char to use.                          iBytes = unchecked((ushort)(s_HalfToFullWidthKanaTable[bTrailByte - 0x21] & 0x7F7F));                            // May have to do all sorts of fun stuff for mode' go back to start convert                          goto StartConvert;                      }                        // Can use halfwidth Katakana' make sure we're in right mode                        // Make sure we're in right mode                      if (currentMode != ISO2022Modes.ModeHalfwidthKatakana)                      {                          // 50222 or 50221' either shift in/out or escape to get to Katakana mode                          if (CodePage == 50222)                          {                              // Shift Out                              if (!buffer.AddByte(SHIFT_OUT))                                  break;  // convert out of space' stop                                // Don't change modes until after AddByte in case it fails for convert                              // We get to shift out to Katakana' make sure we'll go back to the right mode                              // (This ends up always being ASCII)                              shiftInMode = currentMode;                              currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                          else                          {                              // 50221 does halfwidth katakana by escape sequence                              Debug.Assert(CodePage == 50221' "[ISO2022Encoding.GetBytesCP5022xJP]Expected Code Page 50221");                                // Add our escape sequence                              if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'I')))                                  break;  // convert out of space' stop                                currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                      }                        // We know we're in Katakana mode now' so add it.                      // Go ahead and add the Katakana byte.  Our table tail bytes are 0x80 too big.                      if (!buffer.AddByte(unchecked((byte)(bTrailByte & 0x7F))))                          break;  // convert out of space' stop                        // Done with this one                      continue;                  }                  else if (bLeadByte != 0)                  {                      //                      //  It's a double byte character.                      //                        // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift In                          if (!buffer.AddByte(SHIFT_IN))                              break;    // convert out of space' stop                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Make sure we're in the right mode (JIS 0208 or JIS 0212)                      // Note: Right now we don't use JIS 0212.  Also this table would be wrong                        // Its JIS extension 0208                      if (currentMode != ISO2022Modes.ModeJIS0208)                      {                          // Escape sequence' we can fail after this' mode will be correct for convert                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'$')' unchecked((byte)'B')))                              break;  // Convert out of space' stop                            currentMode = ISO2022Modes.ModeJIS0208;                      }                        // Add our double bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte))' unchecked((byte)(bTrailByte))))                          break; // Convert out of space' stop                      continue;                  }                  else if (iBytes != 0 || ch == 0)                  {                      // Single byte Char                      // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift IN                          if (!buffer.AddByte(SHIFT_IN))                              break; // convert ran out of room                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Its a single byte character' switch to ASCII if we have to                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                              break; // convert ran out of room                            currentMode = ISO2022Modes.ModeASCII;                      }                        // Add the ASCII char                      if (!buffer.AddByte(bTrailByte))                          break; // convert had no room left                      continue;                  }                    // Its unknown' do fallback' throws if recursive (knows because we called InternalGetNextChar)                  buffer.Fallback(ch);              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort iBytes = mapUnicodeToBytes[ch];                StartConvert:                  // Check for halfwidth bytes                  byte bLeadByte = (byte)(iBytes >> 8);                  byte bTrailByte = (byte)(iBytes & 0xff);                    if (bLeadByte == LEADBYTE_HALFWIDTH)                  {                      // Its Halfwidth Katakana                      if (CodePage == 50220)                      {                          // CodePage 50220 doesn't use halfwidth Katakana' convert to fullwidth                          // See if its out of range' fallback if so' throws if recursive fallback                          if (bTrailByte < 0x21 || bTrailByte >= 0x21 + s_HalfToFullWidthKanaTable.Length)                          {                              buffer.Fallback(ch);                              continue;                          }                            // Get the full width katakana char to use.                          iBytes = unchecked((ushort)(s_HalfToFullWidthKanaTable[bTrailByte - 0x21] & 0x7F7F));                            // May have to do all sorts of fun stuff for mode' go back to start convert                          goto StartConvert;                      }                        // Can use halfwidth Katakana' make sure we're in right mode                        // Make sure we're in right mode                      if (currentMode != ISO2022Modes.ModeHalfwidthKatakana)                      {                          // 50222 or 50221' either shift in/out or escape to get to Katakana mode                          if (CodePage == 50222)                          {                              // Shift Out                              if (!buffer.AddByte(SHIFT_OUT))                                  break;  // convert out of space' stop                                // Don't change modes until after AddByte in case it fails for convert                              // We get to shift out to Katakana' make sure we'll go back to the right mode                              // (This ends up always being ASCII)                              shiftInMode = currentMode;                              currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                          else                          {                              // 50221 does halfwidth katakana by escape sequence                              Debug.Assert(CodePage == 50221' "[ISO2022Encoding.GetBytesCP5022xJP]Expected Code Page 50221");                                // Add our escape sequence                              if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'I')))                                  break;  // convert out of space' stop                                currentMode = ISO2022Modes.ModeHalfwidthKatakana;                          }                      }                        // We know we're in Katakana mode now' so add it.                      // Go ahead and add the Katakana byte.  Our table tail bytes are 0x80 too big.                      if (!buffer.AddByte(unchecked((byte)(bTrailByte & 0x7F))))                          break;  // convert out of space' stop                        // Done with this one                      continue;                  }                  else if (bLeadByte != 0)                  {                      //                      //  It's a double byte character.                      //                        // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift In                          if (!buffer.AddByte(SHIFT_IN))                              break;    // convert out of space' stop                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Make sure we're in the right mode (JIS 0208 or JIS 0212)                      // Note: Right now we don't use JIS 0212.  Also this table would be wrong                        // Its JIS extension 0208                      if (currentMode != ISO2022Modes.ModeJIS0208)                      {                          // Escape sequence' we can fail after this' mode will be correct for convert                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'$')' unchecked((byte)'B')))                              break;  // Convert out of space' stop                            currentMode = ISO2022Modes.ModeJIS0208;                      }                        // Add our double bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte))' unchecked((byte)(bTrailByte))))                          break; // Convert out of space' stop                      continue;                  }                  else if (iBytes != 0 || ch == 0)                  {                      // Single byte Char                      // If we're CP 50222 we may have to shift in from Katakana mode first                      if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                      {                          // Shift IN                          if (!buffer.AddByte(SHIFT_IN))                              break; // convert ran out of room                            // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      }                        // Its a single byte character' switch to ASCII if we have to                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                              break; // convert ran out of room                            currentMode = ISO2022Modes.ModeASCII;                      }                        // Add the ASCII char                      if (!buffer.AddByte(bTrailByte))                          break; // convert had no room left                      continue;                  }                    // Its unknown' do fallback' throws if recursive (knows because we called InternalGetNextChar)                  buffer.Fallback(ch);              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: if (currentMode != ISO2022Modes.ModeASCII &&                  (encoder == null || encoder.MustFlush))              {                  // If we're CP 50222 we may have to shift in from Katakana mode first                  if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Shift IN' only shift mode if necessary.                      if (buffer.AddByte(SHIFT_IN))                          // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      else                          // If not successful' convert will maintain state for next time' also                          // AddByte will have decremented our char count' however we need it to remain the same                          buffer.GetNextChar();                  }                    // switch back to ASCII to finish neatly                  if (currentMode != ISO2022Modes.ModeASCII &&                      (CodePage != 50222 || currentMode != ISO2022Modes.ModeHalfwidthKatakana))                  {                      // only shift if it was successful                      if (buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                          currentMode = ISO2022Modes.ModeASCII;                      else                          // If not successful' convert will maintain state for next time' also                          // AddByte will have decremented our char count' however we need it to remain the same                          buffer.GetNextChar();                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP5022xJP,The following statement contains a magic number: if (currentMode != ISO2022Modes.ModeASCII &&                  (encoder == null || encoder.MustFlush))              {                  // If we're CP 50222 we may have to shift in from Katakana mode first                  if (CodePage == 50222 && currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Shift IN' only shift mode if necessary.                      if (buffer.AddByte(SHIFT_IN))                          // Need to shift in from katakana.  (Still might not be right' but won't be shifted out anyway)                          currentMode = shiftInMode;                      else                          // If not successful' convert will maintain state for next time' also                          // AddByte will have decremented our char count' however we need it to remain the same                          buffer.GetNextChar();                  }                    // switch back to ASCII to finish neatly                  if (currentMode != ISO2022Modes.ModeASCII &&                      (CodePage != 50222 || currentMode != ISO2022Modes.ModeHalfwidthKatakana))                  {                      // only shift if it was successful                      if (buffer.AddByte(ESCAPE' unchecked((byte)'(')' unchecked((byte)'B')))                          currentMode = ISO2022Modes.ModeASCII;                      else                          // If not successful' convert will maintain state for next time' also                          // AddByte will have decremented our char count' however we need it to remain the same                          buffer.GetNextChar();                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP50225KR,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our data                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort iBytes = mapUnicodeToBytes[ch];                    // Check for double byte bytes                  byte bLeadByte = (byte)(iBytes >> 8);                  byte bTrailByte = (byte)(iBytes & 0xff);                    if (bLeadByte != 0)                  {                      //                      //  It's a double byte character.                      //                        // If we haven't done our Korean designator' then do so' if we have any input                      if (shiftOutMode != ISO2022Modes.ModeKR)                      {                          // Add our code page designator sequence                          if (!buffer.AddByte(ESCAPE' unchecked((byte)'$')' unchecked((byte)')')' unchecked((byte)'C')))                              break; // No room during convert.                            shiftOutMode = ISO2022Modes.ModeKR;                      }                        // May have to switch to ModeKR first                      if (currentMode != ISO2022Modes.ModeKR)                      {                          if (!buffer.AddByte(SHIFT_OUT))                              break; // No convert room                            currentMode = ISO2022Modes.ModeKR;                      }                        // Add the bytes                      if (!buffer.AddByte(bLeadByte' bTrailByte))                          break; // no convert room                      continue;                  }                  else if (iBytes != 0 || ch == 0)                  {                      // Its a single byte character' switch to ASCII if we have to                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          if (!buffer.AddByte(SHIFT_IN))                              break;                            currentMode = ISO2022Modes.ModeASCII;                      }                        // Add the ASCII char                      if (!buffer.AddByte(bTrailByte))                          break;                      continue;                  }                    // Its unknown' do fallback' throws if recursive (knows because we called InternalGetNextChar)                  buffer.Fallback(ch);              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort sChar = mapUnicodeToBytes[ch];                  if (sChar == 0 && ch != 0)                  {                      // Wasn't a legal byte sequence' its a surrogate or fallback                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        // Done with our char' now process fallback                      continue;                  }                    // Check for halfwidth bytes                  byte bLeadByte = (byte)(sChar >> 8);                  byte bTrailByte = (byte)(sChar & 0xff);                    // If its a double byte' it has to fit in the lead byte 0xa1 - 0xf7' trail byte 0xa1 - 0xfe range                  // (including the 0x8080 that our codepage or's to the value)                  if ((bLeadByte != 0 &&                       (bLeadByte < 0xa1 || bLeadByte > 0xf7 || bTrailByte < 0xa1 || bTrailByte > 0xfe)) ||                      (bLeadByte == 0 && bTrailByte > 0x80 && bTrailByte != 0xff))                  {                      // Illegal character' in 936 code page' but not in HZ subset' get fallback for it                      buffer.Fallback(ch);                      continue;                  }                    // sChar is now either ASCII or has an 0x8080 mask                  if (bLeadByte != 0)                  {                      // Its a double byte mode                      if (currentMode != ISO2022Modes.ModeHZ)                      {                          // Need to add the double byte mode marker                          if (!buffer.AddByte((byte)'~'' (byte)'{'' 2))                              break;                                      // Stop if no buffer space in convert                            currentMode = ISO2022Modes.ModeHZ;                      }                        // Go ahead and add the 2 bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte & 0x7f))' unchecked((byte)(bTrailByte & 0x7f))))                          break;                                      // Stop if no buffer space in convert                  }                  else                  {                      // Its supposed to be ASCII                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          // Need to add the ASCII mode marker                          // Will have 1 more byte (or 2 if ~)                          if (!buffer.AddByte((byte)'~'' (byte)'}'' bTrailByte == '~' ? 2 : 1))                              break;                            currentMode = ISO2022Modes.ModeASCII;                      }                        // If its a '~' we'll need an extra one                      if (bTrailByte == '~')                      {                          // Need to add the extra ~                          if (!buffer.AddByte((byte)'~'' 1))                              break;                      }                        // Need to add the character                      if (!buffer.AddByte(bTrailByte))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort sChar = mapUnicodeToBytes[ch];                  if (sChar == 0 && ch != 0)                  {                      // Wasn't a legal byte sequence' its a surrogate or fallback                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        // Done with our char' now process fallback                      continue;                  }                    // Check for halfwidth bytes                  byte bLeadByte = (byte)(sChar >> 8);                  byte bTrailByte = (byte)(sChar & 0xff);                    // If its a double byte' it has to fit in the lead byte 0xa1 - 0xf7' trail byte 0xa1 - 0xfe range                  // (including the 0x8080 that our codepage or's to the value)                  if ((bLeadByte != 0 &&                       (bLeadByte < 0xa1 || bLeadByte > 0xf7 || bTrailByte < 0xa1 || bTrailByte > 0xfe)) ||                      (bLeadByte == 0 && bTrailByte > 0x80 && bTrailByte != 0xff))                  {                      // Illegal character' in 936 code page' but not in HZ subset' get fallback for it                      buffer.Fallback(ch);                      continue;                  }                    // sChar is now either ASCII or has an 0x8080 mask                  if (bLeadByte != 0)                  {                      // Its a double byte mode                      if (currentMode != ISO2022Modes.ModeHZ)                      {                          // Need to add the double byte mode marker                          if (!buffer.AddByte((byte)'~'' (byte)'{'' 2))                              break;                                      // Stop if no buffer space in convert                            currentMode = ISO2022Modes.ModeHZ;                      }                        // Go ahead and add the 2 bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte & 0x7f))' unchecked((byte)(bTrailByte & 0x7f))))                          break;                                      // Stop if no buffer space in convert                  }                  else                  {                      // Its supposed to be ASCII                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          // Need to add the ASCII mode marker                          // Will have 1 more byte (or 2 if ~)                          if (!buffer.AddByte((byte)'~'' (byte)'}'' bTrailByte == '~' ? 2 : 1))                              break;                            currentMode = ISO2022Modes.ModeASCII;                      }                        // If its a '~' we'll need an extra one                      if (bTrailByte == '~')                      {                          // Need to add the extra ~                          if (!buffer.AddByte((byte)'~'' 1))                              break;                      }                        // Need to add the character                      if (!buffer.AddByte(bTrailByte))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytesCP52936,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our char                  char ch = buffer.GetNextChar();                    // Get our bytes                  ushort sChar = mapUnicodeToBytes[ch];                  if (sChar == 0 && ch != 0)                  {                      // Wasn't a legal byte sequence' its a surrogate or fallback                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        // Done with our char' now process fallback                      continue;                  }                    // Check for halfwidth bytes                  byte bLeadByte = (byte)(sChar >> 8);                  byte bTrailByte = (byte)(sChar & 0xff);                    // If its a double byte' it has to fit in the lead byte 0xa1 - 0xf7' trail byte 0xa1 - 0xfe range                  // (including the 0x8080 that our codepage or's to the value)                  if ((bLeadByte != 0 &&                       (bLeadByte < 0xa1 || bLeadByte > 0xf7 || bTrailByte < 0xa1 || bTrailByte > 0xfe)) ||                      (bLeadByte == 0 && bTrailByte > 0x80 && bTrailByte != 0xff))                  {                      // Illegal character' in 936 code page' but not in HZ subset' get fallback for it                      buffer.Fallback(ch);                      continue;                  }                    // sChar is now either ASCII or has an 0x8080 mask                  if (bLeadByte != 0)                  {                      // Its a double byte mode                      if (currentMode != ISO2022Modes.ModeHZ)                      {                          // Need to add the double byte mode marker                          if (!buffer.AddByte((byte)'~'' (byte)'{'' 2))                              break;                                      // Stop if no buffer space in convert                            currentMode = ISO2022Modes.ModeHZ;                      }                        // Go ahead and add the 2 bytes                      if (!buffer.AddByte(unchecked((byte)(bLeadByte & 0x7f))' unchecked((byte)(bTrailByte & 0x7f))))                          break;                                      // Stop if no buffer space in convert                  }                  else                  {                      // Its supposed to be ASCII                      if (currentMode != ISO2022Modes.ModeASCII)                      {                          // Need to add the ASCII mode marker                          // Will have 1 more byte (or 2 if ~)                          if (!buffer.AddByte((byte)'~'' (byte)'}'' bTrailByte == '~' ? 2 : 1))                              break;                            currentMode = ISO2022Modes.ModeASCII;                      }                        // If its a '~' we'll need an extra one                      if (bTrailByte == '~')                      {                          // Need to add the extra ~                          if (!buffer.AddByte((byte)'~'' 1))                              break;                      }                        // Need to add the character                      if (!buffer.AddByte(bTrailByte))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: byte[] escapeBytes = new byte[4];
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceJP(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly                                      escapeCount = 0;                                        // We're now this mode                                      currentMode = shiftInMode = modeReturn;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Read next escape byte and move them down one.                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush the previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      shiftInMode = currentMode;                      currentMode = ISO2022Modes.ModeHalfwidthKatakana;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = shiftInMode;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    if (currentMode == ISO2022Modes.ModeJIS0208)                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for this byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                        // MLang treated JIS 0208 '*' lead byte like a single halfwidth katakana                      // escape' so use 0x8e00 as katakana lead byte and keep same trail byte.                      // 0x2a lead byte range is normally unused in JIS 0208' so shouldn't have                      // any weird compatibility issues.                      if ((b2Bytes == true) && ((iBytes & 0xff00) == 0x2a00))                      {                          iBytes = (ushort)(iBytes & 0xff);                          iBytes |= (LEADBYTE_HALFWIDTH << 8);   // Put us in the halfwidth katakana range                      }                  }                  else if (iBytes >= 0xA1 && iBytes <= 0xDF)                  {                      // Everett accidentally mapped Katakana like shift-jis (932)'                      // even though this is a 7 bit code page.  We keep that mapping                      iBytes |= (LEADBYTE_HALFWIDTH << 8);    // Map to halfwidth katakana range                      iBytes &= 0xff7f;                       // remove extra 0x80                  }                  else if (currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Add 0x10 lead byte that our encoding expects for Katakana:                      iBytes |= (LEADBYTE_HALFWIDTH << 8);                  }                    // We have an iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // If we were JIS 0208' then we consumed an extra byte                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceJP(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly                                      escapeCount = 0;                                        // We're now this mode                                      currentMode = shiftInMode = modeReturn;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Read next escape byte and move them down one.                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush the previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      shiftInMode = currentMode;                      currentMode = ISO2022Modes.ModeHalfwidthKatakana;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = shiftInMode;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    if (currentMode == ISO2022Modes.ModeJIS0208)                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for this byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                        // MLang treated JIS 0208 '*' lead byte like a single halfwidth katakana                      // escape' so use 0x8e00 as katakana lead byte and keep same trail byte.                      // 0x2a lead byte range is normally unused in JIS 0208' so shouldn't have                      // any weird compatibility issues.                      if ((b2Bytes == true) && ((iBytes & 0xff00) == 0x2a00))                      {                          iBytes = (ushort)(iBytes & 0xff);                          iBytes |= (LEADBYTE_HALFWIDTH << 8);   // Put us in the halfwidth katakana range                      }                  }                  else if (iBytes >= 0xA1 && iBytes <= 0xDF)                  {                      // Everett accidentally mapped Katakana like shift-jis (932)'                      // even though this is a 7 bit code page.  We keep that mapping                      iBytes |= (LEADBYTE_HALFWIDTH << 8);    // Map to halfwidth katakana range                      iBytes &= 0xff7f;                       // remove extra 0x80                  }                  else if (currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Add 0x10 lead byte that our encoding expects for Katakana:                      iBytes |= (LEADBYTE_HALFWIDTH << 8);                  }                    // We have an iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // If we were JIS 0208' then we consumed an extra byte                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceJP(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly                                      escapeCount = 0;                                        // We're now this mode                                      currentMode = shiftInMode = modeReturn;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Read next escape byte and move them down one.                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush the previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      shiftInMode = currentMode;                      currentMode = ISO2022Modes.ModeHalfwidthKatakana;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = shiftInMode;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    if (currentMode == ISO2022Modes.ModeJIS0208)                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for this byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                        // MLang treated JIS 0208 '*' lead byte like a single halfwidth katakana                      // escape' so use 0x8e00 as katakana lead byte and keep same trail byte.                      // 0x2a lead byte range is normally unused in JIS 0208' so shouldn't have                      // any weird compatibility issues.                      if ((b2Bytes == true) && ((iBytes & 0xff00) == 0x2a00))                      {                          iBytes = (ushort)(iBytes & 0xff);                          iBytes |= (LEADBYTE_HALFWIDTH << 8);   // Put us in the halfwidth katakana range                      }                  }                  else if (iBytes >= 0xA1 && iBytes <= 0xDF)                  {                      // Everett accidentally mapped Katakana like shift-jis (932)'                      // even though this is a 7 bit code page.  We keep that mapping                      iBytes |= (LEADBYTE_HALFWIDTH << 8);    // Map to halfwidth katakana range                      iBytes &= 0xff7f;                       // remove extra 0x80                  }                  else if (currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Add 0x10 lead byte that our encoding expects for Katakana:                      iBytes |= (LEADBYTE_HALFWIDTH << 8);                  }                    // We have an iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // If we were JIS 0208' then we consumed an extra byte                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceJP(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly                                      escapeCount = 0;                                        // We're now this mode                                      currentMode = shiftInMode = modeReturn;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Read next escape byte and move them down one.                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush the previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      shiftInMode = currentMode;                      currentMode = ISO2022Modes.ModeHalfwidthKatakana;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = shiftInMode;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    if (currentMode == ISO2022Modes.ModeJIS0208)                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for this byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                        // MLang treated JIS 0208 '*' lead byte like a single halfwidth katakana                      // escape' so use 0x8e00 as katakana lead byte and keep same trail byte.                      // 0x2a lead byte range is normally unused in JIS 0208' so shouldn't have                      // any weird compatibility issues.                      if ((b2Bytes == true) && ((iBytes & 0xff00) == 0x2a00))                      {                          iBytes = (ushort)(iBytes & 0xff);                          iBytes |= (LEADBYTE_HALFWIDTH << 8);   // Put us in the halfwidth katakana range                      }                  }                  else if (iBytes >= 0xA1 && iBytes <= 0xDF)                  {                      // Everett accidentally mapped Katakana like shift-jis (932)'                      // even though this is a 7 bit code page.  We keep that mapping                      iBytes |= (LEADBYTE_HALFWIDTH << 8);    // Map to halfwidth katakana range                      iBytes &= 0xff7f;                       // remove extra 0x80                  }                  else if (currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Add 0x10 lead byte that our encoding expects for Katakana:                      iBytes |= (LEADBYTE_HALFWIDTH << 8);                  }                    // We have an iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // If we were JIS 0208' then we consumed an extra byte                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceJP(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly                                      escapeCount = 0;                                        // We're now this mode                                      currentMode = shiftInMode = modeReturn;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Read next escape byte and move them down one.                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush the previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      shiftInMode = currentMode;                      currentMode = ISO2022Modes.ModeHalfwidthKatakana;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = shiftInMode;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    if (currentMode == ISO2022Modes.ModeJIS0208)                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for this byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                        // MLang treated JIS 0208 '*' lead byte like a single halfwidth katakana                      // escape' so use 0x8e00 as katakana lead byte and keep same trail byte.                      // 0x2a lead byte range is normally unused in JIS 0208' so shouldn't have                      // any weird compatibility issues.                      if ((b2Bytes == true) && ((iBytes & 0xff00) == 0x2a00))                      {                          iBytes = (ushort)(iBytes & 0xff);                          iBytes |= (LEADBYTE_HALFWIDTH << 8);   // Put us in the halfwidth katakana range                      }                  }                  else if (iBytes >= 0xA1 && iBytes <= 0xDF)                  {                      // Everett accidentally mapped Katakana like shift-jis (932)'                      // even though this is a 7 bit code page.  We keep that mapping                      iBytes |= (LEADBYTE_HALFWIDTH << 8);    // Map to halfwidth katakana range                      iBytes &= 0xff7f;                       // remove extra 0x80                  }                  else if (currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Add 0x10 lead byte that our encoding expects for Katakana:                      iBytes |= (LEADBYTE_HALFWIDTH << 8);                  }                    // We have an iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // If we were JIS 0208' then we consumed an extra byte                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceJP(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly                                      escapeCount = 0;                                        // We're now this mode                                      currentMode = shiftInMode = modeReturn;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Read next escape byte and move them down one.                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush the previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      shiftInMode = currentMode;                      currentMode = ISO2022Modes.ModeHalfwidthKatakana;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = shiftInMode;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    if (currentMode == ISO2022Modes.ModeJIS0208)                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for this byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                        // MLang treated JIS 0208 '*' lead byte like a single halfwidth katakana                      // escape' so use 0x8e00 as katakana lead byte and keep same trail byte.                      // 0x2a lead byte range is normally unused in JIS 0208' so shouldn't have                      // any weird compatibility issues.                      if ((b2Bytes == true) && ((iBytes & 0xff00) == 0x2a00))                      {                          iBytes = (ushort)(iBytes & 0xff);                          iBytes |= (LEADBYTE_HALFWIDTH << 8);   // Put us in the halfwidth katakana range                      }                  }                  else if (iBytes >= 0xA1 && iBytes <= 0xDF)                  {                      // Everett accidentally mapped Katakana like shift-jis (932)'                      // even though this is a 7 bit code page.  We keep that mapping                      iBytes |= (LEADBYTE_HALFWIDTH << 8);    // Map to halfwidth katakana range                      iBytes &= 0xff7f;                       // remove extra 0x80                  }                  else if (currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Add 0x10 lead byte that our encoding expects for Katakana:                      iBytes |= (LEADBYTE_HALFWIDTH << 8);                  }                    // We have an iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // If we were JIS 0208' then we consumed an extra byte                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP5022xJP,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceJP(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly                                      escapeCount = 0;                                        // We're now this mode                                      currentMode = shiftInMode = modeReturn;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Read next escape byte and move them down one.                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush the previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      shiftInMode = currentMode;                      currentMode = ISO2022Modes.ModeHalfwidthKatakana;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = shiftInMode;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    if (currentMode == ISO2022Modes.ModeJIS0208)                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for this byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                        // MLang treated JIS 0208 '*' lead byte like a single halfwidth katakana                      // escape' so use 0x8e00 as katakana lead byte and keep same trail byte.                      // 0x2a lead byte range is normally unused in JIS 0208' so shouldn't have                      // any weird compatibility issues.                      if ((b2Bytes == true) && ((iBytes & 0xff00) == 0x2a00))                      {                          iBytes = (ushort)(iBytes & 0xff);                          iBytes |= (LEADBYTE_HALFWIDTH << 8);   // Put us in the halfwidth katakana range                      }                  }                  else if (iBytes >= 0xA1 && iBytes <= 0xDF)                  {                      // Everett accidentally mapped Katakana like shift-jis (932)'                      // even though this is a 7 bit code page.  We keep that mapping                      iBytes |= (LEADBYTE_HALFWIDTH << 8);    // Map to halfwidth katakana range                      iBytes &= 0xff7f;                       // remove extra 0x80                  }                  else if (currentMode == ISO2022Modes.ModeHalfwidthKatakana)                  {                      // Add 0x10 lead byte that our encoding expects for Katakana:                      iBytes |= (LEADBYTE_HALFWIDTH << 8);                  }                    // We have an iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      // If we were JIS 0208' then we consumed an extra byte                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (escapeCount < 3)                  return ISO2022Modes.ModeIncompleteEscape;
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceJP,The following statement contains a magic number: if (bytes[1] == '(')              {                  if (bytes[2] == 'B')       // <esc>(B                  {                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'H')  // <esc>(H                  {                      // Actually this is supposed to be Swedish                      // We treat it like ASCII though.                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'J')  // <esc>(J                  {                      // Actually this is supposed to be Roman                      // 2 characters are different' but historically we treat it as ascii                      return ISO2022Modes.ModeASCII;                  }                  else if (bytes[2] == 'I')  // <esc>(I                  {                      return ISO2022Modes.ModeHalfwidthKatakana;                  }              }              else if (bytes[1] == '$')              {                  if (bytes[2] == '@' ||   // <esc>$@                      bytes[2] == 'B')     // <esc>$B                  {                      return ISO2022Modes.ModeJIS0208;                  }                  else                  {                      // Looking for <esc>$(D                      if (escapeCount < 4)                          return ISO2022Modes.ModeIncompleteEscape;                        if (bytes[2] == '(' && bytes[3] == 'D') // <esc>$(D                      {                          // Mlang treated 0208 like 0212 even though that's wrong                          return ISO2022Modes.ModeJIS0208;                      }                  }              }              else if (bytes[1] == '&')              {                  if (bytes[2] == '@')            // <esc>&@                  {                      // Ignore ESC & @ (prefix to <esc>$B)                      return ISO2022Modes.ModeNOOP;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The following statement contains a magic number: byte[] escapeBytes = new byte[4];
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceKR(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly' no effect (we know about KR mode)                                      escapeCount = 0;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Still have something left over in escape buffer                      // Get it and move them down one                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      currentMode = ISO2022Modes.ModeKR;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = ISO2022Modes.ModeASCII;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    // MLANG was passing through ' '' '\t' and '\n'' so we do so as well' but I don't see that in the RFC.                  if (currentMode == ISO2022Modes.ModeKR && ch != ' ' && ch != '\t' && ch != '\n')                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for lonely 1st byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                  }                    // We have a iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceKR(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly' no effect (we know about KR mode)                                      escapeCount = 0;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Still have something left over in escape buffer                      // Get it and move them down one                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      currentMode = ISO2022Modes.ModeKR;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = ISO2022Modes.ModeASCII;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    // MLANG was passing through ' '' '\t' and '\n'' so we do so as well' but I don't see that in the RFC.                  if (currentMode == ISO2022Modes.ModeKR && ch != ' ' && ch != '\t' && ch != '\n')                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for lonely 1st byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                  }                    // We have a iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceKR(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly' no effect (we know about KR mode)                                      escapeCount = 0;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Still have something left over in escape buffer                      // Get it and move them down one                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      currentMode = ISO2022Modes.ModeKR;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = ISO2022Modes.ModeASCII;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    // MLANG was passing through ' '' '\t' and '\n'' so we do so as well' but I don't see that in the RFC.                  if (currentMode == ISO2022Modes.ModeKR && ch != ' ' && ch != '\t' && ch != '\n')                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for lonely 1st byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                  }                    // We have a iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP50225KR,The following statement contains a magic number: while (buffer.MoreData || escapeCount > 0)              {                  byte ch;                    if (escapeCount > 0)                  {                      // Get more escape sequences if necessary                      if (escapeBytes[0] == ESCAPE)                      {                          // Stop if no more input                          if (!buffer.MoreData)                          {                              if (decoder != null && !decoder.MustFlush)                                  break;                          }                          else                          {                              // Add it to the sequence we can check                              escapeBytes[escapeCount++] = buffer.GetNextByte();                                // We have an escape sequence                              ISO2022Modes modeReturn =                                  CheckEscapeSequenceKR(escapeBytes' escapeCount);                                if (modeReturn != ISO2022Modes.ModeInvalidEscape)                              {                                  if (modeReturn != ISO2022Modes.ModeIncompleteEscape)                                  {                                      // Processed escape correctly' no effect (we know about KR mode)                                      escapeCount = 0;                                  }                                    // Either way' continue to get next escape or real byte                                  continue;                              }                          }                          // If ModeInvalidEscape' or no input & must flush' then fall through to add escape.                      }                        // Still have something left over in escape buffer                      // Get it and move them down one                      ch = DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                  }                  else                  {                      // Get our next byte                      ch = buffer.GetNextByte();                        if (ch == ESCAPE)                      {                          // We'll have an escape sequence' use it if we don't have one buffered already                          if (escapeCount == 0)                          {                              // Start this new escape sequence                              escapeBytes[0] = ch;                              escapeCount = 1;                              continue;                          }                            // Flush previous escape sequence' then reuse this escape byte                          buffer.AdjustBytes(-1);                      }                  }                    if (ch == SHIFT_OUT)                  {                      currentMode = ISO2022Modes.ModeKR;                      continue;                  }                  else if (ch == SHIFT_IN)                  {                      currentMode = ISO2022Modes.ModeASCII;                      continue;                  }                    // Get our full character                  ushort iBytes = ch;                  bool b2Bytes = false;                    // MLANG was passing through ' '' '\t' and '\n'' so we do so as well' but I don't see that in the RFC.                  if (currentMode == ISO2022Modes.ModeKR && ch != ' ' && ch != '\t' && ch != '\n')                  {                      //                      //  To handle errors' we need to check:                      //    1. if trailbyte is there                      //    2. if code is valid                      //                      if (escapeCount > 0)                      {                          // Let another escape fall through                          if (escapeBytes[0] != ESCAPE)                          {                              // Move them down one & get the next data                              iBytes <<= 8;                              iBytes |= DecrementEscapeBytes(ref escapeBytes' ref escapeCount);                              b2Bytes = true;                          }                      }                      else if (buffer.MoreData)                      {                          iBytes <<= 8;                          iBytes |= buffer.GetNextByte();                          b2Bytes = true;                      }                      else                      {                          // Not enough input' use decoder if possible                          if (decoder == null || decoder.MustFlush)                          {                              // No decoder' do fallback for lonely 1st byte                              buffer.Fallback(ch);                              break;                          }                            // Stick it in the decoder if we're not counting                          if (chars != null)                          {                              escapeBytes[0] = ch;                              escapeCount = 1;                          }                          break;                      }                  }                    // We have a iBytes to try to convert.                  char c = mapBytesToUnicode[iBytes];                    // See if it was unknown                  if (c == UNKNOWN_CHAR_FLAG && iBytes != 0)                  {                      // Have to do fallback                      if (b2Bytes)                      {                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)iBytes))                              break;                      }                      else                      {                          if (!buffer.Fallback(ch))                              break;                      }                  }                  else                  {                      if (!buffer.AddChar(c' b2Bytes ? 2 : 1))                          break;                  }              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceKR,The following statement contains a magic number: if (escapeCount < 4)                  return ISO2022Modes.ModeIncompleteEscape;
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceKR,The following statement contains a magic number: if (bytes[1] == '$' && bytes[2] == ')' && bytes[3] == 'C') // <esc>$)C                  return ISO2022Modes.ModeKR;
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CheckEscapeSequenceKR,The following statement contains a magic number: if (bytes[1] == '$' && bytes[2] == ')' && bytes[3] == 'C') // <esc>$)C                  return ISO2022Modes.ModeKR;
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The following statement contains a magic number: while (buffer.MoreData || byteLeftOver >= 0)              {                  byte ch;                    // May have a left over byte                  if (byteLeftOver >= 0)                  {                      ch = (byte)byteLeftOver;                      byteLeftOver = -1;                  }                  else                  {                      ch = buffer.GetNextByte();                  }                    // We're in escape mode                  if (ch == '~')                  {                      // Next char is type of switch                      if (!buffer.MoreData)                      {                          // We don't have anything left' it'll be in decoder or a ?                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // We'll be a '?'                              buffer.Fallback(ch);                              // break if we fail & break if we don't (because !MoreData)                              // Add succeeded' continue                              break;                          }                            // Stick it in decoder                          if (decoder != null)                              decoder.ClearMustFlush();                            if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = (byte)'~';                              bUsedDecoder = true;                          }                          break;                      }                        // What type is it?' get 2nd byte                      ch = buffer.GetNextByte();                        if (ch == '~' && currentMode == ISO2022Modes.ModeASCII)                      {                          // Its just a ~~ replacement for ~' add it                          if (!buffer.AddChar((char)ch' 2))                              // Add failed' break for converting                              break;                            // Add succeeded' continue                          continue;                      }                      else if (ch == '{')                      {                          // Switching to Double Byte mode                          currentMode = ISO2022Modes.ModeHZ;                          continue;                      }                      else if (ch == '}')                      {                          // Switching to ASCII mode                          currentMode = ISO2022Modes.ModeASCII;                          continue;                      }                      else if (ch == '\n')                      {                          // Ignore ~\n sequence                          continue;                      }                      else                      {                          // Unknown escape' back up and try the '~' as a "normal" byte or lead byte                          buffer.AdjustBytes(-1);                          ch = (byte)'~';                      }                  }                    // go ahead and add our data                  if (currentMode != ISO2022Modes.ModeASCII)                  {                      // Should be ModeHZ                      Debug.Assert(currentMode == ISO2022Modes.ModeHZ' "[ISO2022Encoding.GetCharsCP52936]Expected ModeHZ");                      char cm;                        // Everett allowed characters < 0x20 to be passed as if they were ASCII                      if (ch < 0x20)                      {                          // Emit it as ASCII                          goto STOREASCII;                      }                        // Its multibyte' should have another byte                      if (!buffer.MoreData)                      {                          // No bytes left                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // Not enough bytes' fallback lead byte                              buffer.Fallback(ch);                                // Break if we fail & break because !MoreData                              break;                          }                            if (decoder != null)                              decoder.ClearMustFlush();                            // Stick it in decoder                          if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = ch;                              bUsedDecoder = true;                          }                          break;                      }                        // Everett uses space as an escape character for single SBCS bytes                      byte ch2 = buffer.GetNextByte();                      ushort iBytes = (ushort)(ch << 8 | ch2);                        if (ch == ' ' && ch2 != 0)                      {                          // Get next char and treat it like ASCII (Everett treated space like an escape                          // allowing the next char to be just ascii)                          cm = (char)ch2;                          goto STOREMULTIBYTE;                      }                        // Bytes should be in range: lead byte 0x21-0x77' trail byte: 0x21 - 0x7e                      if ((ch < 0x21 || ch > 0x77 || ch2 < 0x21 || ch2 > 0x7e) &&                      // Everett allowed high bit mappings for same characters (but only if both bits set)                          (ch < 0xa1 || ch > 0xf7 || ch2 < 0xa1 || ch2 > 0xfe))                      {                          // For some reason Everett allowed XX20 to become unicode 3000... (ideo sp)                          if (ch2 == 0x20 && 0x21 <= ch && ch <= 0x7d)                          {                              iBytes = 0x2121;                              goto MULTIBYTE;                          }                            // Illegal char' use fallback.  If lead byte is 0 have to do it special and do it first                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                    MULTIBYTE:                      iBytes |= 0x8080;                      // Look up the multibyte char to stick it in our data                        // We have a iBytes to try to convert.                      cm = mapBytesToUnicode[iBytes];                    STOREMULTIBYTE:                        // See if it was unknown                      if (cm == UNKNOWN_CHAR_FLAG && iBytes != 0)                      {                          // Fall back the unknown stuff                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                        if (!buffer.AddChar(cm' 2))                          break;              // convert ran out of buffer' stop                      continue;                  }                // Just ASCII              // We allow some chars > 7f because Everett did' so we have to look them up.              STOREASCII:                  char c = mapBytesToUnicode[ch];                    // Check if it was unknown                  if ((c == UNKNOWN_CHAR_FLAG || c == 0) && (ch != 0))                  {                      // fallback the unknown bytes                      if (!buffer.Fallback((byte)ch))                          break;                      continue;                  }                    // Go ahead and add our ASCII character                  if (!buffer.AddChar(c))                      break;                  // convert ran out of buffer' stop              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The following statement contains a magic number: while (buffer.MoreData || byteLeftOver >= 0)              {                  byte ch;                    // May have a left over byte                  if (byteLeftOver >= 0)                  {                      ch = (byte)byteLeftOver;                      byteLeftOver = -1;                  }                  else                  {                      ch = buffer.GetNextByte();                  }                    // We're in escape mode                  if (ch == '~')                  {                      // Next char is type of switch                      if (!buffer.MoreData)                      {                          // We don't have anything left' it'll be in decoder or a ?                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // We'll be a '?'                              buffer.Fallback(ch);                              // break if we fail & break if we don't (because !MoreData)                              // Add succeeded' continue                              break;                          }                            // Stick it in decoder                          if (decoder != null)                              decoder.ClearMustFlush();                            if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = (byte)'~';                              bUsedDecoder = true;                          }                          break;                      }                        // What type is it?' get 2nd byte                      ch = buffer.GetNextByte();                        if (ch == '~' && currentMode == ISO2022Modes.ModeASCII)                      {                          // Its just a ~~ replacement for ~' add it                          if (!buffer.AddChar((char)ch' 2))                              // Add failed' break for converting                              break;                            // Add succeeded' continue                          continue;                      }                      else if (ch == '{')                      {                          // Switching to Double Byte mode                          currentMode = ISO2022Modes.ModeHZ;                          continue;                      }                      else if (ch == '}')                      {                          // Switching to ASCII mode                          currentMode = ISO2022Modes.ModeASCII;                          continue;                      }                      else if (ch == '\n')                      {                          // Ignore ~\n sequence                          continue;                      }                      else                      {                          // Unknown escape' back up and try the '~' as a "normal" byte or lead byte                          buffer.AdjustBytes(-1);                          ch = (byte)'~';                      }                  }                    // go ahead and add our data                  if (currentMode != ISO2022Modes.ModeASCII)                  {                      // Should be ModeHZ                      Debug.Assert(currentMode == ISO2022Modes.ModeHZ' "[ISO2022Encoding.GetCharsCP52936]Expected ModeHZ");                      char cm;                        // Everett allowed characters < 0x20 to be passed as if they were ASCII                      if (ch < 0x20)                      {                          // Emit it as ASCII                          goto STOREASCII;                      }                        // Its multibyte' should have another byte                      if (!buffer.MoreData)                      {                          // No bytes left                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // Not enough bytes' fallback lead byte                              buffer.Fallback(ch);                                // Break if we fail & break because !MoreData                              break;                          }                            if (decoder != null)                              decoder.ClearMustFlush();                            // Stick it in decoder                          if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = ch;                              bUsedDecoder = true;                          }                          break;                      }                        // Everett uses space as an escape character for single SBCS bytes                      byte ch2 = buffer.GetNextByte();                      ushort iBytes = (ushort)(ch << 8 | ch2);                        if (ch == ' ' && ch2 != 0)                      {                          // Get next char and treat it like ASCII (Everett treated space like an escape                          // allowing the next char to be just ascii)                          cm = (char)ch2;                          goto STOREMULTIBYTE;                      }                        // Bytes should be in range: lead byte 0x21-0x77' trail byte: 0x21 - 0x7e                      if ((ch < 0x21 || ch > 0x77 || ch2 < 0x21 || ch2 > 0x7e) &&                      // Everett allowed high bit mappings for same characters (but only if both bits set)                          (ch < 0xa1 || ch > 0xf7 || ch2 < 0xa1 || ch2 > 0xfe))                      {                          // For some reason Everett allowed XX20 to become unicode 3000... (ideo sp)                          if (ch2 == 0x20 && 0x21 <= ch && ch <= 0x7d)                          {                              iBytes = 0x2121;                              goto MULTIBYTE;                          }                            // Illegal char' use fallback.  If lead byte is 0 have to do it special and do it first                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                    MULTIBYTE:                      iBytes |= 0x8080;                      // Look up the multibyte char to stick it in our data                        // We have a iBytes to try to convert.                      cm = mapBytesToUnicode[iBytes];                    STOREMULTIBYTE:                        // See if it was unknown                      if (cm == UNKNOWN_CHAR_FLAG && iBytes != 0)                      {                          // Fall back the unknown stuff                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                        if (!buffer.AddChar(cm' 2))                          break;              // convert ran out of buffer' stop                      continue;                  }                // Just ASCII              // We allow some chars > 7f because Everett did' so we have to look them up.              STOREASCII:                  char c = mapBytesToUnicode[ch];                    // Check if it was unknown                  if ((c == UNKNOWN_CHAR_FLAG || c == 0) && (ch != 0))                  {                      // fallback the unknown bytes                      if (!buffer.Fallback((byte)ch))                          break;                      continue;                  }                    // Go ahead and add our ASCII character                  if (!buffer.AddChar(c))                      break;                  // convert ran out of buffer' stop              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The following statement contains a magic number: while (buffer.MoreData || byteLeftOver >= 0)              {                  byte ch;                    // May have a left over byte                  if (byteLeftOver >= 0)                  {                      ch = (byte)byteLeftOver;                      byteLeftOver = -1;                  }                  else                  {                      ch = buffer.GetNextByte();                  }                    // We're in escape mode                  if (ch == '~')                  {                      // Next char is type of switch                      if (!buffer.MoreData)                      {                          // We don't have anything left' it'll be in decoder or a ?                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // We'll be a '?'                              buffer.Fallback(ch);                              // break if we fail & break if we don't (because !MoreData)                              // Add succeeded' continue                              break;                          }                            // Stick it in decoder                          if (decoder != null)                              decoder.ClearMustFlush();                            if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = (byte)'~';                              bUsedDecoder = true;                          }                          break;                      }                        // What type is it?' get 2nd byte                      ch = buffer.GetNextByte();                        if (ch == '~' && currentMode == ISO2022Modes.ModeASCII)                      {                          // Its just a ~~ replacement for ~' add it                          if (!buffer.AddChar((char)ch' 2))                              // Add failed' break for converting                              break;                            // Add succeeded' continue                          continue;                      }                      else if (ch == '{')                      {                          // Switching to Double Byte mode                          currentMode = ISO2022Modes.ModeHZ;                          continue;                      }                      else if (ch == '}')                      {                          // Switching to ASCII mode                          currentMode = ISO2022Modes.ModeASCII;                          continue;                      }                      else if (ch == '\n')                      {                          // Ignore ~\n sequence                          continue;                      }                      else                      {                          // Unknown escape' back up and try the '~' as a "normal" byte or lead byte                          buffer.AdjustBytes(-1);                          ch = (byte)'~';                      }                  }                    // go ahead and add our data                  if (currentMode != ISO2022Modes.ModeASCII)                  {                      // Should be ModeHZ                      Debug.Assert(currentMode == ISO2022Modes.ModeHZ' "[ISO2022Encoding.GetCharsCP52936]Expected ModeHZ");                      char cm;                        // Everett allowed characters < 0x20 to be passed as if they were ASCII                      if (ch < 0x20)                      {                          // Emit it as ASCII                          goto STOREASCII;                      }                        // Its multibyte' should have another byte                      if (!buffer.MoreData)                      {                          // No bytes left                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // Not enough bytes' fallback lead byte                              buffer.Fallback(ch);                                // Break if we fail & break because !MoreData                              break;                          }                            if (decoder != null)                              decoder.ClearMustFlush();                            // Stick it in decoder                          if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = ch;                              bUsedDecoder = true;                          }                          break;                      }                        // Everett uses space as an escape character for single SBCS bytes                      byte ch2 = buffer.GetNextByte();                      ushort iBytes = (ushort)(ch << 8 | ch2);                        if (ch == ' ' && ch2 != 0)                      {                          // Get next char and treat it like ASCII (Everett treated space like an escape                          // allowing the next char to be just ascii)                          cm = (char)ch2;                          goto STOREMULTIBYTE;                      }                        // Bytes should be in range: lead byte 0x21-0x77' trail byte: 0x21 - 0x7e                      if ((ch < 0x21 || ch > 0x77 || ch2 < 0x21 || ch2 > 0x7e) &&                      // Everett allowed high bit mappings for same characters (but only if both bits set)                          (ch < 0xa1 || ch > 0xf7 || ch2 < 0xa1 || ch2 > 0xfe))                      {                          // For some reason Everett allowed XX20 to become unicode 3000... (ideo sp)                          if (ch2 == 0x20 && 0x21 <= ch && ch <= 0x7d)                          {                              iBytes = 0x2121;                              goto MULTIBYTE;                          }                            // Illegal char' use fallback.  If lead byte is 0 have to do it special and do it first                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                    MULTIBYTE:                      iBytes |= 0x8080;                      // Look up the multibyte char to stick it in our data                        // We have a iBytes to try to convert.                      cm = mapBytesToUnicode[iBytes];                    STOREMULTIBYTE:                        // See if it was unknown                      if (cm == UNKNOWN_CHAR_FLAG && iBytes != 0)                      {                          // Fall back the unknown stuff                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                        if (!buffer.AddChar(cm' 2))                          break;              // convert ran out of buffer' stop                      continue;                  }                // Just ASCII              // We allow some chars > 7f because Everett did' so we have to look them up.              STOREASCII:                  char c = mapBytesToUnicode[ch];                    // Check if it was unknown                  if ((c == UNKNOWN_CHAR_FLAG || c == 0) && (ch != 0))                  {                      // fallback the unknown bytes                      if (!buffer.Fallback((byte)ch))                          break;                      continue;                  }                    // Go ahead and add our ASCII character                  if (!buffer.AddChar(c))                      break;                  // convert ran out of buffer' stop              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The following statement contains a magic number: while (buffer.MoreData || byteLeftOver >= 0)              {                  byte ch;                    // May have a left over byte                  if (byteLeftOver >= 0)                  {                      ch = (byte)byteLeftOver;                      byteLeftOver = -1;                  }                  else                  {                      ch = buffer.GetNextByte();                  }                    // We're in escape mode                  if (ch == '~')                  {                      // Next char is type of switch                      if (!buffer.MoreData)                      {                          // We don't have anything left' it'll be in decoder or a ?                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // We'll be a '?'                              buffer.Fallback(ch);                              // break if we fail & break if we don't (because !MoreData)                              // Add succeeded' continue                              break;                          }                            // Stick it in decoder                          if (decoder != null)                              decoder.ClearMustFlush();                            if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = (byte)'~';                              bUsedDecoder = true;                          }                          break;                      }                        // What type is it?' get 2nd byte                      ch = buffer.GetNextByte();                        if (ch == '~' && currentMode == ISO2022Modes.ModeASCII)                      {                          // Its just a ~~ replacement for ~' add it                          if (!buffer.AddChar((char)ch' 2))                              // Add failed' break for converting                              break;                            // Add succeeded' continue                          continue;                      }                      else if (ch == '{')                      {                          // Switching to Double Byte mode                          currentMode = ISO2022Modes.ModeHZ;                          continue;                      }                      else if (ch == '}')                      {                          // Switching to ASCII mode                          currentMode = ISO2022Modes.ModeASCII;                          continue;                      }                      else if (ch == '\n')                      {                          // Ignore ~\n sequence                          continue;                      }                      else                      {                          // Unknown escape' back up and try the '~' as a "normal" byte or lead byte                          buffer.AdjustBytes(-1);                          ch = (byte)'~';                      }                  }                    // go ahead and add our data                  if (currentMode != ISO2022Modes.ModeASCII)                  {                      // Should be ModeHZ                      Debug.Assert(currentMode == ISO2022Modes.ModeHZ' "[ISO2022Encoding.GetCharsCP52936]Expected ModeHZ");                      char cm;                        // Everett allowed characters < 0x20 to be passed as if they were ASCII                      if (ch < 0x20)                      {                          // Emit it as ASCII                          goto STOREASCII;                      }                        // Its multibyte' should have another byte                      if (!buffer.MoreData)                      {                          // No bytes left                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // Not enough bytes' fallback lead byte                              buffer.Fallback(ch);                                // Break if we fail & break because !MoreData                              break;                          }                            if (decoder != null)                              decoder.ClearMustFlush();                            // Stick it in decoder                          if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = ch;                              bUsedDecoder = true;                          }                          break;                      }                        // Everett uses space as an escape character for single SBCS bytes                      byte ch2 = buffer.GetNextByte();                      ushort iBytes = (ushort)(ch << 8 | ch2);                        if (ch == ' ' && ch2 != 0)                      {                          // Get next char and treat it like ASCII (Everett treated space like an escape                          // allowing the next char to be just ascii)                          cm = (char)ch2;                          goto STOREMULTIBYTE;                      }                        // Bytes should be in range: lead byte 0x21-0x77' trail byte: 0x21 - 0x7e                      if ((ch < 0x21 || ch > 0x77 || ch2 < 0x21 || ch2 > 0x7e) &&                      // Everett allowed high bit mappings for same characters (but only if both bits set)                          (ch < 0xa1 || ch > 0xf7 || ch2 < 0xa1 || ch2 > 0xfe))                      {                          // For some reason Everett allowed XX20 to become unicode 3000... (ideo sp)                          if (ch2 == 0x20 && 0x21 <= ch && ch <= 0x7d)                          {                              iBytes = 0x2121;                              goto MULTIBYTE;                          }                            // Illegal char' use fallback.  If lead byte is 0 have to do it special and do it first                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                    MULTIBYTE:                      iBytes |= 0x8080;                      // Look up the multibyte char to stick it in our data                        // We have a iBytes to try to convert.                      cm = mapBytesToUnicode[iBytes];                    STOREMULTIBYTE:                        // See if it was unknown                      if (cm == UNKNOWN_CHAR_FLAG && iBytes != 0)                      {                          // Fall back the unknown stuff                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                        if (!buffer.AddChar(cm' 2))                          break;              // convert ran out of buffer' stop                      continue;                  }                // Just ASCII              // We allow some chars > 7f because Everett did' so we have to look them up.              STOREASCII:                  char c = mapBytesToUnicode[ch];                    // Check if it was unknown                  if ((c == UNKNOWN_CHAR_FLAG || c == 0) && (ch != 0))                  {                      // fallback the unknown bytes                      if (!buffer.Fallback((byte)ch))                          break;                      continue;                  }                    // Go ahead and add our ASCII character                  if (!buffer.AddChar(c))                      break;                  // convert ran out of buffer' stop              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetCharsCP52936,The following statement contains a magic number: while (buffer.MoreData || byteLeftOver >= 0)              {                  byte ch;                    // May have a left over byte                  if (byteLeftOver >= 0)                  {                      ch = (byte)byteLeftOver;                      byteLeftOver = -1;                  }                  else                  {                      ch = buffer.GetNextByte();                  }                    // We're in escape mode                  if (ch == '~')                  {                      // Next char is type of switch                      if (!buffer.MoreData)                      {                          // We don't have anything left' it'll be in decoder or a ?                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // We'll be a '?'                              buffer.Fallback(ch);                              // break if we fail & break if we don't (because !MoreData)                              // Add succeeded' continue                              break;                          }                            // Stick it in decoder                          if (decoder != null)                              decoder.ClearMustFlush();                            if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = (byte)'~';                              bUsedDecoder = true;                          }                          break;                      }                        // What type is it?' get 2nd byte                      ch = buffer.GetNextByte();                        if (ch == '~' && currentMode == ISO2022Modes.ModeASCII)                      {                          // Its just a ~~ replacement for ~' add it                          if (!buffer.AddChar((char)ch' 2))                              // Add failed' break for converting                              break;                            // Add succeeded' continue                          continue;                      }                      else if (ch == '{')                      {                          // Switching to Double Byte mode                          currentMode = ISO2022Modes.ModeHZ;                          continue;                      }                      else if (ch == '}')                      {                          // Switching to ASCII mode                          currentMode = ISO2022Modes.ModeASCII;                          continue;                      }                      else if (ch == '\n')                      {                          // Ignore ~\n sequence                          continue;                      }                      else                      {                          // Unknown escape' back up and try the '~' as a "normal" byte or lead byte                          buffer.AdjustBytes(-1);                          ch = (byte)'~';                      }                  }                    // go ahead and add our data                  if (currentMode != ISO2022Modes.ModeASCII)                  {                      // Should be ModeHZ                      Debug.Assert(currentMode == ISO2022Modes.ModeHZ' "[ISO2022Encoding.GetCharsCP52936]Expected ModeHZ");                      char cm;                        // Everett allowed characters < 0x20 to be passed as if they were ASCII                      if (ch < 0x20)                      {                          // Emit it as ASCII                          goto STOREASCII;                      }                        // Its multibyte' should have another byte                      if (!buffer.MoreData)                      {                          // No bytes left                          // don't fail if we are allowing overflows                          if (decoder == null || decoder.MustFlush)                          {                              // Not enough bytes' fallback lead byte                              buffer.Fallback(ch);                                // Break if we fail & break because !MoreData                              break;                          }                            if (decoder != null)                              decoder.ClearMustFlush();                            // Stick it in decoder                          if (chars != null)                          {                              decoder.bytesLeftOverCount = 1;                              decoder.bytesLeftOver[0] = ch;                              bUsedDecoder = true;                          }                          break;                      }                        // Everett uses space as an escape character for single SBCS bytes                      byte ch2 = buffer.GetNextByte();                      ushort iBytes = (ushort)(ch << 8 | ch2);                        if (ch == ' ' && ch2 != 0)                      {                          // Get next char and treat it like ASCII (Everett treated space like an escape                          // allowing the next char to be just ascii)                          cm = (char)ch2;                          goto STOREMULTIBYTE;                      }                        // Bytes should be in range: lead byte 0x21-0x77' trail byte: 0x21 - 0x7e                      if ((ch < 0x21 || ch > 0x77 || ch2 < 0x21 || ch2 > 0x7e) &&                      // Everett allowed high bit mappings for same characters (but only if both bits set)                          (ch < 0xa1 || ch > 0xf7 || ch2 < 0xa1 || ch2 > 0xfe))                      {                          // For some reason Everett allowed XX20 to become unicode 3000... (ideo sp)                          if (ch2 == 0x20 && 0x21 <= ch && ch <= 0x7d)                          {                              iBytes = 0x2121;                              goto MULTIBYTE;                          }                            // Illegal char' use fallback.  If lead byte is 0 have to do it special and do it first                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                    MULTIBYTE:                      iBytes |= 0x8080;                      // Look up the multibyte char to stick it in our data                        // We have a iBytes to try to convert.                      cm = mapBytesToUnicode[iBytes];                    STOREMULTIBYTE:                        // See if it was unknown                      if (cm == UNKNOWN_CHAR_FLAG && iBytes != 0)                      {                          // Fall back the unknown stuff                          if (!buffer.Fallback((byte)(iBytes >> 8)' (byte)(iBytes)))                              break;                          continue;                      }                        if (!buffer.AddChar(cm' 2))                          break;              // convert ran out of buffer' stop                      continue;                  }                // Just ASCII              // We allow some chars > 7f because Everett did' so we have to look them up.              STOREASCII:                  char c = mapBytesToUnicode[ch];                    // Check if it was unknown                  if ((c == UNKNOWN_CHAR_FLAG || c == 0) && (ch != 0))                  {                      // fallback the unknown bytes                      if (!buffer.Fallback((byte)ch))                          break;                      continue;                  }                    // Go ahead and add our ASCII character                  if (!buffer.AddChar(c))                      break;                  // convert ran out of buffer' stop              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: int perChar = 2;
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxCharCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                  case 50225:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 3;   // Could have left over 3 chars of 4 char escape sequence' that all become ?                      break;                  case 52936:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 1;   // sequences are 2 chars' so if next one is illegal' then previous 1 could be ?                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxCharCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                  case 50225:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 3;   // Could have left over 3 chars of 4 char escape sequence' that all become ?                      break;                  case 52936:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 1;   // sequences are 2 chars' so if next one is illegal' then previous 1 could be ?                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxCharCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                  case 50225:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 3;   // Could have left over 3 chars of 4 char escape sequence' that all become ?                      break;                  case 52936:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 1;   // sequences are 2 chars' so if next one is illegal' then previous 1 could be ?                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxCharCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                  case 50225:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 3;   // Could have left over 3 chars of 4 char escape sequence' that all become ?                      break;                  case 52936:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 1;   // sequences are 2 chars' so if next one is illegal' then previous 1 could be ?                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxCharCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                  case 50225:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 3;   // Could have left over 3 chars of 4 char escape sequence' that all become ?                      break;                  case 52936:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 1;   // sequences are 2 chars' so if next one is illegal' then previous 1 could be ?                      break;              }
Magic Number,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxCharCount,The following statement contains a magic number: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                  case 50225:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 3;   // Could have left over 3 chars of 4 char escape sequence' that all become ?                      break;                  case 52936:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 1;   // sequences are 2 chars' so if next one is illegal' then previous 1 could be ?                      break;              }
Magic Number,System.Text,ISO2022Decoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,Reset,The following statement contains a magic number: bytesLeftOver = new byte[4];
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,ISCIIEncoding,The following statement contains a magic number: _defaultCodePage = codePage - 57000;
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetMaxByteCount,The following statement contains a magic number: byteCount *= 4;
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our data                  char ch = buffer.GetNextChar();                    // See if its a Multi Byte Character                  if (ch < MultiByteBegin)                  {                      // Its a boring low character' add it.                      if (!buffer.AddByte((byte)ch))                          break;                      bLastVirama = false;                      continue;                  }                    // See if its outside of the Indic script range                  if ((ch < IndicBegin) || (ch > IndicEnd))                  {                      // See if its a ZWJ or ZWNJ and if we has bLastVirama;                      if (bLastVirama && (ch == ZWNJ || ch == ZWJ))                      {                          // It was a bLastVirama and ZWNJ || ZWJ                          if (ch == ZWNJ)                          {                              if (!buffer.AddByte(Virama))                                  break;                          }                          else // ZWJ                          {                              if (!buffer.AddByte(Nukta))                                  break;                          }                            // bLastVirama now counts as false                          bLastVirama = false;                          continue;                      }                        // Have to do our fallback                      //                      // Note that this will fallback 2 chars if this is a high surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                      bLastVirama = false;                      continue;                  }                    // Its in the Unicode Indic script range                  int indicInfo = s_UnicodeToIndicChar[ch - IndicBegin];                  byte byteIndic = (byte)indicInfo;                  int indicScript = (0x000f & (indicInfo >> 8));                  int indicTwoBytes = (0xf000 & indicInfo);                    // If IndicInfo is 0 then have to do fallback                  if (indicInfo == 0)                  {                      // Its some Unicode character we don't have indic for.                      // Have to do our fallback                      // Add Fallback Count                      // Note that chars was preincremented' and GetEncoderFallbackString might add an extra                      // if chars != charEnd and there's a surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        bLastVirama = false;                      continue;                  }                    // See if our code page ("font" in ISCII spec) has to change                  // (This if doesn't add character' just changes character set)                  Debug.Assert(indicScript != 0' "[ISCIIEncoding.GetBytes]expected an indic script value");                  if (indicScript != currentCodePage)                  {                      // It changed' spit out the ATR                      if (!buffer.AddByte(ControlATR' (byte)(indicScript | ControlCodePageStart)))                          break;                        // Now spit out the new code page (& remember it) (do this afterwards in case AddByte failed)                      currentCodePage = indicScript;                        // We only know how to map from Unicode to pages from Devanagari to Punjabi (2 to 11)                      Debug.Assert(currentCodePage >= CodeDevanagari && currentCodePage <= CodePunjabi'                          "[ISCIIEncoding.GetBytes]Code page (" + currentCodePage + " shouldn't appear in ISCII from Unicode table!");                  }                    // Safe to add our byte now                  if (!buffer.AddByte(byteIndic' indicTwoBytes != 0 ? 1 : 0))                      break;                    // Remember if this one was a Virama                  bLastVirama = (byteIndic == Virama);                    // Some characters need extra bytes                  if (indicTwoBytes != 0)                  {                      // This one needs another byte                      Debug.Assert((indicTwoBytes >> 12) > 0 && (indicTwoBytes >> 12) <= 3'                          "[ISCIIEncoding.GetBytes]Expected indicTwoBytes from 1-3' not " + (indicTwoBytes >> 12));                        // Already did buffer checking' but...                      if (!buffer.AddByte(s_SecondIndicByte[indicTwoBytes >> 12]))                          break;                  }              }
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our data                  char ch = buffer.GetNextChar();                    // See if its a Multi Byte Character                  if (ch < MultiByteBegin)                  {                      // Its a boring low character' add it.                      if (!buffer.AddByte((byte)ch))                          break;                      bLastVirama = false;                      continue;                  }                    // See if its outside of the Indic script range                  if ((ch < IndicBegin) || (ch > IndicEnd))                  {                      // See if its a ZWJ or ZWNJ and if we has bLastVirama;                      if (bLastVirama && (ch == ZWNJ || ch == ZWJ))                      {                          // It was a bLastVirama and ZWNJ || ZWJ                          if (ch == ZWNJ)                          {                              if (!buffer.AddByte(Virama))                                  break;                          }                          else // ZWJ                          {                              if (!buffer.AddByte(Nukta))                                  break;                          }                            // bLastVirama now counts as false                          bLastVirama = false;                          continue;                      }                        // Have to do our fallback                      //                      // Note that this will fallback 2 chars if this is a high surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                      bLastVirama = false;                      continue;                  }                    // Its in the Unicode Indic script range                  int indicInfo = s_UnicodeToIndicChar[ch - IndicBegin];                  byte byteIndic = (byte)indicInfo;                  int indicScript = (0x000f & (indicInfo >> 8));                  int indicTwoBytes = (0xf000 & indicInfo);                    // If IndicInfo is 0 then have to do fallback                  if (indicInfo == 0)                  {                      // Its some Unicode character we don't have indic for.                      // Have to do our fallback                      // Add Fallback Count                      // Note that chars was preincremented' and GetEncoderFallbackString might add an extra                      // if chars != charEnd and there's a surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        bLastVirama = false;                      continue;                  }                    // See if our code page ("font" in ISCII spec) has to change                  // (This if doesn't add character' just changes character set)                  Debug.Assert(indicScript != 0' "[ISCIIEncoding.GetBytes]expected an indic script value");                  if (indicScript != currentCodePage)                  {                      // It changed' spit out the ATR                      if (!buffer.AddByte(ControlATR' (byte)(indicScript | ControlCodePageStart)))                          break;                        // Now spit out the new code page (& remember it) (do this afterwards in case AddByte failed)                      currentCodePage = indicScript;                        // We only know how to map from Unicode to pages from Devanagari to Punjabi (2 to 11)                      Debug.Assert(currentCodePage >= CodeDevanagari && currentCodePage <= CodePunjabi'                          "[ISCIIEncoding.GetBytes]Code page (" + currentCodePage + " shouldn't appear in ISCII from Unicode table!");                  }                    // Safe to add our byte now                  if (!buffer.AddByte(byteIndic' indicTwoBytes != 0 ? 1 : 0))                      break;                    // Remember if this one was a Virama                  bLastVirama = (byteIndic == Virama);                    // Some characters need extra bytes                  if (indicTwoBytes != 0)                  {                      // This one needs another byte                      Debug.Assert((indicTwoBytes >> 12) > 0 && (indicTwoBytes >> 12) <= 3'                          "[ISCIIEncoding.GetBytes]Expected indicTwoBytes from 1-3' not " + (indicTwoBytes >> 12));                        // Already did buffer checking' but...                      if (!buffer.AddByte(s_SecondIndicByte[indicTwoBytes >> 12]))                          break;                  }              }
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our data                  char ch = buffer.GetNextChar();                    // See if its a Multi Byte Character                  if (ch < MultiByteBegin)                  {                      // Its a boring low character' add it.                      if (!buffer.AddByte((byte)ch))                          break;                      bLastVirama = false;                      continue;                  }                    // See if its outside of the Indic script range                  if ((ch < IndicBegin) || (ch > IndicEnd))                  {                      // See if its a ZWJ or ZWNJ and if we has bLastVirama;                      if (bLastVirama && (ch == ZWNJ || ch == ZWJ))                      {                          // It was a bLastVirama and ZWNJ || ZWJ                          if (ch == ZWNJ)                          {                              if (!buffer.AddByte(Virama))                                  break;                          }                          else // ZWJ                          {                              if (!buffer.AddByte(Nukta))                                  break;                          }                            // bLastVirama now counts as false                          bLastVirama = false;                          continue;                      }                        // Have to do our fallback                      //                      // Note that this will fallback 2 chars if this is a high surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                      bLastVirama = false;                      continue;                  }                    // Its in the Unicode Indic script range                  int indicInfo = s_UnicodeToIndicChar[ch - IndicBegin];                  byte byteIndic = (byte)indicInfo;                  int indicScript = (0x000f & (indicInfo >> 8));                  int indicTwoBytes = (0xf000 & indicInfo);                    // If IndicInfo is 0 then have to do fallback                  if (indicInfo == 0)                  {                      // Its some Unicode character we don't have indic for.                      // Have to do our fallback                      // Add Fallback Count                      // Note that chars was preincremented' and GetEncoderFallbackString might add an extra                      // if chars != charEnd and there's a surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        bLastVirama = false;                      continue;                  }                    // See if our code page ("font" in ISCII spec) has to change                  // (This if doesn't add character' just changes character set)                  Debug.Assert(indicScript != 0' "[ISCIIEncoding.GetBytes]expected an indic script value");                  if (indicScript != currentCodePage)                  {                      // It changed' spit out the ATR                      if (!buffer.AddByte(ControlATR' (byte)(indicScript | ControlCodePageStart)))                          break;                        // Now spit out the new code page (& remember it) (do this afterwards in case AddByte failed)                      currentCodePage = indicScript;                        // We only know how to map from Unicode to pages from Devanagari to Punjabi (2 to 11)                      Debug.Assert(currentCodePage >= CodeDevanagari && currentCodePage <= CodePunjabi'                          "[ISCIIEncoding.GetBytes]Code page (" + currentCodePage + " shouldn't appear in ISCII from Unicode table!");                  }                    // Safe to add our byte now                  if (!buffer.AddByte(byteIndic' indicTwoBytes != 0 ? 1 : 0))                      break;                    // Remember if this one was a Virama                  bLastVirama = (byteIndic == Virama);                    // Some characters need extra bytes                  if (indicTwoBytes != 0)                  {                      // This one needs another byte                      Debug.Assert((indicTwoBytes >> 12) > 0 && (indicTwoBytes >> 12) <= 3'                          "[ISCIIEncoding.GetBytes]Expected indicTwoBytes from 1-3' not " + (indicTwoBytes >> 12));                        // Already did buffer checking' but...                      if (!buffer.AddByte(s_SecondIndicByte[indicTwoBytes >> 12]))                          break;                  }              }
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our data                  char ch = buffer.GetNextChar();                    // See if its a Multi Byte Character                  if (ch < MultiByteBegin)                  {                      // Its a boring low character' add it.                      if (!buffer.AddByte((byte)ch))                          break;                      bLastVirama = false;                      continue;                  }                    // See if its outside of the Indic script range                  if ((ch < IndicBegin) || (ch > IndicEnd))                  {                      // See if its a ZWJ or ZWNJ and if we has bLastVirama;                      if (bLastVirama && (ch == ZWNJ || ch == ZWJ))                      {                          // It was a bLastVirama and ZWNJ || ZWJ                          if (ch == ZWNJ)                          {                              if (!buffer.AddByte(Virama))                                  break;                          }                          else // ZWJ                          {                              if (!buffer.AddByte(Nukta))                                  break;                          }                            // bLastVirama now counts as false                          bLastVirama = false;                          continue;                      }                        // Have to do our fallback                      //                      // Note that this will fallback 2 chars if this is a high surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                      bLastVirama = false;                      continue;                  }                    // Its in the Unicode Indic script range                  int indicInfo = s_UnicodeToIndicChar[ch - IndicBegin];                  byte byteIndic = (byte)indicInfo;                  int indicScript = (0x000f & (indicInfo >> 8));                  int indicTwoBytes = (0xf000 & indicInfo);                    // If IndicInfo is 0 then have to do fallback                  if (indicInfo == 0)                  {                      // Its some Unicode character we don't have indic for.                      // Have to do our fallback                      // Add Fallback Count                      // Note that chars was preincremented' and GetEncoderFallbackString might add an extra                      // if chars != charEnd and there's a surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        bLastVirama = false;                      continue;                  }                    // See if our code page ("font" in ISCII spec) has to change                  // (This if doesn't add character' just changes character set)                  Debug.Assert(indicScript != 0' "[ISCIIEncoding.GetBytes]expected an indic script value");                  if (indicScript != currentCodePage)                  {                      // It changed' spit out the ATR                      if (!buffer.AddByte(ControlATR' (byte)(indicScript | ControlCodePageStart)))                          break;                        // Now spit out the new code page (& remember it) (do this afterwards in case AddByte failed)                      currentCodePage = indicScript;                        // We only know how to map from Unicode to pages from Devanagari to Punjabi (2 to 11)                      Debug.Assert(currentCodePage >= CodeDevanagari && currentCodePage <= CodePunjabi'                          "[ISCIIEncoding.GetBytes]Code page (" + currentCodePage + " shouldn't appear in ISCII from Unicode table!");                  }                    // Safe to add our byte now                  if (!buffer.AddByte(byteIndic' indicTwoBytes != 0 ? 1 : 0))                      break;                    // Remember if this one was a Virama                  bLastVirama = (byteIndic == Virama);                    // Some characters need extra bytes                  if (indicTwoBytes != 0)                  {                      // This one needs another byte                      Debug.Assert((indicTwoBytes >> 12) > 0 && (indicTwoBytes >> 12) <= 3'                          "[ISCIIEncoding.GetBytes]Expected indicTwoBytes from 1-3' not " + (indicTwoBytes >> 12));                        // Already did buffer checking' but...                      if (!buffer.AddByte(s_SecondIndicByte[indicTwoBytes >> 12]))                          break;                  }              }
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our data                  char ch = buffer.GetNextChar();                    // See if its a Multi Byte Character                  if (ch < MultiByteBegin)                  {                      // Its a boring low character' add it.                      if (!buffer.AddByte((byte)ch))                          break;                      bLastVirama = false;                      continue;                  }                    // See if its outside of the Indic script range                  if ((ch < IndicBegin) || (ch > IndicEnd))                  {                      // See if its a ZWJ or ZWNJ and if we has bLastVirama;                      if (bLastVirama && (ch == ZWNJ || ch == ZWJ))                      {                          // It was a bLastVirama and ZWNJ || ZWJ                          if (ch == ZWNJ)                          {                              if (!buffer.AddByte(Virama))                                  break;                          }                          else // ZWJ                          {                              if (!buffer.AddByte(Nukta))                                  break;                          }                            // bLastVirama now counts as false                          bLastVirama = false;                          continue;                      }                        // Have to do our fallback                      //                      // Note that this will fallback 2 chars if this is a high surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                      bLastVirama = false;                      continue;                  }                    // Its in the Unicode Indic script range                  int indicInfo = s_UnicodeToIndicChar[ch - IndicBegin];                  byte byteIndic = (byte)indicInfo;                  int indicScript = (0x000f & (indicInfo >> 8));                  int indicTwoBytes = (0xf000 & indicInfo);                    // If IndicInfo is 0 then have to do fallback                  if (indicInfo == 0)                  {                      // Its some Unicode character we don't have indic for.                      // Have to do our fallback                      // Add Fallback Count                      // Note that chars was preincremented' and GetEncoderFallbackString might add an extra                      // if chars != charEnd and there's a surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        bLastVirama = false;                      continue;                  }                    // See if our code page ("font" in ISCII spec) has to change                  // (This if doesn't add character' just changes character set)                  Debug.Assert(indicScript != 0' "[ISCIIEncoding.GetBytes]expected an indic script value");                  if (indicScript != currentCodePage)                  {                      // It changed' spit out the ATR                      if (!buffer.AddByte(ControlATR' (byte)(indicScript | ControlCodePageStart)))                          break;                        // Now spit out the new code page (& remember it) (do this afterwards in case AddByte failed)                      currentCodePage = indicScript;                        // We only know how to map from Unicode to pages from Devanagari to Punjabi (2 to 11)                      Debug.Assert(currentCodePage >= CodeDevanagari && currentCodePage <= CodePunjabi'                          "[ISCIIEncoding.GetBytes]Code page (" + currentCodePage + " shouldn't appear in ISCII from Unicode table!");                  }                    // Safe to add our byte now                  if (!buffer.AddByte(byteIndic' indicTwoBytes != 0 ? 1 : 0))                      break;                    // Remember if this one was a Virama                  bLastVirama = (byteIndic == Virama);                    // Some characters need extra bytes                  if (indicTwoBytes != 0)                  {                      // This one needs another byte                      Debug.Assert((indicTwoBytes >> 12) > 0 && (indicTwoBytes >> 12) <= 3'                          "[ISCIIEncoding.GetBytes]Expected indicTwoBytes from 1-3' not " + (indicTwoBytes >> 12));                        // Already did buffer checking' but...                      if (!buffer.AddByte(s_SecondIndicByte[indicTwoBytes >> 12]))                          break;                  }              }
Magic Number,System.Text,ISCIIEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,GetBytes,The following statement contains a magic number: while (buffer.MoreData)              {                  // Get our data                  char ch = buffer.GetNextChar();                    // See if its a Multi Byte Character                  if (ch < MultiByteBegin)                  {                      // Its a boring low character' add it.                      if (!buffer.AddByte((byte)ch))                          break;                      bLastVirama = false;                      continue;                  }                    // See if its outside of the Indic script range                  if ((ch < IndicBegin) || (ch > IndicEnd))                  {                      // See if its a ZWJ or ZWNJ and if we has bLastVirama;                      if (bLastVirama && (ch == ZWNJ || ch == ZWJ))                      {                          // It was a bLastVirama and ZWNJ || ZWJ                          if (ch == ZWNJ)                          {                              if (!buffer.AddByte(Virama))                                  break;                          }                          else // ZWJ                          {                              if (!buffer.AddByte(Nukta))                                  break;                          }                            // bLastVirama now counts as false                          bLastVirama = false;                          continue;                      }                        // Have to do our fallback                      //                      // Note that this will fallback 2 chars if this is a high surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                      bLastVirama = false;                      continue;                  }                    // Its in the Unicode Indic script range                  int indicInfo = s_UnicodeToIndicChar[ch - IndicBegin];                  byte byteIndic = (byte)indicInfo;                  int indicScript = (0x000f & (indicInfo >> 8));                  int indicTwoBytes = (0xf000 & indicInfo);                    // If IndicInfo is 0 then have to do fallback                  if (indicInfo == 0)                  {                      // Its some Unicode character we don't have indic for.                      // Have to do our fallback                      // Add Fallback Count                      // Note that chars was preincremented' and GetEncoderFallbackString might add an extra                      // if chars != charEnd and there's a surrogate.                      // Throws if recursive (knows because we called InternalGetNextChar)                      buffer.Fallback(ch);                        bLastVirama = false;                      continue;                  }                    // See if our code page ("font" in ISCII spec) has to change                  // (This if doesn't add character' just changes character set)                  Debug.Assert(indicScript != 0' "[ISCIIEncoding.GetBytes]expected an indic script value");                  if (indicScript != currentCodePage)                  {                      // It changed' spit out the ATR                      if (!buffer.AddByte(ControlATR' (byte)(indicScript | ControlCodePageStart)))                          break;                        // Now spit out the new code page (& remember it) (do this afterwards in case AddByte failed)                      currentCodePage = indicScript;                        // We only know how to map from Unicode to pages from Devanagari to Punjabi (2 to 11)                      Debug.Assert(currentCodePage >= CodeDevanagari && currentCodePage <= CodePunjabi'                          "[ISCIIEncoding.GetBytes]Code page (" + currentCodePage + " shouldn't appear in ISCII from Unicode table!");                  }                    // Safe to add our byte now                  if (!buffer.AddByte(byteIndic' indicTwoBytes != 0 ? 1 : 0))                      break;                    // Remember if this one was a Virama                  bLastVirama = (byteIndic == Virama);                    // Some characters need extra bytes                  if (indicTwoBytes != 0)                  {                      // This one needs another byte                      Debug.Assert((indicTwoBytes >> 12) > 0 && (indicTwoBytes >> 12) <= 3'                          "[ISCIIEncoding.GetBytes]Expected indicTwoBytes from 1-3' not " + (indicTwoBytes >> 12));                        // Already did buffer checking' but...                      if (!buffer.AddByte(s_SecondIndicByte[indicTwoBytes >> 12]))                          break;                  }              }
Magic Number,System.Text,ISCIIEncoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,ISCIIEncoder,The following statement contains a magic number: currentCodePage = defaultCodePage = encoding.CodePage - 57000;
Magic Number,System.Text,ISCIIDecoder,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISCIIEncoding.cs,ISCIIDecoder,The following statement contains a magic number: currentCodePage = encoding.CodePage - 57000;
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,LoadManagedCodePage,The following statement contains a magic number: fixed (byte* pBytes = &m_codePageHeader[0])              {                  CodePageHeader* pCodePage = (CodePageHeader*)pBytes;                  // Should be loading OUR code page                  Debug.Assert(pCodePage->CodePage == dataTableCodePage'                      "[SBCSCodePageEncoding.LoadManagedCodePage]Expected to load data table code page");                    // Make sure we're really a 1 byte code page                  if (pCodePage->ByteCount != 1)                      throw new NotSupportedException(SR.Format(SR.NotSupported_NoCodepageData' CodePage));                    // Remember our unknown bytes & chars                  _byteUnknown = (byte)pCodePage->ByteReplace;                  _charUnknown = pCodePage->UnicodeReplace;                    // Get our mapped section 65536 bytes for unicode->bytes' 256 * 2 bytes for bytes->unicode                  // Plus 4 byte to remember CP # when done loading it. (Don't want to get IA64 or anything out of alignment)                  const int UnicodeToBytesMappingSize = 65536;                  const int BytesToUnicodeMappingSize = 256 * 2;                  const int CodePageNumberSize = 4;                  int bytesToAllocate = UnicodeToBytesMappingSize + BytesToUnicodeMappingSize + CodePageNumberSize + iExtraBytes;                  byte* pNativeMemory = GetNativeMemory(bytesToAllocate);                  ZeroMemAligned(pNativeMemory' bytesToAllocate);                    char* mapBytesToUnicode = (char*)pNativeMemory;                  byte* mapUnicodeToBytes = (byte*)(pNativeMemory + 256 * 2);                    // Need to read our data file and fill in our section.                  // WARNING: Multiple code pieces could do this at once (so we don't have to lock machine-wide)                  //          so be careful here.  Only stick legal values in here' don't stick temporary values.                    // Read our data file and set mapBytesToUnicode and mapUnicodeToBytes appropriately                  // First table is just all 256 mappings                    byte[] buffer = new byte[256 * sizeof(char)];                  lock (s_streamLock)                  {                      s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset' SeekOrigin.Begin);                      s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                  }                    fixed (byte* pBuffer = &buffer[0])                  {                      char* pTemp = (char*)pBuffer;                      for (int b = 0; b < 256; b++)                      {                          // Don't want to force 0's to map Unicode wrong.  0 byte == 0 unicode already taken care of                          if (pTemp[b] != 0 || b == 0)                          {                              mapBytesToUnicode[b] = pTemp[b];                                if (pTemp[b] != UNKNOWN_CHAR)                                  mapUnicodeToBytes[pTemp[b]] = (byte)b;                          }                          else                          {                              mapBytesToUnicode[b] = UNKNOWN_CHAR;                          }                      }                  }                                    _mapBytesToUnicode = mapBytesToUnicode;                  _mapUnicodeToBytes = mapUnicodeToBytes;              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Magic Number,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The following statement contains a magic number: lock (InternalSyncObject)              {                  // If we got a best fit array already' then don't do this                  if (arrayUnicodeBestFit == null)                  {                      //                      // Read in Best Fit table.                      //                        // First check the SBCS->Unicode best fit table' which starts right after the                      // 256 word data table.  This table looks like word' word where 1st word is byte and 2nd                      // word is replacement for that word.  It ends when byte == 0.                      byte[] buffer = new byte[m_dataSize - 512];                      lock (s_streamLock)                      {                          s_codePagesEncodingDataStream.Seek(m_firstDataWordOffset + 512' SeekOrigin.Begin);                          s_codePagesEncodingDataStream.Read(buffer' 0' buffer.Length);                      }                        fixed (byte* pBuffer = buffer)                      {                          byte* pData = pBuffer;                          // Need new best fit array                          char[] arrayTemp = new char[256];                          for (int i = 0; i < 256; i++)                              arrayTemp[i] = _mapBytesToUnicode[i];                            // See if our words are zero                          ushort byteTemp;                          while ((byteTemp = *((ushort*)pData)) != 0)                          {                              Debug.Assert(arrayTemp[byteTemp] == UNKNOWN_CHAR' String.Format(CultureInfo.InvariantCulture'                                  "[SBCSCodePageEncoding::ReadBestFitTable] Expected unallocated byte (not 0x{2:X2}) for best fit byte at 0x{0:X2} for code page {1}"'                                  byteTemp' CodePage' (int)arrayTemp[byteTemp]));                              pData += 2;                                arrayTemp[byteTemp] = *((char*)pData);                              pData += 2;                          }                            // Remember our new array                          arrayBytesBestFit = arrayTemp;                            // It was on 0' it needs to be on next byte                          pData += 2;                          byte* pUnicodeToSBCS = pData;                            // Now count our characters from our Unicode->SBCS best fit table'                          // which is right after our 256 byte data table                          int iBestFitCount = 0;                            // Now do the UnicodeToBytes Best Fit mapping (this is the one we normally think of when we say "best fit")                          // pData should be pointing at the first data point for Bytes->Unicode table                          int unicodePosition = *((ushort*)pData);                          pData += 2;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Use this character if it isn't zero                                  if (input > 0)                                      iBestFitCount++;                                    // skip this unicode position in any case                                  unicodePosition++;                              }                          }                            // Make an array for our best fit data                          arrayTemp = new char[iBestFitCount * 2];                            // Now actually read in the data                          // reset pData should be pointing at the first data point for Bytes->Unicode table                          pData = pUnicodeToSBCS;                          unicodePosition = *((ushort*)pData);                          pData += 2;                          iBestFitCount = 0;                            while (unicodePosition < 0x10000)                          {                              // Get the next byte                              byte input = *pData;                              pData++;                                // build our table:                              if (input == 1)                              {                                  // Use next 2 bytes as our byte position                                  unicodePosition = *((ushort*)pData);                                  pData += 2;                              }                              else if (input < 0x20 && input > 0 && input != 0x1e)                              {                                  // Advance input characters                                  unicodePosition += input;                              }                              else                              {                                  // Check for escape for glyph range                                  if (input == 0x1e)                                  {                                      // Its an escape' so just read next byte directly                                      input = *pData;                                      pData++;                                  }                                    // 0 means just skip me                                  if (input > 0)                                  {                                      // Use this character                                      arrayTemp[iBestFitCount++] = (char)unicodePosition;                                      // Have to map it to Unicode because best fit will need unicode value of best fit char.                                      arrayTemp[iBestFitCount++] = _mapBytesToUnicode[input];                                        // This won't work if it won't round trip.                                      Debug.Assert(arrayTemp[iBestFitCount - 1] != (char)0'                                          String.Format(CultureInfo.InvariantCulture'                                          "[SBCSCodePageEncoding.ReadBestFitTable] No valid Unicode value {0:X4} for round trip bytes {1:X4}' encoding {2}"'                                          (int)_mapBytesToUnicode[input]' (int)input' CodePage));                                  }                                  unicodePosition++;                              }                          }                            // Remember it                          arrayUnicodeBestFit = arrayTemp;                      } // Fixed()                  }              }
Duplicate Code,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The method contains a code clone-set at the following line numbers (starting from the method definition): ((28' 48)' (62' 82))
Duplicate Code,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The method contains a code clone-set at the following line numbers (starting from the method definition): ((29' 48)' (113' 132)' (63' 82))
Duplicate Code,System.Text,DBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\DBCSCodePageEncoding.cs,ReadBestFitTable,The method contains a code clone-set at the following line numbers (starting from the method definition): ((196' 217)' (231' 252))
Duplicate Code,System.Text,GB18030Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\GB18030Encoding.cs,GetChars,The method contains a code clone-set at the following line numbers (starting from the method definition): ((121' 144)' (224' 247))
Duplicate Code,System.Text,SBCSCodePageEncoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\SBCSCodePageEncoding.cs,ReadBestFitTable,The method contains a code clone-set at the following line numbers (starting from the method definition): ((58' 78)' (97' 117))
Missing Default,System.Text,CodePagesEncodingProvider,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\CodePagesEncodingProvider.cs,GetEncodingRare,The following switch statement is missing a default case: switch (codepage)              {                  case ISCIIAssemese:                  case ISCIIBengali:                  case ISCIIDevanagari:                  case ISCIIGujarathi:                  case ISCIIKannada:                  case ISCIIMalayalam:                  case ISCIIOriya:                  case ISCIIPanjabi:                  case ISCIITamil:                  case ISCIITelugu:                      result = new ISCIIEncoding(codepage);                      break;                  // GB2312-80 uses same code page for 20936 and mac 10008                  case CodePageMacGB2312:                      //     case CodePageGB2312:                      //        result = new DBCSCodePageEncoding(codepage' EUCCN);                      result = new DBCSCodePageEncoding(CodePageMacGB2312' CodePageGB2312);                      break;                    // Mac Korean 10003 and 20949 are the same                  case CodePageMacKorean:                      result = new DBCSCodePageEncoding(CodePageMacKorean' CodePageDLLKorean);                      break;                  // GB18030 Code Pages                  case GB18030:                      result = new GB18030Encoding();                      break;                  // ISO2022 Code Pages                  case ISOKorean:                  //    case ISOSimplifiedCN                  case ChineseHZ:                  case ISO2022JP:         // JIS JP' full-width Katakana mode (no half-width Katakana)                  case ISO2022JPESC:      // JIS JP' esc sequence to do Katakana.                  case ISO2022JPSISO:     // JIS JP with Shift In/ Shift Out Katakana support                      result = new ISO2022Encoding(codepage);                      break;                  // Duplicate EUC-CN (51936) just calls a base code page 936'                  // so does ISOSimplifiedCN (50227)' which has gotta be broken                  case DuplicateEUCCN:                  case ISOSimplifiedCN:                      result = new DBCSCodePageEncoding(codepage' EUCCN);    // Just maps to 936                      break;                  case EUCJP:                      result = new EUCJPEncoding();                      break;                  case EUCKR:                      result = new DBCSCodePageEncoding(codepage' CodePageDLLKorean);    // Maps to 20949                      break;                  case ISO_8859_8I:                      result = new SBCSCodePageEncoding(codepage' ISO_8859_8_Visual);        // Hebrew maps to a different code page                      break;              }
Missing Default,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,CleanUpBytes,The following switch statement is missing a default case: switch (CodePage)              {                  // 932 based code pages                  case 50220:                  case 50221:                  case 50222:                      {                          if (bytes >= 0x100)                          {                              // map extended char (0xfa40-0xfc4b) to a special range                              // (ported from mlang)                              if (bytes >= 0xfa40 && bytes <= 0xfc4b)                              {                                  if (bytes >= 0xfa40 && bytes <= 0xfa5b)                                  {                                      if (bytes <= 0xfa49)                                          bytes = bytes - 0x0b51;                                      else if (bytes >= 0xfa4a && bytes <= 0xfa53)                                          bytes = bytes - 0x072f6;                                      else if (bytes >= 0xfa54 && bytes <= 0xfa57)                                          bytes = bytes - 0x0b5b;                                      else if (bytes == 0xfa58)                                          bytes = 0x878a;                                      else if (bytes == 0xfa59)                                          bytes = 0x8782;                                      else if (bytes == 0xfa5a)                                          bytes = 0x8784;                                      else if (bytes == 0xfa5b)                                          bytes = 0x879a;                                  }                                  else if (bytes >= 0xfa5c && bytes <= 0xfc4b)                                  {                                      byte tc = unchecked((byte)bytes);                                      if (tc < 0x5c)                                          bytes = bytes - 0x0d5f;                                      else if (tc >= 0x80 && tc <= 0x9B)                                          bytes = bytes - 0x0d1d;                                      else                                          bytes = bytes - 0x0d1c;                                  }                              }                                // Convert 932 code page to 20932 like code page range                              // (also ported from mlang)                              byte bLead = unchecked((byte)(bytes >> 8));                              byte bTrail = unchecked((byte)bytes);                                bLead -= ((bLead > (byte)0x9f) ? (byte)0xb1 : (byte)0x71);                              bLead = (byte)((bLead << 1) + 1);                              if (bTrail > (byte)0x9e)                              {                                  bTrail -= (byte)0x7e;                                  bLead++;                              }                              else                              {                                  if (bTrail > (byte)0x7e)                                      bTrail--;                                  bTrail -= (byte)0x1f;                              }                                bytes = ((int)bLead) << 8 | (int)bTrail;                              // Don't step out of our allocated lead byte area.                              // All DBCS lead and trail bytes should be >= 0x21 and <= 0x7e                              // This is commented out because Everett/Mlang had illegal PUA                              // mappings to ISO2022 code pages that we're maintaining.                              //                        if ((bytes & 0xFF00) < 0x2100 || (bytes & 0xFF00) > 0x7e00 ||                              //                          (bytes & 0xFF) < 0x21 || (bytes & 0xFF) > 0x7e)                              //                        return false;                          }                          else                          {                              // Adjust 1/2 Katakana                              if (bytes >= 0xa1 && bytes <= 0xdf)                                  bytes += (LEADBYTE_HALFWIDTH << 8) - 0x80;                                // 0x81-0x9f and 0xe0-0xfc CP 932                              // 0x8e and 0xa1-0xfe      CP 20932 (we don't use 8e though)                              // b0-df is 1/2 Katakana                              if (bytes >= 0x81 &&                                  (bytes <= 0x9f ||                                   (bytes >= 0xe0 && bytes <= 0xfc)))                              {                                  // Don't do lead bytes' we use escape sequences instead.                                  return false;                              }                          }                          break;                      }                  case 50225:                      {                          // For 50225 since we don't rely on lead byte marks' return false and don't add them'                          // esp. since we're only a 7 bit code page.                          if (bytes >= 0x80 && bytes <= 0xff)                              return false;                            // Ignore characters out of range (a1-7f)                          if (bytes >= 0x100 &&                              ((bytes & 0xff) < 0xa1 || (bytes & 0xff) == 0xff ||                               (bytes & 0xff00) < 0xa100 || (bytes & 0xff00) == 0xff00))                              return false;                            // May as well get them into our 7 bit range                          bytes &= 0x7f7f;                            break;                      }                  case 52936:                      {                          // Since we don't rely on lead byte marks for 52936' get rid of them so we                          // don't end up with extra weird fffe mappings.                          if (bytes >= 0x81 && bytes <= 0xfe)                              return false;                            break;                      }              }
Missing Default,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetBytes,The following switch statement is missing a default case: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                      iCount = GetBytesCP5022xJP(chars' charCount' bytes' byteCount' encoder);                      break;                  case 50225:                      iCount = GetBytesCP50225KR(chars' charCount' bytes' byteCount' encoder);                      break;                  // Everett had 50227 the same as 936                  /*              case 50227:                                      iCount = GetBytesCP50227CN( chars' charCount' bytes' byteCount' encoder );                                      break;                  */                  case 52936:                      iCount = GetBytesCP52936(chars' charCount' bytes' byteCount' encoder);                      break;              }
Missing Default,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxByteCount,The following switch statement is missing a default case: switch (CodePage)              {                  case 50220:                  case 50221:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 3;       // 3 bytes to shift back to ASCII                      break;                  case 50222:                      // 2 bytes per char + 3 bytes switch to JIS 0208 or 1 byte + 3 bytes switch to 1 byte CP                      perChar = 5;        // 5 max (4.5 average)                      extraEnd = 4;       // 1 byte to shift from Katakana -> DBCS' 3 bytes to shift back to ASCII from DBCS                      break;                  case 50225:                      // 2 bytes per char + 1 byte SO' or 1 byte per char + 1 byte SI.                      perChar = 3;        // 3 max' (2.5 average)                      extraStart = 4;     // EUC-KR marker appears at beginning of file.                      extraEnd = 1;       // 1 byte to shift back to ascii if necessary.                      break;                  case 52936:                      // 2 bytes per char + 2 byte shift' or 1 byte + 1 byte shift                      // Worst case: left over surrogate with no low surrogate is extra ?' could have to switch to ASCII' then could have HZ and flush to ASCII mode                      perChar = 4;        // 4 max' (3.5 average if every other char is HZ/ASCII)                      extraEnd = 2;       // 2 if we have to shift back to ASCII                      break;              }
Missing Default,System.Text,ISO2022Encoding,C:\selectedRepos\dotnet_corefx\src\System.Text.Encoding.CodePages\src\System\Text\ISO2022Encoding.cs,GetMaxCharCount,The following switch statement is missing a default case: switch (CodePage)              {                  case 50220:                  case 50221:                  case 50222:                  case 50225:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 3;   // Could have left over 3 chars of 4 char escape sequence' that all become ?                      break;                  case 52936:                      perChar = 1;        // Worst case all ASCII                      extraDecoder = 1;   // sequences are 2 chars' so if next one is illegal' then previous 1 could be ?                      break;              }
