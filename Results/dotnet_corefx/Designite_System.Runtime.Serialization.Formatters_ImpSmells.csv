Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,DoValueTypeFixup,The method has 100 lines of code.
Long Method,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,CompleteObject,The method has 159 lines of code.
Long Method,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseArray,The method has 114 lines of code.
Long Method,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseArrayMember,The method has 161 lines of code.
Long Method,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseMember,The method has 102 lines of code.
Long Method,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteMembers,The method has 100 lines of code.
Long Method,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArray,The method has 144 lines of code.
Long Method,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,Run,The method has 134 lines of code.
Long Method,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadArray,The method has 118 lines of code.
Complex Method,System.Runtime.Serialization,FormatterServices,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\FormatterServices.cs,InternalGetSerializableMembers,Cyclomatic complexity of the method is 10
Complex Method,System.Runtime.Serialization,FormatterServices,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\FormatterServices.cs,PopulateObjectMembers,Cyclomatic complexity of the method is 9
Complex Method,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,DoValueTypeFixup,Cyclomatic complexity of the method is 11
Complex Method,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,CompleteObject,Cyclomatic complexity of the method is 12
Complex Method,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RegisterObject,Cyclomatic complexity of the method is 14
Complex Method,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,DoFixups,Cyclomatic complexity of the method is 13
Complex Method,System.Runtime.Serialization,SurrogateSelector,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\SurrogateSelector.cs,ChainSelector,Cyclomatic complexity of the method is 14
Complex Method,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,GetMemberTypes,Cyclomatic complexity of the method is 8
Complex Method,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseObject,Cyclomatic complexity of the method is 12
Complex Method,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseObjectEnd,Cyclomatic complexity of the method is 9
Complex Method,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteMembers,Cyclomatic complexity of the method is 14
Complex Method,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArray,Cyclomatic complexity of the method is 14
Complex Method,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArrayMember,Cyclomatic complexity of the method is 11
Complex Method,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteRectangle,Cyclomatic complexity of the method is 12
Complex Method,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadArray,Cyclomatic complexity of the method is 8
Long Parameter List,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RegisterObject,The method has 5 parameters. Parameters: obj' objectID' info' idOfContainingObj' member
Long Parameter List,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RegisterString,The method has 5 parameters. Parameters: obj' objectID' info' idOfContainingObj' member
Long Parameter List,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RegisterObject,The method has 6 parameters. Parameters: obj' objectID' info' idOfContainingObj' member' arrayIndex
Long Parameter List,System.Runtime.Serialization,ObjectHolder,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,ObjectHolder,The method has 7 parameters. Parameters: obj' objID' info' surrogate' idOfContainingObj' field' arrayIndex
Long Parameter List,System.Runtime.Serialization,ObjectHolder,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,ObjectHolder,The method has 7 parameters. Parameters: obj' objID' info' surrogate' idOfContainingObj' field' arrayIndex
Long Parameter List,System.Runtime.Serialization,ObjectHolder,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,UpdateData,The method has 7 parameters. Parameters: obj' info' surrogate' idOfContainer' field' arrayIndex' manager
Long Parameter List,System.Runtime.Serialization,SerializationFieldInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\SerializationFieldInfo.cs,SetValue,The method has 5 parameters. Parameters: obj' value' invokeAttr' binder' culture
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryArray.cs,Set,The method has 8 parameters. Parameters: objectId' rank' lengthA' lowerBoundA' binaryTypeEnum' typeInformation' binaryArrayTypeEnum' assemId
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryTypeConverter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryTypeConverter.cs,GetBinaryTypeInfo,The method has 6 parameters. Parameters: type' objectInfo' typeName' objectWriter' typeInformation' assemId
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryTypeConverter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryTypeConverter.cs,TypeFromInfo,The method has 8 parameters. Parameters: binaryTypeEnum' typeInformation' objectReader' assemblyInfo' primitiveTypeEnum' typeString' type' isVariant
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryObjectWithMap,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWithMap.cs,Set,The method has 5 parameters. Parameters: objectId' name' numMembers' memberNames' assemId
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryObjectWithMapTyped,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWithMapTyped.cs,Set,The method has 8 parameters. Parameters: objectId' name' numMembers' memberNames' binaryTypeEnumA' typeInformationA' memberAssemIds' assemId
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectMap,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\ObjectMap.cs,ObjectMap,The method has 6 parameters. Parameters: objectName' objectType' memberNames' objectReader' objectId' assemblyInfo
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectMap,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\ObjectMap.cs,ObjectMap,The method has 9 parameters. Parameters: objectName' memberNames' binaryTypeEnumA' typeInformationA' memberAssemIds' objectReader' objectId' assemblyInfo' assemIdToAssemblyTable
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectMap,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\ObjectMap.cs,Create,The method has 6 parameters. Parameters: name' objectType' memberNames' objectReader' objectId' assemblyInfo
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectMap,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\ObjectMap.cs,Create,The method has 9 parameters. Parameters: name' memberNames' binaryTypeEnumA' typeInformationA' memberAssemIds' objectReader' objectId' assemblyInfo' assemIdToAssemblyTable
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,SerializationHeaderRecord,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\SerializationHeaderRecord.cs,SerializationHeaderRecord,The method has 5 parameters. Parameters: binaryHeaderEnum' topId' headerId' majorVersion' minorVersion
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteObject,The method has 6 parameters. Parameters: nameInfo' typeNameInfo' numMembers' memberNames' memberTypes' memberObjectInfos
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteSingleArray,The method has 7 parameters. Parameters: memberNameInfo' arrayNameInfo' objectInfo' arrayElemTypeNameInfo' length' lowerBound' array
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteJaggedArray,The method has 6 parameters. Parameters: memberNameInfo' arrayNameInfo' objectInfo' arrayElemTypeNameInfo' length' lowerBound
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteRectangleArray,The method has 7 parameters. Parameters: memberNameInfo' arrayNameInfo' objectInfo' arrayElemTypeNameInfo' rank' lengthA' lowerBoundA
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteObjectByteArray,The method has 7 parameters. Parameters: memberNameInfo' arrayNameInfo' objectInfo' arrayElemTypeNameInfo' length' lowerBound' byteA
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,WriteObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,Serialize,The method has 7 parameters. Parameters: obj' surrogateSelector' context' serObjectInfoInit' converter' objectWriter' binder
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,WriteObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,InitSerialize,The method has 7 parameters. Parameters: obj' surrogateSelector' context' serObjectInfoInit' converter' objectWriter' binder
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,WriteObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,Serialize,The method has 6 parameters. Parameters: objectType' surrogateSelector' context' serObjectInfoInit' converter' binder
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,WriteObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,InitSerialize,The method has 6 parameters. Parameters: objectType' surrogateSelector' context' serObjectInfoInit' converter' binder
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,Create,The method has 7 parameters. Parameters: objectType' surrogateSelector' context' objectManager' serObjectInfoInit' converter' bSimpleAssembly
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,Init,The method has 7 parameters. Parameters: objectType' surrogateSelector' context' objectManager' serObjectInfoInit' converter' bSimpleAssembly
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,Create,The method has 9 parameters. Parameters: objectType' memberNames' memberTypes' surrogateSelector' context' objectManager' serObjectInfoInit' converter' bSimpleAssembly
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,Init,The method has 9 parameters. Parameters: objectType' memberNames' memberTypes' surrogateSelector' context' objectManager' serObjectInfoInit' converter' bSimpleAssembly
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ObjectReader,The method has 5 parameters. Parameters: stream' selector' context' formatterEnums' binder
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,Write,The method has 7 parameters. Parameters: objectInfo' memberNameInfo' typeNameInfo' memberNames' memberTypes' memberData' memberObjectInfos
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteMemberSetup,The method has 7 parameters. Parameters: objectInfo' memberNameInfo' typeNameInfo' memberName' memberType' memberData' memberObjectInfo
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteMembers,The method has 6 parameters. Parameters: memberNameInfo' memberTypeNameInfo' memberData' objectInfo' typeNameInfo' memberObjectInfo
Long Parameter List,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteRectangle,The method has 6 parameters. Parameters: objectInfo' rank' maxA' array' arrayElemNameTypeInfo' lowerBoundA
Long Identifier,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,,The length of the parameter s_urtAlternativeAssemblyString is 30.
Long Identifier,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,,The length of the parameter _consecutiveNullArrayEntryCount is 31.
Long Identifier,System.Runtime.Serialization.Formatters.Binary,ParseRecord,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,,The length of the parameter _consecutiveNullArrayEntryCount is 31.
Long Statement,System.Runtime.Serialization,FormatterServices,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\FormatterServices.cs,InternalGetSerializableMembers,The length of the statement  "                            throw new SerializationException(SR.Format(SR.Serialization_NonSerType' parentType.FullName' parentType.Module.Assembly.FullName)); " is 131.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,FixupSpecialObject,The length of the statement  "            Debug.Assert(holder.RequiresSerInfoFixup' "[ObjectManager.FixupSpecialObject]holder.HasSurrogate||holder.HasISerializable"); " is 124.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,FixupSpecialObject,The length of the statement  "                        throw new SerializationException(string.Format(CultureInfo.CurrentCulture' SR.Serialization_NotCyclicallyReferenceableSurrogate' surrogate.GetType().FullName)); " is 160.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,DoValueTypeFixup,The length of the statement  "                        fieldsTemp[currentFieldIndex] = parentField.FieldType.GetField("value"' BindingFlags.NonPublic | BindingFlags.Instance); " is 120.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,CompleteObject,The length of the statement  "                        Debug.Assert(fixups._values[i]._fixupType == FixupHolder.DelayedFixup' "fixups.m_values[i].m_fixupType==FixupHolder.DelayedFixup"); " is 131.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RegisterObject,The length of the statement  "            if (member != null && !(member is FieldInfo)) // desktop checks specifically for RuntimeFieldInfo and SerializationFieldInfo' but the former is an implementation detail in corelib " is 179.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,GetDeserializationConstructor,The length of the statement  "            foreach (ConstructorInfo ci in t.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)) " is 147.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,DoFixups,The length of the statement  "                    throw new SerializationException(SR.Format(SR.Serialization_TypeLoadFailure' ((TypeLoadExceptionHolder)TopObject).TypeName)); " is 125.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RecordFixup,The length of the statement  "                throw new ArgumentOutOfRangeException(objectToBeFixed <= 0 ? nameof(objectToBeFixed) : nameof(objectRequired)' SR.Serialization_IdTooSmall); " is 140.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RecordFixup,The length of the statement  "            if (!(member is FieldInfo)) // desktop checks specifically for RuntimeFieldInfo and SerializationFieldInfo' but the former is an implementation detail in corelib " is 161.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RecordDelayedFixup,The length of the statement  "                throw new ArgumentOutOfRangeException(objectToBeFixed <= 0 ? nameof(objectToBeFixed) : nameof(objectRequired)' SR.Serialization_IdTooSmall); " is 140.
Long Statement,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,RecordArrayElementFixup,The length of the statement  "                throw new ArgumentOutOfRangeException(arrayToBeFixed <= 0 ? nameof(arrayToBeFixed) : nameof(objectRequired)' SR.Serialization_IdTooSmall); " is 138.
Long Statement,System.Runtime.Serialization,ObjectHolderListEnumerator,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,MoveNext,The length of the statement  "            Debug.Assert(_startingVersion == _list.Version' "[ObjectHolderListEnumerator.MoveNext]m_startingVersion==m_list.Version"); " is 122.
Long Statement,System.Runtime.Serialization,SerializationEvents,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\SerializationEventsCache.cs,GetMethodsWithAttribute,The length of the statement  "                MethodInfo[] mis = baseType.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 137.
Long Statement,System.Runtime.Serialization,SerializationEvents,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\SerializationEventsCache.cs,AddOnDelegate,The length of the statement  "                    SerializationEventHandler onDeserialized = (SerializationEventHandler)m.CreateDelegate(typeof(SerializationEventHandler)' obj); " is 127.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryTypeConverter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryTypeConverter.cs,GetBinaryTypeInfo,The length of the statement  "            else if (((objectInfo == null) || ((objectInfo != null) && !objectInfo._isSi)) && (ReferenceEquals(type' Converter.s_typeofObject))) " is 132.
Long Statement,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,GetNameSpaceEnum,The length of the statement  "                        nameSpaceEnum = objectInfo.GetAssemblyString().Equals(s_urtAssemblyString) ? InternalNameSpaceE.UrtSystem : InternalNameSpaceE.UrtUser; " is 135.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteSerializationHeader,The length of the statement  "            var record = new SerializationHeaderRecord(BinaryHeaderEnum.SerializedStreamHeader' topId' headerId' minorVersion' majorVersion); " is 129.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteObject,The length of the statement  "                    binaryTypeEnumA[i] = BinaryTypeConverter.GetBinaryTypeInfo(memberTypes[i]' memberObjectInfos[i]' null' _objectWriter' out typeInformation' out assemId); " is 152.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteObject,The length of the statement  "                _binaryObjectWithMapTyped.Set(objectId' objectName' numMembers' memberNames' binaryTypeEnumA' typeInformationA' assemIdA' assemId); " is 131.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteSingleArray,The length of the statement  "                arrayElemTypeNameInfo._type' objectInfo' arrayElemTypeNameInfo.NIname' _objectWriter' out typeInformation' out assemId); " is 120.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteSingleArray,The length of the statement  "            _binaryArray.Set((int)arrayNameInfo._objectId' 1' lengthA' lowerBoundA' binaryTypeEnum' typeInformation' binaryArrayTypeEnum' assemId); " is 135.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteJaggedArray,The length of the statement  "            BinaryTypeEnum binaryTypeEnum = BinaryTypeConverter.GetBinaryTypeInfo(arrayElemTypeNameInfo._type' objectInfo' arrayElemTypeNameInfo.NIname' _objectWriter' out typeInformation' out assemId); " is 190.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteJaggedArray,The length of the statement  "            _binaryArray.Set((int)arrayNameInfo._objectId' 1' lengthA' lowerBoundA' binaryTypeEnum' typeInformation' binaryArrayTypeEnum' assemId); " is 135.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteRectangleArray,The length of the statement  "            BinaryTypeEnum binaryTypeEnum = BinaryTypeConverter.GetBinaryTypeInfo(arrayElemTypeNameInfo._type' objectInfo' arrayElemTypeNameInfo.NIname' _objectWriter' out typeInformation' out assemId); " is 190.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteRectangleArray,The length of the statement  "            _binaryArray.Set((int)arrayNameInfo._objectId' rank' lengthA' lowerBoundA' binaryTypeEnum' typeInformation' binaryArrayTypeEnum' assemId); " is 138.
Long Statement,System.Runtime.Serialization.Formatters.Binary,WriteObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,InitSerialize,The length of the statement  "            if (surrogateSelector != null && (_serializationSurrogate = surrogateSelector.GetSurrogate(_objectType' context' out surrogateSelectorTemp)) != null) " is 149.
Long Statement,System.Runtime.Serialization.Formatters.Binary,WriteObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,InitSerialize,The length of the statement  "                    throw new SerializationException(SR.Format(SR.Serialization_NonSerType' _objectType.FullName' _objectType.Assembly.FullName)); " is 126.
Long Statement,System.Runtime.Serialization.Formatters.Binary,WriteObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,InitSerialize,The length of the statement  "            else if (!ReferenceEquals(objectType' Converter.s_typeofObject) && Converter.s_typeofISerializable.IsAssignableFrom(objectType)) " is 128.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,Create,The length of the statement  "            roi.Init(objectType' memberNames' memberTypes' surrogateSelector' context' objectManager' serObjectInfoInit' converter' bSimpleAssembly); " is 137.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,InitReadConstructor,The length of the statement  "            else if (!ReferenceEquals(objectType' Converter.s_typeofObject) && Converter.s_typeofISerializable.IsAssignableFrom(objectType)) " is 128.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,GetMemberTypes,The length of the statement  "                            throw new SerializationException(SR.Format(SR.Serialization_MissingMember' _cache._memberNames[i]' objectType' typeof(OptionalFieldAttribute).FullName)); " is 153.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,CheckSerializable,The length of the statement  "                throw new SerializationException(string.Format(CultureInfo.InvariantCulture' SR.Serialization_NonSerType' t.FullName' t.Assembly.FullName)); " is 140.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,CrossAppDomainArray,The length of the statement  "            Debug.Assert(index < _crossAppDomainArray.Length' "[System.Runtime.Serialization.Formatters.BinaryObjectReader index out of range for CrossAppDomainArray]"); " is 157.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,CreateReadObjectInfo,The length of the statement  "            return ReadObjectInfo.Create(objectType' _surrogates' _context' _objectManager' _serObjectInfoInit' _formatterConverter' _isSimpleAssembly); " is 140.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,CreateReadObjectInfo,The length of the statement  "            return ReadObjectInfo.Create(objectType' memberNames' memberTypes' _surrogates' _context' _objectManager' _serObjectInfoInit' _formatterConverter' _isSimpleAssembly); " is 166.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseError,The length of the statement  "            throw new SerializationException(SR.Format(SR.Serialization_ParseError' onStack._name + " " + onStack._parseTypeEnum + " " + processing._name + " " + processing._parseTypeEnum)); " is 178.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseObject,The length of the statement  "                pr._objectInfo = ReadObjectInfo.Create(pr._dtType' _surrogates' _context' _objectManager' _serObjectInfoInit' _formatterConverter' _isSimpleAssembly); " is 150.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseArrayMember,The length of the statement  "                if ((ReferenceEquals(objectPr._arrayElementType' Converter.s_typeofString)) || (ReferenceEquals(pr._dtType' Converter.s_typeofString))) " is 135.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseMember,The length of the statement  "                        objectPr._objectInfo.AddValue(pr._name' Convert.FromBase64String(pr._value)' ref objectPr._si' ref objectPr._memberData); " is 121.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetSimplyNamedTypeFromAssembly,The length of the statement  "            // This is necessary' for example' if there are generic parameters that are qualified with a version of the assembly that predates the one available " is 148.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetSimplyNamedTypeFromAssembly,The length of the statement  "                type = Type.GetType(typeName' ResolveSimpleAssemblyName' new TopLevelAssemblyTypeResolver(assm).ResolveType' throwOnError: false); " is 130.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetType,The length of the statement  "                ((_previousAssemblyString != null) && (_previousAssemblyString.Length == assemblyInfo._assemblyString.Length) && (_previousAssemblyString.Equals(assemblyInfo._assemblyString)))) " is 177.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,Serialize,The length of the statement  "                    objectInfo = WriteObjectInfo.Serialize(obj' _surrogates' _context' _serObjectInfoInit' _formatterConverter' this' _binder); " is 123.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,Write,The length of the statement  "                    // Only Binary needs to transmit types for ISerializable because the binary formatter transmits the types in URT format. " is 120.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,Write,The length of the statement  "                    // Soap transmits all types as strings' so it is up to the ISerializable object to convert the string back to its URT type " is 122.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,Write,The length of the statement  "                WriteMemberSetup(objectInfo' memberNameInfo' typeNameInfo' memberNames[i]' memberTypes[i]' memberData[i]' memberObjectInfos[i]); " is 128.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArray,The length of the statement  "                arrayElemObjectInfo = WriteObjectInfo.Serialize(arrayElemType' _surrogates' _context' _serObjectInfoInit' _formatterConverter' _binder); " is 136.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArray,The length of the statement  "                _serWriter.WriteObjectByteArray(memberNameInfo' arrayNameInfo' arrayElemObjectInfo' arrayElemTypeNameInfo' lengthA[0]' lowerBoundA[0]' (byte[])array); " is 150.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArray,The length of the statement  "                _serWriter.WriteSingleArray(memberNameInfo' arrayNameInfo' arrayElemObjectInfo' arrayElemTypeNameInfo' lengthA[0]' lowerBoundA[0]' array); " is 138.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArray,The length of the statement  "                _serWriter.WriteJaggedArray(memberNameInfo' arrayNameInfo' arrayElemObjectInfo' arrayElemTypeNameInfo' lengthA[0]' lowerBoundA[0]); " is 131.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArray,The length of the statement  "                _serWriter.WriteRectangleArray(memberNameInfo' arrayNameInfo' arrayElemObjectInfo' arrayElemTypeNameInfo' rank' lengthA' lowerBoundA); " is 134.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArrayMember,The length of the statement  "                    WriteObjectInfo newObjectInfo = WriteObjectInfo.Serialize(obj' _surrogates' _context' _serObjectInfoInit' _formatterConverter' this' _binder); " is 142.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,WriteArrayMember,The length of the statement  "                    newObjectInfo._assemId = !ReferenceEquals(arrayElemTypeNameInfo._type' Converter.s_typeofObject) && Nullable.GetUnderlyingType(arrayElemTypeNameInfo._type) == null ? " is 165.
Long Statement,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,GetAssemblyId,The length of the statement  "            else if (assemblyString.Equals(Converter.s_urtAssemblyString) || assemblyString.Equals(Converter.s_urtAlternativeAssemblyString)) " is 129.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadAssembly,The length of the statement  "                    throw new SerializationException(SR.Format(SR.Serialization_CrossAppDomainError' "String"' crossAppDomainAssembly._assemblyIndex)); " is 131.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadObjectWithMap,The length of the statement  "            ObjectMap objectMap = ObjectMap.Create(record._name' objectType' record._memberNames' _objectReader' record._objectId' assemblyInfo); " is 133.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadObjectWithMapTyped,The length of the statement  "            ObjectMap objectMap = ObjectMap.Create(record._name' record._memberNames' record._binaryTypeEnumA' record._typeInformationA' record._memberAssemIds' _objectReader' record._objectId' assemblyInfo' AssemIdToAssemblyTable); " is 220.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadObjectString,The length of the statement  "                    throw new SerializationException(SR.Format(SR.Serialization_CrossAppDomainError' "String"' _crossAppDomainString._value)); " is 122.
Long Statement,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadObjectString,The length of the statement  "            PRs._varValue = _objectString._value; //Need to set it because ObjectReader is picking up value from variant' not pr.PRvalue " is 124.
Complex Conditional,System.Runtime.Serialization,ObjectHolder,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,ObjectHolder,The conditional expression  "idOfContainingObj != 0 && ((field != null && field.FieldType.IsValueType) || arrayIndex != null)"  is complex.
Complex Conditional,System.Runtime.Serialization,ObjectHolder,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,UpdateData,The conditional expression  "idOfContainer != 0 && ((field != null && field.FieldType.IsValueType) || arrayIndex != null)"  is complex.
Complex Conditional,System.Runtime.Serialization.Formatters.Binary,BinaryTypeConverter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryTypeConverter.cs,GetBinaryTypeInfo,The conditional expression  "((objectInfo == null) || ((objectInfo != null) && !objectInfo._isSi)) && (ReferenceEquals(type' Converter.s_typeofObject))"  is complex.
Complex Conditional,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetType,The conditional expression  "((_previousName != null) && (_previousName.Length == name.Length) && (_previousName.Equals(name))) &&                  ((_previousAssemblyString != null) && (_previousAssemblyString.Length == assemblyInfo._assemblyString.Length) && (_previousAssemblyString.Equals(assemblyInfo._assemblyString)))"  is complex.
Complex Conditional,System.Runtime.Serialization.Formatters.Binary,ObjectWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs,CheckForNull,The conditional expression  "(isNull) && (((_formatterEnums._serializerTypeEnum == InternalSerializerTypeE.Binary)) ||                               memberNameInfo._isArrayItem ||                               memberNameInfo._transmitTypeOnObject ||                               memberNameInfo._transmitTypeOnMember ||                               objectInfo._isSi ||                               (CheckTypeFormat(_formatterEnums._typeFormat' FormatterTypeStyle.TypesAlways)))"  is complex.
Empty Catch Block,System.Runtime.Serialization,FormatterServices,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\FormatterServices.cs,LoadAssemblyFromStringNoThrow,The method has an empty catch block.
Empty Catch Block,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,FastBindToType,The method has an empty catch block.
Empty Catch Block,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ResolveSimpleAssemblyName,The method has an empty catch block.
Empty Catch Block,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ResolveSimpleAssemblyName,The method has an empty catch block.
Empty Catch Block,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetSimplyNamedTypeFromAssembly,The method has an empty catch block.
Empty Catch Block,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetSimplyNamedTypeFromAssembly,The method has an empty catch block.
Empty Catch Block,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetSimplyNamedTypeFromAssembly,The method has an empty catch block.
Empty Catch Block,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,GetSimplyNamedTypeFromAssembly,The method has an empty catch block.
Magic Number,System.Runtime.Serialization,FormatterServices,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\FormatterServices.cs,GetParentTypes,The following statement contains a magic number: for (Type t1 = parentType; t1 != objectType; t1 = t1.BaseType)              {                  if (t1.IsInterface)                  {                      continue;                  }                    string t1Name = t1.Name;                  for (int i = 0; unique && i < parentTypeCount; i++)                  {                      string t2Name = parentTypes[i].Name;                      if (t2Name.Length == t1Name.Length && t2Name[0] == t1Name[0] && t1Name == t2Name)                      {                          unique = false;                          break;                      }                  }                    // expand array if needed                  if (parentTypes == null || parentTypeCount == parentTypes.Length)                  {                      Array.Resize(ref parentTypes' Math.Max(parentTypeCount * 2' 12));                  }                    parentTypes[parentTypeCount++] = t1;              }
Magic Number,System.Runtime.Serialization,FormatterServices,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\FormatterServices.cs,GetParentTypes,The following statement contains a magic number: for (Type t1 = parentType; t1 != objectType; t1 = t1.BaseType)              {                  if (t1.IsInterface)                  {                      continue;                  }                    string t1Name = t1.Name;                  for (int i = 0; unique && i < parentTypeCount; i++)                  {                      string t2Name = parentTypes[i].Name;                      if (t2Name.Length == t1Name.Length && t2Name[0] == t1Name[0] && t1Name == t2Name)                      {                          unique = false;                          break;                      }                  }                    // expand array if needed                  if (parentTypes == null || parentTypeCount == parentTypes.Length)                  {                      Array.Resize(ref parentTypes' Math.Max(parentTypeCount * 2' 12));                  }                    parentTypes[parentTypeCount++] = t1;              }
Magic Number,System.Runtime.Serialization,ObjectIDGenerator,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectIDGenerator.cs,FindElement,The following statement contains a magic number: int hashIncrement = (1 + ((hashcode & 0x7FFFFFFF) % (_currentSize - 2)));
Magic Number,System.Runtime.Serialization,ObjectIDGenerator,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectIDGenerator.cs,GetId,The following statement contains a magic number: if (!found)              {                  //We didn't actually find the object' so we should need to insert it into                  //the array and assign it an object id.                  _objs[pos] = obj;                  _ids[pos] = _currentCount++;                  foundID = _ids[pos];                  if (_currentCount > (_currentSize * NumBins) / 2)                  {                      Rehash();                  }              }              else              {                  foundID = _ids[pos];              }
Magic Number,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,AddObjectHolder,The following statement contains a magic number: if (holder._id >= _objects.Length && _objects.Length != MaxArraySize)              {                  int newSize = MaxArraySize;                    if (holder._id < (MaxArraySize / 2))                  {                      newSize = (_objects.Length * 2);                        //Keep doubling until we're larger than our target size.                      //We could also do this with log operations' but that would                      //be slower than the brute force approach.                      while (newSize <= holder._id && newSize < MaxArraySize)                      {                          newSize *= 2;                      }                        if (newSize > MaxArraySize)                      {                          newSize = MaxArraySize;                      }                  }                    ObjectHolder[] temp = new ObjectHolder[newSize];                  Array.Copy(_objects' 0' temp' 0' _objects.Length);                  _objects = temp;              }
Magic Number,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,AddObjectHolder,The following statement contains a magic number: if (holder._id >= _objects.Length && _objects.Length != MaxArraySize)              {                  int newSize = MaxArraySize;                    if (holder._id < (MaxArraySize / 2))                  {                      newSize = (_objects.Length * 2);                        //Keep doubling until we're larger than our target size.                      //We could also do this with log operations' but that would                      //be slower than the brute force approach.                      while (newSize <= holder._id && newSize < MaxArraySize)                      {                          newSize *= 2;                      }                        if (newSize > MaxArraySize)                      {                          newSize = MaxArraySize;                      }                  }                    ObjectHolder[] temp = new ObjectHolder[newSize];                  Array.Copy(_objects' 0' temp' 0' _objects.Length);                  _objects = temp;              }
Magic Number,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,AddObjectHolder,The following statement contains a magic number: if (holder._id >= _objects.Length && _objects.Length != MaxArraySize)              {                  int newSize = MaxArraySize;                    if (holder._id < (MaxArraySize / 2))                  {                      newSize = (_objects.Length * 2);                        //Keep doubling until we're larger than our target size.                      //We could also do this with log operations' but that would                      //be slower than the brute force approach.                      while (newSize <= holder._id && newSize < MaxArraySize)                      {                          newSize *= 2;                      }                        if (newSize > MaxArraySize)                      {                          newSize = MaxArraySize;                      }                  }                    ObjectHolder[] temp = new ObjectHolder[newSize];                  Array.Copy(_objects' 0' temp' 0' _objects.Length);                  _objects = temp;              }
Magic Number,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,DoValueTypeFixup,The following statement contains a magic number: var fieldsTemp = new FieldInfo[4];
Magic Number,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,DoValueTypeFixup,The following statement contains a magic number: while (holder.RequiresValueTypeFixup)              {                  //Enlarge the array if required (this is actually fairly unlikely as it would require that we                  //be nested more than 4 deep.                  if ((currentFieldIndex + 1) >= fieldsTemp.Length)                  {                      var temp = new FieldInfo[fieldsTemp.Length * 2];                      Array.Copy(fieldsTemp' 0' temp' 0' fieldsTemp.Length);                      fieldsTemp = temp;                  }                    //Get the fixup information.  If we have data for our parent field' add it to our list                  //and continue the walk up to find the next outermost containing object.  We cache the                   //object that we have.  In most cases' we could have just grabbed it after this loop finished.                  //However' if the outermost containing object is an array' we need the object one further                  //down the chain' so we have to do a lot of caching.                  currFixup = holder.ValueFixup;                  fixupObj = holder.ObjectValue;  //Save the most derived                   if (currFixup.ParentField != null)                  {                      FieldInfo parentField = currFixup.ParentField;                        ObjectHolder tempHolder = FindObjectHolder(currFixup.ContainerID);                      if (tempHolder.ObjectValue == null)                      {                          break;                      }                      if (Nullable.GetUnderlyingType(parentField.FieldType) != null)                      {                          fieldsTemp[currentFieldIndex] = parentField.FieldType.GetField("value"' BindingFlags.NonPublic | BindingFlags.Instance);                          currentFieldIndex++;                      }                        fieldsTemp[currentFieldIndex] = parentField;                      holder = tempHolder;                      currentFieldIndex++;                  }                  else                  {                      //If we find an index into an array' save that information.                      Debug.Assert(currFixup.ParentIndex != null' "[ObjectManager.DoValueTypeFixup]currFixup.ParentIndex!=null");                      holder = FindObjectHolder(currFixup.ContainerID); //find the array to fix.                      arrayIndex = currFixup.ParentIndex;                      break;                  }              }
Magic Number,System.Runtime.Serialization,ObjectManager,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,GetDeserializationConstructor,The following statement contains a magic number: foreach (ConstructorInfo ci in t.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly))              {                  ParameterInfo[] parameters = ci.GetParameters();                  if (parameters.Length == 2 &&                      parameters[0].ParameterType == typeof(SerializationInfo) &&                      parameters[1].ParameterType == typeof(StreamingContext))                  {                      return ci;                  }              }
Magic Number,System.Runtime.Serialization,FixupHolderList,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,EnlargeArray,The following statement contains a magic number: int newLength = _values.Length * 2;
Magic Number,System.Runtime.Serialization,LongList,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,EnlargeArray,The following statement contains a magic number: int newLength = _values.Length * 2;
Magic Number,System.Runtime.Serialization,ObjectHolderList,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs,EnlargeArray,The following statement contains a magic number: int newLength = _values.Length * 2;
Magic Number,System.Runtime.Serialization.Formatters.Binary,ObjectNull,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\ObjectNull.cs,Write,The following statement contains a magic number: if (_nullCount == 1)              {                  output.WriteByte((byte)BinaryHeaderEnum.ObjectNull);              }              else if (_nullCount < 256)              {                  output.WriteByte((byte)BinaryHeaderEnum.ObjectNullMultiple256);                  output.WriteByte((byte)_nullCount);              }              else              {                  output.WriteByte((byte)BinaryHeaderEnum.ObjectNullMultiple);                  output.WriteInt32(_nullCount);              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,SerializationHeaderRecord,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\SerializationHeaderRecord.cs,Read,The following statement contains a magic number: byte[] headerBytes = input.ReadBytes(17);
Magic Number,System.Runtime.Serialization.Formatters.Binary,SerializationHeaderRecord,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\SerializationHeaderRecord.cs,Read,The following statement contains a magic number: if (headerBytes.Length < 17)              {                  throw new EndOfStreamException(SR.IO_EOF_ReadBeyondEOF);              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,SerializationHeaderRecord,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\SerializationHeaderRecord.cs,Read,The following statement contains a magic number: _majorVersion = GetInt32(headerBytes' 9);
Magic Number,System.Runtime.Serialization.Formatters.Binary,SerializationHeaderRecord,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\SerializationHeaderRecord.cs,Read,The following statement contains a magic number: _headerId = GetInt32(headerBytes' 5);
Magic Number,System.Runtime.Serialization.Formatters.Binary,SerializationHeaderRecord,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\SerializationHeaderRecord.cs,Read,The following statement contains a magic number: _minorVersion = GetInt32(headerBytes' 13);
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,TypeLength,The following statement contains a magic number: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: return 1;                  case InternalPrimitiveTypeE.Char: return 2;                  case InternalPrimitiveTypeE.Byte: return 1;                  case InternalPrimitiveTypeE.Double: return 8;                  case InternalPrimitiveTypeE.Int16: return 2;                  case InternalPrimitiveTypeE.Int32: return 4;                  case InternalPrimitiveTypeE.Int64: return 8;                  case InternalPrimitiveTypeE.SByte: return 1;                  case InternalPrimitiveTypeE.Single: return 4;                  case InternalPrimitiveTypeE.UInt16: return 2;                  case InternalPrimitiveTypeE.UInt32: return 4;                  case InternalPrimitiveTypeE.UInt64: return 8;                  default: return 0;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,InitCodeA,The following statement contains a magic number: var codeATemp = new InternalPrimitiveTypeE[19];
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,InitCodeA,The following statement contains a magic number: codeATemp[2] = InternalPrimitiveTypeE.Invalid;
Magic Number,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,InitCodeA,The following statement contains a magic number: codeATemp[17] = InternalPrimitiveTypeE.Invalid;
Magic Number,System.Runtime.Serialization.Formatters.Binary,BinaryFormatterWriter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs,WriteArrayAsBytes,The following statement contains a magic number: while (arrayOffset < array.Length)              {                  int numArrayItems = Math.Min(ChunkSize / typeLength' array.Length - arrayOffset);                  int bufferUsed = numArrayItems * typeLength;                  Buffer.BlockCopy(array' arrayOffset * typeLength' _byteBuffer' 0' bufferUsed);                  if (!BitConverter.IsLittleEndian)                  {                      // we know that we are writing a primitive type' so just do a simple swap                      Debug.Fail("Re-review this code if/when we start running on big endian systems");                      for (int i = 0; i < bufferUsed; i += typeLength)                      {                          for (int j = 0; j < typeLength / 2; j++)                          {                              byte tmp = _byteBuffer[i + j];                              _byteBuffer[i + j] = _byteBuffer[i + typeLength - 1 - j];                              _byteBuffer[i + typeLength - 1 - j] = tmp;                          }                      }                  }                  WriteBytes(_byteBuffer' 0' bufferUsed);                  arrayOffset += numArrayItems;              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,ReadObjectInfo,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs,InitSiRead,The following statement contains a magic number: if (_memberTypesList != null)              {                  _memberTypesList = new List<Type>(20);              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,BinaryParser,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryParser.cs,ReadArrayAsBytes,The following statement contains a magic number: if (pr._arrayElementTypeCode == InternalPrimitiveTypeE.Byte)              {                  pr._newObj = ReadBytes(pr._lengthA[0]);              }              else if (pr._arrayElementTypeCode == InternalPrimitiveTypeE.Char)              {                  pr._newObj = ReadChars(pr._lengthA[0]);              }              else              {                  int typeLength = Converter.TypeLength(pr._arrayElementTypeCode);                    pr._newObj = Converter.CreatePrimitiveArray(pr._arrayElementTypeCode' pr._lengthA[0]);                  Debug.Assert((pr._newObj != null)' "[BinaryParser expected a Primitive Array]");                    Array array = (Array)pr._newObj;                  int arrayOffset = 0;                  if (_byteBuffer == null)                  {                      _byteBuffer = new byte[ChunkSize];                  }                    while (arrayOffset < array.Length)                  {                      int numArrayItems = Math.Min(ChunkSize / typeLength' array.Length - arrayOffset);                      int bufferUsed = numArrayItems * typeLength;                      ReadBytes(_byteBuffer' 0' bufferUsed);                      if (!BitConverter.IsLittleEndian)                      {                          // we know that we are reading a primitive type' so just do a simple swap                          Debug.Fail("Re-review this code if/when we start running on big endian systems");                          for (int i = 0; i < bufferUsed; i += typeLength)                          {                              for (int j = 0; j < typeLength / 2; j++)                              {                                  byte tmp = _byteBuffer[i + j];                                  _byteBuffer[i + j] = _byteBuffer[i + typeLength - 1 - j];                                  _byteBuffer[i + typeLength - 1 - j] = tmp;                              }                          }                      }                      Buffer.BlockCopy(_byteBuffer' 0' array' arrayOffset * typeLength' bufferUsed);                      arrayOffset += numArrayItems;                  }              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,SerStack,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,IncreaseCapacity,The following statement contains a magic number: int size = _objects.Length * 2;
Magic Number,System.Runtime.Serialization.Formatters.Binary,SizedArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,SizedArray,The following statement contains a magic number: _objects = new object[16];
Magic Number,System.Runtime.Serialization.Formatters.Binary,SizedArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,SizedArray,The following statement contains a magic number: _negObjects = new object[4];
Magic Number,System.Runtime.Serialization.Formatters.Binary,SizedArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,IncreaseCapacity,The following statement contains a magic number: try              {                  if (index < 0)                  {                      int size = Math.Max(_negObjects.Length * 2' (-index) + 1);                      object[] newItems = new object[size];                      Array.Copy(_negObjects' 0' newItems' 0' _negObjects.Length);                      _negObjects = newItems;                  }                  else                  {                      int size = Math.Max(_objects.Length * 2' index + 1);                      object[] newItems = new object[size];                      Array.Copy(_objects' 0' newItems' 0' _objects.Length);                      _objects = newItems;                  }              }              catch (Exception)              {                  throw new SerializationException(SR.Serialization_CorruptedStream);              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,SizedArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,IncreaseCapacity,The following statement contains a magic number: try              {                  if (index < 0)                  {                      int size = Math.Max(_negObjects.Length * 2' (-index) + 1);                      object[] newItems = new object[size];                      Array.Copy(_negObjects' 0' newItems' 0' _negObjects.Length);                      _negObjects = newItems;                  }                  else                  {                      int size = Math.Max(_objects.Length * 2' index + 1);                      object[] newItems = new object[size];                      Array.Copy(_objects' 0' newItems' 0' _objects.Length);                      _objects = newItems;                  }              }              catch (Exception)              {                  throw new SerializationException(SR.Serialization_CorruptedStream);              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,IntSizedArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,IncreaseCapacity,The following statement contains a magic number: try              {                  if (index < 0)                  {                      int size = Math.Max(_negObjects.Length * 2' (-index) + 1);                      int[] newItems = new int[size];                      Array.Copy(_negObjects' 0' newItems' 0' _negObjects.Length);                      _negObjects = newItems;                  }                  else                  {                      int size = Math.Max(_objects.Length * 2' index + 1);                      int[] newItems = new int[size];                      Array.Copy(_objects' 0' newItems' 0' _objects.Length);                      _objects = newItems;                  }              }              catch (Exception)              {                  throw new SerializationException(SR.Serialization_CorruptedStream);              }
Magic Number,System.Runtime.Serialization.Formatters.Binary,IntSizedArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,IncreaseCapacity,The following statement contains a magic number: try              {                  if (index < 0)                  {                      int size = Math.Max(_negObjects.Length * 2' (-index) + 1);                      int[] newItems = new int[size];                      Array.Copy(_negObjects' 0' newItems' 0' _negObjects.Length);                      _negObjects = newItems;                  }                  else                  {                      int size = Math.Max(_objects.Length * 2' index + 1);                      int[] newItems = new int[size];                      Array.Copy(_objects' 0' newItems' 0' _objects.Length);                      _objects = newItems;                  }              }              catch (Exception)              {                  throw new SerializationException(SR.Serialization_CorruptedStream);              }
Missing Default,System.Runtime.Serialization.Formatters.Binary,ObjectNull,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\ObjectNull.cs,Read,The following switch statement is missing a default case: switch (binaryHeaderEnum)              {                  case BinaryHeaderEnum.ObjectNull:                      _nullCount = 1;                      break;                  case BinaryHeaderEnum.ObjectNullMultiple256:                      _nullCount = input.ReadByte();                      break;                  case BinaryHeaderEnum.ObjectNullMultiple:                      _nullCount = input.ReadInt32();                      break;              }
Missing Default,System.Runtime.Serialization.Formatters.Binary,Converter,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\Converter.cs,GetNameSpaceEnum,The following switch statement is missing a default case: switch (code)                  {                      case InternalPrimitiveTypeE.Boolean:                      case InternalPrimitiveTypeE.Char:                      case InternalPrimitiveTypeE.Byte:                      case InternalPrimitiveTypeE.Double:                      case InternalPrimitiveTypeE.Int16:                      case InternalPrimitiveTypeE.Int32:                      case InternalPrimitiveTypeE.Int64:                      case InternalPrimitiveTypeE.SByte:                      case InternalPrimitiveTypeE.Single:                      case InternalPrimitiveTypeE.UInt16:                      case InternalPrimitiveTypeE.UInt32:                      case InternalPrimitiveTypeE.UInt64:                      case InternalPrimitiveTypeE.DateTime:                      case InternalPrimitiveTypeE.TimeSpan:                          nameSpaceEnum = InternalNameSpaceE.XdrPrimitive;                          typeName = "System." + ToComType(code);                          break;                        case InternalPrimitiveTypeE.Decimal:                          nameSpaceEnum = InternalNameSpaceE.UrtSystem;                          typeName = "System." + ToComType(code);                          break;                  }
Missing Default,System.Runtime.Serialization.Formatters.Binary,ObjectReader,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs,ParseMember,The following switch statement is missing a default case: switch (pr._memberTypeEnum)              {                  case InternalMemberTypeE.Item:                      ParseArrayMember(pr);                      return;                  case InternalMemberTypeE.Field:                      break;              }
Missing Default,System.Runtime.Serialization.Formatters.Binary,ValueFixup,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,Fixup,The following switch statement is missing a default case: switch (_valueFixupEnum)              {                  case ValueFixupEnum.Array:                      _arrayObj.SetValue(obj' _indexMap);                      break;                  case ValueFixupEnum.Header:                        throw new PlatformNotSupportedException();                  case ValueFixupEnum.Member:                      if (_objectInfo._isSi)                      {                          _objectInfo._objectManager.RecordDelayedFixup(parent._objectId' _memberName' record._objectId);                      }                      else                      {                          MemberInfo memberInfo = _objectInfo.GetMemberInfo(_memberName);                          if (memberInfo != null)                          {                              _objectInfo._objectManager.RecordFixup(parent._objectId' memberInfo' record._objectId);                          }                      }                      break;              }
Missing Default,System.Runtime.Serialization.Formatters.Binary,PrimitiveArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,PrimitiveArray,The following switch statement is missing a default case: switch (code)              {                  case InternalPrimitiveTypeE.Boolean: _booleanA = (bool[])array; break;                  case InternalPrimitiveTypeE.Char: _charA = (char[])array; break;                  case InternalPrimitiveTypeE.Double: _doubleA = (double[])array; break;                  case InternalPrimitiveTypeE.Int16: _int16A = (short[])array; break;                  case InternalPrimitiveTypeE.Int32: _int32A = (int[])array; break;                  case InternalPrimitiveTypeE.Int64: _int64A = (long[])array; break;                  case InternalPrimitiveTypeE.SByte: _sbyteA = (sbyte[])array; break;                  case InternalPrimitiveTypeE.Single: _singleA = (float[])array; break;                  case InternalPrimitiveTypeE.UInt16: _uint16A = (ushort[])array; break;                  case InternalPrimitiveTypeE.UInt32: _uint32A = (uint[])array; break;                  case InternalPrimitiveTypeE.UInt64: _uint64A = (ulong[])array; break;              }
Missing Default,System.Runtime.Serialization.Formatters.Binary,PrimitiveArray,C:\selectedRepos\dotnet_corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryUtilClasses.cs,SetValue,The following switch statement is missing a default case: switch (_code)              {                  case InternalPrimitiveTypeE.Boolean:                      _booleanA[index] = bool.Parse(value);                      break;                  case InternalPrimitiveTypeE.Char:                      if ((value[0] == '_') && (value.Equals("_0x00_")))                      {                          _charA[index] = char.MinValue;                      }                      else                      {                          _charA[index] = char.Parse(value);                      }                      break;                  case InternalPrimitiveTypeE.Double:                      _doubleA[index] = double.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.Int16:                      _int16A[index] = short.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.Int32:                      _int32A[index] = int.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.Int64:                      _int64A[index] = long.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.SByte:                      _sbyteA[index] = sbyte.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.Single:                      _singleA[index] = float.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.UInt16:                      _uint16A[index] = ushort.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.UInt32:                      _uint32A[index] = uint.Parse(value' CultureInfo.InvariantCulture);                      break;                  case InternalPrimitiveTypeE.UInt64:                      _uint64A[index] = ulong.Parse(value' CultureInfo.InvariantCulture);                      break;              }
