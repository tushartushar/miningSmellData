Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,CopyHeadersTo,Cyclomatic complexity of the method is 10
Complex Method,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,GetStringUsingEncoding,Cyclomatic complexity of the method is 9
Long Parameter List,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,OpenFileInternal,The method has 6 parameters. Parameters: needsHeaderAndBoundary' fileName' fs' buffer' formHeaderBytes' boundaryBytes
Long Parameter List,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadBits,The method has 6 parameters. Parameters: request' readStream' buffer' chunkSize' header' footer
Long Parameter List,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadBitsAsync,The method has 8 parameters. Parameters: request' readStream' buffer' chunkSize' header' footer' asyncOp' completionDelegate
Long Parameter List,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,HandleCompletion,The method has 5 parameters. Parameters: tcs' e' getResult' handler' unregisterHandler
Long Parameter List,System.Net,UploadProgressChangedEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadProgressChangedEventArgs,The method has 6 parameters. Parameters: progressPercentage' userToken' bytesSent' totalBytesToSend' bytesReceived' totalBytesToReceive
Long Parameter List,System.Net.Http,DelegatingStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\DelegatingStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http,DelegatingStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\DelegatingStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Identifier,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,,The length of the parameter _downloadDataOperationCompleted is 31.
Long Identifier,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,,The length of the parameter _downloadStringOperationCompleted is 33.
Long Identifier,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,,The length of the parameter _downloadFileOperationCompleted is 31.
Long Identifier,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,,The length of the parameter _uploadStringOperationCompleted is 31.
Long Identifier,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,,The length of the parameter _uploadValuesOperationCompleted is 31.
Long Identifier,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,,The length of the parameter _reportDownloadProgressChanged is 30.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,OpenFileInternal,The length of the statement  "                        "Content-Disposition: form-data; name=\"file\"; filename=\"" + Path.GetFileName(fileName) + "\"\r\n" + // TODO: Should the filename path be encoded? " is 148.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,DownloadBits,The length of the statement  "                byte[] copyBuffer = new byte[contentLength == -1 || contentLength > DefaultDownloadBufferLength ? DefaultDownloadBufferLength : contentLength]; " is 143.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,DownloadBitsAsync,The length of the statement  "                byte[] copyBuffer = new byte[contentLength == -1 || contentLength > DefaultDownloadBufferLength ? DefaultDownloadBufferLength : contentLength]; " is 143.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,OpenReadAsync,The length of the statement  "                    InvokeOperationCompleted(asyncOp' _openReadOperationCompleted' new OpenReadCompletedEventArgs(stream' exception' _canceled' asyncOp.UserSuppliedState)); " is 152.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,OpenWriteAsync,The length of the statement  "                    InvokeOperationCompleted(asyncOp' _openWriteOperationCompleted' new OpenWriteCompletedEventArgs(stream' exception' _canceled' asyncOp.UserSuppliedState)); " is 154.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,OpenWriteAsync,The length of the statement  "                var eventArgs = new OpenWriteCompletedEventArgs(null' GetExceptionToPropagate(e)' _canceled' asyncOp.UserSuppliedState); " is 120.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,DownloadDataAsyncCallback,The length of the statement  "            DownloadDataCompletedEventArgs eventArgs = new DownloadDataCompletedEventArgs(returnBytes' exception' _canceled' asyncOp.UserSuppliedState); " is 140.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadStringAsync,The length of the statement  "                var eventArgs = new UploadStringCompletedEventArgs(null' GetExceptionToPropagate(e)' _canceled' asyncOp.UserSuppliedState); " is 123.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadDataAsync,The length of the statement  "                        InvokeOperationCompleted(asyncOp' _uploadDataOperationCompleted' new UploadDataCompletedEventArgs(result' error' _canceled' uploadAsyncOp.UserSuppliedState))); " is 159.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadDataAsync,The length of the statement  "                var eventArgs = new UploadDataCompletedEventArgs(null' GetExceptionToPropagate(e)' _canceled' asyncOp.UserSuppliedState); " is 121.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadFileAsync,The length of the statement  "                        InvokeOperationCompleted(asyncOp' _uploadFileOperationCompleted' new UploadFileCompletedEventArgs(result' error' _canceled' uploadAsyncOp.UserSuppliedState))); " is 159.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadFileAsync,The length of the statement  "                var eventArgs = new UploadFileCompletedEventArgs(null' GetExceptionToPropagate(e)' _canceled' asyncOp.UserSuppliedState); " is 121.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadValuesAsync,The length of the statement  "                        InvokeOperationCompleted(asyncOp' _uploadValuesOperationCompleted' new UploadValuesCompletedEventArgs(result' error' _canceled' uploadAsyncOp.UserSuppliedState))); " is 163.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadValuesAsync,The length of the statement  "                var eventArgs = new UploadValuesCompletedEventArgs(null' GetExceptionToPropagate(e)' _canceled' asyncOp.UserSuppliedState); " is 123.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,DownloadStringTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.DownloadStringCompleted -= completion); " is 158.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,OpenReadTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.OpenReadCompleted -= completion); " is 152.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,OpenWriteTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.OpenWriteCompleted -= completion); " is 153.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadStringTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.UploadStringCompleted -= completion); " is 156.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,DownloadDataTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.DownloadDataCompleted -= completion); " is 156.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,DownloadFileTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => null' handler' (webClient' completion) => webClient.DownloadFileCompleted -= completion); " is 149.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadDataTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.UploadDataCompleted -= completion); " is 154.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadFileTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.UploadFileCompleted -= completion); " is 154.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UploadValuesTaskAsync,The length of the statement  "            handler = (sender' e) => HandleCompletion(tcs' e' (args) => args.Result' handler' (webClient' completion) => webClient.UploadValuesCompleted -= completion); " is 156.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The length of the statement  "                            progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) : " is 136.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The length of the statement  "                            progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50); " is 152.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The length of the statement  "                        asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive)); " is 227.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The length of the statement  "                    progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive); " is 171.
Long Statement,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The length of the statement  "                    asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive)); " is 184.
Complex Conditional,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,IsSafe,The conditional expression  "ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'"  is complex.
Empty Catch Block,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,AbortRequest,The method has an empty catch block.
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: byte[] expandedBytes = new byte[count + cUnsafe * 2];
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  byte b = bytes[offset+i];                  char ch = (char) b;                    if (IsSafe(ch))                  {                      expandedBytes[pos++] = b;                  }                  else if (ch == ' ')                  {                      expandedBytes[pos++] = (byte) '+';                  }                  else                  {                      expandedBytes[pos++] = (byte) '%';                      expandedBytes[pos++] = (byte) IntToHex((b >> 4) & 0xf);                      expandedBytes[pos++] = (byte) IntToHex(b & 0x0f);                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,IntToHex,The following statement contains a magic number: if (n <= 9)              {                  return(char)(n + (int)'0');              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,IntToHex,The following statement contains a magic number: return(char)(n - 10 + (int)'a');
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,PostProgressChanged,The following statement contains a magic number: if (asyncOp != null && (progress.BytesSent > 0 || progress.BytesReceived > 0))              {                  int progressPercentage;                  if (progress.HasUploadPhase)                  {                      if (UploadProgressChanged != null)                      {                          progressPercentage = progress.TotalBytesToReceive < 0 && progress.BytesReceived == 0 ?                              progress.TotalBytesToSend < 0 ? 0 : progress.TotalBytesToSend == 0 ? 50 : (int)((50 * progress.BytesSent) / progress.TotalBytesToSend) :                              progress.TotalBytesToSend < 0 ? 50 : progress.TotalBytesToReceive == 0 ? 100 : (int)((50 * progress.BytesReceived) / progress.TotalBytesToReceive + 50);                          asyncOp.Post(_reportUploadProgressChanged' new UploadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesSent' progress.TotalBytesToSend' progress.BytesReceived' progress.TotalBytesToReceive));                      }                  }                  else if (DownloadProgressChanged != null)                  {                      progressPercentage = progress.TotalBytesToReceive < 0 ? 0 : progress.TotalBytesToReceive == 0 ? 100 : (int)((100 * progress.BytesReceived) / progress.TotalBytesToReceive);                      asyncOp.Post(_reportDownloadProgressChanged' new DownloadProgressChangedEventArgs(progressPercentage' asyncOp.UserSuppliedState' progress.BytesReceived' progress.TotalBytesToReceive));                  }              }
Magic Number,System.IO,ChunkedMemoryStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\ChunkedMemoryStream.cs,AppendChunk,The following statement contains a magic number: int nextChunkLength = _currentChunk != null ? _currentChunk._buffer.Length * 2 : InitialChunkDefaultSize;
Missing Default,System.Net,WebClient,C:\selectedRepos\dotnet_corefx\src\System.Net.WebClient\src\System\Net\WebClient.cs,IsSafe,The following switch statement is missing a default case: switch (ch)              {                  case '-':                  case '_':                  case '.':                  case '!':                  case '*':                  case '\'':                  case '(':                  case ')':                      return true;              }
