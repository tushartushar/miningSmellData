Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Drawing,KnownColorTable,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\KnownColorTable.cs,InitColorTable,The method has 148 lines of code.
Long Method,System.Drawing,KnownColorTable,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\KnownColorTable.cs,InitColorNameTable,The method has 180 lines of code.
Long Statement,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,FromArgb,The length of the statement  "            return new Color(MakeArgb(unchecked((byte)alpha)' baseColor.R' baseColor.G' baseColor.B)' StateARGBValueValid' null' (KnownColor)0); " is 132.
Long Statement,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,ToString,The length of the statement  "                return nameof(Color) + " [A=" + A.ToString() + "' R=" + R.ToString() + "' G=" + G.ToString() + "' B=" + B.ToString() + "]"; " is 123.
Long Statement,System.Drawing,KnownColorTable,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\KnownColorTable.cs,UpdateSystemColors,The length of the statement  "            colorTable[(int)KnownColor.ActiveCaptionText] = SystemColorToArgb((int)Interop.User32.Win32SystemColors.ActiveCaptionText); " is 123.
Long Statement,System.Drawing,KnownColorTable,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\KnownColorTable.cs,UpdateSystemColors,The length of the statement  "            colorTable[(int)KnownColor.ControlLightLight] = SystemColorToArgb((int)Interop.User32.Win32SystemColors.ControlLightLight); " is 123.
Long Statement,System.Drawing,KnownColorTable,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\KnownColorTable.cs,UpdateSystemColors,The length of the statement  "            colorTable[(int)KnownColor.GradientActiveCaption] = SystemColorToArgb((int)Interop.User32.Win32SystemColors.GradientActiveCaption); " is 131.
Long Statement,System.Drawing,KnownColorTable,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\KnownColorTable.cs,UpdateSystemColors,The length of the statement  "            colorTable[(int)KnownColor.GradientInactiveCaption] = SystemColorToArgb((int)Interop.User32.Win32SystemColors.GradientInactiveCaption); " is 135.
Long Statement,System.Drawing,KnownColorTable,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Drawing\KnownColorTable.cs,UpdateSystemColors,The length of the statement  "            colorTable[(int)KnownColor.InactiveCaptionText] = SystemColorToArgb((int)Interop.User32.Win32SystemColors.InactiveCaptionText); " is 127.
Magic Number,System.Drawing,Rectangle,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Rectangle.cs,Inflate,The following statement contains a magic number: unchecked              {                  X -= width;                  Y -= height;                    Width += 2 * width;                  Height += 2 * height;              }
Magic Number,System.Drawing,Rectangle,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Rectangle.cs,Inflate,The following statement contains a magic number: unchecked              {                  X -= width;                  Y -= height;                    Width += 2 * width;                  Height += 2 * height;              }
Magic Number,System.Drawing,RectangleF,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\RectangleF.cs,Inflate,The following statement contains a magic number: Width += 2 * x;
Magic Number,System.Drawing,RectangleF,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\RectangleF.cs,Inflate,The following statement contains a magic number: Height += 2 * y;
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,CheckByte,The following statement contains a magic number: if (value < 0 || value > 255)                  throw new ArgumentException(SR.Format(SR.InvalidEx2BoundArgument' name' value' 0' 255));
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,CheckByte,The following statement contains a magic number: if (value < 0 || value > 255)                  throw new ArgumentException(SR.Format(SR.InvalidEx2BoundArgument' name' value' 0' 255));
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,GetBrightness,The following statement contains a magic number: return (max + min) / 2;
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,GetHue,The following statement contains a magic number: if (r == max)              {                  hue = (g - b) / delta;              }              else if (g == max)              {                  hue = 2 + (b - r) / delta;              }              else              {                  Debug.Assert(b == max);                  hue = 4 + (r - g) / delta;              }
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,GetHue,The following statement contains a magic number: if (r == max)              {                  hue = (g - b) / delta;              }              else if (g == max)              {                  hue = 2 + (b - r) / delta;              }              else              {                  Debug.Assert(b == max);                  hue = 4 + (r - g) / delta;              }
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,GetHue,The following statement contains a magic number: hue *= 60;
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,GetSaturation,The following statement contains a magic number: if (max != min)              {                  float l = (max + min) / 2;                    if (l <= .5)                  {                      s = (max - min) / (max + min);                  }                  else                  {                      s = (max - min) / (2 - max - min);                  }              }
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,GetSaturation,The following statement contains a magic number: if (max != min)              {                  float l = (max + min) / 2;                    if (l <= .5)                  {                      s = (max - min) / (max + min);                  }                  else                  {                      s = (max - min) / (2 - max - min);                  }              }
Magic Number,System.Drawing,Color,C:\selectedRepos\dotnet_corefx\src\System.Drawing.Primitives\src\System\Drawing\Color.cs,GetSaturation,The following statement contains a magic number: if (max != min)              {                  float l = (max + min) / 2;                    if (l <= .5)                  {                      s = (max - min) / (max + min);                  }                  else                  {                      s = (max - min) / (2 - max - min);                  }              }
Magic Number,System.Numerics.Hashing,HashHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Numerics\Hashing\HashHelpers.cs,Combine,The following statement contains a magic number: unchecked              {                  // RyuJIT optimizes this to use the ROL instruction                  // Related GitHub pull request: dotnet/coreclr#1830                  uint rol5 = ((uint)h1 << 5) | ((uint)h1 >> 27);                  return ((int)rol5 + h1) ^ h2;              }
Magic Number,System.Numerics.Hashing,HashHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Numerics\Hashing\HashHelpers.cs,Combine,The following statement contains a magic number: unchecked              {                  // RyuJIT optimizes this to use the ROL instruction                  // Related GitHub pull request: dotnet/coreclr#1830                  uint rol5 = ((uint)h1 << 5) | ((uint)h1 >> 27);                  return ((int)rol5 + h1) ^ h2;              }
