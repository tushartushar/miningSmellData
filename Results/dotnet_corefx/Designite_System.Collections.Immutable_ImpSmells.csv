Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Collections.Immutable,ImmutableArray,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray.cs,CreateRange,The method has 5 parameters. Parameters: items' start' length' selector' arg
Long Parameter List,System.Collections.Immutable,ImmutableArray,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Parameter List,System.Collections.Immutable,Enumerator,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray_1.Enumerator.cs,Enumerator,The method has 5 parameters. Parameters: root' builder' startIndex' count' reversed
Long Parameter List,System.Collections.Immutable,ImmutableDictionary,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableDictionary.cs,ToImmutableDictionary,The method has 5 parameters. Parameters: source' keySelector' elementSelector' keyComparer' valueComparer
Long Parameter List,System.Collections.Immutable,HashBucket,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableDictionary_2.HashBucket.cs,Add,The method has 6 parameters. Parameters: key' value' keyOnlyComparer' valueComparer' behavior' result
Long Parameter List,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,Node,The method has 5 parameters. Parameters: key' value' left' right' frozen
Long Parameter List,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,Add,The method has 5 parameters. Parameters: key' value' keyComparer' valueComparer' mutated
Long Parameter List,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,SetItem,The method has 6 parameters. Parameters: key' value' keyComparer' valueComparer' replacedExistingValue' mutated
Long Parameter List,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,SetOrAdd,The method has 7 parameters. Parameters: key' value' keyComparer' valueComparer' overwriteExistingValue' replacedExistingValue' mutated
Long Parameter List,System.Collections.Immutable,ImmutableSortedDictionary,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableSortedDictionary.cs,ToImmutableSortedDictionary,The method has 5 parameters. Parameters: source' keySelector' elementSelector' keyComparer' valueComparer
Long Parameter List,System.Collections.Immutable,SortedInt32KeyNode<TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SortedInt32KeyNode.cs,SortedInt32KeyNode,The method has 5 parameters. Parameters: key' value' left' right' frozen
Long Parameter List,System.Collections.Immutable,SortedInt32KeyNode<TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SortedInt32KeyNode.cs,SetItem,The method has 5 parameters. Parameters: key' value' valueComparer' replacedExistingValue' mutated
Long Parameter List,System.Collections.Immutable,SortedInt32KeyNode<TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SortedInt32KeyNode.cs,SetOrAdd,The method has 6 parameters. Parameters: key' value' valueComparer' overwriteExistingValue' replacedExistingValue' mutated
Long Identifier,System.Collections.Immutable,ImmutableSortedSet<T>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableSortedSet_1.Builder.cs,,The length of the parameter RefillOverIncrementalThreshold is 30.
Long Statement,System.Collections.Immutable,ImmutableHashSet<T>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableHashSet_1.HashBucketByValueEqualityComparer.cs,SymmetricExcept,The length of the statement  "                    var mutationResult = Add(item' new MutationInput(result' origin.EqualityComparer' origin.HashBucketEqualityComparer' count)); " is 125.
Long Statement,System.Collections.Immutable,ImmutableHashSet<T>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableHashSet_1.HashBucketByValueEqualityComparer.cs,SymmetricExcept,The length of the statement  "                    var mutationResult = Add(item' new MutationInput(result' origin.EqualityComparer' origin.HashBucketEqualityComparer' count)); " is 125.
Long Statement,System.Collections.Immutable,Builder,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray_1.Builder.cs,Add,The length of the statement  "                var result = ImmutableDictionary<TKey' TValue>.Add(key' value' KeyCollisionBehavior.ThrowIfValueDifferent' this.Origin); " is 120.
Long Statement,System.Collections.Immutable,ImmutableDictionary<TKey;TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableDictionary_2.Builder.cs,AddRange,The length of the statement  "                var newBucket = bucket.Add(pair.Key' pair.Value' origin.KeyOnlyComparer' origin.ValueComparer' collisionBehavior' out result); " is 126.
Long Statement,System.Collections.Immutable,ImmutableDictionary<TKey;TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableDictionary_2.Builder.cs,Remove,The length of the statement  "                var newRoot = UpdateRoot(origin.Root' hashCode' bucket.Remove(key' origin.KeyOnlyComparer' out result)' origin.HashBucketComparer); " is 131.
Long Statement,System.Collections.Immutable,ImmutableDictionary<TKey;TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableDictionary_2.Builder.cs,Wrap,The length of the statement  "                return root.IsEmpty ? this.Clear() : new ImmutableDictionary<TKey' TValue>(root' _comparers' adjustedCountIfDifferentRoot); " is 123.
Long Statement,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,BinarySearch,The length of the statement  "                int thisNodeIndex = _left.Count; // this is only the index within the AVL tree' treating this node as root rather than a member of a larger tree. " is 145.
Long Statement,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,SetOrAdd,The length of the statement  "                        var newRight = _right.SetOrAdd(key' value' keyComparer' valueComparer' overwriteExistingValue' out replacedExistingValue' out mutated); " is 135.
Long Statement,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,SetOrAdd,The length of the statement  "                        var newLeft = _left.SetOrAdd(key' value' keyComparer' valueComparer' overwriteExistingValue' out replacedExistingValue' out mutated); " is 133.
Long Statement,System.Collections.Immutable,ImmutableSortedDictionary<TKey;TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableSortedDictionary_2.Builder.cs,Clear,The length of the statement  "            Contract.Ensures(Contract.Result<ImmutableSortedDictionary<TKey' TValue>>().KeyComparer == ((ISortKeyCollection<TKey>)this).KeyComparer); " is 137.
Long Statement,System.Collections.Immutable,ImmutableSortedDictionary<TKey;TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableSortedDictionary_2.Builder.cs,Wrap,The length of the statement  "                return root.IsEmpty ? this.Clear() : new ImmutableSortedDictionary<TKey' TValue>(root' adjustedCountIfDifferentRoot' _keyComparer' _valueComparer); " is 147.
Long Statement,System.Collections.Immutable,ImmutableSortedSet<T>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableSortedSet_1.Builder.cs,Union,The length of the statement  "            if (TryCastToImmutableSortedSet(other' out immutableSortedSet) && immutableSortedSet.KeyComparer == this.KeyComparer) // argument is a compatible immutable sorted set " is 166.
Long Statement,System.Collections.Immutable,ImmutableSortedSet<T>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableSortedSet_1.Builder.cs,Union,The length of the statement  "            if (this.IsEmpty || (other.TryGetCount(out count) && (this.Count + count) * RefillOverIncrementalThreshold > this.Count)) " is 121.
Long Statement,System.Collections.Immutable,SecureObjectPool<T;TCaller>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SecureObjectPool.cs,TryTake,The length of the statement  "            if (caller.PoolUserId != SecureObjectPool.UnassignedId && AllocFreeConcurrentStack<SecurePooledObject<T>>.TryTake(out item)) " is 124.
Long Statement,System.Collections.Immutable,SortedInt32KeyNode<TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SortedInt32KeyNode.cs,SetOrAdd,The length of the statement  "                    var newRight = _right.SetOrAdd(key' value' valueComparer' overwriteExistingValue' out replacedExistingValue' out mutated); " is 122.
Long Statement,System.Collections.Immutable,SortedInt32KeyNode<TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SortedInt32KeyNode.cs,SetOrAdd,The length of the statement  "                    var newLeft = _left.SetOrAdd(key' value' valueComparer' overwriteExistingValue' out replacedExistingValue' out mutated); " is 120.
Magic Number,System.Collections.Immutable,Builder,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray_1.Builder.cs,EnsureCapacity,The following statement contains a magic number: if (_elements.Length < capacity)                  {                      int newCapacity = Math.Max(_elements.Length * 2' capacity);                      Array.Resize(ref _elements' newCapacity);                  }
Magic Number,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,NodeTreeFromList,The following statement contains a magic number: int rightCount = (length - 1) / 2;
Magic Number,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,IsRightHeavy,The following statement contains a magic number: return Balance(tree) >= 2;
Magic Number,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,IsLeftHeavy,The following statement contains a magic number: return Balance(tree) <= -2;
Magic Number,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,NodeTreeFromList,The following statement contains a magic number: int rightCount = (length - 1) / 2;
Magic Number,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,IsRightHeavy,The following statement contains a magic number: return Balance(tree) >= 2;
Magic Number,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,IsLeftHeavy,The following statement contains a magic number: return Balance(tree) <= -2;
Magic Number,System.Collections.Immutable,Node,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableList_1.Node.cs,NodeTreeFromList,The following statement contains a magic number: int rightCount = (length - 1) / 2;
Magic Number,System.Collections.Immutable,SortedInt32KeyNode<TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SortedInt32KeyNode.cs,IsRightHeavy,The following statement contains a magic number: return Balance(tree) >= 2;
Magic Number,System.Collections.Immutable,SortedInt32KeyNode<TValue>,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\SortedInt32KeyNode.cs,IsLeftHeavy,The following statement contains a magic number: return Balance(tree) <= -2;
