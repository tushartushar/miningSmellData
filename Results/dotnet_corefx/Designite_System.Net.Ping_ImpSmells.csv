Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Format,Cyclomatic complexity of the method is 8
Long Parameter List,System.Net.NetworkInformation,Ping,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\Ping.cs,SendAsync,The method has 5 parameters. Parameters: hostNameOrAddress' timeout' buffer' options' userToken
Long Parameter List,System.Net.NetworkInformation,Ping,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\Ping.cs,SendAsync,The method has 5 parameters. Parameters: address' timeout' buffer' options' userToken
Long Parameter List,System.Net.NetworkInformation,PingReply,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\PingReply.cs,PingReply,The method has 5 parameters. Parameters: address' options' ipStatus' rtt' buffer
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Enter,The method has 5 parameters. Parameters: thisOrContextObject' arg0' arg1' arg2' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,DumpBuffer,The method has 5 parameters. Parameters: thisOrContextObject' buffer' offset' count' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Statement,System.Net.NetworkInformation,Ping,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\Ping.cs,TranslateTaskToEap,The length of the statement  "                var e = new PingCompletedEventArgs(t.IsCompletedSuccessfully ? t.Result : null' t.Exception' t.IsCanceled' asyncOp.UserSuppliedState); " is 134.
Long Statement,System.Net.NetworkInformation,Ping,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\Ping.cs,TranslateTaskToEap,The length of the statement  "                SendOrPostCallback callback = _onPingCompletedDelegate ?? (_onPingCompletedDelegate = new SendOrPostCallback(o => { OnPingCompleted((PingCompletedEventArgs)o); })); " is 164.
Long Statement,System.Net.NetworkInformation,Ping,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\Ping.cs,TranslateTaskToEap,The length of the statement  "            }' AsyncOperationManager.CreateOperation(userToken)' CancellationToken.None' TaskContinuationOptions.DenyChildAttach' TaskScheduler.Default); " is 141.
Long Statement,System.Net.NetworkInformation,Ping,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\Ping.cs,SendPingAsync,The length of the statement  "#pragma warning disable CS0618 // IPAddress.Address is obsoleted' but it's the most efficient way to get the Int32 IPv4 address " is 127.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Enter,The length of the statement  "            if (IsEnabled) Log.Enter(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 134.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Exit,The length of the statement  "            if (IsEnabled) Log.Exit(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Info,The length of the statement  "            if (IsEnabled) Log.Info(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,DumpBuffer,The length of the statement  "                    Fail(thisOrContextObject' $"Invalid {nameof(DumpBuffer)} Args. Length={buffer.Length}' Offset={offset}' Count={count}"' memberName); " is 132.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is ValueType)' $"Should not be passing value type {arg?.GetType()} to logging without IsEnabled check"); " is 123.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is FormattableString)' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 124.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,DebugValidateArg,The length of the statement  "            Debug.Assert(IsEnabled || arg == null' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 121.
Long Statement,System.Net.Sockets,IPAddressExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPAddressExtensions.cs,Snapshot,The length of the statement  "#pragma warning disable CS0618 // IPAddress.Address is obsoleted' but it's the most efficient way to get the Int32 IPv4 address " is 127.
Long Statement,System.Net.Sockets,IPEndPointExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPEndPointExtensions.cs,Create,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidAddressFamily' family.ToString()' thisObj.GetType().FullName' thisObj.AddressFamily.ToString())' nameof(socketAddress)); " is 172.
Long Statement,System.Net.Sockets,IPEndPointExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPEndPointExtensions.cs,Create,The length of the statement  "                    throw new ArgumentException(SR.Format(SR.net_InvalidSocketAddressSize' socketAddress.GetType().FullName' thisObj.GetType().FullName)' nameof(socketAddress)); " is 157.
Magic Number,System.Net.NetworkInformation,PingOptions,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\PingOptions.cs,PingOptions,The following statement contains a magic number: _ttl = 128;
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Ping\src\System\Net\NetworkInformation\NetEventSource.Ping.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,ByteOrder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ByteOrder.cs,HostToNetworkBytes,The following statement contains a magic number: bytes[index] = (byte)(host >> 8);
Magic Number,System.Net,ByteOrder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ByteOrder.cs,NetworkBytesToHostUInt16,The following statement contains a magic number: return (ushort)(((ushort)bytes[index] << 8) | (ushort)bytes[index + 1]);
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,SocketAddress,The following statement contains a magic number: Buffer = new byte[(size / IntPtr.Size + 2) * IntPtr.Size];
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 1] = unchecked((byte)(InternalSize >> 8));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 2] = unchecked((byte)(InternalSize >> 16));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 2] = unchecked((byte)(InternalSize >> 16));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 3] = unchecked((byte)(InternalSize >> 24));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 3] = unchecked((byte)(InternalSize >> 24));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Sockets,IPEndPointExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPEndPointExtensions.cs,Create,The following statement contains a magic number: if (family == AddressFamily.InterNetwork || family == AddressFamily.InterNetworkV6)              {                  if (socketAddress.Size < 8)                  {                      throw new ArgumentException(SR.Format(SR.net_InvalidSocketAddressSize' socketAddress.GetType().FullName' thisObj.GetType().FullName)' nameof(socketAddress));                  }                    return socketAddress.GetIPEndPoint();              }
Missing Default,System.Net.Sockets,IPAddressExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPAddressExtensions.cs,Snapshot,The following switch statement is missing a default case: switch (original.AddressFamily)              {                  case AddressFamily.InterNetwork:  #pragma warning disable CS0618 // IPAddress.Address is obsoleted' but it's the most efficient way to get the Int32 IPv4 address                      return new IPAddress(original.Address);  #pragma warning restore CS0618                    case AddressFamily.InterNetworkV6:                      Span<byte> addressBytes = stackalloc byte[IPAddressParserStatics.IPv6AddressBytes];                      original.TryWriteBytes(addressBytes' out int bytesWritten);                      Debug.Assert(bytesWritten == IPAddressParserStatics.IPv6AddressBytes);                      return new IPAddress(addressBytes' (uint)original.ScopeId);              }
