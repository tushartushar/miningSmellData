Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,Cyclomatic complexity of the method is 8
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,GetHashCode,The following statement contains a magic number: if (_hashNotComputed)              {                  _hashNotComputed = false;                  _hash = 0;                    int i;                  int size = _address.Length & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)_address[i]                              | ((int)_address[i + 1] << 8)                              | ((int)_address[i + 2] << 16)                              | ((int)_address[i + 3] << 24);                  }                    if ((_address.Length & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < _address.Length; ++i)                      {                          remnant |= ((int)_address[i]) << shift;                          shift += 8;                      }                        _hash ^= remnant;                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,ToString,The following statement contains a magic number: foreach (byte value in _address)              {                  int tmp = (value >> 4) & 0x0F;                    for (int i = 0; i < 2; i++)                  {                      if (tmp < 0x0A)                      {                          addressString.Append((char)(tmp + 0x30));                      }                      else                      {                          addressString.Append((char)(tmp + 0x37));                      }                        tmp = ((int)value & 0x0F);                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,ToString,The following statement contains a magic number: foreach (byte value in _address)              {                  int tmp = (value >> 4) & 0x0F;                    for (int i = 0; i < 2; i++)                  {                      if (tmp < 0x0A)                      {                          addressString.Append((char)(tmp + 0x30));                      }                      else                      {                          addressString.Append((char)(tmp + 0x37));                      }                        tmp = ((int)value & 0x0F);                  }              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: if (address.IndexOf('-') >= 0)              {                  hasDashes = true;                  buffer = new byte[(address.Length + 1) / 3];              }              else              {                  if (address.Length % 2 > 0)                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    buffer = new byte[address.Length / 2];              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: if (address.IndexOf('-') >= 0)              {                  hasDashes = true;                  buffer = new byte[(address.Length + 1) / 3];              }              else              {                  if (address.Length % 2 > 0)                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    buffer = new byte[address.Length / 2];              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: if (address.IndexOf('-') >= 0)              {                  hasDashes = true;                  buffer = new byte[(address.Length + 1) / 3];              }              else              {                  if (address.Length % 2 > 0)                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    buffer = new byte[address.Length / 2];              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: for (int i = 0; i < address.Length; i++)              {                  int value = (int)address[i];                    if (value >= 0x30 && value <= 0x39)                  {                      value -= 0x30;                  }                  else if (value >= 0x41 && value <= 0x46)                  {                      value -= 0x37;                  }                  else if (value == (int)'-')                  {                      if (validCount == 2)                      {                          validCount = 0;                          continue;                      }                      else                      {                          throw new FormatException(SR.net_bad_mac_address);                      }                  }                  else                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    //we had too many characters after the last dash                  if (hasDashes && validCount >= 2)                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    if (validCount % 2 == 0)                  {                      buffer[j] = (byte)(value << 4);                  }                  else                  {                      buffer[j++] |= (byte)value;                  }                    validCount++;              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: for (int i = 0; i < address.Length; i++)              {                  int value = (int)address[i];                    if (value >= 0x30 && value <= 0x39)                  {                      value -= 0x30;                  }                  else if (value >= 0x41 && value <= 0x46)                  {                      value -= 0x37;                  }                  else if (value == (int)'-')                  {                      if (validCount == 2)                      {                          validCount = 0;                          continue;                      }                      else                      {                          throw new FormatException(SR.net_bad_mac_address);                      }                  }                  else                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    //we had too many characters after the last dash                  if (hasDashes && validCount >= 2)                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    if (validCount % 2 == 0)                  {                      buffer[j] = (byte)(value << 4);                  }                  else                  {                      buffer[j++] |= (byte)value;                  }                    validCount++;              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: for (int i = 0; i < address.Length; i++)              {                  int value = (int)address[i];                    if (value >= 0x30 && value <= 0x39)                  {                      value -= 0x30;                  }                  else if (value >= 0x41 && value <= 0x46)                  {                      value -= 0x37;                  }                  else if (value == (int)'-')                  {                      if (validCount == 2)                      {                          validCount = 0;                          continue;                      }                      else                      {                          throw new FormatException(SR.net_bad_mac_address);                      }                  }                  else                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    //we had too many characters after the last dash                  if (hasDashes && validCount >= 2)                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    if (validCount % 2 == 0)                  {                      buffer[j] = (byte)(value << 4);                  }                  else                  {                      buffer[j++] |= (byte)value;                  }                    validCount++;              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: for (int i = 0; i < address.Length; i++)              {                  int value = (int)address[i];                    if (value >= 0x30 && value <= 0x39)                  {                      value -= 0x30;                  }                  else if (value >= 0x41 && value <= 0x46)                  {                      value -= 0x37;                  }                  else if (value == (int)'-')                  {                      if (validCount == 2)                      {                          validCount = 0;                          continue;                      }                      else                      {                          throw new FormatException(SR.net_bad_mac_address);                      }                  }                  else                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    //we had too many characters after the last dash                  if (hasDashes && validCount >= 2)                  {                      throw new FormatException(SR.net_bad_mac_address);                  }                    if (validCount % 2 == 0)                  {                      buffer[j] = (byte)(value << 4);                  }                  else                  {                      buffer[j++] |= (byte)value;                  }                    validCount++;              }
Magic Number,System.Net.NetworkInformation,PhysicalAddress,C:\selectedRepos\dotnet_corefx\src\System.Net.NetworkInformation\src\System\Net\NetworkInformation\PhysicalAddress.cs,Parse,The following statement contains a magic number: if (validCount < 2)              {                  throw new FormatException(SR.net_bad_mac_address);              }
