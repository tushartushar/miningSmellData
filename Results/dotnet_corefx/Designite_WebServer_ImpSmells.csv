Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WebServer,EchoWebSocket,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\WebSocket\EchoWebSocket.ashx.cs,ProcessWebSocketRequest,Cyclomatic complexity of the method is 11
Long Parameter List,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleChallengeResponseAuthentication,The method has 5 parameters. Parameters: context' authType' user' password' domain
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleAuthentication,The following statement contains a magic number: if (string.Equals("basic"' authType' StringComparison.OrdinalIgnoreCase))              {                  if (!HandleBasicAuthentication(context' user' password' domain))                  {                      context.Response.End();                      return false;                  }              }              else if (string.Equals("Negotiate"' authType' StringComparison.OrdinalIgnoreCase) ||                  string.Equals("NTLM"' authType' StringComparison.OrdinalIgnoreCase))              {                  if (!HandleChallengeResponseAuthentication(context' authType' user' password' domain))                  {                      context.Response.End();                      return false;                  }              }              else if (authType != null)              {                  context.Response.StatusCode = 501;                  context.Response.StatusDescription = "Unsupported auth type: " + authType;                  context.Response.End();                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleBasicAuthentication,The following statement contains a magic number: if (authHeader == null)              {                  context.Response.StatusCode = 401;                  context.Response.Headers.Add("WWW-Authenticate"' WwwAuthenticateHeaderValue);                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleBasicAuthentication,The following statement contains a magic number: if (split.Length < 2)              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Invalid Authorization header: " + authHeader;                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleBasicAuthentication,The following statement contains a magic number: if (split.Length < 2)              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Invalid Authorization header: " + authHeader;                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleBasicAuthentication,The following statement contains a magic number: if (!string.Equals("basic"' split[0]' StringComparison.OrdinalIgnoreCase))              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Unsupported auth type: " + split[0];                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleBasicAuthentication,The following statement contains a magic number: if (pair.Length != 2 || pair[0] != user || pair[1] != password)              {                  context.Response.StatusCode = 401;                  context.Response.Headers.Add("WWW-Authenticate"' WwwAuthenticateHeaderValue);                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleBasicAuthentication,The following statement contains a magic number: if (pair.Length != 2 || pair[0] != user || pair[1] != password)              {                  context.Response.StatusCode = 401;                  context.Response.Headers.Add("WWW-Authenticate"' WwwAuthenticateHeaderValue);                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleChallengeResponseAuthentication,The following statement contains a magic number: if (authHeader == null)              {                  context.Response.StatusCode = 401;                  context.Response.Headers.Add("WWW-Authenticate"' authType);                  return false;              }
Magic Number,WebServer,AuthenticationHelper,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\AuthenticationHelper.cs,HandleChallengeResponseAuthentication,The following statement contains a magic number: context.Response.StatusCode = 501;
Magic Number,WebServer,Redirect,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\Redirect.ashx.cs,ProcessRequest,The following statement contains a magic number: int statusCode = 302;
Magic Number,WebServer,Redirect,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\Redirect.ashx.cs,ProcessRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty(statusCodeString))              {                  try                  {                      statusCode = int.Parse(statusCodeString);                      if (statusCode < 300 || statusCode > 307)                      {                          context.Response.StatusCode = 500;                          context.Response.StatusDescription = "Invalid redirect statuscode: " + statusCodeString;                          return;                      }                  }                  catch (Exception)                  {                      context.Response.StatusCode = 500;                      context.Response.StatusDescription = "Error parsing statuscode: " + statusCodeString;                      return;                  }              }
Magic Number,WebServer,Redirect,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\Redirect.ashx.cs,ProcessRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty(statusCodeString))              {                  try                  {                      statusCode = int.Parse(statusCodeString);                      if (statusCode < 300 || statusCode > 307)                      {                          context.Response.StatusCode = 500;                          context.Response.StatusDescription = "Invalid redirect statuscode: " + statusCodeString;                          return;                      }                  }                  catch (Exception)                  {                      context.Response.StatusCode = 500;                      context.Response.StatusDescription = "Error parsing statuscode: " + statusCodeString;                      return;                  }              }
Magic Number,WebServer,Redirect,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\Redirect.ashx.cs,ProcessRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty(statusCodeString))              {                  try                  {                      statusCode = int.Parse(statusCodeString);                      if (statusCode < 300 || statusCode > 307)                      {                          context.Response.StatusCode = 500;                          context.Response.StatusDescription = "Invalid redirect statuscode: " + statusCodeString;                          return;                      }                  }                  catch (Exception)                  {                      context.Response.StatusCode = 500;                      context.Response.StatusDescription = "Error parsing statuscode: " + statusCodeString;                      return;                  }              }
Magic Number,WebServer,Redirect,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\Redirect.ashx.cs,ProcessRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty(statusCodeString))              {                  try                  {                      statusCode = int.Parse(statusCodeString);                      if (statusCode < 300 || statusCode > 307)                      {                          context.Response.StatusCode = 500;                          context.Response.StatusDescription = "Invalid redirect statuscode: " + statusCodeString;                          return;                      }                  }                  catch (Exception)                  {                      context.Response.StatusCode = 500;                      context.Response.StatusDescription = "Error parsing statuscode: " + statusCodeString;                      return;                  }              }
Magic Number,WebServer,Redirect,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\Redirect.ashx.cs,ProcessRequest,The following statement contains a magic number: if (string.IsNullOrEmpty(redirectUri))              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Missing redirection uri";                  return;              }
Magic Number,WebServer,Redirect,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\Redirect.ashx.cs,ProcessRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty(hopsString))              {                  try                  {                      hops = int.Parse(hopsString);                  }                  catch (Exception)                  {                      context.Response.StatusCode = 500;                      context.Response.StatusDescription = "Error parsing hops: " + hopsString;                      return;                  }              }
Magic Number,WebServer,StatusCode,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\StatusCode.ashx.cs,ProcessRequest,The following statement contains a magic number: try              {                  int statusCode = int.Parse(statusCodeString);                  context.Response.StatusCode = statusCode;                  if (statusDescription != null)                  {                      context.Response.StatusDescription = statusDescription;                  }              }              catch (Exception)              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Error parsing statuscode: " + statusCodeString;              }
Magic Number,WebServer,VerifyUpload,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\VerifyUpload.ashx.cs,ProcessRequest,The following statement contains a magic number: if (string.IsNullOrEmpty(expectedHash))              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Missing 'Content-MD5' request header";                  return;              }
Magic Number,WebServer,VerifyUpload,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\VerifyUpload.ashx.cs,ProcessRequest,The following statement contains a magic number: if (expectedHash == actualHash)              {                  context.Response.StatusCode = 200;              }              else              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Request body not verfied";              }
Magic Number,WebServer,VerifyUpload,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\VerifyUpload.ashx.cs,ProcessRequest,The following statement contains a magic number: if (expectedHash == actualHash)              {                  context.Response.StatusCode = 200;              }              else              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = "Request body not verfied";              }
Magic Number,WebServer,VerifyUpload,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\VerifyUpload.ashx.cs,ReadAllRequestBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,WebServer,VerifyUpload,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\VerifyUpload.ashx.cs,ReadAllRequestBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,WebServer,EchoWebSocket,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\WebSocket\EchoWebSocket.ashx.cs,ProcessRequest,The following statement contains a magic number: if (context.Request.Url.Query.Contains("delay10sec"))              {                  Thread.Sleep(10000);              }
Magic Number,WebServer,EchoWebSocket,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\WebSocket\EchoWebSocket.ashx.cs,ProcessRequest,The following statement contains a magic number: try              {                  if (!context.IsWebSocketRequest)                  {                      context.Response.StatusCode = 200;                      context.Response.ContentType = "text/plain";                      context.Response.Write("Not a websocket request");                        return;                  }                    if (!string.IsNullOrEmpty(subProtocol))                  {                      var wsOptions = new AspNetWebSocketOptions();                      wsOptions.SubProtocol = subProtocol;                        context.AcceptWebSocketRequest(ProcessWebSocketRequest' wsOptions);                  }                  else                  {                      context.AcceptWebSocketRequest(ProcessWebSocketRequest);                  }              }              catch (Exception ex)              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = ex.Message;              }
Magic Number,WebServer,EchoWebSocket,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\WebSocket\EchoWebSocket.ashx.cs,ProcessRequest,The following statement contains a magic number: try              {                  if (!context.IsWebSocketRequest)                  {                      context.Response.StatusCode = 200;                      context.Response.ContentType = "text/plain";                      context.Response.Write("Not a websocket request");                        return;                  }                    if (!string.IsNullOrEmpty(subProtocol))                  {                      var wsOptions = new AspNetWebSocketOptions();                      wsOptions.SubProtocol = subProtocol;                        context.AcceptWebSocketRequest(ProcessWebSocketRequest' wsOptions);                  }                  else                  {                      context.AcceptWebSocketRequest(ProcessWebSocketRequest);                  }              }              catch (Exception ex)              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = ex.Message;              }
Magic Number,WebServer,EchoWebSocket,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\WebSocket\EchoWebSocket.ashx.cs,ProcessWebSocketRequest,The following statement contains a magic number: while (socket.State == WebSocketState.Open || socket.State == WebSocketState.CloseSent)              {                  var receiveResult = await socket.ReceiveAsync(new ArraySegment<byte>(receiveBuffer)' CancellationToken.None);                  if (receiveResult.MessageType == WebSocketMessageType.Close)                  {                      if (receiveResult.CloseStatus == WebSocketCloseStatus.Empty)                      {                          await socket.CloseAsync(WebSocketCloseStatus.Empty' null' CancellationToken.None);                      }                      else                      {                          await socket.CloseAsync(                              receiveResult.CloseStatus.GetValueOrDefault()'                              receiveResult.CloseStatusDescription'                              CancellationToken.None);                      }                        continue;                  }                    // Keep reading until we get an entire message.                  int offset = receiveResult.Count;                  while (receiveResult.EndOfMessage == false)                  {                      if (offset < MaxBufferSize)                      {                          receiveResult = await socket.ReceiveAsync(                              new ArraySegment<byte>(receiveBuffer' offset' MaxBufferSize - offset)'                              CancellationToken.None);                      }                      else                      {                          receiveResult = await socket.ReceiveAsync(                              new ArraySegment<byte>(throwAwayBuffer)'                              CancellationToken.None);                      }                        offset += receiveResult.Count;                  }                    // Close socket if the message was too big.                  if (offset > MaxBufferSize)                  {                      await socket.CloseAsync(                          WebSocketCloseStatus.MessageTooBig'                          String.Format("{0}: {1} > {2}"' WebSocketCloseStatus.MessageTooBig.ToString()' offset' MaxBufferSize)'                          CancellationToken.None);                        continue;                  }                    bool sendMessage = false;                  if (receiveResult.MessageType == WebSocketMessageType.Text)                  {                      string receivedMessage = Encoding.UTF8.GetString(receiveBuffer' 0' offset);                      if (receivedMessage == ".close")                      {                          await socket.CloseAsync(WebSocketCloseStatus.NormalClosure' receivedMessage' CancellationToken.None);                      }                      if (receivedMessage == ".shutdown")                      {                          await socket.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' receivedMessage' CancellationToken.None);                      }                      else if (receivedMessage == ".abort")                      {                          socket.Abort();                      }                      else if (receivedMessage == ".delay5sec")                      {                          await Task.Delay(5000);                      }                      else if (socket.State == WebSocketState.Open)                      {                          sendMessage = true;                      }                  }                  else                  {                      sendMessage = true;                  }                    if (sendMessage)                  {                      await socket.SendAsync(                              new ArraySegment<byte>(receiveBuffer' 0' offset)'                              receiveResult.MessageType'                              !_replyWithPartialMessages'                              CancellationToken.None);                  }              }
Magic Number,WebServer,EchoWebSocketHeaders,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\WebSocket\EchoWebSocketHeaders.ashx.cs,ProcessRequest,The following statement contains a magic number: try              {                  if (!context.IsWebSocketRequest)                  {                      context.Response.StatusCode = 200;                      context.Response.ContentType = "text/plain";                      context.Response.Write("Not a websocket request");                        return;                  }                    context.AcceptWebSocketRequest(ProcessWebSocketRequest);              }              catch (Exception ex)              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = ex.Message;              }
Magic Number,WebServer,EchoWebSocketHeaders,C:\selectedRepos\dotnet_corefx\src\Common\tests\System\Net\Prerequisites\Servers\CoreFxNetCloudService\WebServer\WebSocket\EchoWebSocketHeaders.ashx.cs,ProcessRequest,The following statement contains a magic number: try              {                  if (!context.IsWebSocketRequest)                  {                      context.Response.StatusCode = 200;                      context.Response.ContentType = "text/plain";                      context.Response.Write("Not a websocket request");                        return;                  }                    context.AcceptWebSocketRequest(ProcessWebSocketRequest);              }              catch (Exception ex)              {                  context.Response.StatusCode = 500;                  context.Response.StatusDescription = ex.Message;              }
