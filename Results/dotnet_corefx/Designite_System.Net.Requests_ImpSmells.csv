Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Net,HttpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs,SendRequest,The method has 106 lines of code.
Long Method,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The method has 101 lines of code.
Long Method,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,PipelineCallback,The method has 205 lines of code.
Long Method,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,BuildCommandsList,The method has 151 lines of code.
Long Method,System.Net,TimerThread,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\TimerThread.cs,ThreadProc,The method has 121 lines of code.
Long Method,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The method has 177 lines of code.
Complex Method,System.Net,WebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\WebRequest.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,GetResponse,Cyclomatic complexity of the method is 11
Complex Method,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,BeginGetResponse,Cyclomatic complexity of the method is 8
Complex Method,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,SubmitRequest,Cyclomatic complexity of the method is 8
Complex Method,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,AsyncRequestCallback,Cyclomatic complexity of the method is 9
Complex Method,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ContinueCommandPipeline,Cyclomatic complexity of the method is 11
Complex Method,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,Cyclomatic complexity of the method is 10
Complex Method,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,PipelineCallback,Cyclomatic complexity of the method is 23
Complex Method,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,BuildCommandsList,Cyclomatic complexity of the method is 22
Complex Method,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,QueueOrCreateDataConection,Cyclomatic complexity of the method is 10
Complex Method,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,Cyclomatic complexity of the method is 11
Complex Method,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,Cyclomatic complexity of the method is 9
Complex Method,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Format,Cyclomatic complexity of the method is 8
Complex Method,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,Cyclomatic complexity of the method is 9
Complex Method,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadSource,Cyclomatic complexity of the method is 9
Complex Method,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,CaptureOrComplete,Cyclomatic complexity of the method is 12
Long Parameter List,System.Net,WebFileStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,WebFileStream,The method has 5 parameters. Parameters: request' path' mode' access' sharing
Long Parameter List,System.Net,WebFileStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,WebFileStream,The method has 7 parameters. Parameters: request' path' mode' access' sharing' length' async
Long Parameter List,System.Net,WebFileStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,WebFileStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,RequestStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\RequestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' asyncCallback' asyncState
Long Parameter List,System.Net,FtpWebResponse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebResponse.cs,FtpWebResponse,The method has 9 parameters. Parameters: responseStream' contentLength' responseUri' statusCode' statusLine' lastModified' bannerMessage' welcomeMessage' exitMessage
Long Parameter List,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,QueueOrCreateDataConection,The method has 5 parameters. Parameters: entry' response' timeout' stream' isSocketReady
Long Parameter List,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetPathInfo,The method has 5 parameters. Parameters: pathOption' uri' path' directory' filename
Long Parameter List,System.Net,FtpDataStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpDataStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,FtpDataStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpDataStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,NetworkStreamWrapper,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetworkStreamWrapper.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,NetworkStreamWrapper,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetworkStreamWrapper.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Enter,The method has 5 parameters. Parameters: thisOrContextObject' arg0' arg1' arg2' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,DumpBuffer,The method has 5 parameters. Parameters: thisOrContextObject' buffer' offset' count' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,ContextAwareResult,The method has 5 parameters. Parameters: captureIdentity' forceCaptureContext' myObject' myState' myCallBack
Long Parameter List,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,ContextAwareResult,The method has 6 parameters. Parameters: captureIdentity' forceCaptureContext' threadSafeContextCopy' myObject' myState' myCallBack
Long Parameter List,System.Net,TlsStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\TlsStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,TlsStream,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\TlsStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Identifier,System.Net,FileWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,,The length of the parameter _blockReaderUntilRequestStreamDisposed is 38.
Long Identifier,System.Net,HttpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs,,The length of the parameter _defaultMaxResponseHeadersLength is 32.
Long Identifier,System.Net,SecurityProtocol,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SecurityProtocol.cs,,The length of the parameter SystemDefaultSecurityProtocols is 30.
Long Identifier,System.Net.Http,HttpHandlerDefaults,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Http\HttpHandlerDefaults.cs,,The length of the parameter DefaultMaxAutomaticRedirections is 31.
Long Identifier,System.Net.Http,HttpHandlerDefaults,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Http\HttpHandlerDefaults.cs,,The length of the parameter DefaultMaxConnectionsPerServer is 30.
Long Identifier,System.Net.Http,HttpHandlerDefaults,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Http\HttpHandlerDefaults.cs,,The length of the parameter DefaultMaxResponseHeadersLength is 31.
Long Identifier,System.Net.Http,HttpHandlerDefaults,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Http\HttpHandlerDefaults.cs,,The length of the parameter DefaultClientCertificateOption is 30.
Long Identifier,System.Net.Http,HttpHandlerDefaults,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Http\HttpHandlerDefaults.cs,,The length of the parameter DefaultCheckCertificateRevocationList is 37.
Long Statement,System.Net,WebFileStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,CheckAborted,The length of the statement  "                throw new WebException(SR.Format(SR.net_requestaborted' WebExceptionStatus.RequestCanceled)' WebExceptionStatus.RequestCanceled); " is 129.
Long Statement,System.Net,HttpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs,SendRequest,The length of the statement  "                    handler.ServerCertificateCustomValidationCallback = (message' cert' chain' errors) => localRcvc(this' cert' chain' errors); " is 123.
Long Statement,System.Net,HttpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs,AddRange,The length of the statement  "            if (!AddRange(rangeSpecifier' from.ToString(NumberFormatInfo.InvariantInfo)' to.ToString(NumberFormatInfo.InvariantInfo))) " is 122.
Long Statement,System.Net,HttpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs,AddRange,The length of the statement  "                if (String.Compare(curRange.Substring(0' curRange.IndexOf('='))' rangeSpecifier' StringComparison.OrdinalIgnoreCase) != 0) " is 122.
Long Statement,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,SetException,The length of the statement  "                    _exception = new WebException(SR.Format(SR.net_ftp_servererror' connection.StatusLine)' exception' WebExceptionStatus.ProtocolError' _ftpWebResponse); " is 150.
Long Statement,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,AsyncRequestCallback,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"stream:{stream} conn:{connection} exp:{exception} completedRequest:{completedRequest}"); " is 146.
Long Statement,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,EnsureFtpWebResponse,The length of the statement  "                                _ftpWebResponse = new FtpWebResponse(responseStream' contentLength' connection.ResponseUri' connection.StatusCode' connection.StatusLine' connection.LastModified' connection.BannerMessage' connection.WelcomeMessage' connection.ExitMessage); " is 240.
Long Statement,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,EnsureFtpWebResponse,The length of the statement  "                                _ftpWebResponse = new FtpWebResponse(responseStream' -1' _uri' FtpStatusCode.Undefined' null' DateTime.Now' null' null' null); " is 126.
Long Statement,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,EnsureFtpWebResponse,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Returns {_ftpWebResponse} with stream {_ftpWebResponse._responseStream}"); " is 132.
Long Statement,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The length of the statement  "                else // we did a Connection.BeginReceive.  Note that in this case' all bytes received are in the receive buffer (because bytes from " is 131.
Long Statement,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The length of the statement  "                    // If the response is complete' then determine how many characters are left over...these bytes need to be set into Buffer. " is 122.
Long Statement,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The length of the statement  "                // Now' in general' if the response is not complete' update the "valid through" length for the efficiency of checkValid' " is 120.
Long Statement,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The length of the statement  "                // Note that there may NOT be bytes in the beginning of the receive buffer (even if there were partial characters left over after the " is 133.
Long Statement,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The length of the statement  "            // Set the StatusDescription to the complete part of the response.  Note that the Buffer has already been taken care of above. " is 126.
Long Statement,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Received response: {responseString.Substring(0' completeLength - 2)}"); " is 129.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,PipelineCallback,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Command:{entry?.Command} Description:{response?.StatusDescription}"); " is 127.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,PipelineCallback,The length of the statement  "            if (entry.HasFlag(PipelineEntryFlags.CreateDataConnection) && (response.PositiveCompletion || response.PositiveIntermediate)) " is 125.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,BuildCommandsList,The length of the statement  "                // If SSL' always configure data channel encryption after authentication to maximum RFC compatibility.   The RFC allows for " is 123.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,BuildCommandsList,The length of the statement  "                // PBSZ/PROT commands to come either before or after the USER/PASS' but some servers require USER/PASS immediately after " is 120.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,BuildCommandsList,The length of the statement  "                    commandList.Add(new PipelineEntry(FormatFtpCommand("REST"' request.ContentOffset.ToString(CultureInfo.InvariantCulture)))); " is 123.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,QueueOrCreateDataConection,The length of the statement  "                return PipelineInstruction.Pause; //if we already started then this is re-entering into the callback where we proceed with the stream " is 133.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetPortCommandLine,The length of the statement  "                throw GenerateException(SR.net_ftp_protocolerror' WebExceptionStatus.ProtocolError' e); // could not open data connection " is 121.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,FormatFtpCommand,The length of the statement  "            StringBuilder stringBuilder = new StringBuilder(command.Length + ((parameter != null) ? parameter.Length : 0) + 3 /*size of ' ' \r\n*/); " is 136.
Long Statement,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The length of the statement  "                if (!(Char.IsDigit(responseString[0]) && Char.IsDigit(responseString[1]) && Char.IsDigit(responseString[2]) && (responseString[3] == ' ' || responseString[3] == '-'))) " is 167.
Long Statement,System.Net,TimerThread,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\TimerThread.cs,ThreadProc,The length of the statement  "                                // Copy all the new queues to the real queues.  Since only this thread modifies the real queues' it doesn't have to lock it. " is 124.
Long Statement,System.Net,TimerThread,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\TimerThread.cs,ThreadProc,The length of the statement  "                                for (LinkedListNode<WeakReference> node = s_queues.First; node != null; /* node = node.Next must be done in the body */) " is 120.
Long Statement,System.Net,TimerThread,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\TimerThread.cs,ThreadProc,The length of the statement  "                                if (NetEventSource.IsEnabled) NetEventSource.Info(null' $"Awoke' cause {(waitResult == WaitHandle.WaitTimeout ? "Timeout" : "Prod")}"); " is 135.
Long Statement,System.Net,TimerNode,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\TimerThread.cs,Fire,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"TimerThreadTimer#{StartTime}::Fire() Not firing ({StartTime} <= {nowMilliseconds} < {Expiration})"); " is 158.
Long Statement,System.Net,TimerNode,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\TimerThread.cs,Fire,The length of the statement  "                        if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"TimerThreadTimer#{StartTime}::Fire() Firing ({StartTime} <= {nowMilliseconds} >= " + Expiration + ")"); " is 161.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Enter,The length of the statement  "            if (IsEnabled) Log.Enter(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 134.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Exit,The length of the statement  "            if (IsEnabled) Log.Exit(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Info,The length of the statement  "            if (IsEnabled) Log.Info(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,DumpBuffer,The length of the statement  "                    Fail(thisOrContextObject' $"Invalid {nameof(DumpBuffer)} Args. Length={buffer.Length}' Offset={offset}' Count={count}"' memberName); " is 132.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is ValueType)' $"Should not be passing value type {arg?.GetType()} to logging without IsEnabled check"); " is 123.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is FormattableString)' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 124.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,DebugValidateArg,The length of the statement  "            Debug.Assert(IsEnabled || arg == null' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 121.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "Thread changed from User to System; user's thread shouldn't be hijacked."); " is 133.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "Thread changed from Async to Sync' may block an Async thread."); " is 122.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "Thread from a limited resource changed to Sync' may deadlock or bottleneck."); " is 136.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadSource,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "SetThreadSource must be called at the base of the stack' or the stack has been corrupted."); " is 150.
Long Statement,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,Complete,The length of the statement  "            // the completion for the CaptureOrComplete() call to avoid the context flow.  If not' we know CaptureOrComplete() has completed. " is 129.
Long Statement,System.Net.Cache,HttpRequestCachePolicy,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\Cache\HttpRequestCachePolicy.cs,ToString,The length of the statement  "                (CacheSyncDate == DateTime.MinValue ? string.Empty : " CacheSyncDate:" + CacheSyncDate.ToString(CultureInfo.CurrentCulture)); " is 125.
Long Statement,System.Threading.Tasks,TaskToApm,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Threading\Tasks\TaskToApm.cs,Begin,The length of the statement  "                asyncResult = task.AsyncState == state ? (IAsyncResult)task : new TaskWrapperAsyncResult(task' state' completedSynchronously: false); " is 133.
Complex Conditional,System.Net,FileWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,GetRequestStream,The conditional expression  "Timeout != Threading.Timeout.Infinite &&                  !result.IsCompleted &&                  (!result.AsyncWaitHandle.WaitOne(Timeout' false) || !result.IsCompleted)"  is complex.
Complex Conditional,System.Net,FileWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FileWebRequest.cs,GetResponse,The conditional expression  "Timeout != Threading.Timeout.Infinite &&                  !result.IsCompleted &&                  (!result.AsyncWaitHandle.WaitOne(Timeout' false) || !result.IsCompleted)"  is complex.
Complex Conditional,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,AttemptedRecovery,The conditional expression  "e is OutOfMemoryException                  || _onceFailed                  || _aborted                  || _timedOut                  || _connection == null                  || !_connection.RecoverableFailure"  is complex.
Complex Conditional,System.Net,FtpWebRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpWebRequest.cs,FinishRequestStage,The conditional expression  "_exception == null &&                          !_aborted &&                          prev != RequestStage.ReadReady &&                          _methodInfo.IsDownload &&                          !_ftpWebResponse.IsFromCache"  is complex.
Complex Conditional,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The conditional expression  "!(Char.IsDigit(responseString[0]) && Char.IsDigit(responseString[1]) && Char.IsDigit(responseString[2]) && (responseString[3] == ' ' || responseString[3] == '-'))"  is complex.
Complex Conditional,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The conditional expression  "(dateString[index] >= 'A' && dateString[index] <= 'Z') ||                           (dateString[index] >= 'a' && dateString[index] <= 'z')"  is complex.
Complex Conditional,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The conditional expression  "(i < 4) ||                  (day > 31) ||                  (hour > 23) ||                  (minute > 59) ||                  (second > 59)"  is complex.
Empty Catch Block,System.Net,WebResponse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\WebResponse.cs,Dispose,The method has an empty catch block.
Empty Catch Block,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,AbortConnect,The method has an empty catch block.
Empty Catch Block,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The method has an empty catch block.
Empty Catch Block,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The method has an empty catch block.
Empty Catch Block,System.Net,FtpDataStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpDataStream.cs,AsyncReadCallback,The method has an empty catch block.
Empty Catch Block,System.Net,LazyAsyncResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\LazyAsyncResult.cs,ProtectedInvokeCallback,The method has an empty catch block.
Empty Catch Block,System.Net,LazyAsyncResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\LazyAsyncResult.cs,WaitForCompletion,The method has an empty catch block.
Magic Number,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ContinueCommandPipeline,The following statement contains a magic number: while (_index < _commands.Length)              {                  if (_doSend)                  {                      if (_index < 0)                          throw new InternalException();                        byte[] sendBuffer = Encoding.GetBytes(_commands[_index].Command);                        if (NetEventSource.Log.IsEnabled())                      {                          string sendCommand = _commands[_index].Command.Substring(0' _commands[_index].Command.Length - 2);                          if (_commands[_index].HasFlag(PipelineEntryFlags.DontLogParameter))                          {                              int index = sendCommand.IndexOf(' ');                              if (index != -1)                                  sendCommand = sendCommand.Substring(0' index) + " ********";                          }                          if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Sending command {sendCommand}");                      }                        try                      {                          if (isAsync)                          {                              BeginWrite(sendBuffer' 0' sendBuffer.Length' s_writeCallbackDelegate' this);                          }                          else                          {                              Write(sendBuffer' 0' sendBuffer.Length);                          }                      }                      catch (IOException)                      {                          MarkAsRecoverableFailure();                          throw;                      }                      catch                      {                          throw;                      }                        if (isAsync)                      {                          return null;                      }                  }                    Stream stream = null;                  bool isReturn = PostSendCommandProcessing(ref stream);                  if (isReturn)                  {                      return stream;                  }              }
Magic Number,System.Net,CommandStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\CommandStream.cs,ReceiveCommandResponseCallback,The following statement contains a magic number: if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Received response: {responseString.Substring(0' completeLength - 2)}");
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,FormatAddress,The following statement contains a magic number: StringBuilder sb = new StringBuilder(32);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,FormatAddress,The following statement contains a magic number: sb.Append(Port / 256);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,FormatAddress,The following statement contains a magic number: sb.Append(Port % 256);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,FormatAddressV6,The following statement contains a magic number: StringBuilder sb = new StringBuilder(43);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetContentLengthFrom213Response,The following statement contains a magic number: if (parsedList.Length < 2)                  throw new FormatException(SR.Format(SR.net_ftp_response_invalid_format' responseString));
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: if (parsedList.Length < 2)              {                  return dateTime;              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: if (dateTimeLine.Length < 14)              {                  return dateTime;              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int year = Convert.ToInt32(dateTimeLine.Substring(0' 4)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int month = Convert.ToInt16(dateTimeLine.Substring(4' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int month = Convert.ToInt16(dateTimeLine.Substring(4' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int day = Convert.ToInt16(dateTimeLine.Substring(6' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int day = Convert.ToInt16(dateTimeLine.Substring(6' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int hour = Convert.ToInt16(dateTimeLine.Substring(8' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int hour = Convert.ToInt16(dateTimeLine.Substring(8' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int minute = Convert.ToInt16(dateTimeLine.Substring(10' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int minute = Convert.ToInt16(dateTimeLine.Substring(10' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int second = Convert.ToInt16(dateTimeLine.Substring(12' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: int second = Convert.ToInt16(dateTimeLine.Substring(12' 2)' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: if (parsedList.Length > 2)              {                  millisecond = Convert.ToInt16(parsedList[2]' NumberFormatInfo.InvariantInfo);              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetLastModifiedFrom213Response,The following statement contains a magic number: if (parsedList.Length > 2)              {                  millisecond = Convert.ToInt16(parsedList[2]' NumberFormatInfo.InvariantInfo);              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,TryUpdateResponseUri,The following statement contains a magic number: start += 4;
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetPortV4,The following statement contains a magic number: if (parsedList.Length <= 7)              {                  throw new FormatException(SR.Format(SR.net_ftp_response_invalid_format' responseString));              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetPortV4,The following statement contains a magic number: port = port |                     (Convert.ToByte(parsedList[index--]' NumberFormatInfo.InvariantInfo) << 8);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetPortV6,The following statement contains a magic number: if (parsedList.Length < 4)                  throw new FormatException(SR.Format(SR.net_ftp_response_invalid_format' responseString));
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,GetPortV6,The following statement contains a magic number: return Convert.ToInt32(parsedList[3]' NumberFormatInfo.InvariantInfo);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,FormatFtpCommand,The following statement contains a magic number: StringBuilder stringBuilder = new StringBuilder(command.Length + ((parameter != null) ? parameter.Length : 0) + 3 /*size of ' ' \r\n*/);
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: if (response.StatusBuffer.Length < 4)              {                  return true;              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: if (response.Status == ResponseDescription.NoStatus)              {                  // If the response does not start with three digits' then it is not a valid response from an FTP server.                  if (!(Char.IsDigit(responseString[0]) && Char.IsDigit(responseString[1]) && Char.IsDigit(responseString[2]) && (responseString[3] == ' ' || responseString[3] == '-')))                  {                      return false;                  }                  else                  {                      response.StatusCodeString = responseString.Substring(0' 3);                      response.Status = Convert.ToInt16(response.StatusCodeString' NumberFormatInfo.InvariantInfo);                  }                    // IF a hyphen follows the status code on the first line of the response' then we have a multiline response coming.                  if (responseString[3] == '-')                  {                      response.Multiline = true;                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: if (response.Status == ResponseDescription.NoStatus)              {                  // If the response does not start with three digits' then it is not a valid response from an FTP server.                  if (!(Char.IsDigit(responseString[0]) && Char.IsDigit(responseString[1]) && Char.IsDigit(responseString[2]) && (responseString[3] == ' ' || responseString[3] == '-')))                  {                      return false;                  }                  else                  {                      response.StatusCodeString = responseString.Substring(0' 3);                      response.Status = Convert.ToInt16(response.StatusCodeString' NumberFormatInfo.InvariantInfo);                  }                    // IF a hyphen follows the status code on the first line of the response' then we have a multiline response coming.                  if (responseString[3] == '-')                  {                      response.Multiline = true;                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: if (response.Status == ResponseDescription.NoStatus)              {                  // If the response does not start with three digits' then it is not a valid response from an FTP server.                  if (!(Char.IsDigit(responseString[0]) && Char.IsDigit(responseString[1]) && Char.IsDigit(responseString[2]) && (responseString[3] == ' ' || responseString[3] == '-')))                  {                      return false;                  }                  else                  {                      response.StatusCodeString = responseString.Substring(0' 3);                      response.Status = Convert.ToInt16(response.StatusCodeString' NumberFormatInfo.InvariantInfo);                  }                    // IF a hyphen follows the status code on the first line of the response' then we have a multiline response coming.                  if (responseString[3] == '-')                  {                      response.Multiline = true;                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: if (response.Status == ResponseDescription.NoStatus)              {                  // If the response does not start with three digits' then it is not a valid response from an FTP server.                  if (!(Char.IsDigit(responseString[0]) && Char.IsDigit(responseString[1]) && Char.IsDigit(responseString[2]) && (responseString[3] == ' ' || responseString[3] == '-')))                  {                      return false;                  }                  else                  {                      response.StatusCodeString = responseString.Substring(0' 3);                      response.Status = Convert.ToInt16(response.StatusCodeString' NumberFormatInfo.InvariantInfo);                  }                    // IF a hyphen follows the status code on the first line of the response' then we have a multiline response coming.                  if (responseString[3] == '-')                  {                      response.Multiline = true;                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: if (response.Status == ResponseDescription.NoStatus)              {                  // If the response does not start with three digits' then it is not a valid response from an FTP server.                  if (!(Char.IsDigit(responseString[0]) && Char.IsDigit(responseString[1]) && Char.IsDigit(responseString[2]) && (responseString[3] == ' ' || responseString[3] == '-')))                  {                      return false;                  }                  else                  {                      response.StatusCodeString = responseString.Substring(0' 3);                      response.Status = Convert.ToInt16(response.StatusCodeString' NumberFormatInfo.InvariantInfo);                  }                    // IF a hyphen follows the status code on the first line of the response' then we have a multiline response coming.                  if (responseString[3] == '-')                  {                      response.Multiline = true;                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: while ((index = responseString.IndexOf("\r\n"' validThrough)) != -1)  // gets the end line.              {                  int lineStart = validThrough;                  validThrough = index + 2;  // validThrough now marks the end of the line being examined.                  if (!response.Multiline)                  {                      completeLength = validThrough;                      return true;                  }                    if (responseString.Length > lineStart + 4)                  {                      // If the first three characters of the response line currently being examined                      // match the status code' then if they are followed by a space' then we                      // have reached the end of the reply.                      if (responseString.Substring(lineStart' 3) == response.StatusCodeString)                      {                          if (responseString[lineStart + 3] == ' ')                          {                              completeLength = validThrough;                              return true;                          }                      }                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: while ((index = responseString.IndexOf("\r\n"' validThrough)) != -1)  // gets the end line.              {                  int lineStart = validThrough;                  validThrough = index + 2;  // validThrough now marks the end of the line being examined.                  if (!response.Multiline)                  {                      completeLength = validThrough;                      return true;                  }                    if (responseString.Length > lineStart + 4)                  {                      // If the first three characters of the response line currently being examined                      // match the status code' then if they are followed by a space' then we                      // have reached the end of the reply.                      if (responseString.Substring(lineStart' 3) == response.StatusCodeString)                      {                          if (responseString[lineStart + 3] == ' ')                          {                              completeLength = validThrough;                              return true;                          }                      }                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: while ((index = responseString.IndexOf("\r\n"' validThrough)) != -1)  // gets the end line.              {                  int lineStart = validThrough;                  validThrough = index + 2;  // validThrough now marks the end of the line being examined.                  if (!response.Multiline)                  {                      completeLength = validThrough;                      return true;                  }                    if (responseString.Length > lineStart + 4)                  {                      // If the first three characters of the response line currently being examined                      // match the status code' then if they are followed by a space' then we                      // have reached the end of the reply.                      if (responseString.Substring(lineStart' 3) == response.StatusCodeString)                      {                          if (responseString[lineStart + 3] == ' ')                          {                              completeLength = validThrough;                              return true;                          }                      }                  }              }
Magic Number,System.Net,FtpControlStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\FtpControlStream.cs,CheckValid,The following statement contains a magic number: while ((index = responseString.IndexOf("\r\n"' validThrough)) != -1)  // gets the end line.              {                  int lineStart = validThrough;                  validThrough = index + 2;  // validThrough now marks the end of the line being examined.                  if (!response.Multiline)                  {                      completeLength = validThrough;                      return true;                  }                    if (responseString.Length > lineStart + 4)                  {                      // If the first three characters of the response line currently being examined                      // match the status code' then if they are followed by a space' then we                      // have reached the end of the reply.                      if (responseString.Substring(lineStart' 3) == response.StatusCodeString)                      {                          if (responseString[lineStart + 3] == ' ')                          {                              completeLength = validThrough;                              return true;                          }                      }                  }              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following statement contains a magic number: switch (char.ToUpper(day[index]))              {                  case 'A':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'P':                              return DATE_TOKEN_APRIL;                          case 'U':                              return DATE_TOKEN_AUGUST;                      }                      return DATE_TOKEN_ERROR;                    case 'D':                      return DATE_TOKEN_DECEMBER;                    case 'F':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'R':                              return DATE_TOKEN_FRIDAY;                          case 'E':                              return DATE_TOKEN_FEBRUARY;                      }                      return DATE_TOKEN_ERROR;                    case 'G':                      return DATE_TOKEN_GMT;                    case 'M':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'O':                              return DATE_TOKEN_MONDAY;                          case 'A':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'R':                                      return DATE_TOKEN_MARCH;                                  case 'Y':                                      return DATE_TOKEN_MAY;                              }                                // fall through to error                              break;                      }                      return DATE_TOKEN_ERROR;                    case 'N':                      return DATE_TOKEN_NOVEMBER;                    case 'J':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_JANUARY;                            case 'U':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'N':                                      return DATE_TOKEN_JUNE;                                  case 'L':                                      return DATE_TOKEN_JULY;                              }                                // fall through to error                              break;                      }                      return DATE_TOKEN_ERROR;                    case 'O':                      return DATE_TOKEN_OCTOBER;                    case 'S':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_SATURDAY;                          case 'U':                              return DATE_TOKEN_SUNDAY;                          case 'E':                              return DATE_TOKEN_SEPTEMBER;                      }                      return DATE_TOKEN_ERROR;                    case 'T':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'U':                              return DATE_TOKEN_TUESDAY;                          case 'H':                              return DATE_TOKEN_THURSDAY;                      }                      return DATE_TOKEN_ERROR;                    case 'U':                      return DATE_TOKEN_GMT;                    case 'W':                      return DATE_TOKEN_WEDNESDAY;              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following statement contains a magic number: switch (char.ToUpper(day[index]))              {                  case 'A':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'P':                              return DATE_TOKEN_APRIL;                          case 'U':                              return DATE_TOKEN_AUGUST;                      }                      return DATE_TOKEN_ERROR;                    case 'D':                      return DATE_TOKEN_DECEMBER;                    case 'F':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'R':                              return DATE_TOKEN_FRIDAY;                          case 'E':                              return DATE_TOKEN_FEBRUARY;                      }                      return DATE_TOKEN_ERROR;                    case 'G':                      return DATE_TOKEN_GMT;                    case 'M':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'O':                              return DATE_TOKEN_MONDAY;                          case 'A':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'R':                                      return DATE_TOKEN_MARCH;                                  case 'Y':                                      return DATE_TOKEN_MAY;                              }                                // fall through to error                              break;                      }                      return DATE_TOKEN_ERROR;                    case 'N':                      return DATE_TOKEN_NOVEMBER;                    case 'J':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_JANUARY;                            case 'U':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'N':                                      return DATE_TOKEN_JUNE;                                  case 'L':                                      return DATE_TOKEN_JULY;                              }                                // fall through to error                              break;                      }                      return DATE_TOKEN_ERROR;                    case 'O':                      return DATE_TOKEN_OCTOBER;                    case 'S':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_SATURDAY;                          case 'U':                              return DATE_TOKEN_SUNDAY;                          case 'E':                              return DATE_TOKEN_SEPTEMBER;                      }                      return DATE_TOKEN_ERROR;                    case 'T':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'U':                              return DATE_TOKEN_TUESDAY;                          case 'H':                              return DATE_TOKEN_THURSDAY;                      }                      return DATE_TOKEN_ERROR;                    case 'U':                      return DATE_TOKEN_GMT;                    case 'W':                      return DATE_TOKEN_WEDNESDAY;              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if (year < 100)              {                  year += ((year < 80) ? 2000 : 1900);              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if (year < 100)              {                  year += ((year < 80) ? 2000 : 1900);              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if (year < 100)              {                  year += ((year < 80) ? 2000 : 1900);              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if (year < 100)              {                  year += ((year < 80) ? 2000 : 1900);              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if ((i < 4) ||                  (day > 31) ||                  (hour > 23) ||                  (minute > 59) ||                  (second > 59))              {                  return false;              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if ((i < 4) ||                  (day > 31) ||                  (hour > 23) ||                  (minute > 59) ||                  (second > 59))              {                  return false;              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if ((i < 4) ||                  (day > 31) ||                  (hour > 23) ||                  (minute > 59) ||                  (second > 59))              {                  return false;              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if ((i < 4) ||                  (day > 31) ||                  (hour > 23) ||                  (minute > 59) ||                  (second > 59))              {                  return false;              }
Magic Number,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,ParseHttpDate,The following statement contains a magic number: if ((i < 4) ||                  (day > 31) ||                  (hour > 23) ||                  (minute > 59) ||                  (second > 59))              {                  return false;              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetEventSource.Requests.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,HttpValidationHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpValidationHelpers.cs,CheckBadHeaderValueChars,The following statement contains a magic number: for (int i = 0; i < value.Length; ++i)              {                  char c = (char)(0x000000ff & (uint)value[i]);                  switch (crlf)                  {                      case 0:                          if (c == '\r')                          {                              crlf = 1;                          }                          else if (c == '\n')                          {                              // Technically this is bad HTTP' but we want to be permissive in what we accept.                              // It is important to note that it would be a breaking change to reject this.                              crlf = 2;                          }                          else if (c == 127 || (c < ' ' && c != '\t'))                          {                              throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                          }                          break;                        case 1:                          if (c == '\n')                          {                              crlf = 2;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidCRLFChars' nameof(value));                        case 2:                          if (c == ' ' || c == '\t')                          {                              crlf = 0;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                  }              }
Magic Number,System.Net,HttpValidationHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpValidationHelpers.cs,CheckBadHeaderValueChars,The following statement contains a magic number: for (int i = 0; i < value.Length; ++i)              {                  char c = (char)(0x000000ff & (uint)value[i]);                  switch (crlf)                  {                      case 0:                          if (c == '\r')                          {                              crlf = 1;                          }                          else if (c == '\n')                          {                              // Technically this is bad HTTP' but we want to be permissive in what we accept.                              // It is important to note that it would be a breaking change to reject this.                              crlf = 2;                          }                          else if (c == 127 || (c < ' ' && c != '\t'))                          {                              throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                          }                          break;                        case 1:                          if (c == '\n')                          {                              crlf = 2;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidCRLFChars' nameof(value));                        case 2:                          if (c == ' ' || c == '\t')                          {                              crlf = 0;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                  }              }
Magic Number,System.Net,HttpValidationHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpValidationHelpers.cs,CheckBadHeaderValueChars,The following statement contains a magic number: for (int i = 0; i < value.Length; ++i)              {                  char c = (char)(0x000000ff & (uint)value[i]);                  switch (crlf)                  {                      case 0:                          if (c == '\r')                          {                              crlf = 1;                          }                          else if (c == '\n')                          {                              // Technically this is bad HTTP' but we want to be permissive in what we accept.                              // It is important to note that it would be a breaking change to reject this.                              crlf = 2;                          }                          else if (c == 127 || (c < ' ' && c != '\t'))                          {                              throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                          }                          break;                        case 1:                          if (c == '\n')                          {                              crlf = 2;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidCRLFChars' nameof(value));                        case 2:                          if (c == ' ' || c == '\t')                          {                              crlf = 0;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                  }              }
Magic Number,System.Net,HttpValidationHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpValidationHelpers.cs,CheckBadHeaderValueChars,The following statement contains a magic number: for (int i = 0; i < value.Length; ++i)              {                  char c = (char)(0x000000ff & (uint)value[i]);                  switch (crlf)                  {                      case 0:                          if (c == '\r')                          {                              crlf = 1;                          }                          else if (c == '\n')                          {                              // Technically this is bad HTTP' but we want to be permissive in what we accept.                              // It is important to note that it would be a breaking change to reject this.                              crlf = 2;                          }                          else if (c == 127 || (c < ' ' && c != '\t'))                          {                              throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                          }                          break;                        case 1:                          if (c == '\n')                          {                              crlf = 2;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidCRLFChars' nameof(value));                        case 2:                          if (c == ' ' || c == '\t')                          {                              crlf = 0;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                  }              }
Missing Default,System.Net,NetRes,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\NetRes.cs,GetWebStatusCodeString,The following switch statement is missing a default case: switch (statusCode)              {                  case FtpStatusCode.ServiceNotAvailable:                      statusMessage = SR.net_ftpstatuscode_ServiceNotAvailable;                      break;                  case FtpStatusCode.CantOpenData:                      statusMessage = SR.net_ftpstatuscode_CantOpenData;                      break;                  case FtpStatusCode.ConnectionClosed:                      statusMessage = SR.net_ftpstatuscode_ConnectionClosed;                      break;                  case FtpStatusCode.ActionNotTakenFileUnavailableOrBusy:                      statusMessage = SR.net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy;                      break;                  case FtpStatusCode.ActionAbortedLocalProcessingError:                      statusMessage = SR.net_ftpstatuscode_ActionAbortedLocalProcessingError;                      break;                  case FtpStatusCode.ActionNotTakenInsufficientSpace:                      statusMessage = SR.net_ftpstatuscode_ActionNotTakenInsufficientSpace;                      break;                  case FtpStatusCode.CommandSyntaxError:                      statusMessage = SR.net_ftpstatuscode_CommandSyntaxError;                      break;                  case FtpStatusCode.ArgumentSyntaxError:                      statusMessage = SR.net_ftpstatuscode_ArgumentSyntaxError;                      break;                  case FtpStatusCode.CommandNotImplemented:                      statusMessage = SR.net_ftpstatuscode_CommandNotImplemented;                      break;                  case FtpStatusCode.BadCommandSequence:                      statusMessage = SR.net_ftpstatuscode_BadCommandSequence;                      break;                  case FtpStatusCode.NotLoggedIn:                      statusMessage = SR.net_ftpstatuscode_NotLoggedIn;                      break;                  case FtpStatusCode.AccountNeeded:                      statusMessage = SR.net_ftpstatuscode_AccountNeeded;                      break;                  case FtpStatusCode.ActionNotTakenFileUnavailable:                      statusMessage = SR.net_ftpstatuscode_ActionNotTakenFileUnavailable;                      break;                  case FtpStatusCode.ActionAbortedUnknownPageType:                      statusMessage = SR.net_ftpstatuscode_ActionAbortedUnknownPageType;                      break;                  case FtpStatusCode.FileActionAborted:                      statusMessage = SR.net_ftpstatuscode_FileActionAborted;                      break;                  case FtpStatusCode.ActionNotTakenFilenameNotAllowed:                      statusMessage = SR.net_ftpstatuscode_ActionNotTakenFilenameNotAllowed;                      break;              }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index]))              {                  case 'A':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'P':                              return DATE_TOKEN_APRIL;                          case 'U':                              return DATE_TOKEN_AUGUST;                      }                      return DATE_TOKEN_ERROR;                    case 'D':                      return DATE_TOKEN_DECEMBER;                    case 'F':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'R':                              return DATE_TOKEN_FRIDAY;                          case 'E':                              return DATE_TOKEN_FEBRUARY;                      }                      return DATE_TOKEN_ERROR;                    case 'G':                      return DATE_TOKEN_GMT;                    case 'M':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'O':                              return DATE_TOKEN_MONDAY;                          case 'A':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'R':                                      return DATE_TOKEN_MARCH;                                  case 'Y':                                      return DATE_TOKEN_MAY;                              }                                // fall through to error                              break;                      }                      return DATE_TOKEN_ERROR;                    case 'N':                      return DATE_TOKEN_NOVEMBER;                    case 'J':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_JANUARY;                            case 'U':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'N':                                      return DATE_TOKEN_JUNE;                                  case 'L':                                      return DATE_TOKEN_JULY;                              }                                // fall through to error                              break;                      }                      return DATE_TOKEN_ERROR;                    case 'O':                      return DATE_TOKEN_OCTOBER;                    case 'S':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_SATURDAY;                          case 'U':                              return DATE_TOKEN_SUNDAY;                          case 'E':                              return DATE_TOKEN_SEPTEMBER;                      }                      return DATE_TOKEN_ERROR;                    case 'T':                      switch (char.ToUpper(day[index + 1]))                      {                          case 'U':                              return DATE_TOKEN_TUESDAY;                          case 'H':                              return DATE_TOKEN_THURSDAY;                      }                      return DATE_TOKEN_ERROR;                    case 'U':                      return DATE_TOKEN_GMT;                    case 'W':                      return DATE_TOKEN_WEDNESDAY;              }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 1]))                      {                          case 'P':                              return DATE_TOKEN_APRIL;                          case 'U':                              return DATE_TOKEN_AUGUST;                      }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 1]))                      {                          case 'R':                              return DATE_TOKEN_FRIDAY;                          case 'E':                              return DATE_TOKEN_FEBRUARY;                      }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 1]))                      {                          case 'O':                              return DATE_TOKEN_MONDAY;                          case 'A':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'R':                                      return DATE_TOKEN_MARCH;                                  case 'Y':                                      return DATE_TOKEN_MAY;                              }                                // fall through to error                              break;                      }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 2]))                              {                                  case 'R':                                      return DATE_TOKEN_MARCH;                                  case 'Y':                                      return DATE_TOKEN_MAY;                              }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_JANUARY;                            case 'U':                              switch (char.ToUpper(day[index + 2]))                              {                                  case 'N':                                      return DATE_TOKEN_JUNE;                                  case 'L':                                      return DATE_TOKEN_JULY;                              }                                // fall through to error                              break;                      }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 2]))                              {                                  case 'N':                                      return DATE_TOKEN_JUNE;                                  case 'L':                                      return DATE_TOKEN_JULY;                              }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 1]))                      {                          case 'A':                              return DATE_TOKEN_SATURDAY;                          case 'U':                              return DATE_TOKEN_SUNDAY;                          case 'E':                              return DATE_TOKEN_SEPTEMBER;                      }
Missing Default,System.Net,HttpDateParse,C:\selectedRepos\dotnet_corefx\src\System.Net.Requests\src\System\Net\HttpDateParse.cs,MapDayMonthToDword,The following switch statement is missing a default case: switch (char.ToUpper(day[index + 1]))                      {                          case 'U':                              return DATE_TOKEN_TUESDAY;                          case 'H':                              return DATE_TOKEN_THURSDAY;                      }
Missing Default,System.Net,HttpValidationHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpValidationHelpers.cs,CheckBadHeaderValueChars,The following switch statement is missing a default case: switch (crlf)                  {                      case 0:                          if (c == '\r')                          {                              crlf = 1;                          }                          else if (c == '\n')                          {                              // Technically this is bad HTTP' but we want to be permissive in what we accept.                              // It is important to note that it would be a breaking change to reject this.                              crlf = 2;                          }                          else if (c == 127 || (c < ' ' && c != '\t'))                          {                              throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                          }                          break;                        case 1:                          if (c == '\n')                          {                              crlf = 2;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidCRLFChars' nameof(value));                        case 2:                          if (c == ' ' || c == '\t')                          {                              crlf = 0;                              break;                          }                          throw new ArgumentException(SR.net_WebHeaderInvalidControlChars' nameof(value));                  }
