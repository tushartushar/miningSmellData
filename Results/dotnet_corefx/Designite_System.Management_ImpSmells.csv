Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The method has 111 lines of code.
Long Method,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,Initialize,The method has 117 lines of code.
Long Method,System.Management,ManagementPath,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementPath.cs,SetNamespacePath,The method has 105 lines of code.
Long Method,System.Management,SelectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The method has 114 lines of code.
Long Method,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The method has 109 lines of code.
Long Method,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The method has 105 lines of code.
Long Method,System.Management,WmiNetUtilsHelper,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,WmiNetUtilsHelper,The method has 329 lines of code.
Long Method,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The method has 188 lines of code.
Long Method,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The method has 213 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The method has 192 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The method has 363 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessPropertyQualifiers,The method has 208 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePropertyHelperEnums,The method has 195 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The method has 450 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The method has 440 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCollectionClass,The method has 146 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ConvertCIMType,The method has 114 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCodeForRefAndDateTimeTypes,The method has 163 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The method has 350 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The method has 211 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The method has 249 lines of code.
Long Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The method has 253 lines of code.
Complex Method,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,Cyclomatic complexity of the method is 13
Complex Method,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,MapInParameters,Cyclomatic complexity of the method is 12
Complex Method,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,MapOutParameters,Cyclomatic complexity of the method is 11
Complex Method,System.Management,ManagementObjectEnumerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObjectCollection.cs,MoveNext,Cyclomatic complexity of the method is 8
Complex Method,System.Management,ManagementPath,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementPath.cs,SetNamespacePath,Cyclomatic complexity of the method is 16
Complex Method,System.Management,SelectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,Cyclomatic complexity of the method is 11
Complex Method,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,BuildQuery,Cyclomatic complexity of the method is 12
Complex Method,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,Cyclomatic complexity of the method is 12
Complex Method,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,BuildQuery,Cyclomatic complexity of the method is 9
Complex Method,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,Cyclomatic complexity of the method is 12
Complex Method,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,BuildQuery,Cyclomatic complexity of the method is 8
Complex Method,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,Cyclomatic complexity of the method is 15
Complex Method,System.Management,WmiNetUtilsHelper,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,WmiNetUtilsHelper,Cyclomatic complexity of the method is 54
Complex Method,System.Management,PropertyDataCollection,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\PropertySet.cs,CopyTo,Cyclomatic complexity of the method is 9
Complex Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessNamingCollisions,Cyclomatic complexity of the method is 14
Complex Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ResolveCollision,Cyclomatic complexity of the method is 8
Complex Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,Cyclomatic complexity of the method is 17
Complex Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePropertyHelperEnums,Cyclomatic complexity of the method is 19
Complex Method,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,Cyclomatic complexity of the method is 32
Long Parameter List,System.Management,ManagementClass,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementClass.cs,GetRelatedClasses,The method has 7 parameters. Parameters: relatedClass' relationshipClass' relationshipQualifier' relatedQualifier' relatedRole' thisRole' options
Long Parameter List,System.Management,ManagementClass,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementClass.cs,GetRelatedClasses,The method has 8 parameters. Parameters: watcher' relatedClass' relationshipClass' relationshipQualifier' relatedQualifier' relatedRole' thisRole' options
Long Parameter List,System.Management,ManagementClass,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementClass.cs,GetRelationshipClasses,The method has 5 parameters. Parameters: watcher' relationshipClass' relationshipQualifier' thisRole' options
Long Parameter List,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,GetRelated,The method has 8 parameters. Parameters: relatedClass' relationshipClass' relationshipQualifier' relatedQualifier' relatedRole' thisRole' classDefinitionsOnly' options
Long Parameter List,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,GetRelated,The method has 9 parameters. Parameters: watcher' relatedClass' relationshipClass' relationshipQualifier' relatedQualifier' relatedRole' thisRole' classDefinitionsOnly' options
Long Parameter List,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,GetRelationships,The method has 5 parameters. Parameters: relationshipClass' relationshipQualifier' thisRole' classDefinitionsOnly' options
Long Parameter List,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,GetRelationships,The method has 6 parameters. Parameters: watcher' relationshipClass' relationshipQualifier' thisRole' classDefinitionsOnly' options
Long Parameter List,System.Management,EnumerationOptions,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOptions.cs,EnumerationOptions,The method has 10 parameters. Parameters: context' timeout' blockSize' rewindable' returnImmediatley' useAmendedQualifiers' ensureLocatable' prototypeOnly' directRead' enumerateDeep
Long Parameter List,System.Management,ConnectionOptions,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOptions.cs,ConnectionOptions,The method has 9 parameters. Parameters: locale' username' password' authority' impersonation' authentication' enablePrivileges' context' timeout
Long Parameter List,System.Management,ConnectionOptions,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOptions.cs,ConnectionOptions,The method has 9 parameters. Parameters: locale' username' password' authority' impersonation' authentication' enablePrivileges' context' timeout
Long Parameter List,System.Management,ManagementQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseToken,The method has 5 parameters. Parameters: q' token' op' bTokenFound' tokenValue
Long Parameter List,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,RelatedObjectQuery,The method has 8 parameters. Parameters: sourceObject' relatedClass' relationshipClass' relatedQualifier' relationshipQualifier' relatedRole' thisRole' classDefinitionsOnly
Long Parameter List,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,RelatedObjectQuery,The method has 8 parameters. Parameters: isSchemaQuery' sourceObject' relatedClass' relationshipClass' relatedQualifier' relationshipQualifier' relatedRole' thisRole
Long Parameter List,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,RelationshipQuery,The method has 5 parameters. Parameters: sourceObject' relationshipClass' relationshipQualifier' thisRole' classDefinitionsOnly
Long Parameter List,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,RelationshipQuery,The method has 5 parameters. Parameters: isSchemaQuery' sourceObject' relationshipClass' relationshipQualifier' thisRole
Long Parameter List,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,WqlEventQuery,The method has 6 parameters. Parameters: eventClassName' withinInterval' condition' groupWithinInterval' groupByPropertyList' havingCondition
Long Parameter List,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,GetObject_,The method has 5 parameters. Parameters: strObjectPath' lFlags' pCtx' ppObject' ppCallResult
Long Parameter List,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecQuery_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' ppEnum
Long Parameter List,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecQueryAsync_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' pResponseHandler
Long Parameter List,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecNotificationQuery_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' ppEnum
Long Parameter List,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecNotificationQueryAsync_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' pResponseHandler
Long Parameter List,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecMethod_,The method has 7 parameters. Parameters: strObjectPath' strMethodName' lFlags' pCtx' pInParams' ppOutParams' ppCallResult
Long Parameter List,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecMethodAsync_,The method has 6 parameters. Parameters: strObjectPath' strMethodName' lFlags' pCtx' pInParams' pResponseHandler
Long Parameter List,System.Management,QualifierDataCollection,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\QualifierSet.cs,Add,The method has 6 parameters. Parameters: qualifierName' qualifierValue' isAmended' propagatesToInstance' propagatesToSubclass' isOverridable
Long Parameter List,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,GetWmiEventSink,The method has 5 parameters. Parameters: watcher' context' scope' path' className
Long Parameter List,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,WmiEventSink,The method has 5 parameters. Parameters: watcher' context' scope' path' className
Long Parameter List,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePublicReadOnlyProperty,The method has 6 parameters. Parameters: propName' propType' propValue' isLiteral' isBrowsable' Comment
Long Parameter List,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePublicProperty,The method has 6 parameters. Parameters: propName' propType' Value' isBrowsable' Comment' isStatic
Long Parameter List,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessPropertyQualifiers,The method has 6 parameters. Parameters: prop' bRead' bWrite' bStatic' bDynamicClass' nullable
Long Parameter List,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePrivateMember,The method has 5 parameters. Parameters: memberName' MemberType' initExpression' isStatic' Comment
Long Parameter List,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCodeForRefAndDateTimeTypes,The method has 6 parameters. Parameters: prop' bArray' statColl' strType' varToAssign' bIsValueProprequired
Long Parameter List,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddPropertySet,The method has 5 parameters. Parameters: prop' bArray' statColl' strType' varValue
Long Parameter List,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,DateTimeConversionFunctionHelper,The method has 7 parameters. Parameters: cmmdt' toCompare' tempVarName' dmtfVarName' toAssign' SubStringParam1' SubStringParam2
Long Parameter List,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Get_,The method has 5 parameters. Parameters: wszName' lFlags' pVal' pType' plFlavor
Long Parameter List,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Next_,The method has 5 parameters. Parameters: lFlags' strName' pVal' pType' plFlavor
Long Parameter List,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,CoMarshalInterface,The method has 6 parameters. Parameters: pStm' riid' Unk' dwDestContext' pvDestContext' mshlflags
Long Parameter List,System.Management,IWbemClassObject_DoNotMarshal,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Get_,The method has 5 parameters. Parameters: wszName' lFlags' pVal' pType' plFlavor
Long Parameter List,System.Management,IWbemClassObject_DoNotMarshal,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Next_,The method has 5 parameters. Parameters: lFlags' strName' pVal' pType' plFlavor
Long Parameter List,System.Management,IWbemLocator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ConnectServer_,The method has 8 parameters. Parameters: strNetworkResource' strUser' strPassword' strLocale' lSecurityFlags' strAuthority' pCtx' ppNamespace
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,OpenNamespace_,The method has 5 parameters. Parameters: strNamespace' lFlags' pCtx' ppWorkingNamespace' ppCallResult
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetObject_,The method has 5 parameters. Parameters: strObjectPath' lFlags' pCtx' ppObject' ppCallResult
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecQuery_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' ppEnum
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecQueryAsync_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' pResponseHandler
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecNotificationQuery_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' ppEnum
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecNotificationQueryAsync_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' pResponseHandler
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecMethod_,The method has 7 parameters. Parameters: strObjectPath' strMethodName' lFlags' pCtx' pInParams' ppOutParams' ppCallResult
Long Parameter List,System.Management,IWbemServices,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecMethodAsync_,The method has 6 parameters. Parameters: strObjectPath' strMethodName' lFlags' pCtx' pInParams' pResponseHandler
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,OpenNamespace_,The method has 5 parameters. Parameters: strNamespace' lFlags' pCtx' ppWorkingNamespace' ppCallResult
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetObject_,The method has 5 parameters. Parameters: strObjectPath' lFlags' pCtx' ppObject' ppCallResult
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecQuery_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' ppEnum
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecQueryAsync_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' pResponseHandler
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecNotificationQuery_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' ppEnum
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecNotificationQueryAsync_,The method has 5 parameters. Parameters: strQueryLanguage' strQuery' lFlags' pCtx' pResponseHandler
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecMethod_,The method has 7 parameters. Parameters: strObjectPath' strMethodName' lFlags' pCtx' pInParams' ppOutParams' ppCallResult
Long Parameter List,System.Management,IWbemServices_Old,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,ExecMethodAsync_,The method has 6 parameters. Parameters: strObjectPath' strMethodName' lFlags' pCtx' pInParams' pResponseHandler
Long Parameter List,System.Management,IWbemObjectTextSrc,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetText_,The method has 5 parameters. Parameters: lFlags' pObj' uObjTextFormat' pCtx' strText
Long Parameter List,System.Management,IWbemObjectTextSrc,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,CreateFromText_,The method has 5 parameters. Parameters: lFlags' strText' uObjTextFormat' pCtx' pNewObj
Long Parameter List,System.Management,IWbemObjectAccess,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Get_,The method has 5 parameters. Parameters: wszName' lFlags' pVal' pType' plFlavor
Long Parameter List,System.Management,IWbemObjectAccess,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Next_,The method has 5 parameters. Parameters: lFlags' strName' pVal' pType' plFlavor
Long Parameter List,System.Management,IWbemPropertyProvider,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetProperty_,The method has 6 parameters. Parameters: lFlags' strLocale' strClassMapping' strInstMapping' strPropMapping' pvValue
Long Parameter List,System.Management,IWbemPropertyProvider,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,PutProperty_,The method has 6 parameters. Parameters: lFlags' strLocale' strClassMapping' strInstMapping' strPropMapping' pvValue
Long Parameter List,System.Management,IWbemProviderInit,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Initialize_,The method has 7 parameters. Parameters: wszUser' lFlags' wszNamespace' wszLocale' pNamespace' pCtx' pInitSink
Long Parameter List,System.Management,IWbemDecoupledRegistrar,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Register_,The method has 7 parameters. Parameters: flags' context' user' locale' scope' registration' unknown
Long Parameter List,System.Management,IWbemPathKeyList,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetKey_,The method has 7 parameters. Parameters: uKeyIx' uFlags' puNameBufSize' pszKeyName' puKeyValBufSize' pKeyVal' puApparentCimType
Long Parameter List,System.Management,IWbemPathKeyList,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetKey2_,The method has 6 parameters. Parameters: uKeyIx' uFlags' puNameBufSize' pszKeyName' pKeyValue' puApparentCimType
Long Identifier,System.Management,SecuredIEnumWbemClassObjectHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,,The length of the parameter pEnumWbemClassObjectsecurityHelper is 34.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCollectionClass,The length of the parameter strManagementObjectCollectionType is 33.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateEnumeratorClass,The length of the parameter strManagementObjectEnumeratorType is 33.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateEnumeratorClass,The length of the parameter strManagementObjectCollectionType is 33.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,,The length of the parameter bTimeSpanConversionFunctionsAdded is 33.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,,The length of the parameter IDS_CommentDateConversionFunction is 33.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,,The length of the parameter IDS_COMMENT_PROP_TYPECONVERTER is 30.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,,The length of the parameter IDS_CommentSystemPropertiesClass is 32.
Long Identifier,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,,The length of the parameter IDS_CommentEnumeratorImplementation is 35.
Long Identifier,System.Management,ThreadDispatch,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,,The length of the parameter threadWorkerMethodWithReturnAndParam is 36.
Long Statement,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The length of the statement  "                    ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000); " is 164.
Long Statement,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The length of the statement  "                ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000); " is 164.
Long Statement,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The length of the statement  "            string dmtftimespan = timespan.Days.ToString((IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32))).PadLeft(8''0'); " is 139.
Long Statement,System.Management,ManagementEventWatcher,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementEventWatcher.cs,WaitForNextEvent,The length of the statement  "                            status = scope.GetSecuredIEnumWbemClassObjectHandler(enumWbem).Next_(timeout' (uint)options.BlockSize' tempArray' ref cachedCount); " is 131.
Long Statement,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,Put,The length of the statement  "                    o.Context' scope.Path.GetNamespacePath((int)tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY)' ClassName); " is 120.
Long Statement,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,Initialize,The length of the statement  "                            status = scope.GetSecuredIWbemServicesHandler( wbemServices ).GetObject_(objectPath' options.Flags' options.GetContext()' ref tempObj' IntPtr.Zero); " is 148.
Long Statement,System.Management,ManagementObjectEnumerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObjectCollection.cs,MoveNext,The length of the statement  "                    int status = collectionObject.scope.GetSecuredIEnumWbemClassObjectHandler(enumWbem ).Next_(timeout' (uint)collectionObject.options.BlockSize'tempArray' ref cachedCount); " is 169.
Long Statement,System.Management,ManagementObjectSearcher,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObjectSearcher.cs,Get,The length of the statement  "                        status = scope.GetSecuredIWbemServicesHandler(scope.GetIWbemServices() ).CreateClassEnum_(((SelectQuery)query).ClassName' " is 121.
Long Statement,System.Management,SelectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                if ((q.Length >= keyword.Length) && (String.Compare(q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase) == 0)) //select clause found " is 150.
Long Statement,System.Management,SelectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                if ((q.Length >= keyword.Length) && (String.Compare(q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase) == 0)) //from clause found " is 148.
Long Statement,System.Management,SelectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                if ((q.Length >= keyword.Length) && (String.Compare(q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase) == 0)) //where clause exists " is 150.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    if ((q.Length >= tokenResultClass.Length) && (0 == String.Compare (q' 0' tokenResultClass' 0' tokenResultClass.Length' StringComparison.OrdinalIgnoreCase))) " is 156.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenAssocClass.Length) && (0 == String.Compare (q' 0' tokenAssocClass' 0' tokenAssocClass.Length' StringComparison.OrdinalIgnoreCase))) " is 158.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenResultRole.Length) && (0 == String.Compare (q' 0' tokenResultRole' 0' tokenResultRole.Length' StringComparison.OrdinalIgnoreCase))) " is 158.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenRole.Length) && (0 == String.Compare (q' 0' tokenRole' 0' tokenRole.Length' StringComparison.OrdinalIgnoreCase))) " is 140.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenRequiredQualifier.Length) && (0 == String.Compare (q' 0' tokenRequiredQualifier' 0' tokenRequiredQualifier.Length' StringComparison.OrdinalIgnoreCase))) " is 179.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenRequiredAssocQualifier.Length) && (0 == String.Compare (q' 0' tokenRequiredAssocQualifier' 0' tokenRequiredAssocQualifier.Length' StringComparison.OrdinalIgnoreCase))) " is 194.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenSchemaOnly.Length) && (0 == String.Compare (q' 0' tokenSchemaOnly' 0' tokenSchemaOnly.Length' StringComparison.OrdinalIgnoreCase))) " is 158.
Long Statement,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenClassDefsOnly.Length) && (0 == String.Compare (q' 0' tokenClassDefsOnly' 0' tokenClassDefsOnly.Length' StringComparison.OrdinalIgnoreCase))) " is 167.
Long Statement,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    if ((q.Length >= tokenResultClass.Length) && (0 == String.Compare (q' 0' tokenResultClass' 0' tokenResultClass.Length' StringComparison.OrdinalIgnoreCase))) " is 156.
Long Statement,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenRole.Length) && (0 == String.Compare (q' 0' tokenRole' 0' tokenRole.Length' StringComparison.OrdinalIgnoreCase))) " is 140.
Long Statement,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenRequiredQualifier.Length) && (0 == String.Compare (q' 0' tokenRequiredQualifier' 0' tokenRequiredQualifier.Length' StringComparison.OrdinalIgnoreCase))) " is 179.
Long Statement,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenClassDefsOnly.Length) && (0 == String.Compare (q' 0' tokenClassDefsOnly' 0' tokenClassDefsOnly.Length' StringComparison.OrdinalIgnoreCase))) " is 167.
Long Statement,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                    else if ((q.Length >= tokenSchemaOnly.Length) && (0 == String.Compare (q' 0' tokenSchemaOnly' 0' tokenSchemaOnly.Length' StringComparison.OrdinalIgnoreCase))) " is 158.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,BuildQuery,The length of the statement  "                s = s + " within " + withinInterval.TotalSeconds.ToString((IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Double))); " is 138.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,BuildQuery,The length of the statement  "                s = s + " group within " + groupWithinInterval.TotalSeconds.ToString((IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Double))); " is 149.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "            if ((q.Length < keyword.Length) || (0 != String.Compare (q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase))) " is 128.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "            if ((q.Length < keyword.Length) || (0 != String.Compare (q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase))) " is 128.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "            if ((q.Length >= keyword.Length) && (0 == String.Compare (q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase)))  " is 129.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "            if ((q.Length >= keyword.Length) && ((i = q.ToLower(CultureInfo.InvariantCulture).IndexOf(keyword' StringComparison.Ordinal)) != -1)) //found " is 141.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                if ((q.Length >= keyword.Length) && (0 == String.Compare (q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase))) " is 129.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "                if ((q.Length >= keyword.Length) && (0 == String.Compare (q' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase))) " is 129.
Long Statement,System.Management,WqlEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,ParseQuery,The length of the statement  "            if ((w.Length >= keyword.Length) && (0 == String.Compare (w' 0' keyword' 0' keyword.Length' StringComparison.OrdinalIgnoreCase))) //where clause exists " is 151.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,GetIWbemServices,The length of the statement  "            //IWbemServices is always created in MTA context. Only if call is made through non MTA context we need to use IWbemServices in right context. " is 141.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,GetIWbemServices,The length of the statement  "            // Lets start by assuming that we'll return the RCW that we already have. When WMINet_Utils.dll wraps the real COM proxy' credentials don't get  " is 143.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,GetIWbemServices,The length of the statement  "            // lost when the CLR marshals the wrapped object to a different COM apartment. The wrap was added to prevent marshalling of IManagedObject from native " is 150.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,_Clone,The length of the statement  "                scopeTmp.prvpath = ManagementPath._Clone(ManagementPath.DefaultPath' new IdentifierChangedEventHandler(scopeTmp.HandleIdentifierChange)); " is 137.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,_Clone,The length of the statement  "                    scopeTmp.prvpath = ManagementPath._Clone(ManagementPath.DefaultPath' new IdentifierChangedEventHandler(scopeTmp.HandleIdentifierChange)); " is 137.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,_Clone,The length of the statement  "                    scopeTmp.prvpath = ManagementPath._Clone(scope.prvpath' new IdentifierChangedEventHandler(scopeTmp.HandleIdentifierChange)); " is 124.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,_Clone,The length of the statement  "                    scopeTmp.options = ConnectionOptions._Clone(scope.options' new IdentifierChangedEventHandler(scopeTmp.HandleIdentifierChange)); " is 127.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,InitializeGuts,The length of the statement  "            string nsPath = threadParam.prvpath.GetNamespacePath((int)tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY); " is 122.
Long Statement,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,InitializeGuts,The length of the statement  "                if( ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1)) || (Environment.OSVersion.Version.Major >= 6) ) " is 142.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,OpenNamespace_,The length of the statement  "            //This should go through WMINET_utils layer and ppWorkingNamespace should be secured. See implementation of CreateInstanceEnum method. " is 134.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,GetObject_,The length of the statement  "            //If it changes let this call go through wminet_utils.dll. Check implementation of CreateInstanceEnum_ for more information.             " is 124.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,DeleteClass_,The length of the statement  "            //If it changes let this call go through wminet_utils.dll. Check implementation of CreateInstanceEnum_ for more information.             " is 124.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,DeleteInstance_,The length of the statement  "            //If it changes let this call go through wminet_utils.dll. Check implementation of CreateInstanceEnum_ for more information.             " is 124.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecNotificationQueryAsync_,The length of the statement  "             status = pWbemServiecsSecurityHelper.ExecNotificationQueryAsync_(strQueryLanguage' strQuery' lFlags' pCtx' pResponseHandler); " is 125.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecMethod_,The length of the statement  "            //If it changes let this call go through wminet_utils.dll. Check implementation of CreateInstanceEnum_ for more information. " is 124.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecMethod_,The length of the statement  "                status = pWbemServiecsSecurityHelper.ExecMethod_(strObjectPath' strMethodName' lFlags' pCtx' pInParams' out ppOutParams' ppCallResult); " is 135.
Long Statement,System.Management,SecuredIWbemServicesHandler,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,ExecMethodAsync_,The length of the statement  "             status = pWbemServiecsSecurityHelper.ExecMethodAsync_(strObjectPath' strMethodName' lFlags' pCtx' pInParams' pResponseHandler); " is 127.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapWmiValueToValue,The length of the statement  "                                ((UInt64[])val) [i] = Convert.ToUInt64((String)(wmiValueArray.GetValue(i))'(IFormatProvider)CultureInfo.CurrentCulture.GetFormat(typeof(System.UInt64))); " is 153.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapWmiValueToValue,The length of the statement  "                                ((Int64[])val) [i] = Convert.ToInt64((String)(wmiValueArray.GetValue(i))'(IFormatProvider)CultureInfo.CurrentCulture.GetFormat(typeof(System.Int64))); " is 150.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapWmiValueToValue,The length of the statement  "                                ((ManagementBaseObject[])val) [i] = new ManagementBaseObject(new IWbemClassObjectFreeThreaded(Marshal.GetIUnknownForObject(wmiValueArray.GetValue(i)))); " is 152.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((Int16[])(wmiValue))[i] = (Int16)Convert.ToSByte(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.SByte))); " is 129.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                    ((Int16[])(wmiValue))[i] = Convert.ToInt16(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.Int16))); " is 122.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((Int32[])(wmiValue))[i] = (Int32)(Convert.ToUInt16(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.UInt16)))); " is 133.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                    ((Int32[])(wmiValue))[i] = Convert.ToInt32(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.Int32))); " is 122.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((Int32[])(wmiValue))[i] = (Int32)(Convert.ToUInt32(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.UInt32)))); " is 133.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((String[])(wmiValue))[i] = (Convert.ToInt64(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.Int64)))).ToString((IFormatProvider)culInfo.GetFormat(typeof(System.Int64))); " is 192.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((String[])(wmiValue))[i] = (Convert.ToUInt64(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.UInt64)))).ToString((IFormatProvider)culInfo.GetFormat(typeof(System.UInt64))); " is 195.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                    ((Single[])(wmiValue))[i] = Convert.ToSingle(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.Single))); " is 125.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                    ((Double[])(wmiValue))[i] = Convert.ToDouble(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.Double))); " is 125.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((Int16[])(wmiValue))[i] = (Int16)Convert.ToChar(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.Char))); " is 127.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                    ((Boolean[])(wmiValue))[i] = Convert.ToBoolean(valArray.GetValue(i)'(IFormatProvider)culInfo.GetFormat(typeof(System.Boolean))); " is 128.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((IWbemClassObject_DoNotMarshal[])(wmiValue))[i] = (IWbemClassObject_DoNotMarshal)(Marshal.GetObjectForIUnknown(((ManagementBaseObject)valArray.GetValue(i)).wbemObject)); " is 170.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                            wmiValue = (Convert.ToInt64(val'(IFormatProvider)culInfo.GetFormat(typeof(System.Int64)))).ToString((IFormatProvider)culInfo.GetFormat(typeof(System.Int64))); " is 158.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                            wmiValue = (Convert.ToUInt64(val'(IFormatProvider)culInfo.GetFormat(typeof(System.UInt64)))).ToString((IFormatProvider)culInfo.GetFormat(typeof(System.UInt64))); " is 161.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((string[])wmiValue) [i] = ((System.UInt32)(arrayValue[i])).ToString((IFormatProvider)culInfo.GetFormat(typeof(System.UInt32))); " is 128.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                ((string[])wmiValue) [i] = ((System.UInt64)(arrayValue[i])).ToString((IFormatProvider)culInfo.GetFormat(typeof(System.UInt64))); " is 128.
Long Statement,System.Management,PropertyData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Property.cs,MapValueToWmiValue,The length of the statement  "                                    ((IWbemClassObject_DoNotMarshal[])(wmiValue))[i] = (IWbemClassObject_DoNotMarshal)(Marshal.GetObjectForIUnknown(((ManagementBaseObject)valArray.GetValue(i)).wbemObject)); " is 170.
Long Statement,System.Management,QualifierData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Qualifier.cs,MapQualValueToWmiValue,The length of the statement  "                                ((Int32[])(wmiValue))[i] = Convert.ToInt32(valArray.GetValue(i)'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32))); " is 143.
Long Statement,System.Management,QualifierData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Qualifier.cs,MapQualValueToWmiValue,The length of the statement  "                                ((Double[])(wmiValue))[i] = Convert.ToDouble(valArray.GetValue(i)'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Double))); " is 146.
Long Statement,System.Management,QualifierData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Qualifier.cs,MapQualValueToWmiValue,The length of the statement  "                                ((Boolean[])(wmiValue))[i] = Convert.ToBoolean(valArray.GetValue(i)'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Boolean))); " is 149.
Long Statement,System.Management,QualifierDataCollection,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\QualifierSet.cs,Add,The length of the statement  "            if (propagatesToSubclass) qualFlavor = (qualFlavor | (int)tag_WBEM_FLAVOR_TYPE.WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS); " is 124.
Long Statement,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,HackToCreateWmiEventSink,The length of the statement  "        wmiEventSinkNew = new WmiEventSink(watcherParameter' contextParameter' scopeParameter' pathParameter' classNameParameter); " is 122.
Long Statement,System.Management,WmiGetEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,HackToCreateWmiGetEventSink,The length of the statement  "        wmiGetEventSinkNew = new WmiGetEventSink(watcherParameter' contextParameter' scopeParameter' managementObjectParameter); " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePublicReadOnlyProperty(PublicNamesUsed["SystemPropertiesProperty"].ToString()'PublicNamesUsed["SystemPropertiesClass"].ToString()' " is 138.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePublicReadOnlyProperty(PublicNamesUsed["LateBoundObjectProperty"].ToString()'PublicNamesUsed["BaseObjClass"].ToString()' " is 128.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "                new CodeVariableReferenceExpression(PrivateNamesUsed["statMgmtScope"].ToString())'true'    SR.CommentStaticScopeProperty'true); " is 127.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePrivateMember(PrivateNamesUsed["SystemPropertiesObject"].ToString()'PublicNamesUsed["SystemPropertiesClass"].ToString()'null); " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePrivateMember(PrivateNamesUsed["LateBoundObject"].ToString()'PublicNamesUsed["LateBoundClass"].ToString()'SR.CommentLateBoundObject); " is 141.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePrivateMember(PrivateNamesUsed["AutoCommitProperty"].ToString()'"System.Boolean" 'new CodePrimitiveExpression(true)'false'SR.CommentPrivateAutoCommit); " is 159.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePrivateMember(PrivateNamesUsed["EmbeddedObject"].ToString()'PublicNamesUsed["BaseObjClass"].ToString()'SR.CommentEmbeddedObject); " is 137.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePrivateMember(PrivateNamesUsed["CurrentObject"].ToString()'PublicNamesUsed["BaseObjClass"].ToString()'SR.CommentCurrentObject); " is 135.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetCodeTypeDeclarationForClass,The length of the statement  "            GeneratePrivateMember(PrivateNamesUsed["IsEmbedded"].ToString()'"System.Boolean"'new CodePrimitiveExpression(false)'false'SR.CommentFlagForEmbedded); " is 149.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ResolveCollision,The length of the statement  "                strTemp = strTemp + strToAdd +k.ToString((IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32))); " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ResolveCollision,The length of the statement  "                strTemp = inString + strToAdd +k.ToString((IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32))); " is 121.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePublicReadOnlyProperty,The length of the statement  "            caa.Value = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("DesignerSerializationVisibility")'"Hidden"); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePublicProperty,The length of the statement  "                caa.Value = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("DesignerSerializationVisibility")'"Hidden"); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateSystemPropertiesClass,The length of the statement  "            cctor.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["LateBoundObject"].ToString())'new CodeVariableReferenceExpression("ManagedObject"))); " is 184.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                if((cmp.Type.ArrayRank == 0 && cmp.Type.BaseType == new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString()).BaseType) || " is 130.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                    cmp.Type.ArrayRank > 0 && cmp.Type.ArrayElementType .BaseType == new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString()).BaseType) " is 140.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                caa.Value = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("DesignerSerializationVisibility")'"Hidden"); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                        cis2.Condition = new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression()'IsValidPropName)' " is 137.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                        GenerateCodeForRefAndDateTimeTypes(cie'prop.IsArray'cmp.GetStatements'PublicNamesUsed["PathClass"].ToString()'null'false); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                                    new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(PublicProperties[prop.Name].ToString() + "Values"))' "NULL_ENUM_VALUE")' " is 159.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                                    new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(PublicProperties[prop.Name].ToString() + "Values"))' "NULL_ENUM_VALUE")' " is 159.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                    cboe = new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression(PrivateNamesUsed["AutoCommitProperty"].ToString())' " is 127.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The length of the statement  "                    CodeBinaryOperatorExpression cboe1 = new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression(PrivateNamesUsed["IsEmbedded"].ToString())' " is 149.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePropertyHelperEnums,The length of the statement  "                        Int64 test = System.Convert.ToInt64(ValueMap[i]'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.UInt64))); " is 128.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePropertyHelperEnums,The length of the statement  "                        Int64 test = System.Convert.ToInt64(BitMap[i]'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.UInt64))); " is 126.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePropertyHelperEnums,The length of the statement  "                        if( (System.Convert.ToInt64(BitMap[i]'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.UInt64))) == 0) ) " is 125.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructPath,The length of the statement  "                cmm.Statements.Add(new CodeVariableDeclarationStatement("System.String"'strPathObject'new CodePrimitiveExpression(strPath))); " is 125.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructPath,The length of the statement  "                        CodeMethodInvokeExpression cmie1 = GenerateConcatStrings(new CodeVariableReferenceExpression("key"+arrKeys[i])'new CodePrimitiveExpression("\"")); " is 146.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructPath,The length of the statement  "                        CodeMethodInvokeExpression cmie3 = GenerateConcatStrings(new CodePrimitiveExpression(((i==0)?("."+arrKeys[i]+"="):("'"+arrKeys[i]+"=")))'cmie2); " is 144.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructPath,The length of the statement  "                        cmie.Method.TargetObject = new CodeCastExpression(new CodeTypeReference(((CodeTypeReference)arrKeyType[i]).BaseType + " ")'new CodeVariableReferenceExpression("key"+arrKeys[i])); " is 178.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructPath,The length of the statement  "                        CodeMethodInvokeExpression cmie1 = GenerateConcatStrings(new CodePrimitiveExpression(((i==0)?("."+arrKeys[i]+"="):("'"+arrKeys[i]+"=")))'cmie); " is 143.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithKeys,The length of the statement  "                if(cctor.Parameters.Count == 1 && cctor.Parameters[0].Type.BaseType == new CodeTypeReference(PublicNamesUsed["PathClass"].ToString()).BaseType) " is 143.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithKeys,The length of the statement  "                    cctor.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression("dummyParam")'new CodePrimitiveExpression(null))); " is 131.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopeKeys,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 168.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopeKeys,The length of the statement  "                if(cctor.Parameters.Count == 2 && cctor.Parameters[1].Type.BaseType == new CodeTypeReference(PublicNamesUsed["PathClass"].ToString()).BaseType) " is 143.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopeKeys,The length of the statement  "                    cctor.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression("dummyParam")'new CodePrimitiveExpression(null))); " is 131.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithPathOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'strPathObject)); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithPathOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["GetOptionsClass"].ToString())'strGetOptions)); " is 145.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopePath,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 168.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopePath,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'strPathObject)); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScope,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())' " is 124.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["GetOptionsClass"].ToString())' " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopeOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())' " is 124.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopeOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["GetOptionsClass"].ToString())' " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopePathOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 168.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopePathOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'strPathObject)); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopePathOptions,The length of the statement  "            cctor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["GetOptionsClass"].ToString())'strGetOptions)); " is 145.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenarateConstructorWithLateBound,The length of the statement  "            cpre = new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(strLateBoundObject)'LateBoundSystemProperties); " is 126.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenarateConstructorWithLateBound,The length of the statement  "            cis.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["SystemPropertiesObject"].ToString())'coce)); " is 145.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenarateConstructorWithLateBound,The length of the statement  "            cis.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["CurrentObject"].ToString())' " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenarateConstructorWithLateBoundForEmbedded,The length of the statement  "            cis.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["SystemPropertiesObject"].ToString())'coce)); " is 145.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenarateConstructorWithLateBoundForEmbedded,The length of the statement  "            cis.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["CurrentObject"].ToString())' " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenarateConstructorWithLateBoundForEmbedded,The length of the statement  "            cis.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["IsEmbedded"].ToString())' " is 126.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateInitializeObject,The length of the statement  "            cmmInit.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 170.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateInitializeObject,The length of the statement  "            cmmInit.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'strPathObject)); " is 141.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateInitializeObject,The length of the statement  "            cmmInit.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["GetOptionsClass"].ToString())'strGetOptions)); " is 147.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateInitializeObject,The length of the statement  "            cmmInit.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["CurrentObject"].ToString())' " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                    cmm.Statements.Add(new CodeVariableDeclarationStatement("System.Boolean"'"IsMethodStatic"'new CodePrimitiveExpression(bStatic))); " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                cis.TrueStatements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString())' " is 126.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                    cis.TrueStatements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'strPath'cocePath)); " is 142.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                    cis.TrueStatements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["ManagementClass"].ToString())'strClassObj'coce1)); " is 149.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                            cie = new CodeIndexerExpression(new CodeVariableReferenceExpression(strInParams)'new CodePrimitiveExpression(prop.Name)); " is 121.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                                AddPropertySet(cie'prop.IsArray'cis.TrueStatements'PublicNamesUsed["PathClass"].ToString()'new CodeVariableReferenceExpression(cpde.Name)); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                                    cis.TrueStatements.Add(new CodeAssignStatement(cie'new CodeCastExpression(new CodeTypeReference(cpde.Type.BaseType + " ")' " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                                    cis.TrueStatements.Add(new CodeAssignStatement(cie'new CodeCastExpression(cpde.Type'new CodeVariableReferenceExpression(cpde.Name)))); " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                                cis.TrueStatements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString())'strOutParams'cmie)); " is 146.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                                    GenerateCodeForRefAndDateTimeTypes(cie'prop.IsArray'cis.TrueStatements'PublicNamesUsed["PathClass"].ToString()'new CodeVariableReferenceExpression(prop.Name)'true); " is 164.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                                        GenerateCodeForRefAndDateTimeTypes(cie'prop.IsArray'cis.TrueStatements'"System.TimeSpan"'new CodeVariableReferenceExpression(prop.Name)'true); " is 142.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                                        GenerateCodeForRefAndDateTimeTypes(cie'prop.IsArray'cis.TrueStatements'"System.DateTime"'new CodeVariableReferenceExpression(prop.Name)'true); " is 142.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                    cis.TrueStatements.Add(new CodeAssignStatement(cprePriveleges' new CodeVariableReferenceExpression(PrivateNamesUsed["Privileges"].ToString()))); " is 144.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                        cmm.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression("retVar")'new CodePrimitiveExpression(null))); " is 125.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                        GenerateCodeForRefAndDateTimeTypes(cie'isRetArray'cis.TrueStatements'PublicNamesUsed["PathClass"].ToString()'new CodeVariableReferenceExpression("retVar")'true); " is 161.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                        GenerateCodeForRefAndDateTimeTypes(cie'isRetArray'cis.TrueStatements'"System.DateTime"'new CodeVariableReferenceExpression("retVar")'true); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                        GenerateCodeForRefAndDateTimeTypes(cie'isRetArray'cis.TrueStatements'"System.TimeSpan"'new CodeVariableReferenceExpression("retVar")'true); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The length of the statement  "                        if(retRefType.ArrayRank == 0 && retRefType.BaseType != new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString()).BaseType) " is 130.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScope,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 166.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScope,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["QueryOptionsClass"].ToString())' " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScope,The length of the statement  "            cis1.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["ScopeParam"].ToString())'coce));     " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScope,The length of the statement  "            cis1.FalseStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["ScopeParam"].ToString())' " is 128.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScope,The length of the statement  "            cmm.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'pathObj'coce)); " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScope,The length of the statement  "            cmm.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["ManagementClass"].ToString())' " is 125.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScope,The length of the statement  "            cis.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["EnumParam"].ToString())' " is 125.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScopeCondition,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 166.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScopeProperties,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(PublicNamesUsed["ScopeClass"].ToString()'PrivateNamesUsed["ScopeParam"].ToString())); " is 143.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScopeWhereProperties,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 166.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScopeWhereProperties,The length of the statement  "            cis1.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["ScopeParam"].ToString())'coce));     " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateGetInstancesWithScopeWhereProperties,The length of the statement  "            cis1.FalseStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["ScopeParam"].ToString())' " is 128.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cctor.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(typeMemberVariable)'new CodeVariableReferenceExpression(baseTypeParam))); " is 154.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie = new CodeMethodInvokeExpression(new CodeVariableReferenceExpression(baseTypeMemberVariable)'"GetCreateInstanceSupported"); " is 128.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "                public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context'object value'Attribute [] attributes); " is 127.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie = new CodeMethodInvokeExpression(new CodeVariableReferenceExpression(baseTypeMemberVariable)'"GetPropertiesSupported"); " is 124.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie = new CodeMethodInvokeExpression(new CodeVariableReferenceExpression(baseTypeMemberVariable)'"GetStandardValuesExclusive"); " is 128.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie = new CodeMethodInvokeExpression(new CodeVariableReferenceExpression(baseTypeMemberVariable)'"GetStandardValuesSupported"); " is 128.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context' System.Globalization.CultureInfo culture' object value' System.Type destinationType) " is 171.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cis.TrueStatements.Add(new CodeConditionStatement(cboe2'new CodeMethodReturnStatement(new CodeVariableReferenceExpression("value")))); " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            CodeBinaryOperatorExpression cboe4 = new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression(contextObject)' " is 121.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie = new CodeMethodInvokeExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(contextObject)'"PropertyDescriptor")'"ShouldSerializeValue"); " is 171.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie.Parameters.Add(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(contextObject)'"Instance")); " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cis.TrueStatements.Add(new CodeConditionStatement(cboe7'new CodeMethodReturnStatement(new CodeSnippetExpression(" \"NULL_ENUM_VALUE\" ")))); " is 140.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie = new CodeMethodInvokeExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(contextObject)'"PropertyDescriptor")'"ShouldSerializeValue"); " is 171.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie.Parameters.Add(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(contextObject)'"Instance")); " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cis.TrueStatements.Add(new CodeConditionStatement(cboe7'new CodeMethodReturnStatement(new CodePrimitiveExpression("")))); " is 121.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie = new CodeMethodInvokeExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(contextObject)'"PropertyDescriptor")'"ShouldSerializeValue"); " is 171.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateTypeConverterClass,The length of the statement  "            cmie.Parameters.Add(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(contextObject)'"Instance")); " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCollectionClass,The length of the statement  "            cfls.InitStatement = new CodeAssignStatement(new CodeVariableReferenceExpression(strnCtr)'new CodePrimitiveExpression(0)); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCollectionClass,The length of the statement  "            coce.Parameters.Add(new CodeMethodInvokeExpression(new CodeVariableReferenceExpression(strObjectCollection)'"GetEnumerator")); " is 126.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ConvertBitMapValueToInt32,The length of the statement  "            if (bitMap.StartsWith(strTemp' StringComparison.Ordinal) || bitMap.StartsWith(strTemp.ToUpper(CultureInfo.InvariantCulture)' StringComparison.Ordinal)) " is 151.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,IsDynamicClass,The length of the statement  "                ret = System.Convert.ToBoolean(classobj.Qualifiers["dynamic"].Value'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Boolean))); " is 149.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ConvertToNumericValueAndAddToArray,The length of the statement  "                    arrayToAdd.Add(System.Convert.ToInt32(numericValue'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32)))); " is 131.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ConvertToNumericValueAndAddToArray,The length of the statement  "                    arrayToAdd.Add(System.Convert.ToInt32(numericValue'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32)))); " is 131.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateClassNameProperty,The length of the statement  "            caa.Value = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("DesignerSerializationVisibility")'"Hidden"); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateClassNameProperty,The length of the statement  "            cboe1.Left = new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(PrivateNamesUsed["CurrentObject"].ToString())' " is 131.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFuncWithAllParams,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'PrivateNamesUsed["ScopeParam"].ToString())); " is 166.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFuncWithAllParams,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'strPathParam)); " is 136.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFuncWithAllParams,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["GetOptionsClass"].ToString())'strGetOptions)); " is 143.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFuncWithAllParams,The length of the statement  "                new CodePropertyReferenceExpression(new CodeTypeReferenceExpression("System.Globalization.CultureInfo")'"InvariantCulture") " is 123.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFunction,The length of the statement  "            cmm.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString())'strTempObj)); " is 137.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFunction,The length of the statement  "                new CodePropertyReferenceExpression(new CodeThisReferenceExpression()' PublicNamesUsed["ClassNameProperty"].ToString())' " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFunction,The length of the statement  "                new CodePropertyReferenceExpression(new CodeTypeReferenceExpression("System.Globalization.CultureInfo")'"InvariantCulture") " is 123.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFunction,The length of the statement  "            cfls.InitStatement = new CodeAssignStatement(new CodeVariableReferenceExpression(strnCtr)'new CodePrimitiveExpression(0)); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFunction,The length of the statement  "                new CodePropertyReferenceExpression(new CodeThisReferenceExpression()' PublicNamesUsed["ClassNameProperty"].ToString())' " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateIfClassvalidFunction,The length of the statement  "                new CodePropertyReferenceExpression(new CodeTypeReferenceExpression("System.Globalization.CultureInfo")'"InvariantCulture") " is 123.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCodeForRefAndDateTimeTypes,The length of the statement  "                    cmie1.Method.TargetObject = new CodeCastExpression(new CodeTypeReference("System.Array")'new CodePropertyReferenceExpression(prop'"Value")); " is 140.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateScopeProperty,The length of the statement  "                caa.Value = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("DesignerSerializationVisibility")'"Hidden"); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddGetStatementsForEnumArray,The length of the statement  "            cfls.InitStatement = new CodeAssignStatement(new CodeVariableReferenceExpression(strnCtr)'new CodePrimitiveExpression(0)); " is 122.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCreateInstance,The length of the statement  "            cmm.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())' " is 120.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateCreateInstance,The length of the statement  "            cmm.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'strPath'cocePath)); " is 138.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.DateTime")'"initializer"'new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("System.DateTime")'"MinValue"))); " is 211.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'year'new CodePropertyReferenceExpression(cvreInitializer'"Year"))); " is 163.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'month'    new CodePropertyReferenceExpression(cvreInitializer'"Month"))); " is 169.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'day'new CodePropertyReferenceExpression(cvreInitializer'"Day"))); " is 161.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'hour'new CodePropertyReferenceExpression(cvreInitializer'"Hour"))); " is 163.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'minute'new CodePropertyReferenceExpression(cvreInitializer'"Minute"))); " is 167.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'second'new CodePropertyReferenceExpression(cvreInitializer'"Second"))); " is 167.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int64")'ticks'new CodePrimitiveExpression(0))); " is 135.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.String")'dmtf'new CodeVariableReferenceExpression(dmtfParam))); " is 151.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            CodeFieldReferenceExpression cpreMinVal = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("System.DateTime")'"MinValue"); " is 138.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.DateTime")'datetimeVariable'cpreMinVal)); " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.String")'tempStr'new CodeFieldReferenceExpression( " is 138.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            CodeMethodReferenceExpression  cmre = new CodeMethodReferenceExpression(new CodeVariableReferenceExpression(dmtf)'"Substring"); " is 127.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            CodeMethodReferenceExpression  cmre1 = new CodeMethodReferenceExpression(new CodeTypeReferenceExpression("System.Int64")'"Parse"); " is 130.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            CodeMethodReferenceExpression  cmre2 = new CodeMethodReferenceExpression(new CodeVariableReferenceExpression(datetimeVariable)'"AddTicks"); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmre1 = new CodeMethodReferenceExpression(new CodePropertyReferenceExpression(new CodeTypeReferenceExpression("System.TimeZone")'"CurrentTimeZone")' " is 148.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'utcOffset'new CodePrimitiveExpression(0))); " is 139.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cmmdt.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'offsetAdjust'new CodePrimitiveExpression(0))); " is 142.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The length of the statement  "            cis.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(offsetAdjust)'new CodeCastExpression(new CodeTypeReference("System.Int32")'cboe))); " is 166.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,DateTimeConversionFunctionHelper,The length of the statement  "            CodeMethodReferenceExpression  cmre = new CodeMethodReferenceExpression(new CodeVariableReferenceExpression(dmtfVarName)'"Substring"); " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            CodeFieldReferenceExpression cpreMaxVal = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("System.TimeSpan")'"MaxValue"); " is 138.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            cmmts.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.TimeSpan")'"maxTimeSpan"'cpreMaxVal)); " is 126.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            CodeFieldReferenceExpression cpreMinVal = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("System.TimeSpan")'"MinValue"); " is 138.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            cmmts.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.TimeSpan")'"minTimeSpan"'cpreMinVal)); " is 126.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            cmie.Method = new CodeMethodReferenceExpression(new CodeCastExpression(new CodeTypeReference("System.Int32 ")'cpre1)'"ToString"); " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            cmie.Method = new CodeMethodReferenceExpression(new CodeCastExpression(new CodeTypeReference("System.Int32 ")'cpre1)'"ToString"); " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            cmie.Method = new CodeMethodReferenceExpression(new CodeCastExpression(new CodeTypeReference("System.Int32 ")'cpre1)'"ToString"); " is 129.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The length of the statement  "            cmie.Method = new CodeMethodReferenceExpression(new CodeCastExpression(new CodeTypeReference("System.Int64 ")'new CodeVariableReferenceExpression(microsec))'"ToString"); " is 169.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The length of the statement  "            cis1.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(strUtc)'new CodePrimitiveExpression("+000"))); " is 130.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The length of the statement  "            cmie1.Method = new CodeMethodReferenceExpression(new CodeCastExpression(new CodeTypeReference("System.Int64 ")'cboe2)'"ToString"); " is 130.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The length of the statement  "            cmie1.Method = new CodeMethodReferenceExpression(new CodeCastExpression(new CodeTypeReference("System.Int64 ")'new CodeVariableReferenceExpression(OffsetMins))'"ToString"); " is 172.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The length of the statement  "            cmie2.Parameters.Add(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("strTemp")'"Length")' " is 147.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The length of the statement  "            cboe2.Right = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("System.TimeSpan")'"TicksPerMillisecond"); " is 121.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The length of the statement  "            cmmts.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'days'new CodePrimitiveExpression(0))); " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The length of the statement  "            cmmts.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'hours'new CodePrimitiveExpression(0))); " is 135.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The length of the statement  "            cmmts.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'minutes'new CodePrimitiveExpression(0))); " is 137.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The length of the statement  "            cmmts.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int32")'seconds'new CodePrimitiveExpression(0))); " is 137.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The length of the statement  "            cmmts.Statements.Add(new CodeVariableDeclarationStatement(new CodeTypeReference("System.Int64")'ticks'new CodePrimitiveExpression(0))); " is 135.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethodToInitializeVariables,The length of the statement  "            cmmInit.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["AutoCommitProperty"].ToString())' " is 134.
Long Statement,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethodToInitializeVariables,The length of the statement  "            cmmInit.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(PrivateNamesUsed["IsEmbedded"].ToString())' " is 126.
Long Statement,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,SerializeToBlob,The length of the statement  "                CoMarshalInterface(stream' ref IID_IWbemClassObject' pWbemClassObject' (UInt32)MSHCTX.MSHCTX_DIFFERENTMACHINE' IntPtr.Zero' (UInt32)MSHLFLAGS.MSHLFLAGS_TABLEWEAK); " is 163.
Long Statement,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetMethod_,The length of the statement  "            int hResult = WmiNetUtilsHelper.GetMethod_f(19' pWbemClassObject' wszName' lFlags' out pInSignature' out pOutSignature); " is 120.
Long Statement,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,NextMethod_,The length of the statement  "            int hResult = WmiNetUtilsHelper.NextMethod_f(23' pWbemClassObject' lFlags' out pstrName' out pInSignature' out pOutSignature); " is 126.
Complex Conditional,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The conditional expression  "year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0"  is complex.
Complex Conditional,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The conditional expression  "days < 0 || hours < 0 || minutes < 0 || seconds < 0 || ticks < 0"  is complex.
Complex Conditional,System.Management,ManagementObjectSearcher,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObjectSearcher.cs,Get,The conditional expression  "(query.GetType() == typeof(SelectQuery)) &&                       (((SelectQuery)query).Condition == null) &&                       (((SelectQuery)query).SelectedProperties == null) &&                      (options.EnumerateDeep == true)"  is complex.
Complex Conditional,System.Management,ManagementObjectSearcher,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObjectSearcher.cs,Get,The conditional expression  "(query.GetType() == typeof(SelectQuery)) &&                       (((SelectQuery)query).Condition == null) &&                       (((SelectQuery)query).SelectedProperties == null) &&                      (options.EnumerateDeep == true)"  is complex.
Complex Conditional,System.Management,ManagementPath,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementPath.cs,SetNamespacePath,The conditional expression  "status >= 0 && nsPath.Length > 1 &&                  (nsPath[0] == '\\' && nsPath[1] == '\\' ||                  nsPath[0] == '/'  && nsPath[1] == '/')"  is complex.
Complex Conditional,System.Management,RelatedObjectQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,BuildQuery,The conditional expression  "!(RelatedClass.Length==0) ||                   !(RelationshipClass.Length==0) ||                   !(RelatedQualifier.Length==0) ||                   !(RelationshipQualifier.Length==0) ||                   !(RelatedRole.Length==0) ||                   !(ThisRole.Length==0) ||                   classDefinitionsOnly ||                  isSchemaQuery"  is complex.
Complex Conditional,System.Management,RelationshipQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementQuery.cs,BuildQuery,The conditional expression  "!(RelationshipClass.Length==0) ||                   !(RelationshipQualifier.Length==0) ||                   !(ThisRole.Length==0) ||                   classDefinitionsOnly ||                  isSchemaQuery"  is complex.
Complex Conditional,System.Management,CompatSwitches,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,GetSwitchValueFromRegistry,The conditional expression  "e is StackOverflowException ||                     e is OutOfMemoryException ||                     e is System.Threading.ThreadAbortException ||                     e is AccessViolationException"  is complex.
Complex Conditional,System.Management,QualifierData,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\Qualifier.cs,MapQualValueToWmiValue,The conditional expression  "(qualVal is Int32[]) || (qualVal is Double[]) || (qualVal is String[]) || (qualVal is Boolean[])"  is complex.
Complex Conditional,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessNamespaceAndClassName,The conditional expression  "Type.GetType("System." + strClass) !=  null ||                   Type.GetType("System.ComponentModel." + strClass) !=  null ||                   Type.GetType("System.Management." + strClass) !=  null ||                   Type.GetType("System.Collections." + strClass) !=  null ||                   Type.GetType("System.Globalization." + strClass) !=  null"  is complex.
Complex Conditional,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateProperties,The conditional expression  "(cmp.Type.ArrayRank == 0 && cmp.Type.BaseType == new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString()).BaseType) ||                      cmp.Type.ArrayRank > 0 && cmp.Type.ArrayElementType .BaseType == new CodeTypeReference(PublicNamesUsed["BaseObjClass"].ToString()).BaseType"  is complex.
Complex Conditional,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessPropertyQualifiers,The conditional expression  "(!bDynamicClass && !hasWrite )||                  (!bDynamicClass && hasWrite && writeValue)||                  (bDynamicClass && hasWrite && writeValue)"  is complex.
Virtual Method Call from Constructor,System.Management,ManagementException,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementException.cs,ManagementException,The constructor "ManagementException" calls a virtual method "Clone".
Virtual Method Call from Constructor,System.Management,MethodDataEnumerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\MethodSet.cs,MethodDataEnumerator,The constructor "MethodDataEnumerator" calls a virtual method "Add".
Virtual Method Call from Constructor,System.Management,MethodDataEnumerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\MethodSet.cs,MethodDataEnumerator,The constructor "MethodDataEnumerator" calls a virtual method "GetEnumerator".
Empty Catch Block,System.Management,ManagementEventWatcher,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementEventWatcher.cs,FireStopped,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementEventWatcher,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementEventWatcher.cs,FireEventArrived,The method has an empty catch block.
Empty Catch Block,System.Management,SinkForEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementEventWatcher.cs,Indicate,The method has an empty catch block.
Empty Catch Block,System.Management,SinkForEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementEventWatcher.cs,SetStatus,The method has an empty catch block.
Empty Catch Block,System.Management,SinkForEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementEventWatcher.cs,Cancel2,The method has an empty catch block.
Empty Catch Block,System.Management,SinkForEventQuery,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementEventWatcher.cs,ReleaseStub,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementException,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementException.cs,ThrowWithExtendedInfo,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementException,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementException.cs,ThrowWithExtendedInfo,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementException,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementException.cs,ManagementException,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementException,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementException.cs,GetMessage,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementNamedValueCollection,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementNamedValueCollection.cs,GetContext,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementNamedValueCollection,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementNamedValueCollection.cs,Add,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,GetPath,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementObject,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementObject.cs,HandleObjectPut,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,Cancel,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,Cancel,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,Cancel,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,RemoveSink,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,FireObjectReady,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,FireCompleted,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,FireProgress,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementOperationObserver,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,FireObjectPut,The method has an empty catch block.
Empty Catch Block,System.Management,WmiDelegateInvoker,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,FireEventToDelegates,The method has an empty catch block.
Empty Catch Block,System.Management,WmiDelegateInvoker,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementOperationWatcher.cs,FireEventToDelegates,The method has an empty catch block.
Empty Catch Block,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,WmiEventSink,The method has an empty catch block.
Empty Catch Block,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,Indicate,The method has an empty catch block.
Empty Catch Block,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,SetStatus,The method has an empty catch block.
Empty Catch Block,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,SetStatus,The method has an empty catch block.
Empty Catch Block,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,Cancel,The method has an empty catch block.
Empty Catch Block,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,ReleaseStub,The method has an empty catch block.
Empty Catch Block,System.Management,WmiGetEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,Indicate,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessPropertyQualifiers,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,IsDynamicClass,The method has an empty catch block.
Empty Catch Block,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetDateTimeType,The method has an empty catch block.
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: try              {                                    string tempString = System.String.Empty;                  tempString = dmtf.Substring(0' 4);                  if (("****" != tempString))                   {                      year = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(4' 2);                  if (("**" != tempString))                   {                      month = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(6' 2);                  if (("**" != tempString))                   {                      day = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(8' 2);                  if (("**" != tempString))                   {                      hour = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(10' 2);                  if (("**" != tempString))                   {                      minute = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(12' 2);                  if (("**" != tempString))                   {                      second = System.Int32.Parse(tempString'frmInt32);                  }                  tempString = dmtf.Substring(15' 6);                  if (("******" != tempString))                   {                      ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                  }                  if( year < 0 || month < 0 || day < 0 || hour < 0 || minute < 0 || second < 0 || ticks < 0)                  {                      throw new System.ArgumentOutOfRangeException("dmtfDate");                  }                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfDate");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: string tempString1 = dmtf.Substring(22' 3);
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: string tempString1 = dmtf.Substring(22' 3);
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: if (("***" != tempString1))               {                  tempString1 = dmtf.Substring(21' 4);                  try                  {                      UTCOffset = System.Int32.Parse(tempString1'frmInt32);                  }                  catch                  {                      throw new System.ArgumentOutOfRangeException();                  }                    OffsetToBeAdjusted = UTCOffset-OffsetMins;                                    // We have to substract the minutes from the time                  datetime = datetime.AddMinutes(OffsetToBeAdjusted * -1);                }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDateTime,The following statement contains a magic number: if (("***" != tempString1))               {                  tempString1 = dmtf.Substring(21' 4);                  try                  {                      UTCOffset = System.Int32.Parse(tempString1'frmInt32);                  }                  catch                  {                      throw new System.ArgumentOutOfRangeException();                  }                    OffsetToBeAdjusted = UTCOffset-OffsetMins;                                    // We have to substract the minutes from the time                  datetime = datetime.AddMinutes(OffsetToBeAdjusted * -1);                }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: if(Math.Abs(OffsetMins) > MAXSIZE_UTC_DMTF)              {                  date = date.ToUniversalTime();                  UtcString = "+000";              }              else              if ((tickOffset.Ticks >= 0))               {                  UtcString = "+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString(frmInt32).PadLeft(3''0');              }              else               {                  string strTemp = OffsetMins.ToString(frmInt32);                  UtcString = "-" + strTemp.Substring(1' strTemp.Length-1).PadLeft(3''0');              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: if(Math.Abs(OffsetMins) > MAXSIZE_UTC_DMTF)              {                  date = date.ToUniversalTime();                  UtcString = "+000";              }              else              if ((tickOffset.Ticks >= 0))               {                  UtcString = "+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString(frmInt32).PadLeft(3''0');              }              else               {                  string strTemp = OffsetMins.ToString(frmInt32);                  UtcString = "-" + strTemp.Substring(1' strTemp.Length-1).PadLeft(3''0');              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: string dmtfDateTime = date.Year.ToString(frmInt32).PadLeft(4''0');
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Month.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Day.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Hour.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Minute.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Second.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: System.Int64 microsec = ((date.Ticks-dtTemp.Ticks) * 1000) / System.TimeSpan.TicksPerMillisecond;
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: if(strMicrosec.Length > 6)              {                  strMicrosec = strMicrosec.Substring(0'6);				              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: if(strMicrosec.Length > 6)              {                  strMicrosec = strMicrosec.Substring(0'6);				              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = dmtfDateTime + strMicrosec.PadLeft(6''0');
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: if(dmtfts.Substring(21'4) != ":000")              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: if(dmtfts.Substring(21'4) != ":000")              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToTimeSpan,The following statement contains a magic number: try              {                  string tempString = System.String.Empty;                    tempString = dmtfts.Substring(0' 8);                  days = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(8' 2);                  hours = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(10' 2);                  minutes = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(12' 2);                  seconds = System.Int32.Parse(tempString'frmInt32);                    tempString = dmtfts.Substring(15' 6);                  ticks = (System.Int64.Parse(tempString'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int64)))) * (System.TimeSpan.TicksPerMillisecond/1000);                }              catch              {                  throw new System.ArgumentOutOfRangeException("dmtfTimespan");              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: string dmtftimespan = timespan.Days.ToString((IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32))).PadLeft(8''0');
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: dmtftimespan = (dmtftimespan + timespan.Hours.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: dmtftimespan = (dmtftimespan + timespan.Minutes.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: dmtftimespan = (dmtftimespan + timespan.Seconds.ToString(frmInt32).PadLeft(2' '0'));
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: System.Int64 microsec = ((timespan.Ticks-tsTemp.Ticks) * 1000) / System.TimeSpan.TicksPerMillisecond;
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: if(strMicrosec.Length > 6)              {                  strMicrosec = strMicrosec.Substring(0'6);				              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: if(strMicrosec.Length > 6)              {                  strMicrosec = strMicrosec.Substring(0'6);				              }
Magic Number,System.Management,ManagementDateTimeConverter,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementDateTime.cs,ToDmtfTimeInterval,The following statement contains a magic number: dmtftimespan = dmtftimespan + strMicrosec.PadLeft(6''0');
Magic Number,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,InitializeGuts,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT)              {                                    if( ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1)) || (Environment.OSVersion.Version.Major >= 6) )                  {                      threadParam.options.Flags |= (int)tag_WBEM_CONNECT_OPTIONS.WBEM_FLAG_CONNECT_USE_MAX_WAIT;                  }              }
Magic Number,System.Management,ManagementScope,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\ManagementScope.cs,InitializeGuts,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT)              {                                    if( ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1)) || (Environment.OSVersion.Version.Major >= 6) )                  {                      threadParam.options.Flags |= (int)tag_WBEM_CONNECT_OPTIONS.WBEM_FLAG_CONNECT_USE_MAX_WAIT;                  }              }
Magic Number,System.Management,WmiEventSink,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WmiEventSink.cs,SetStatus,The following statement contains a magic number: try {              if (flags == (int) tag_WBEM_STATUS_TYPE.WBEM_STATUS_COMPLETE)              {                  // Is this a Put? If so fire the ObjectPut event                  if (null != path)                  {                      if (null == className)                          path.RelativePath = message;                      else                          path.RelativePath = className;                        // Fire the internal event (if anyone is interested)                      if (null != InternalObjectPut)                      {                          try {                              InternalObjectPutEventArgs iargs = new InternalObjectPutEventArgs (path);                              InternalObjectPut (this' iargs);                          } catch {}                      }                        ObjectPutEventArgs args = new ObjectPutEventArgs (context' path);                      watcher.FireObjectPut(args);                  }                    // Fire Completed event                  CompletedEventArgs args2 = null ;                  if ( errObj != null )                      {                          args2 = new CompletedEventArgs (context' hResult'                                                   new ManagementBaseObject (errObj)                                                  );                      }                  else                      {                          args2 = new CompletedEventArgs (context' hResult'                                                   null                                                  );                      }                  watcher.FireCompleted (args2);                                    // Unhook and tidy up                  watcher.RemoveSink (this);              }              else if (0 != (flags & (int) tag_WBEM_STATUS_TYPE.WBEM_STATUS_PROGRESS))              {                  // Fire Progress event                  ProgressEventArgs args = new ProgressEventArgs (context'                       (int) (((uint)hResult & 0xFFFF0000) >> 16)' hResult & 0xFFFF' message);                    watcher.FireProgress (args);              }          } catch {}
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,InitializeClassObject,The following statement contains a magic number: if (classobj == null)              {                  ManagementPath thePath;                  if (OriginalPath.Length != 0)                  {                      thePath = new ManagementPath(OriginalPath);                  }                  else                  {                      thePath = new ManagementPath();                      if (OriginalServer.Length != 0)                          thePath.Server = OriginalServer;                      thePath.ClassName = OriginalClassName;                      thePath.NamespacePath = OriginalNamespace;                        /*                          throw new Exception("OriginalServer is " + OriginalServer +                              " OriginalNamespace is " + OriginalNamespace +                              " OriginalClassName is " + OriginalClassName +                              " results in " + thePath.Path);                              */                  }                  classobj = new ManagementClass (thePath);              }              else              {                  // Get the common properties                  ManagementPath thePath = classobj.Path;                  OriginalServer = thePath.Server;                  OriginalClassName = thePath.ClassName;                  OriginalNamespace = thePath.NamespacePath;                    char[] arrString = OriginalNamespace.ToCharArray();                    // Remove the server from the namespace                  if (arrString.Length >= 2 && arrString[0] == '\\' && arrString[1] == '\\')                  {                      bool bStart = false;                      int Len = OriginalNamespace.Length;                      OriginalNamespace = string.Empty;                      for (int i = 2 ; i < Len ; i++)                      {                          if (bStart == true)                          {                              OriginalNamespace = OriginalNamespace + arrString[i];                          }                          else                              if (arrString[i] == '\\')                          {                              bStart = true;                          }                      }                  }                }
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,InitializeClassObject,The following statement contains a magic number: if (classobj == null)              {                  ManagementPath thePath;                  if (OriginalPath.Length != 0)                  {                      thePath = new ManagementPath(OriginalPath);                  }                  else                  {                      thePath = new ManagementPath();                      if (OriginalServer.Length != 0)                          thePath.Server = OriginalServer;                      thePath.ClassName = OriginalClassName;                      thePath.NamespacePath = OriginalNamespace;                        /*                          throw new Exception("OriginalServer is " + OriginalServer +                              " OriginalNamespace is " + OriginalNamespace +                              " OriginalClassName is " + OriginalClassName +                              " results in " + thePath.Path);                              */                  }                  classobj = new ManagementClass (thePath);              }              else              {                  // Get the common properties                  ManagementPath thePath = classobj.Path;                  OriginalServer = thePath.Server;                  OriginalClassName = thePath.ClassName;                  OriginalNamespace = thePath.NamespacePath;                    char[] arrString = OriginalNamespace.ToCharArray();                    // Remove the server from the namespace                  if (arrString.Length >= 2 && arrString[0] == '\\' && arrString[1] == '\\')                  {                      bool bStart = false;                      int Len = OriginalNamespace.Length;                      OriginalNamespace = string.Empty;                      for (int i = 2 ; i < Len ; i++)                      {                          if (bStart == true)                          {                              OriginalNamespace = OriginalNamespace + arrString[i];                          }                          else                              if (arrString[i] == '\\')                          {                              bStart = true;                          }                      }                  }                }
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessPropertyQualifiers,The following statement contains a magic number: foreach (QualifierData q in prop.Qualifiers)              {                  if (String.Compare(q.Name'"description"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      description = q.Value.ToString();                  }                  else                      if (String.Compare(q.Name'"Not_Null"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      nullable = false;                  }                  else                      if (String.Compare(q.Name'"key"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      //This is a key. So push it in to the key array                      arrKeyType.Add(cmp.Type);                      arrKeys.Add(prop.Name);                      nullable = false;                      break;                  }                  else if (string.Compare(q.Name'"static"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      //This property is static. So add static to the Type of the object                      bStatic = true;                      cmp.Attributes |= MemberAttributes.Static;                  }                  else if (string.Compare(q.Name'"read"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      if ((bool)q.Value == false)                      {                          bRead = false;                      }                      else                      {                          bRead = true;                      }                  }                  else if (string.Compare(q.Name'"write"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      hasWrite = true;                      if ((bool)q.Value == true)                      {                          writeValue = true;                      }                      else                      {                          writeValue = false;                      }                  }                      // check for ValueMap/Values and BitMap/BitValues pair and create                      // Enum Accordingly                  else if (string.Compare(q.Name'"ValueMap"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          ValueMap.Clear();                          //Now check whether the type of the property is int                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  string [] strArray = (string [])q.Value;                                  for(int i=0;i < strArray.Length ;i++)                                  {                                      try                                      {                                          arrConvFuncName = ConvertToNumericValueAndAddToArray(prop.Type'strArray[i]'ValueMap'out enumType);                                      }                                      catch(OverflowException)                                      {                                      }                                  }                              }                          }                      }                          // if the value is not a numerical' then we cannot construct a enum                      catch(System.FormatException)                      {                          bMapsFailed = true;                          ValueMap.Clear();                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          ValueMap.Clear();                      }                  }                  else if (string.Compare(q.Name'"Values"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          Values.Clear();                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  ArrayList arTemp = new ArrayList(5);                                  string [] strArray = (string[])q.Value;                                  for(int i=0;i < strArray.Length;i++)                                  {                                      if(strArray[i].Length == 0)                                      {                                          Values.Clear();                                          bMapsFailed = true;                                          break;                                      }                                      string strName = ConvertValuesToName(strArray[i]);                                      arTemp.Add(strName);                                  }                                  ResolveEnumNameValues(arTemp'ref Values);                              }                          }                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          Values.Clear();                      }                    }                  else if (string.Compare(q.Name'"BitMap"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          BitMap.Clear();                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  string [] strArray = (string [])q.Value;                                  for(int i=0;i < strArray.Length;i++)                                  {                                                                  BitMap.Add(ConvertBitMapValueToInt32(strArray[i]));                                  }                              }                          }                      }                          // if the value is not a numerical' then we cannot construct a enum                      catch(System.FormatException)                      {                          BitMap.Clear();                          bMapsFailed = true;                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          BitMap.Clear();                      }                  }                  else if (string.Compare(q.Name'"BitValues"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          BitValues.Clear();                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  ArrayList arTemp = new ArrayList(5);                                  string [] strArray = (string [])q.Value;                                  for(int i=0;i < strArray.Length;i++)                                  {                                      if(strArray[i].Length == 0)                                      {                                          BitValues.Clear();                                          bMapsFailed = true;                                          break;                                      }                                      string strName = ConvertValuesToName(strArray[i]);                                      arTemp.Add(strName);                                  }                                  ResolveEnumNameValues(arTemp'ref BitValues);                              }                          }                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          BitValues.Clear();                      }                                                          }              }
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ProcessPropertyQualifiers,The following statement contains a magic number: foreach (QualifierData q in prop.Qualifiers)              {                  if (String.Compare(q.Name'"description"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      description = q.Value.ToString();                  }                  else                      if (String.Compare(q.Name'"Not_Null"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      nullable = false;                  }                  else                      if (String.Compare(q.Name'"key"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      //This is a key. So push it in to the key array                      arrKeyType.Add(cmp.Type);                      arrKeys.Add(prop.Name);                      nullable = false;                      break;                  }                  else if (string.Compare(q.Name'"static"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      //This property is static. So add static to the Type of the object                      bStatic = true;                      cmp.Attributes |= MemberAttributes.Static;                  }                  else if (string.Compare(q.Name'"read"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      if ((bool)q.Value == false)                      {                          bRead = false;                      }                      else                      {                          bRead = true;                      }                  }                  else if (string.Compare(q.Name'"write"'StringComparison.OrdinalIgnoreCase) == 0)                  {                      hasWrite = true;                      if ((bool)q.Value == true)                      {                          writeValue = true;                      }                      else                      {                          writeValue = false;                      }                  }                      // check for ValueMap/Values and BitMap/BitValues pair and create                      // Enum Accordingly                  else if (string.Compare(q.Name'"ValueMap"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          ValueMap.Clear();                          //Now check whether the type of the property is int                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  string [] strArray = (string [])q.Value;                                  for(int i=0;i < strArray.Length ;i++)                                  {                                      try                                      {                                          arrConvFuncName = ConvertToNumericValueAndAddToArray(prop.Type'strArray[i]'ValueMap'out enumType);                                      }                                      catch(OverflowException)                                      {                                      }                                  }                              }                          }                      }                          // if the value is not a numerical' then we cannot construct a enum                      catch(System.FormatException)                      {                          bMapsFailed = true;                          ValueMap.Clear();                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          ValueMap.Clear();                      }                  }                  else if (string.Compare(q.Name'"Values"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          Values.Clear();                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  ArrayList arTemp = new ArrayList(5);                                  string [] strArray = (string[])q.Value;                                  for(int i=0;i < strArray.Length;i++)                                  {                                      if(strArray[i].Length == 0)                                      {                                          Values.Clear();                                          bMapsFailed = true;                                          break;                                      }                                      string strName = ConvertValuesToName(strArray[i]);                                      arTemp.Add(strName);                                  }                                  ResolveEnumNameValues(arTemp'ref Values);                              }                          }                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          Values.Clear();                      }                    }                  else if (string.Compare(q.Name'"BitMap"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          BitMap.Clear();                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  string [] strArray = (string [])q.Value;                                  for(int i=0;i < strArray.Length;i++)                                  {                                                                  BitMap.Add(ConvertBitMapValueToInt32(strArray[i]));                                  }                              }                          }                      }                          // if the value is not a numerical' then we cannot construct a enum                      catch(System.FormatException)                      {                          BitMap.Clear();                          bMapsFailed = true;                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          BitMap.Clear();                      }                  }                  else if (string.Compare(q.Name'"BitValues"'StringComparison.OrdinalIgnoreCase) == 0 && bMapsFailed == false)                  {                      try                      {                          BitValues.Clear();                          if (isTypeInt(prop.Type) == true)                          {                              if (q.Value != null)                              {                                  ArrayList arTemp = new ArrayList(5);                                  string [] strArray = (string [])q.Value;                                  for(int i=0;i < strArray.Length;i++)                                  {                                      if(strArray[i].Length == 0)                                      {                                          BitValues.Clear();                                          bMapsFailed = true;                                          break;                                      }                                      string strName = ConvertValuesToName(strArray[i]);                                      arTemp.Add(strName);                                  }                                  ResolveEnumNameValues(arTemp'ref BitValues);                              }                          }                      }                      catch(System.InvalidCastException )                      {                          // This exception may occur if the qualifier value is not an array as expected                          BitValues.Clear();                      }                                                          }              }
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePropertyHelperEnums,The following statement contains a magic number: if (BitValues.Count > 0 && (BitMap.Count == 0 || BitMap.Count == BitValues.Count))              {                  if(BitMap.Count == 0)                  {                      bZeroFieldInEnum = true;                  }                    //Now we will create the enum                    EnumObj = new CodeTypeDeclaration(strEnum);                    //Now convert the type to the generated enum type                    if (prop.IsArray)                  {                      cmp.Type = new CodeTypeReference(strEnum' 1);                  }                  else                  {                      cmp.Type = new CodeTypeReference(strEnum);                  }                    EnumObj.IsEnum = true;                  EnumObj.TypeAttributes = TypeAttributes.Public;                  Int32 bitValue = 1;                  Int64 maxBitValue = 0;                    for (int i = 0; i < BitValues.Count; i++)                  {                      cmf = new CodeMemberField();                      cmf.Name = BitValues[i].ToString();                      if (BitMap.Count > 0)                      {                          cmf.InitExpression = new CodePrimitiveExpression(BitMap[i]);                          Int64 test = System.Convert.ToInt64(BitMap[i]'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.UInt64)));                          if (test > maxBitValue) maxBitValue=test;                      }                      else                      {                          cmf.InitExpression = new CodePrimitiveExpression(bitValue);                          if (bitValue > maxBitValue) maxBitValue=bitValue;                            // Now shift 1 more bit so that we can put it for the                           // next element in the enum                            bitValue = bitValue << 1;                      }                        if(bZeroFieldInEnum == false)                      {                          if( (System.Convert.ToInt64(BitMap[i]'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.UInt64))) == 0) )                          {                              bZeroFieldInEnum = true;                          }                      }                      EnumObj.Members.Add(cmf);                  }                    // If there is no 0 valued field in enum' just add a invalid for enum                  // This is just to show in property browser                    if ((bNullable == true) &&  (bZeroFieldInEnum == false))                  {                      // use the 0 enum position for NULL                      cmf = new CodeMemberField ();                      cmf.Name = "NULL_ENUM_VALUE";                      cmf.InitExpression = new CodePrimitiveExpression(0);                      EnumObj.Members.Add(cmf);                      prop.NullEnumValue = 0;                  }                  else if ((bNullable == true) &&  (bZeroFieldInEnum == true))                  {                      // must create an entry for NULL that is not zero and is not used                      // use the another unused enum position for NULL                      cmf = new CodeMemberField ();                      cmf.Name = "NULL_ENUM_VALUE";                      if (BitValues.Count > 30)                      {                           maxBitValue = maxBitValue + 1;                      }                      else                      {                          maxBitValue = maxBitValue << 1;                      }                      cmf.InitExpression = new CodePrimitiveExpression((int)(maxBitValue));                      EnumObj.Members.Add(cmf);                       // just add one - we won't preserve the bit shifting but this won't be used in CIM anyway.                       prop.NullEnumValue = (int)(maxBitValue);                    }                  else if ((bNullable == false) && (bZeroFieldInEnum == false))                  {                      // add an entry for 0 valued enum                      cmf = new CodeMemberField ();                      cmf.Name = "INVALID_ENUM_VALUE";                      cmf.InitExpression = new CodePrimitiveExpression(0);                      EnumObj.Members.Add(cmf);                      prop.NullEnumValue = 0;                  }                    cc.Members.Add(EnumObj);                  isEnumAdded = true;              }
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateConstructorWithScopeKeys,The following statement contains a magic number: if (arrKeyType.Count > 0)              {                  for(int i=0; i < arrKeys.Count;i++)                  {                      cpde = new CodeParameterDeclarationExpression();                      cpde.Type = new CodeTypeReference(((CodeTypeReference)arrKeyType[i]).BaseType);                      cpde.Name = "key"+arrKeys[i].ToString();                      cctor.Parameters.Add(cpde);                  }                                    // if the key of the class maps to "System.Management.ManagementPath" type then add a dummy param                  // to avoid duplicate constructors                  if(cctor.Parameters.Count == 2 && cctor.Parameters[1].Type.BaseType == new CodeTypeReference(PublicNamesUsed["PathClass"].ToString()).BaseType)                  {                      cpde = new CodeParameterDeclarationExpression();                      cpde.Type = new CodeTypeReference("System.Object");                      cpde.Name = "dummyParam";                      cctor.Parameters.Add(cpde);                      cctor.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression("dummyParam")'new CodePrimitiveExpression(null)));                  }                    cmieInit.Parameters.Add(new CodeCastExpression(                      new CodeTypeReference(PublicNamesUsed["ScopeClass"].ToString())'                      new CodeVariableReferenceExpression(PrivateNamesUsed["ScopeParam"].ToString())));                    cmie = new CodeMethodInvokeExpression();                  cmie.Method.TargetObject = new CodeTypeReferenceExpression(PrivateNamesUsed["GeneratedClassName"].ToString());                  cmie.Method.MethodName = PublicNamesUsed["ConstructPathFunction"].ToString();                                    for(int i=0; i < arrKeys.Count;i++)                  {                      cmie.Parameters.Add(new CodeVariableReferenceExpression("key"+arrKeys[i]));                  }                    coce = new CodeObjectCreateExpression();                  coce.CreateType = new CodeTypeReference(PublicNamesUsed["PathClass"].ToString());                  coce.Parameters.Add(cmie);                  cmieInit.Parameters.Add(coce);                  cmieInit.Parameters.Add(new CodePrimitiveExpression(null));                  cctor.Statements.Add(new CodeExpressionStatement(cmieInit));                    cc.Members.Add(cctor);              }
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The following statement contains a magic number: ArrayList outParamsName = new ArrayList(5);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The following statement contains a magic number: ArrayList inoutParams = new ArrayList(5);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GenerateMethods,The following statement contains a magic number: ArrayList inoutParamsType = new ArrayList(5);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ConvertBitMapValueToInt32,The following statement contains a magic number: if (bitMap.StartsWith(strTemp' StringComparison.Ordinal) || bitMap.StartsWith(strTemp.ToUpper(CultureInfo.InvariantCulture)' StringComparison.Ordinal))              {                  strTemp = String.Empty;                  char[] arrString = bitMap.ToCharArray();                  int Len = bitMap.Length;                  for (int i = 2 ; i < Len ; i++)                  {                      strTemp = strTemp + arrString[i];                  }                  ret = System.Convert.ToInt32(strTemp'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32)));              }              else              {                  ret = System.Convert.ToInt32(bitMap'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32)));              }
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"****"'tempStr'dmtf'year'0'4);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'month'4'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'month'4'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'day'6'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'day'6'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'hour'8'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'hour'8'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'minute'10'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'minute'10'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'second'12'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: DateTimeConversionFunctionHelper(tryblock.TryStatements'"**"'tempStr'dmtf'second'12'2);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(15));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(6));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: cboe.Right = new CodePrimitiveExpression(1000);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(22));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(3));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(21));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDateTimeFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(4));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cmie1.Parameters.Add(new CodePrimitiveExpression(8));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cmie1.Parameters.Add(new CodePrimitiveExpression(2));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cmie1.Parameters.Add(new CodePrimitiveExpression(2));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cmie1.Parameters.Add(new CodePrimitiveExpression(2));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cboe1.Right = new CodePrimitiveExpression(1000);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cboe.Right = new CodePrimitiveExpression(6);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(6));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFTimeIntervalFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(6));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cboe.Right = new CodePrimitiveExpression(999);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cmie2.Parameters.Add(new CodePrimitiveExpression(3));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cmie3.Parameters.Add(new CodePrimitiveExpression(3));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cmie2.Parameters.Add(new CodePrimitiveExpression(4));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cboe1.Right = new CodePrimitiveExpression(1000);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cboe.Right = new CodePrimitiveExpression(6);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cmie1.Parameters.Add(new CodePrimitiveExpression(6));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToDMTFDateTimeFunction,The following statement contains a magic number: cmie1.Parameters.Add(new CodePrimitiveExpression(6));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ToDMTFDateHelper,The following statement contains a magic number: cmie2.Parameters.Add(new CodePrimitiveExpression(2));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(21));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(4));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: ToTimeSpanHelper(0'8'days'tryblock.TryStatements);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: ToTimeSpanHelper(8'2'hours'tryblock.TryStatements);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: ToTimeSpanHelper(8'2'hours'tryblock.TryStatements);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: ToTimeSpanHelper(10'2'minutes'tryblock.TryStatements);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: ToTimeSpanHelper(10'2'minutes'tryblock.TryStatements);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: ToTimeSpanHelper(12'2'seconds'tryblock.TryStatements);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: ToTimeSpanHelper(12'2'seconds'tryblock.TryStatements);
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(15));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: cmie.Parameters.Add(new CodePrimitiveExpression(6));
Magic Number,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,AddToTimeSpanFunction,The following statement contains a magic number: tryblock.TryStatements.Add                  (                  new CodeAssignStatement(                  new CodeVariableReferenceExpression(ticks)'                  new CodeBinaryOperatorExpression(                  cmie'                  CodeBinaryOperatorType.Multiply'                  new CodeCastExpression(                  "System.Int64"'                  new CodeBinaryOperatorExpression(                  new CodeFieldReferenceExpression(                  new CodeTypeReferenceExpression("System.TimeSpan")'                  "TicksPerMillisecond"                  )'                  CodeBinaryOperatorType.Divide'                  new CodePrimitiveExpression(1000)                  )                  )                  )                  )                  );
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetQualifierSet_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.GetQualifierSet_f(3' pWbemClassObject' out pQualSet);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Get_,The following statement contains a magic number: int hr = WmiNetUtilsHelper.Get_f(4' pWbemClassObject' wszName' lFlags' ref pVal' ref pType' ref plFlavor);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Put_,The following statement contains a magic number: int res = WmiNetUtilsHelper.Put_f(5' pWbemClassObject' wszName' lFlags' ref pVal' Type);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Delete_,The following statement contains a magic number: int res = WmiNetUtilsHelper.Delete_f(6' pWbemClassObject' wszName);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetNames_,The following statement contains a magic number: int res = WmiNetUtilsHelper.GetNames_f(7' pWbemClassObject' wszQualifierName' lFlags' ref pQualifierVal' out pNames);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,BeginEnumeration_,The following statement contains a magic number: int res = WmiNetUtilsHelper.BeginEnumeration_f(8' pWbemClassObject' lEnumFlags);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Next_,The following statement contains a magic number: int res = WmiNetUtilsHelper.Next_f(9' pWbemClassObject' lFlags' ref strName' ref pVal' ref pType' ref plFlavor);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,EndEnumeration_,The following statement contains a magic number: int res = WmiNetUtilsHelper.EndEnumeration_f(10' pWbemClassObject);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetPropertyQualifierSet_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.GetPropertyQualifierSet_f(11' pWbemClassObject' wszProperty' out pQualSet);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Clone_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.Clone_f(12' pWbemClassObject' out pWbemClassObjectNew);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetObjectText_,The following statement contains a magic number: int res = WmiNetUtilsHelper.GetObjectText_f(13' pWbemClassObject' lFlags' out pstrObjectText);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,SpawnDerivedClass_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.SpawnDerivedClass_f(14' pWbemClassObject' lFlags' out pWbemClassObjectNew);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,SpawnInstance_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.SpawnInstance_f(15' pWbemClassObject' lFlags' out pWbemClassObjectNew);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,CompareTo_,The following statement contains a magic number: int res = WmiNetUtilsHelper.CompareTo_f(16' pWbemClassObject' lFlags' pCompareTo.pWbemClassObject);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetPropertyOrigin_,The following statement contains a magic number: int res = WmiNetUtilsHelper.GetPropertyOrigin_f(17' pWbemClassObject' wszName' out pstrClassName);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,InheritsFrom_,The following statement contains a magic number: int res = WmiNetUtilsHelper.InheritsFrom_f(18' pWbemClassObject' strAncestor);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetMethod_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.GetMethod_f(19' pWbemClassObject' wszName' lFlags' out pInSignature' out pOutSignature);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,PutMethod_,The following statement contains a magic number: int res = WmiNetUtilsHelper.PutMethod_f(20' pWbemClassObject' wszName' lFlags' pInSignature' pOutSignature);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,DeleteMethod_,The following statement contains a magic number: int res = WmiNetUtilsHelper.DeleteMethod_f(21' pWbemClassObject' wszName);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,BeginMethodEnumeration_,The following statement contains a magic number: int res =  WmiNetUtilsHelper.BeginMethodEnumeration_f(22' pWbemClassObject' lEnumFlags);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,NextMethod_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.NextMethod_f(23' pWbemClassObject' lFlags' out pstrName' out pInSignature' out pOutSignature);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,EndMethodEnumeration_,The following statement contains a magic number: int res = WmiNetUtilsHelper.EndMethodEnumeration_f(24' pWbemClassObject);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetMethodQualifierSet_,The following statement contains a magic number: int hResult = WmiNetUtilsHelper.GetMethodQualifierSet_f(25' pWbemClassObject' wszMethod' out pQualSet);
Magic Number,System.Management,IWbemClassObjectFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetMethodOrigin_,The following statement contains a magic number: int res = WmiNetUtilsHelper.GetMethodOrigin_f(26' pWbemClassObject' wszMethodName' out pstrClassName);
Magic Number,System.Management,IWbemQualifierSetFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Get_,The following statement contains a magic number: int res = WmiNetUtilsHelper.QualifierGet_f(3' pWbemQualifierSet' wszName' lFlags' ref pVal' ref plFlavor);
Magic Number,System.Management,IWbemQualifierSetFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Put_,The following statement contains a magic number: int res =  WmiNetUtilsHelper.QualifierPut_f(4' pWbemQualifierSet' wszName' ref pVal' lFlavor);
Magic Number,System.Management,IWbemQualifierSetFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Delete_,The following statement contains a magic number: int res = WmiNetUtilsHelper.QualifierDelete_f(5' pWbemQualifierSet' wszName);
Magic Number,System.Management,IWbemQualifierSetFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,GetNames_,The following statement contains a magic number: int res = WmiNetUtilsHelper.QualifierGetNames_f(6' pWbemQualifierSet' lFlags' out pNames);
Magic Number,System.Management,IWbemQualifierSetFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,BeginEnumeration_,The following statement contains a magic number: int res = WmiNetUtilsHelper.QualifierBeginEnumeration_f(7' pWbemQualifierSet' lFlags);
Magic Number,System.Management,IWbemQualifierSetFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,Next_,The following statement contains a magic number: int res = WmiNetUtilsHelper.QualifierNext_f(8' pWbemQualifierSet' lFlags' out pstrName' out pVal' out plFlavor);
Magic Number,System.Management,IWbemQualifierSetFreeThreaded,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,EndEnumeration_,The following statement contains a magic number: int res = WmiNetUtilsHelper.QualifierEndEnumeration_f(9' pWbemQualifierSet);
Magic Number,System.Management,MTAHelper,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,IsNoContextMTA,The following statement contains a magic number: try              {                  // If we CANNOT call CoGetObjectContext' assume we are not in the 'no context MTA' for safety                  // (NOTE: This call is expected to always succeed)                  if(0 != CoGetObjectContext(ref IID_IComThreadingInfo' out pComThreadingInfo))                      return false;                    WmiNetUtilsHelper.APTTYPE aptType;                    // If we CANNOT get the apartment type' assume we are not in the 'no context MTA' for safety                  // (NOTE: This call is expected to always succeed)                  if(0 != WmiNetUtilsHelper.GetCurrentApartmentType_f(3' pComThreadingInfo' out aptType))                      return false;                    // If we are not in the MTA' return false                  if(aptType != WmiNetUtilsHelper.APTTYPE.APTTYPE_MTA)                      return false;                    // If we CAN get to the IObejctContext interface' we have a 'context'                  if(0 == Marshal.QueryInterface(pComThreadingInfo' ref IID_IObjectContext' out pObjectContext))                      return false;              }              finally              {                  if(pComThreadingInfo != IntPtr.Zero)                      Marshal.Release(pComThreadingInfo);                  if(pObjectContext != IntPtr.Zero)                      Marshal.Release(pObjectContext);              }
Magic Number,System.Management,MTAHelper,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\InteropClasses\WMIInterop.cs,IsWindows2000OrHigher,The following statement contains a magic number: if(os.Platform==PlatformID.Win32NT && os.Version >= new Version(5' 0))                  return true;
Duplicate Code,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GeneratePropertyHelperEnums,The method contains a code clone-set at the following line numbers (starting from the method definition): ((67' 88)' (173' 194))
Missing Default,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,InitializeCodeGenerator,The following switch statement is missing a default case: switch(lang)                  {                      case CodeLanguage.VB:                          strProvider = "Visual Basic.";                          cp = new VBCodeProvider();                          break;                        case CodeLanguage.JScript:                          strProvider = "JScript.NET.";                          bSucceeded = false; // JScriptCodeProvider does not exist on CoreFx                          break;                        case CodeLanguage.CSharp:                          strProvider = "C#.";                          cp= new CSharpCodeProvider() ;                          break;                        case CodeLanguage.VJSharp:                          strProvider = "Visual J#.";                          bSucceeded = false;                          curAssemblyName = Assembly.GetExecutingAssembly().GetName();                          assemblyName = new AssemblyName();                                                    assemblyName.CultureInfo = new CultureInfo("");                                              assemblyName.Name = "VJSharpCodeProvider";                          assemblyName.SetPublicKey(curAssemblyName.GetPublicKey());                          assemblyName.Version = curAssemblyName.Version;                          asm = Assembly.Load(assemblyName);                          //asm = Assembly.LoadWithPartialName("VJSharpCodeProvider");                          if(asm != null)                          {                              codeProvType = asm.GetType("Microsoft.VJSharp.VJSharpCodeProvider");                              if( codeProvType != null)                              {                                  cp = (System.CodeDom.Compiler.CodeDomProvider)Activator.CreateInstance(codeProvType);                                  bSucceeded = true;                              }                          }                          break;                                  case CodeLanguage.Mcpp:                          strProvider = "Managed C++.";                          bSucceeded = false;                          curAssemblyName = Assembly.GetExecutingAssembly().GetName();                          assemblyName = new AssemblyName();                                                    assemblyName.CultureInfo = new CultureInfo("");                          assemblyName.SetPublicKey(curAssemblyName.GetPublicKey());                          assemblyName.Name = "CppCodeProvider";                          assemblyName.Version = new Version(VSVERSION);                          asm = Assembly.Load(assemblyName);                            if(asm != null)                          {                              codeProvType = asm.GetType("Microsoft.VisualC.CppCodeProvider");                              if( codeProvType != null)                              {                                  cp = (System.CodeDom.Compiler.CodeDomProvider)Activator.CreateInstance(codeProvType);                                  bSucceeded = true;                              }                          }                          break;                  }
Missing Default,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,GetConversionFunction,The following switch statement is missing a default case: switch(cimType)              {                  case CimType.UInt8:                        retFunctionName = "ToByte";                      break;                                case CimType.SInt8:                      retFunctionName = "ToSByte";                      break;                    case CimType.SInt16:                      retFunctionName = "ToInt16";                      break;                    case CimType.UInt16:                      if (bUnsignedSupported == false)                      {                          retFunctionName = "ToInt16";                      }                      else                      {                          retFunctionName = "ToUInt16";                      }                      break;                                case CimType.SInt32:                                    retFunctionName = "ToInt32";                      break;                                case CimType.UInt32:                  {                      if (bUnsignedSupported == false)                      {                          retFunctionName = "ToInt32";                      }                      else                      {                          retFunctionName = "ToUInt32";                      }                      break;                  }                  case CimType.SInt64:                  {                      retFunctionName = "ToInt64";                      break;                  }                  case CimType.UInt64:                  {                      if (bUnsignedSupported == false)                      {                          retFunctionName = "ToInt64";                      }                      else                      {                          retFunctionName = "ToUInt64";                      }                      break;                  }                  case CimType.Real32:                  {                      retFunctionName = "ToSingle";                      break;                  }                  case CimType.Real64:                  {                      retFunctionName = "ToDouble";                      break;                  }                  case CimType.Boolean:                  {                      retFunctionName = "ToBoolean";                      break;                  }                    case CimType.Char16:                  {                      retFunctionName = "ToChar";                      break;                  }                                    case CimType.String:                  {                      retFunctionName = "ToString";                      break;                  }                }
Missing Default,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,IsPropertyValueType,The following switch statement is missing a default case: switch(cType)              {                  case CimType.String:                  case CimType.Reference:                  case CimType.Object:                      ret = false;                      break;                }
Missing Default,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ConvertToNumericValueAndAddToArray,The following switch statement is missing a default case: switch(cimType)              {                  case CimType.UInt8:                                case CimType.SInt8:                  case CimType.SInt16:                  case CimType.UInt16:                  case CimType.SInt32:                                  arrayToAdd.Add(System.Convert.ToInt32(numericValue'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32))));                      retFunctionName = "ToInt32";                      enumType = "System.Int32";                      break;                    case CimType.UInt32:                      arrayToAdd.Add(System.Convert.ToInt32(numericValue'(IFormatProvider)CultureInfo.InvariantCulture.GetFormat(typeof(System.Int32))));                      retFunctionName = "ToInt32";                      enumType = "System.Int32";                      break;              }
Missing Default,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,CreateObjectForProperty,The following switch statement is missing a default case: switch(strType)              {                  case "System.DateTime" :                       if(param == null)                      {                          return new CodeFieldReferenceExpression(new CodeTypeReferenceExpression("System.DateTime")'"MinValue");                      }                      else                      {                          cmie = new CodeMethodInvokeExpression();                          cmie.Parameters.Add(param);                          cmie.Method.MethodName = PrivateNamesUsed["ToDateTimeMethod"].ToString();                          return cmie;                      }                                        case "System.TimeSpan" :                       if(param == null)                      {                          coce = new CodeObjectCreateExpression();                          coce.CreateType = new CodeTypeReference("System.TimeSpan");                          coce.Parameters.Add(new CodePrimitiveExpression(0));                          coce.Parameters.Add(new CodePrimitiveExpression(0));                          coce.Parameters.Add(new CodePrimitiveExpression(0));                          coce.Parameters.Add(new CodePrimitiveExpression(0));                          coce.Parameters.Add(new CodePrimitiveExpression(0));                          return coce;                      }                      else                      {                          cmie = new CodeMethodInvokeExpression();                          cmie.Parameters.Add(param);                          cmie.Method.MethodName = PrivateNamesUsed["ToTimeSpanMethod"].ToString();                          return cmie;                      }                                    case "System.Management.ManagementPath":                      coce = new CodeObjectCreateExpression();                      coce.CreateType = new CodeTypeReference(PublicNamesUsed["PathClass"].ToString());                      coce.Parameters.Add(param);                      return coce;                                      }
Missing Default,System.Management,ManagementClassGenerator,C:\selectedRepos\dotnet_corefx\src\System.Management\src\System\Management\WMIGenerator.cs,ConvertPropertyToString,The following switch statement is missing a default case: switch(strType)              {                  case "System.DateTime" :                         CodeMethodInvokeExpression cmie1 = new CodeMethodInvokeExpression();                      cmie1.Parameters.Add(new CodeCastExpression(new CodeTypeReference("System.DateTime")'beginingExpression));                      cmie1.Method.MethodName = PrivateNamesUsed["ToDMTFDateTimeMethod"].ToString();                      return cmie1;                                        case "System.TimeSpan" :                         CodeMethodInvokeExpression cmie2 = new CodeMethodInvokeExpression();                      cmie2.Parameters.Add(new CodeCastExpression(new CodeTypeReference("System.TimeSpan")'beginingExpression));                      cmie2.Method.MethodName = PrivateNamesUsed["ToDMTFTimeIntervalMethod"].ToString();                      return cmie2;                                    case "System.Management.ManagementPath":                      return  new CodePropertyReferenceExpression(new CodeCastExpression(                          new CodeTypeReference(PublicNamesUsed["PathClass"].ToString())'                          beginingExpression)'PublicNamesUsed["PathProperty"].ToString());                                      }
