Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The method has 155 lines of code.
Long Method,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMetadataTables,The method has 185 lines of code.
Long Method,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The method has 194 lines of code.
Long Method,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,WritePEHeader,The method has 102 lines of code.
Complex Method,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadMembers,Cyclomatic complexity of the method is 9
Complex Method,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,ContentEquals,Cyclomatic complexity of the method is 10
Complex Method,System.Reflection.Metadata,CustomAttribute,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\CustomAttribute.cs,ProjectAttributeTargetValue,Cyclomatic complexity of the method is 12
Complex Method,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,MetadataReader,Cyclomatic complexity of the method is 8
Complex Method,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,CalculateMethodDefTreatmentAndRowId,Cyclomatic complexity of the method is 10
Complex Method,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMetadataTables,Cyclomatic complexity of the method is 45
Complex Method,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,Cyclomatic complexity of the method is 8
Complex Method,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,System.Reflection.Metadata.Ecma335,MetadataWriterUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\MetadataWriterUtilities.cs,GetConstantTypeCode,Cyclomatic complexity of the method is 15
Complex Method,System.Reflection.Metadata.Ecma335,NamespaceCache,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\NamespaceCache.cs,LinkChildToParentNamespace,Cyclomatic complexity of the method is 8
Long Parameter List,System.Reflection.Internal,ByteSequenceComparer,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\ByteSequenceComparer.cs,Equals,The method has 5 parameters. Parameters: left' leftStart' right' rightStart' length
Long Parameter List,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetBits,The method has 6 parameters. Parameters: value' isNegative' scale' low' mid' high
Long Parameter List,System.Reflection.Internal,StreamMemoryBlockProvider,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\MemoryBlocks\StreamMemoryBlockProvider.cs,StreamMemoryBlockProvider,The method has 5 parameters. Parameters: stream' imageStart' imageSize' isFileStream' leaveOpen
Long Parameter List,System.Reflection.Internal,FileStreamReadLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\FileStreamReadLightUp.netstandard1.1.cs,ReadFile,The method has 5 parameters. Parameters: fileHandle' buffer' byteCount' bytesRead' overlapped
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekUtf8NullTerminated,The method has 5 parameters. Parameters: offset' prefix' utf8Decoder' numberOfBytesRead' terminator
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,Utf8NullTerminatedEquals,The method has 5 parameters. Parameters: offset' text' utf8Decoder' terminator' ignoreCase
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,Utf8NullTerminatedStartsWith,The method has 5 parameters. Parameters: offset' text' utf8Decoder' terminator' ignoreCase
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,Utf8NullTerminatedFastCompare,The method has 6 parameters. Parameters: offset' text' textStart' firstDifferenceIndex' terminator' ignoreCase
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchForSlot,The method has 5 parameters. Parameters: rowCount' rowSize' referenceListOffset' referenceValue' isReferenceSmall
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReference,The method has 5 parameters. Parameters: rowCount' rowSize' referenceOffset' referenceValue' isReferenceSmall
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReference,The method has 5 parameters. Parameters: ptrTable' rowSize' referenceOffset' referenceValue' isReferenceSmall
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReferenceRange,The method has 7 parameters. Parameters: rowCount' rowSize' referenceOffset' referenceValue' isReferenceSmall' startRowNumber' endRowNumber
Long Parameter List,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReferenceRange,The method has 7 parameters. Parameters: ptrTable' rowSize' referenceOffset' referenceValue' isReferenceSmall' startRowNumber' endRowNumber
Long Parameter List,System.Reflection.Metadata,BlobWriter,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriter.cs,WriteUTF8,The method has 5 parameters. Parameters: str' start' length' allowUnpairedSurrogates' prependSize
Long Parameter List,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,WriteUTF8,The method has 5 parameters. Parameters: str' start' length' allowUnpairedSurrogates' prependSize
Long Parameter List,System.Reflection.Metadata,MethodSignature,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Signatures\MethodSignature.cs,MethodSignature,The method has 5 parameters. Parameters: header' returnType' requiredParameterCount' genericParameterCount' parameterTypes
Long Parameter List,System.Reflection.Metadata,ExceptionRegion,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\ExceptionRegion.cs,ExceptionRegion,The method has 6 parameters. Parameters: kind' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset
Long Parameter List,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeStreamReaders,The method has 5 parameters. Parameters: metadataRoot' streamHeaders' metadataStreamKind' metadataTableStream' standalonePdbStream
Long Parameter List,System.Reflection.Metadata,ProjectionInfo,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.WinMD.cs,ProjectionInfo,The method has 7 parameters. Parameters: winRtNamespace' clrNamespace' clrName' clrAssembly' treatment' signatureTreatment' isIDisposable
Long Parameter List,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,MethodBodyBlock,The method has 6 parameters. Parameters: localVariablesInitialized' maxStack' localSignatureHandle' il' exceptionRegions' size
Long Parameter List,System.Reflection.Metadata,SequencePoint,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\SequencePoint.cs,SequencePoint,The method has 6 parameters. Parameters: document' offset' startLine' startColumn' endLine' endColumn
Long Parameter List,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,AddMethodBody,The method has 6 parameters. Parameters: codeSize' maxStack' exceptionRegionCount' hasSmallExceptionRegions' localVariablesSignature' attributes
Long Parameter List,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The method has 5 parameters. Parameters: codeSize' maxStack' exceptionRegionCount' attributes' localVariablesSignature
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,AddModule,The method has 5 parameters. Parameters: generation' moduleName' mvid' encId' encBaseId
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,AddAssembly,The method has 6 parameters. Parameters: name' version' culture' publicKey' flags' hashAlgorithm
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,AddAssemblyReference,The method has 6 parameters. Parameters: name' version' culture' publicKeyOrToken' flags' hashValue
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,AddTypeDefinition,The method has 6 parameters. Parameters: attributes' namespace' name' baseType' fieldList' methodList
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,AddMethodDefinition,The method has 6 parameters. Parameters: attributes' implAttributes' name' signature' bodyOffset' parameterList
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,AddExportedType,The method has 5 parameters. Parameters: attributes' namespace' name' implementation' typeDefinitionId
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,AddLocalScope,The method has 6 parameters. Parameters: method' importScope' variableList' constantList' startOffset' length
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMetadataTables,The method has 5 parameters. Parameters: writer' metadataSizes' stringMap' methodBodyStreamRva' mappedFieldDataStreamRva
Long Parameter List,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,AddCatchRegion,The method has 5 parameters. Parameters: tryStart' tryEnd' handlerStart' handlerEnd' catchType
Long Parameter List,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,AddFilterRegion,The method has 5 parameters. Parameters: tryStart' tryEnd' handlerStart' handlerEnd' filterStart
Long Parameter List,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,AddExceptionRegion,The method has 7 parameters. Parameters: kind' tryStart' tryEnd' handlerStart' handlerEnd' filterStart' catchType
Long Parameter List,System.Reflection.Metadata.Ecma335,ExceptionHandlerInfo,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,ExceptionHandlerInfo,The method has 7 parameters. Parameters: kind' tryStart' tryEnd' handlerStart' handlerEnd' filterStart' catchType
Long Parameter List,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,AddCatch,The method has 5 parameters. Parameters: tryOffset' tryLength' handlerOffset' handlerLength' catchType
Long Parameter List,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,AddFilter,The method has 5 parameters. Parameters: tryOffset' tryLength' handlerOffset' handlerLength' filterOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,Add,The method has 7 parameters. Parameters: kind' tryOffset' tryLength' handlerOffset' handlerLength' catchType' filterOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,AddUnchecked,The method has 6 parameters. Parameters: kind' tryOffset' tryLength' handlerOffset' handlerLength' catchTokenOrOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The method has 5 parameters. Parameters: rowCounts' externalRowCounts' heapSizes' metadataVersionByteCount' isStandaloneDebugMetadata
Long Parameter List,System.Reflection.Metadata.Ecma335,NamespaceData,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\NamespaceData.cs,NamespaceData,The method has 6 parameters. Parameters: name' fullName' parent' namespaceDefinitions' typeDefinitions' exportedTypes
Long Parameter List,System.Reflection.Metadata.Ecma335,ModuleTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ModuleTableReader,The method has 5 parameters. Parameters: numberOfRows' stringHeapRefSize' guidHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,TypeRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeRefTableReader,The method has 5 parameters. Parameters: numberOfRows' resolutionScopeRefSize' stringHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeDefTableReader,The method has 7 parameters. Parameters: numberOfRows' fieldRefSize' methodRefSize' typeDefOrRefRefSize' stringHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,FieldTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldTableReader,The method has 5 parameters. Parameters: numberOfRows' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,MethodTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodTableReader,The method has 6 parameters. Parameters: numberOfRows' paramRefSize' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,InterfaceImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,InterfaceImplTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' typeDefTableRowRefSize' typeDefOrRefRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,MemberRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MemberRefTableReader,The method has 6 parameters. Parameters: numberOfRows' memberRefParentRefSize' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ConstantTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ConstantTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' hasConstantRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,CustomAttributeTableReader,The method has 7 parameters. Parameters: numberOfRows' declaredSorted' hasCustomAttributeRefSize' customAttributeTypeRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,FieldMarshalTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldMarshalTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' hasFieldMarshalRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,DeclSecurityTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,DeclSecurityTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' hasDeclSecurityRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ClassLayoutTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ClassLayoutTableReader,The method has 5 parameters. Parameters: numberOfRows' declaredSorted' typeDefTableRowRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,FieldLayoutTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldLayoutTableReader,The method has 5 parameters. Parameters: numberOfRows' declaredSorted' fieldTableRowRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,EventMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,EventMapTableReader,The method has 5 parameters. Parameters: numberOfRows' typeDefTableRowRefSize' eventRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,EventTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,EventTableReader,The method has 5 parameters. Parameters: numberOfRows' typeDefOrRefRefSize' stringHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,PropertyMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,PropertyMapTableReader,The method has 5 parameters. Parameters: numberOfRows' typeDefTableRowRefSize' propertyRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,PropertyTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,PropertyTableReader,The method has 5 parameters. Parameters: numberOfRows' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,MethodSemanticsTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodSemanticsTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' methodTableRowRefSize' hasSemanticRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,MethodImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodImplTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' typeDefTableRowRefSize' methodDefOrRefRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ImplMapTableReader,The method has 7 parameters. Parameters: numberOfRows' declaredSorted' moduleRefTableRowRefSize' memberForwardedRefSize' stringHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,FieldRVATableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldRVATableReader,The method has 5 parameters. Parameters: numberOfRows' declaredSorted' fieldTableRowRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,AssemblyTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyTableReader,The method has 5 parameters. Parameters: numberOfRows' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,AssemblyRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyRefTableReader,The method has 6 parameters. Parameters: numberOfRows' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset' metadataKind
Long Parameter List,System.Reflection.Metadata.Ecma335,FileTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FileTableReader,The method has 5 parameters. Parameters: numberOfRows' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ExportedTypeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ExportedTypeTableReader,The method has 5 parameters. Parameters: numberOfRows' implementationRefSize' stringHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ManifestResourceTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ManifestResourceTableReader,The method has 5 parameters. Parameters: numberOfRows' implementationRefSize' stringHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,NestedClassTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,NestedClassTableReader,The method has 5 parameters. Parameters: numberOfRows' declaredSorted' typeDefTableRowRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,GenericParamTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GenericParamTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' typeOrMethodDefRefSize' stringHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,MethodSpecTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodSpecTableReader,The method has 5 parameters. Parameters: numberOfRows' methodDefOrRefRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,GenericParamConstraintTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GenericParamConstraintTableReader,The method has 6 parameters. Parameters: numberOfRows' declaredSorted' genericParamTableRowRefSize' typeDefOrRefRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,DocumentTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,DocumentTableReader,The method has 5 parameters. Parameters: numberOfRows' guidHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,MethodDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,MethodDebugInformationTableReader,The method has 5 parameters. Parameters: numberOfRows' documentRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,LocalScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalScopeTableReader,The method has 8 parameters. Parameters: numberOfRows' declaredSorted' methodRefSize' importScopeRefSize' localVariableRefSize' localConstantRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,LocalConstantTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalConstantTableReader,The method has 5 parameters. Parameters: numberOfRows' stringHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,StateMachineMethodTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,StateMachineMethodTableReader,The method has 5 parameters. Parameters: numberOfRows' declaredSorted' methodRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,ImportScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,ImportScopeTableReader,The method has 5 parameters. Parameters: numberOfRows' importScopeRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.Metadata.Ecma335,CustomDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,CustomDebugInformationTableReader,The method has 7 parameters. Parameters: numberOfRows' declaredSorted' hasCustomDebugInformationRefSize' guidHeapRefSize' blobHeapRefSize' containingBlock' containingBlockOffset
Long Parameter List,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,ManagedPEBuilder,The method has 11 parameters. Parameters: header' metadataRootBuilder' ilStream' mappedFieldData' managedResources' nativeResources' debugDirectoryBuilder' strongNameSignatureSize' entryPoint' flags' deterministicIdProvider
Long Parameter List,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,ManagedTextSection,The method has 8 parameters. Parameters: imageCharacteristics' machine' ilStreamSize' metadataSize' resourceDataSize' strongNameSignatureSize' debugDataSize' mappedFieldDataSize
Long Parameter List,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,Serialize,The method has 11 parameters. Parameters: builder' relativeVirtualAddess' entryPointTokenOrRelativeVirtualAddress' corFlags' baseAddress' metadataBuilder' ilBuilder' mappedFieldDataBuilderOpt' resourceBuilderOpt' debugDataBuilderOpt' strongNameSignature
Long Parameter List,System.Reflection.PortableExecutable,SerializedSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,SerializedSection,The method has 6 parameters. Parameters: builder' name' characteristics' relativeVirtualAddress' sizeOfRawData' pointerToRawData
Long Parameter List,System.Reflection.PortableExecutable,PEHeaderBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEHeaderBuilder.cs,PEHeaderBuilder,The method has 19 parameters. Parameters: machine' sectionAlignment' fileAlignment' imageBase' majorLinkerVersion' minorLinkerVersion' majorOperatingSystemVersion' minorOperatingSystemVersion' majorImageVersion' minorImageVersion' majorSubsystemVersion' minorSubsystemVersion' subsystem' dllCharacteristics' imageCharacteristics' sizeOfStackReserve' sizeOfStackCommit' sizeOfHeapReserve' sizeOfHeapCommit
Long Parameter List,System.Reflection.PortableExecutable,DebugDirectoryEntry,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\DebugDirectory\DebugDirectoryEntry.cs,DebugDirectoryEntry,The method has 7 parameters. Parameters: stamp' majorVersion' minorVersion' type' dataSize' dataRelativeVirtualAddress' dataPointer
Long Parameter List,System.Reflection.PortableExecutable,PEReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEReader.cs,TryOpenCodeViewPortablePdb,The method has 6 parameters. Parameters: codeViewEntry' peImageDirectory' pdbFileStreamProvider' provider' pdbPath' errorToReport
Long Parameter List,System.Reflection.PortableExecutable,PEReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEReader.cs,TryOpenPortablePdbFile,The method has 5 parameters. Parameters: path' id' pdbFileStreamProvider' provider' errorToReport
Long Parameter List,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The method has 6 parameters. Parameters: buffer' start' charPtr' charCount' byteCount' allowUnpairedSurrogates
Long Parameter List,System.Collections.Immutable,ImmutableArray,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray.cs,CreateRange,The method has 5 parameters. Parameters: items' start' length' selector' arg
Long Parameter List,System.Collections.Immutable,ImmutableArray,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Identifier,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,,The length of the parameter s_lazyMemoryMappedViewAccessorType is 34.
Long Identifier,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,,The length of the parameter s_lazyMemoryMappedFileAccessType is 32.
Long Identifier,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,,The length of the parameter s_lazyMemoryMappedFileSecurityType is 34.
Long Identifier,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,,The length of the parameter s_lazyHandleInheritabilityType is 30.
Long Identifier,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,,The length of the parameter s_lazySafeMemoryMappedViewHandle is 32.
Long Identifier,System.Reflection.Metadata,PathUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\PathUtilities.cs,,The length of the parameter s_platformSpecificDirectorySeparator is 36.
Long Identifier,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,,The length of the parameter SingleByteCompressedIntegerMaxValue is 35.
Long Identifier,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,,The length of the parameter TwoByteCompressedIntegerMaxValue is 32.
Long Identifier,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,,The length of the parameter MinSignedCompressedIntegerValue is 31.
Long Identifier,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,,The length of the parameter MaxSignedCompressedIntegerValue is 31.
Long Identifier,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,,The length of the parameter _previousLengthOrFrozenSuffixLengthDelta is 40.
Long Identifier,System.Reflection.Metadata,PortablePdbVersions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\PortablePdbVersions.cs,,The length of the parameter DebugDirectoryEmbeddedSignature is 31.
Long Identifier,System.Reflection.Metadata,BlobHandle,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\Handles.TypeSystem.cs,,The length of the parameter TemplateParameterOffset_AttributeUsageTarget is 44.
Long Identifier,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the parameter hasCustomDebugInformationRefSizeCombined is 40.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeStringHeap,The length of the parameter stringVirtualIndexToHeapOffsetMap is 33.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,,The length of the parameter _customAttributeTableLastParent is 31.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,,The length of the parameter _customAttributeTableNeedsSorting is 33.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,,The length of the parameter _declSecurityTableNeedsSorting is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,,The length of the parameter _fieldMarshalTableNeedsSorting is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,,The length of the parameter _methodSemanticsTableLastAssociation is 36.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,,The length of the parameter _methodSemanticsTableNeedsSorting is 33.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter CustomAttributeTypeCodedIndexIsSmall is 36.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter HasCustomAttributeCodedIndexIsSmall is 35.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter HasFieldMarshalCodedIndexIsSmall is 32.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter ImplementationCodedIndexIsSmall is 31.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter MemberForwardedCodedIndexIsSmall is 32.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter MemberRefParentCodedIndexIsSmall is 32.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter MethodDefOrRefCodedIndexIsSmall is 31.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter ResolutionScopeCodedIndexIsSmall is 32.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter TypeOrMethodDefCodedIndexIsSmall is 32.
Long Identifier,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,,The length of the parameter HasCustomDebugInformationCodedIndexIsSmall is 42.
Long Identifier,System.Reflection.Metadata.Ecma335,COR20Constants,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\COR20Constants.cs,,The length of the parameter CompressedMetadataTableStreamName is 33.
Long Identifier,System.Reflection.Metadata.Ecma335,COR20Constants,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\COR20Constants.cs,,The length of the parameter UncompressedMetadataTableStreamName is 35.
Long Identifier,System.Reflection.Metadata.Ecma335,COR20Constants,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\COR20Constants.cs,,The length of the parameter MinimalDeltaMetadataTableStreamName is 35.
Long Identifier,System.Reflection.Metadata.Ecma335,TypeRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsResolutionScopeRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,InterfaceImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsTypeDefTableRowRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,MemberRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsMemberRefParentRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsHasCustomAttributeRefSizeSmall is 33.
Long Identifier,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsCustomAttributeTypeRefSizeSmall is 34.
Long Identifier,System.Reflection.Metadata.Ecma335,FieldMarshalTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsHasFieldMarshalRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,DeclSecurityTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsHasDeclSecurityRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,ClassLayoutTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsTypeDefTableRowRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,EventMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsTypeDefTableRowRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,PropertyMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsTypeDefTableRowRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,PropertyPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsPropertyTableRowRefSizeSmall is 31.
Long Identifier,System.Reflection.Metadata.Ecma335,MethodImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsTypeDefTableRowRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsModuleRefTableRowRefSizeSmall is 32.
Long Identifier,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsMemberForwardRowRefSizeSmall is 31.
Long Identifier,System.Reflection.Metadata.Ecma335,AssemblyRefProcessorTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsAssemblyRefTableRowSizeSmall is 31.
Long Identifier,System.Reflection.Metadata.Ecma335,AssemblyRefOSTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsAssemblyRefTableRowRefSizeSmall is 34.
Long Identifier,System.Reflection.Metadata.Ecma335,NestedClassTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsTypeDefTableRowRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,GenericParamTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsTypeOrMethodDefRefSizeSmall is 30.
Long Identifier,System.Reflection.Metadata.Ecma335,GenericParamConstraintTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,,The length of the parameter _IsGenericParamTableRowRefSizeSmall is 35.
Long Identifier,System.Reflection.Metadata.Ecma335,CustomDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,CustomDebugInformationTableReader,The length of the parameter hasCustomDebugInformationRefSize is 32.
Long Identifier,System.Reflection.Metadata.Ecma335,CustomDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,,The length of the parameter _isHasCustomDebugInformationRefSizeSmall is 40.
Long Identifier,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,,The length of the parameter DefaultStrongNameSignatureSize is 30.
Long Identifier,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,Serialize,The length of the parameter entryPointTokenOrRelativeVirtualAddress is 39.
Long Statement,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetBits,The length of the statement  "            // The first' second' and third elements of the returned array contain the low' middle' and high 32 bits of the 96-bit integer number. " is 134.
Long Statement,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetBits,The length of the statement  "            // Bits 16 to 23 must contain an exponent between 0 and 28' which indicates the power of 10 to divide the integer number. " is 121.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "            // NOTE: Another seeming equivalent is new string(sbyte*' int' Encoding)' but  don't be fooled. First of all' we can't get  " is 122.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "            //       a delegate to a constructor. Worst than that' even if we could' it is actually about 4x slower than both of these " is 122.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "            //       It spends an inordinate amount of time transitioning to managed code from the VM and then lands in String.CreateString " is 127.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "            //       (note no FromEncoding suffix)' which defensively copies to a new byte array on every call -- defeating the entire purpose  " is 130.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "            //       For this reason' desktop callers should not implement an interner that falls back to the unsafe string ctor but instead " is 128.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "            IEnumerable<MethodInfo> createStringInfos = typeof(String).GetTypeInfo().GetDeclaredMethods("CreateStringFromEncoding"); " is 120.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "                        var createStringFromEncoding = (String_CreateStringFromEncoding)methodInfo.CreateDelegate(typeof(String_CreateStringFromEncoding)' null); " is 137.
Long Statement,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The length of the statement  "                        return (encoding' bytes' byteCount) => GetStringUsingCreateStringFromEncoding(createStringFromEncoding' bytes' byteCount' encoding); " is 132.
Long Statement,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,Utf8NullTerminatedEquals,The length of the statement  "            FastComparisonResult result = Utf8NullTerminatedFastCompare(offset' text' 0' out firstDifference' terminator' ignoreCase); " is 122.
Long Statement,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReference,The length of the statement  "                uint midReferenceValue = PeekReferenceUnchecked((ptrTable[midRowNumber] - 1) * rowSize + referenceOffset' isReferenceSmall); " is 124.
Long Statement,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReferenceRange,The length of the statement  "                   PeekReferenceUnchecked((ptrTable[startRowNumber - 1] - 1) * rowSize + referenceOffset' isReferenceSmall) == referenceValue) " is 123.
Long Statement,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReferenceRange,The length of the statement  "                   PeekReferenceUnchecked((ptrTable[endRowNumber + 1] - 1) * rowSize + referenceOffset' isReferenceSmall) == referenceValue) " is 121.
Long Statement,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadTypes,The length of the statement  "            const string systemIOMemoryMappedFiles = "System.IO.MemoryMappedFiles' Version=4.0.0.0' Culture=neutral' PublicKeyToken=b03f5f7f11d50a3a"; " is 138.
Long Statement,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadTypes,The length of the statement  "            const string systemRuntimeHandles = "System.Runtime.Handles' Version=4.0.0.0' Culture=neutral' PublicKeyToken=b03f5f7f11d50a3a"; " is 128.
Long Statement,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadTypes,The length of the statement  "            TryLoadType("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"' systemIOMemoryMappedFiles' systemCore' out s_lazyMemoryMappedFileSecurityType); " is 147.
Long Statement,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadTypes,The length of the statement  "                && TryLoadType("System.IO.MemoryMappedFiles.MemoryMappedFile"' systemIOMemoryMappedFiles' systemCore' out s_lazyMemoryMappedFileType) " is 133.
Long Statement,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadTypes,The length of the statement  "                && TryLoadType("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"' systemIOMemoryMappedFiles' systemCore' out s_lazyMemoryMappedViewAccessorType) " is 149.
Long Statement,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadTypes,The length of the statement  "                && TryLoadType("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"' systemIOMemoryMappedFiles' systemCore' out s_lazyMemoryMappedFileAccessType) " is 145.
Long Statement,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,TryLoadMembers,The length of the statement  "            s_lazySafeMemoryMappedViewHandle = s_lazyMemoryMappedViewAccessorType.GetTypeInfo().GetDeclaredProperty("SafeMemoryMappedViewHandle"); " is 134.
Long Statement,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,LinkSuffix,The length of the statement  "            // Update the _previousLength of the suffix so that suffix.Count = suffix._previousLength + suffix.Length doesn't change. " is 121.
Long Statement,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,ReserveBytesPrimitive,The length of the statement  "            // That chunk has to fit the primitive otherwise we might keep allocating new chunks and never never end up with one that fits. " is 127.
Long Statement,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,Display,The length of the statement  "                BitConverter.ToString(bytes' 0' MaxDisplaySize / 2) + "-...-" + BitConverter.ToString(bytes' length - MaxDisplaySize / 2' MaxDisplaySize / 2); " is 142.
Long Statement,System.Reflection.Metadata,MetadataReaderProvider,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReaderProvider.cs,FromMetadataStream,The length of the statement  "                    result = new MetadataReaderProvider(new StreamMemoryBlockProvider(stream' start' actualSize' isFileStream' (options & MetadataStreamOptions.LeaveOpen) != 0)); " is 158.
Long Statement,System.Reflection.Metadata,MetadataReaderProvider,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReaderProvider.cs,FromMetadataStream,The length of the statement  "                    result = new MetadataReaderProvider(StreamMemoryBlockProvider.ReadMemoryBlockNoLock(stream' isFileStream' start' actualSize)); " is 126.
Long Statement,System.Reflection.Metadata,MetadataReaderProvider,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReaderProvider.cs,CanReuseReader,The length of the statement  "            return reader != null && reader.Options == options && ReferenceEquals(reader.UTF8Decoder' utf8DecoderOpt ?? MetadataStringDecoder.DefaultUTF8); " is 143.
Long Statement,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The length of the statement  "            uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]); " is 122.
Long Statement,System.Reflection.Metadata,AssemblyReference,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\AssemblyReference.cs,GetVirtualPublicKeyOrToken,The length of the statement  "                    return BlobHandle.FromVirtualIndex(hasFullKey ? BlobHandle.VirtualIndex.ContractPublicKey : BlobHandle.VirtualIndex.ContractPublicKeyToken' 0); " is 143.
Long Statement,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadBoolean,The length of the statement  "            //   ... bool '(' true | false ')' Boolean value stored in a single byte' 0 represents false' any non-zero value represents true ... " is 132.
Long Statement,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadUtf8NullTerminated,The length of the statement  "            string value = _block.PeekUtf8NullTerminated(this.Offset' null' MetadataStringDecoder.DefaultUTF8' out bytesRead' '\0'); " is 120.
Long Statement,System.Reflection.Metadata,Handle,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Handle.cs,Compare,The length of the statement  "            return ((long)(uint)left._value | (long)left._vType << 32).CompareTo((long)(uint)right._value | (long)right._vType << 32); " is 122.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,ReadMetadataHeader,The length of the statement  "            versionString = memReader.GetMemoryBlockAt(0' versionStringSize).PeekUtf8NullTerminated(0' null' UTF8Decoder' out numberOfBytesRead' '\0'); " is 139.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeStreamReaders,The length of the statement  "                        this.StringHeap = new StringHeap(metadataRoot.GetMemoryBlockAt((int)streamHeader.Offset' streamHeader.Size)' _metadataKind); " is 124.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeStreamReaders,The length of the statement  "                        this.BlobHeap = new BlobHeap(metadataRoot.GetMemoryBlockAt((int)streamHeader.Offset' streamHeader.Size)' _metadataKind); " is 120.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,ReadStandalonePortablePdbStream,The length of the statement  "            if (entryPointToken != 0 && ((entryPointToken & TokenTypeIds.TypeMask) != TokenTypeIds.MethodDef || entryPointRowId == 0)) " is 122.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,GetReferenceSize,The length of the statement  "            return (rowCounts[(int)index] < MetadataStreamConstants.LargeTableRowCount && !IsMinimalDelta) ? SmallIndexSize : LargeIndexSize; " is 129.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int fieldRefSizeSorted = GetReferenceSize(rowCounts' TableIndex.FieldPtr) > SmallIndexSize ? LargeIndexSize : GetReferenceSize(rowCounts' TableIndex.Field); " is 156.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int methodRefSizeSorted = GetReferenceSize(rowCounts' TableIndex.MethodPtr) > SmallIndexSize ? LargeIndexSize : GetReferenceSize(rowCounts' TableIndex.MethodDef); " is 162.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int paramRefSizeSorted = GetReferenceSize(rowCounts' TableIndex.ParamPtr) > SmallIndexSize ? LargeIndexSize : GetReferenceSize(rowCounts' TableIndex.Param); " is 156.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int eventRefSizeSorted = GetReferenceSize(rowCounts' TableIndex.EventPtr) > SmallIndexSize ? LargeIndexSize : GetReferenceSize(rowCounts' TableIndex.Event); " is 156.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int propertyRefSizeSorted = GetReferenceSize(rowCounts' TableIndex.PropertyPtr) > SmallIndexSize ? LargeIndexSize : GetReferenceSize(rowCounts' TableIndex.Property); " is 165.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int typeDefOrRefRefSize = ComputeCodedTokenSize(TypeDefOrRefTag.LargeRowSize' rowCounts' TypeDefOrRefTag.TablesReferenced); " is 123.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int hasConstantRefSize = ComputeCodedTokenSize(HasConstantTag.LargeRowSize' rowCounts' HasConstantTag.TablesReferenced); " is 120.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int hasCustomAttributeRefSize = ComputeCodedTokenSize(HasCustomAttributeTag.LargeRowSize' rowCounts' HasCustomAttributeTag.TablesReferenced); " is 141.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int hasFieldMarshalRefSize = ComputeCodedTokenSize(HasFieldMarshalTag.LargeRowSize' rowCounts' HasFieldMarshalTag.TablesReferenced); " is 132.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int hasDeclSecurityRefSize = ComputeCodedTokenSize(HasDeclSecurityTag.LargeRowSize' rowCounts' HasDeclSecurityTag.TablesReferenced); " is 132.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int memberRefParentRefSize = ComputeCodedTokenSize(MemberRefParentTag.LargeRowSize' rowCounts' MemberRefParentTag.TablesReferenced); " is 132.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int hasSemanticsRefSize = ComputeCodedTokenSize(HasSemanticsTag.LargeRowSize' rowCounts' HasSemanticsTag.TablesReferenced); " is 123.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int methodDefOrRefRefSize = ComputeCodedTokenSize(MethodDefOrRefTag.LargeRowSize' rowCounts' MethodDefOrRefTag.TablesReferenced); " is 129.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int memberForwardedRefSize = ComputeCodedTokenSize(MemberForwardedTag.LargeRowSize' rowCounts' MemberForwardedTag.TablesReferenced); " is 132.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int implementationRefSize = ComputeCodedTokenSize(ImplementationTag.LargeRowSize' rowCounts' ImplementationTag.TablesReferenced); " is 129.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int customAttributeTypeRefSize = ComputeCodedTokenSize(CustomAttributeTypeTag.LargeRowSize' rowCounts' CustomAttributeTypeTag.TablesReferenced); " is 144.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int resolutionScopeRefSize = ComputeCodedTokenSize(ResolutionScopeTag.LargeRowSize' rowCounts' ResolutionScopeTag.TablesReferenced); " is 132.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int typeOrMethodDefRefSize = ComputeCodedTokenSize(TypeOrMethodDefTag.LargeRowSize' rowCounts' TypeOrMethodDefTag.TablesReferenced); " is 132.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int stringHeapRefSize = (heapSizes & HeapSizes.StringHeapLarge) == HeapSizes.StringHeapLarge ? LargeIndexSize : SmallIndexSize; " is 127.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int guidHeapRefSize = (heapSizes & HeapSizes.GuidHeapLarge) == HeapSizes.GuidHeapLarge ? LargeIndexSize : SmallIndexSize; " is 121.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int blobHeapRefSize = (heapSizes & HeapSizes.BlobHeapLarge) == HeapSizes.BlobHeapLarge ? LargeIndexSize : SmallIndexSize; " is 121.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ModuleTable = new ModuleTableReader(rowCounts[(int)TableIndex.Module]' stringHeapRefSize' guidHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 158.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.TypeRefTable = new TypeRefTableReader(rowCounts[(int)TableIndex.TypeRef]' resolutionScopeRefSize' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 168.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.TypeDefTable = new TypeDefTableReader(rowCounts[(int)TableIndex.TypeDef]' fieldRefSizeSorted' methodRefSizeSorted' typeDefOrRefRefSize' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 206.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.FieldPtrTable = new FieldPtrTableReader(rowCounts[(int)TableIndex.FieldPtr]' GetReferenceSize(rowCounts' TableIndex.Field)' metadataTablesMemoryBlock' totalRequiredSize); " is 175.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.FieldTable = new FieldTableReader(rowCounts[(int)TableIndex.Field]' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 155.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.MethodPtrTable = new MethodPtrTableReader(rowCounts[(int)TableIndex.MethodPtr]' GetReferenceSize(rowCounts' TableIndex.MethodDef)' metadataTablesMemoryBlock' totalRequiredSize); " is 182.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.MethodDefTable = new MethodTableReader(rowCounts[(int)TableIndex.MethodDef]' paramRefSizeSorted' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 184.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ParamPtrTable = new ParamPtrTableReader(rowCounts[(int)TableIndex.ParamPtr]' GetReferenceSize(rowCounts' TableIndex.Param)' metadataTablesMemoryBlock' totalRequiredSize); " is 175.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ParamTable = new ParamTableReader(rowCounts[(int)TableIndex.Param]' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 138.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.InterfaceImplTable = new InterfaceImplTableReader(rowCounts[(int)TableIndex.InterfaceImpl]' IsDeclaredSorted(TableMask.InterfaceImpl)' GetReferenceSize(rowCounts' TableIndex.TypeDef)' typeDefOrRefRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 256.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.MemberRefTable = new MemberRefTableReader(rowCounts[(int)TableIndex.MemberRef]' memberRefParentRefSize' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 191.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ConstantTable = new ConstantTableReader(rowCounts[(int)TableIndex.Constant]' IsDeclaredSorted(TableMask.Constant)' hasConstantRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 203.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.FieldMarshalTable = new FieldMarshalTableReader(rowCounts[(int)TableIndex.FieldMarshal]' IsDeclaredSorted(TableMask.FieldMarshal)' hasFieldMarshalRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 223.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.DeclSecurityTable = new DeclSecurityTableReader(rowCounts[(int)TableIndex.DeclSecurity]' IsDeclaredSorted(TableMask.DeclSecurity)' hasDeclSecurityRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 223.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ClassLayoutTable = new ClassLayoutTableReader(rowCounts[(int)TableIndex.ClassLayout]' IsDeclaredSorted(TableMask.ClassLayout)' GetReferenceSize(rowCounts' TableIndex.TypeDef)' metadataTablesMemoryBlock' totalRequiredSize); " is 227.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.FieldLayoutTable = new FieldLayoutTableReader(rowCounts[(int)TableIndex.FieldLayout]' IsDeclaredSorted(TableMask.FieldLayout)' GetReferenceSize(rowCounts' TableIndex.Field)' metadataTablesMemoryBlock' totalRequiredSize); " is 225.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.StandAloneSigTable = new StandAloneSigTableReader(rowCounts[(int)TableIndex.StandAloneSig]' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 160.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.EventMapTable = new EventMapTableReader(rowCounts[(int)TableIndex.EventMap]' GetReferenceSize(rowCounts' TableIndex.TypeDef)' eventRefSizeSorted' metadataTablesMemoryBlock' totalRequiredSize); " is 197.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.EventPtrTable = new EventPtrTableReader(rowCounts[(int)TableIndex.EventPtr]' GetReferenceSize(rowCounts' TableIndex.Event)' metadataTablesMemoryBlock' totalRequiredSize); " is 175.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.EventTable = new EventTableReader(rowCounts[(int)TableIndex.Event]' typeDefOrRefRefSize' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 159.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.PropertyMapTable = new PropertyMapTableReader(rowCounts[(int)TableIndex.PropertyMap]' GetReferenceSize(rowCounts' TableIndex.TypeDef)' propertyRefSizeSorted' metadataTablesMemoryBlock' totalRequiredSize); " is 209.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.PropertyPtrTable = new PropertyPtrTableReader(rowCounts[(int)TableIndex.PropertyPtr]' GetReferenceSize(rowCounts' TableIndex.Property)' metadataTablesMemoryBlock' totalRequiredSize); " is 187.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.PropertyTable = new PropertyTableReader(rowCounts[(int)TableIndex.Property]' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 164.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.MethodSemanticsTable = new MethodSemanticsTableReader(rowCounts[(int)TableIndex.MethodSemantics]' IsDeclaredSorted(TableMask.MethodSemantics)' GetReferenceSize(rowCounts' TableIndex.MethodDef)' hasSemanticsRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 266.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.MethodImplTable = new MethodImplTableReader(rowCounts[(int)TableIndex.MethodImpl]' IsDeclaredSorted(TableMask.MethodImpl)' GetReferenceSize(rowCounts' TableIndex.TypeDef)' methodDefOrRefRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 246.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ModuleRefTable = new ModuleRefTableReader(rowCounts[(int)TableIndex.ModuleRef]' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 150.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.TypeSpecTable = new TypeSpecTableReader(rowCounts[(int)TableIndex.TypeSpec]' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 145.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ImplMapTable = new ImplMapTableReader(rowCounts[(int)TableIndex.ImplMap]' IsDeclaredSorted(TableMask.ImplMap)' GetReferenceSize(rowCounts' TableIndex.ModuleRef)' memberForwardedRefSize' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 256.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.FieldRvaTable = new FieldRVATableReader(rowCounts[(int)TableIndex.FieldRva]' IsDeclaredSorted(TableMask.FieldRva)' GetReferenceSize(rowCounts' TableIndex.Field)' metadataTablesMemoryBlock' totalRequiredSize); " is 213.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.EncLogTable = new EnCLogTableReader(rowCounts[(int)TableIndex.EncLog]' metadataTablesMemoryBlock' totalRequiredSize' _metadataStreamKind); " is 143.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.EncMapTable = new EnCMapTableReader(rowCounts[(int)TableIndex.EncMap]' metadataTablesMemoryBlock' totalRequiredSize); " is 122.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.AssemblyTable = new AssemblyTableReader(rowCounts[(int)TableIndex.Assembly]' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 164.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.AssemblyProcessorTable = new AssemblyProcessorTableReader(rowCounts[(int)TableIndex.AssemblyProcessor]' metadataTablesMemoryBlock' totalRequiredSize); " is 155.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.AssemblyOSTable = new AssemblyOSTableReader(rowCounts[(int)TableIndex.AssemblyOS]' metadataTablesMemoryBlock' totalRequiredSize); " is 134.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.AssemblyRefTable = new AssemblyRefTableReader(rowCounts[(int)TableIndex.AssemblyRef]' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize' _metadataKind); " is 188.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.AssemblyRefProcessorTable = new AssemblyRefProcessorTableReader(rowCounts[(int)TableIndex.AssemblyRefProcessor]' GetReferenceSize(rowCounts' TableIndex.AssemblyRef)' metadataTablesMemoryBlock' totalRequiredSize); " is 217.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.AssemblyRefOSTable = new AssemblyRefOSTableReader(rowCounts[(int)TableIndex.AssemblyRefOS]' GetReferenceSize(rowCounts' TableIndex.AssemblyRef)' metadataTablesMemoryBlock' totalRequiredSize); " is 196.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.FileTable = new FileTableReader(rowCounts[(int)TableIndex.File]' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 152.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ExportedTypeTable = new ExportedTypeTableReader(rowCounts[(int)TableIndex.ExportedType]' implementationRefSize' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 182.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ManifestResourceTable = new ManifestResourceTableReader(rowCounts[(int)TableIndex.ManifestResource]' implementationRefSize' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 194.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.NestedClassTable = new NestedClassTableReader(rowCounts[(int)TableIndex.NestedClass]' IsDeclaredSorted(TableMask.NestedClass)' GetReferenceSize(rowCounts' TableIndex.TypeDef)' metadataTablesMemoryBlock' totalRequiredSize); " is 227.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.GenericParamTable = new GenericParamTableReader(rowCounts[(int)TableIndex.GenericParam]' IsDeclaredSorted(TableMask.GenericParam)' typeOrMethodDefRefSize' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 225.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.MethodSpecTable = new MethodSpecTableReader(rowCounts[(int)TableIndex.MethodSpec]' methodDefOrRefRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 174.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.GenericParamConstraintTable = new GenericParamConstraintTableReader(rowCounts[(int)TableIndex.GenericParamConstraint]' IsDeclaredSorted(TableMask.GenericParamConstraint)' GetReferenceSize(rowCounts' TableIndex.GenericParam)' typeDefOrRefRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 297.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            // Debug tables are local to the current metadata image and type system metadata tables are external and precede all debug tables. " is 130.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            var combinedRowCounts = (externalRowCountsOpt != null) ? CombineRowCounts(rowCounts' externalRowCountsOpt' firstLocalTableIndex: TableIndex.Document) : rowCounts; " is 162.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            int hasCustomDebugInformationRefSizeCombined = ComputeCodedTokenSize(HasCustomDebugInformationTag.LargeRowSize' combinedRowCounts' HasCustomDebugInformationTag.TablesReferenced); " is 178.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.DocumentTable = new DocumentTableReader(rowCounts[(int)TableIndex.Document]' guidHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 162.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.MethodDebugInformationTable = new MethodDebugInformationTableReader(rowCounts[(int)TableIndex.MethodDebugInformation]' GetReferenceSize(rowCounts' TableIndex.Document)' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 237.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.LocalScopeTable = new LocalScopeTableReader(rowCounts[(int)TableIndex.LocalScope]' IsDeclaredSorted(TableMask.LocalScope)' methodRefSizeCombined' GetReferenceSize(rowCounts' TableIndex.ImportScope)' GetReferenceSize(rowCounts' TableIndex.LocalVariable)' GetReferenceSize(rowCounts' TableIndex.LocalConstant)' metadataTablesMemoryBlock' totalRequiredSize); " is 360.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.LocalVariableTable = new LocalVariableTableReader(rowCounts[(int)TableIndex.LocalVariable]' stringHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 162.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.LocalConstantTable = new LocalConstantTableReader(rowCounts[(int)TableIndex.LocalConstant]' stringHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 179.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.ImportScopeTable = new ImportScopeTableReader(rowCounts[(int)TableIndex.ImportScope]' GetReferenceSize(rowCounts' TableIndex.ImportScope)' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 207.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.StateMachineMethodTable = new StateMachineMethodTableReader(rowCounts[(int)TableIndex.StateMachineMethod]' IsDeclaredSorted(TableMask.StateMachineMethod)' methodRefSizeCombined' metadataTablesMemoryBlock' totalRequiredSize); " is 229.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeTableReaders,The length of the statement  "            this.CustomDebugInformationTable = new CustomDebugInformationTableReader(rowCounts[(int)TableIndex.CustomDebugInformation]' IsDeclaredSorted(TableMask.CustomDebugInformation)' hasCustomDebugInformationRefSizeCombined' guidHeapRefSize' blobHeapRefSize' metadataTablesMemoryBlock' totalRequiredSize); " is 298.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "AttributeTargets"; values[v++] = new ProjectionInfo("Windows.Foundation.Metadata"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.AttributeTargets' systemRuntime); " is 189.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "AttributeUsageAttribute"; values[v++] = new ProjectionInfo("Windows.Foundation.Metadata"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.AttributeUsageAttribute' systemRuntime' treatment: TypeDefTreatment.RedirectedToClrAttribute); " is 257.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Color"; values[v++] = new ProjectionInfo("Windows.UI"' StringHandle.VirtualIndex.Windows_UI' StringHandle.VirtualIndex.Color' systemRuntimeWindowsRuntime); " is 168.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "CornerRadius"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.CornerRadius' systemRuntimeWindowsUiXaml); " is 191.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "DateTime"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.DateTimeOffset' systemRuntime); " is 170.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Duration"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.Duration' systemRuntimeWindowsUiXaml); " is 183.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "DurationType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.DurationType' systemRuntimeWindowsUiXaml); " is 191.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "EventHandler`1"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.EventHandler1' systemRuntime); " is 175.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "EventRegistrationToken"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System_Runtime_InteropServices_WindowsRuntime' StringHandle.VirtualIndex.EventRegistrationToken' systemRuntimeInterop); " is 238.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "GeneratorPosition"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Controls.Primitives"' StringHandle.VirtualIndex.Windows_UI_Xaml_Controls_Primitives' StringHandle.VirtualIndex.GeneratorPosition' systemRuntimeWindowsUiXaml); " is 241.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "GridLength"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.GridLength' systemRuntimeWindowsUiXaml); " is 187.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "GridUnitType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.GridUnitType' systemRuntimeWindowsUiXaml); " is 191.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "HResult"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Exception' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToClass); " is 228.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IBindableIterable"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections' StringHandle.VirtualIndex.IEnumerable' systemRuntime); " is 193.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IBindableVector"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections' StringHandle.VirtualIndex.IList' systemRuntime); " is 185.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IClosable"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.IDisposable' systemRuntime' isIDisposable: true); " is 189.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "ICommand"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Input"' StringHandle.VirtualIndex.System_Windows_Input' StringHandle.VirtualIndex.ICommand' systemObjectModel); " is 185.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IIterable`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IEnumerable1' systemRuntime); " is 203.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IKeyValuePair`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.KeyValuePair2' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToValueType); " is 276.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IMapView`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IReadOnlyDictionary2' systemRuntime); " is 210.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IMap`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IDictionary2' systemRuntime); " is 198.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "INotifyCollectionChanged"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.INotifyCollectionChanged' systemObjectModel); " is 229.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "INotifyPropertyChanged"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.INotifyPropertyChanged' systemObjectModel); " is 213.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IReference`1"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Nullable1' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToValueType); " is 237.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IVectorView`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IReadOnlyList1' systemRuntime); " is 207.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "IVector`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IList1' systemRuntime); " is 195.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "KeyTime"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.KeyTime' systemRuntimeWindowsUiXaml); " is 213.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Matrix"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media' StringHandle.VirtualIndex.Matrix' systemRuntimeWindowsUiXaml); " is 191.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Matrix3D"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Media3D"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Media3D' StringHandle.VirtualIndex.Matrix3D' systemRuntimeWindowsUiXaml); " is 211.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Matrix3x2"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Matrix3x2' systemNumericsVectors); " is 192.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Matrix4x4"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Matrix4x4' systemNumericsVectors); " is 192.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "NotifyCollectionChangedAction"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedAction' systemObjectModel); " is 239.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "NotifyCollectionChangedEventArgs"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedEventArgs' systemObjectModel); " is 245.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "NotifyCollectionChangedEventHandler"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedEventHandler' systemObjectModel); " is 251.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Plane"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Plane' systemNumericsVectors); " is 184.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Point"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Point' systemRuntimeWindowsRuntime); " is 184.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "PropertyChangedEventArgs"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.PropertyChangedEventArgs' systemObjectModel); " is 217.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "PropertyChangedEventHandler"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.PropertyChangedEventHandler' systemObjectModel); " is 223.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Quaternion"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Quaternion' systemNumericsVectors); " is 194.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Rect"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Rect' systemRuntimeWindowsRuntime); " is 182.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "RepeatBehavior"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.RepeatBehavior' systemRuntimeWindowsUiXaml); " is 227.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "RepeatBehaviorType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.RepeatBehaviorType' systemRuntimeWindowsUiXaml); " is 235.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Size"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Size' systemRuntimeWindowsRuntime); " is 182.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Thickness"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.Thickness' systemRuntimeWindowsUiXaml); " is 185.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "TimeSpan"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.TimeSpan' systemRuntime); " is 164.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "TypeName"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Type' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToClass); " is 229.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Uri"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Uri' systemRuntime); " is 154.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Vector2"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector2' systemNumericsVectors); " is 188.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Vector3"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector3' systemNumericsVectors); " is 188.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The length of the statement  "                keys[k++] = "Vector4"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector4' systemNumericsVectors); " is 188.
Long Statement,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,CalculateCustomAttributeValueTreatment,The length of the statement  "            return allowMultiple ? CustomAttributeValueTreatment.AttributeUsageAllowMultiple : CustomAttributeValueTreatment.AttributeUsageAllowSingle; " is 139.
Long Statement,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,ReadFatExceptionHandlers,The length of the statement  "                result[i] = new ExceptionRegion(sehFlags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset); " is 120.
Long Statement,System.Reflection.Metadata,PEReaderExtensions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PEReaderExtensions.cs,GetMethodBody,The length of the statement  "            // Call to validating public BlobReader constructor is by design -- we need to throw PlatformNotSupported on big-endian architecture. " is 133.
Long Statement,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,AddMethodBody,The length of the statement  "            int bodyOffset = SerializeHeader(codeSize' (ushort)maxStack' exceptionRegionCount' attributes' localVariablesSignature); " is 120.
Long Statement,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,AddMethodBody,The length of the statement  "                ExceptionRegionEncoder.SerializeTableHeader(Builder' exceptionRegionCount' hasSmallExceptionRegions) : default(ExceptionRegionEncoder); " is 135.
Long Statement,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,AddMethodBody,The length of the statement  "            int bodyOffset = SerializeHeader(codeBuilder.Count' (ushort)maxStack' exceptionRegionCount' attributes' localVariablesSignature); " is 129.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,GetSerializedMetadata,The length of the statement  "            var sizes = new MetadataSizes(GetRowCounts()' externalRowCounts' heapSizes' metadataVersionByteCount' isStandaloneDebugMetadata); " is 129.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMetadataHeader,The length of the statement  "            // Spec: Some compilers store metadata in a #- stream' which holds an uncompressed' or non-optimized' representation of metadata tables; " is 136.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMetadataHeader,The length of the statement  "            SerializeStreamHeader(ref offsetFromStartOfMetadata' sizes.MetadataTableStreamSize' (sizes.IsCompressed ? "#~" : "#-")' builder); " is 129.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeStreamHeader,The length of the statement  "            // 4 for the first uint (offset)' 4 for the second uint (padded size)' length of stream name + 1 for null terminator (then padded) " is 130.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeConstantTable,The length of the statement  "            // Note: we can sort the table at this point since no other table can reference its rows via RowId or CodedIndex (which would need updating otherwise). " is 151.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeCustomAttributeTable,The length of the statement  "            // Note: we can sort the table at this point since no other table can reference its rows via RowId or CodedIndex (which would need updating otherwise). " is 151.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeCustomAttributeTable,The length of the statement  "            // OrderBy performs a stable sort' so multiple attributes with the same parent will be sorted in the order they were added to the table. " is 136.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeCustomAttributeTable,The length of the statement  "            var ordered = _customAttributeTableNeedsSorting ? _customAttributeTable.OrderBy((x' y) => x.Parent - y.Parent) : _customAttributeTable; " is 135.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeFieldMarshalTable,The length of the statement  "            // Note: we can sort the table at this point since no other table can reference its rows via RowId or CodedIndex (which would need updating otherwise). " is 151.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeFieldMarshalTable,The length of the statement  "            var ordered = _fieldMarshalTableNeedsSorting ? _fieldMarshalTable.OrderBy((x' y) => x.Parent - y.Parent) : _fieldMarshalTable; " is 126.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeDeclSecurityTable,The length of the statement  "            // Note: we can sort the table at this point since no other table can reference its rows via RowId or CodedIndex (which would need updating otherwise). " is 151.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeDeclSecurityTable,The length of the statement  "            // OrderBy performs a stable sort' so multiple attributes with the same parent will be sorted in the order they were added to the table. " is 136.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeDeclSecurityTable,The length of the statement  "            var ordered = _declSecurityTableNeedsSorting ? _declSecurityTable.OrderBy((x' y) => x.Parent - y.Parent) : _declSecurityTable; " is 126.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMethodSemanticsTable,The length of the statement  "            // Note: we can sort the table at this point since no other table can reference its rows via RowId or CodedIndex (which would need updating otherwise). " is 151.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMethodSemanticsTable,The length of the statement  "            // OrderBy performs a stable sort' so multiple attributes with the same parent will be sorted in the order they were added to the table. " is 136.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMethodSemanticsTable,The length of the statement  "            var ordered = _methodSemanticsTableNeedsSorting ? _methodSemanticsTable.OrderBy((x' y) => (int)x.Association - (int)y.Association) : _methodSemanticsTable; " is 155.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeAssemblyTable,The length of the statement  "                writer.WriteReference(SerializeHandle(stringMap' _assemblyRow.Value.AssemblyName)' metadataSizes.StringReferenceIsSmall); " is 121.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeAssemblyTable,The length of the statement  "                writer.WriteReference(SerializeHandle(stringMap' _assemblyRow.Value.AssemblyCulture)' metadataSizes.StringReferenceIsSmall); " is 124.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeCustomDebugInformationTable,The length of the statement  "            // Note: we can sort the table at this point since no other table can reference its rows via RowId or CodedIndex (which would need updating otherwise). " is 151.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeCustomDebugInformationTable,The length of the statement  "            // OrderBy performs a stable sort' so multiple attributes with the same parent and kind will be sorted in the order they were added to the table. " is 145.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,GetOrAddDocumentName,The length of the statement  "                partBuilder.WriteUTF8(value' i' (next >= 0 ? next : value.Length) - i' allowUnpairedSurrogates: true' prependSize: false); " is 122.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,ReserveUserString,The length of the statement  "            var reservedUserString = _userStringBuilder.ReserveBytes(BlobWriterImpl.GetCompressedIntegerSize(encodedLength) + encodedLength); " is 129.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeStringHeap,The length of the statement  "                    stringVirtualIndexToHeapOffsetMap[entry.Value.GetWriterVirtualIndex()] = position - (BlobUtilities.GetUTF8ByteCount(entry.Key) + 1); " is 132.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataRootBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataRootBuilder.cs,Serialize,The length of the statement  "            _tablesAndHeaps.SerializeMetadataTables(builder' _serializedMetadata.Sizes' _serializedMetadata.StringMap' methodBodyStreamRva' mappedFieldDataStreamRva); " is 154.
Long Statement,System.Reflection.Metadata.Ecma335,BlobHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\BlobHeap.cs,DocumentNameEquals,The length of the statement  "                var result = partBlock.Utf8NullTerminatedFastCompare(0' other' otherIndex' out firstDifferenceIndex' terminator: '\0'' ignoreCase: ignoreCase); " is 143.
Long Statement,System.Reflection.Metadata.Ecma335,BlobHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\BlobHeap.cs,DocumentNameEquals,The length of the statement  "                    return GetDocumentName(handle).Equals(other' ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal); " is 121.
Long Statement,System.Reflection.Metadata.Ecma335,StringHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\StringHeap.cs,AssertFilled,The length of the statement  "                Debug.Assert(s_virtualValues[i] != null' "Missing virtual value for StringHandle.VirtualIndex." + (StringHandle.VirtualIndex)i); " is 128.
Long Statement,System.Reflection.Metadata.Ecma335,StringHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\StringHeap.cs,GetString,The length of the statement  "            return handle.IsVirtual ? GetVirtualHandleString(handle' utf8Decoder) : GetNonVirtualString(handle' utf8Decoder' prefixOpt: null); " is 130.
Long Statement,System.Reflection.Metadata.Ecma335,StringHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\StringHeap.cs,Equals,The length of the statement  "                return string.Equals(GetString(handle' utf8Decoder)' value' ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal); " is 136.
Long Statement,System.Reflection.Metadata.Ecma335,StringHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\StringHeap.cs,StartsWith,The length of the statement  "                return GetString(handle' utf8Decoder).StartsWith(value' ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal); " is 132.
Long Statement,System.Reflection.Metadata.Ecma335,StringHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\StringHeap.cs,StartsWith,The length of the statement  "            return this.Block.Utf8NullTerminatedStartsWith(handle.GetHeapOffset()' value' utf8Decoder' otherTerminator' ignoreCase); " is 120.
Long Statement,System.Reflection.Metadata.Ecma335,CustomAttributeDecoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CustomAttributeDecoder.cs,DecodeValue,The length of the statement  "            ImmutableArray<CustomAttributeTypedArgument<TType>> fixedArguments = DecodeFixedArguments(ref signatureReader' ref valueReader' parameterCount); " is 144.
Long Statement,System.Reflection.Metadata.Ecma335,CustomAttributeDecoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CustomAttributeDecoder.cs,DecodeFixedArgumentType,The length of the statement  "                    info.TypeCode = _provider.IsSystemType(info.Type) ? SerializationTypeCode.Type : (SerializationTypeCode)_provider.GetUnderlyingEnumType(info.Type); " is 147.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,AddExceptionRegion,The length of the statement  "            _lazyExceptionHandlers.Add(new ExceptionHandlerInfo(kind' tryStart' tryEnd' handlerStart' handlerEnd' filterStart' catchType)); " is 127.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The length of the statement  "                    srcBlobOffset == 4 && srcBlob.Buffer[0] == 0xff && srcBlob.Buffer[1] == 0xff && srcBlob.Buffer[2] == 0xff && srcBlob.Buffer[3] == 0xff); " is 136.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The length of the statement  "                        // We could potentially implement algortihm that automatically fixes up the branch instructions as well to accomodate bigger distances' " is 135.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The length of the statement  "                        // however an optimal algorithm would be rather complex (something like: calculate topological ordering of crossing branch instructions  " is 135.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The length of the statement  "                        // and then use fixed point to eliminate cycles). If the caller doesn't care about optimal IL size they can use long branches whenever the  " is 138.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The length of the statement  "                        // distance is unknown upfront. If they do they probably already implement more sophisticad algorithm for IL layout optimization already.  " is 137.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The length of the statement  "                        throw new InvalidOperationException(SR.Format(SR.DistanceBetweenInstructionAndLabelTooBig' branch.OpCode' srcOffset' branchDistance)); " is 134.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,SerializeExceptionTable,The length of the statement  "            var regionEncoder = ExceptionRegionEncoder.SerializeTableHeader(builder' _lazyExceptionHandlers.Count' HasSmallExceptionRegions()); " is 131.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,HasSmallExceptionRegions,The length of the statement  "                if (!ExceptionRegionEncoder.IsSmallExceptionRegionFromBounds(GetLabelOffsetChecked(handler.TryStart)' GetLabelOffsetChecked(handler.TryEnd)) || " is 143.
Long Statement,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,HasSmallExceptionRegions,The length of the statement  "                    !ExceptionRegionEncoder.IsSmallExceptionRegionFromBounds(GetLabelOffsetChecked(handler.HandlerStart)' GetLabelOffsetChecked(handler.HandlerEnd))) " is 145.
Long Statement,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,AddFilter,The length of the statement  "            return Add(ExceptionRegionKind.Filter' tryOffset' tryLength' handlerOffset' handlerLength' default(EntityHandle)' filterOffset); " is 128.
Long Statement,System.Reflection.Metadata.Ecma335,CustomAttributeTypeTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The length of the statement  "            uint tokenType = unchecked((uint)(TagToTokenTypeByteVector >> ((int)(customAttributeType & TagMask) << 3)) << TokenTypeIds.RowIdBitCount); " is 138.
Long Statement,System.Reflection.Metadata.Ecma335,MemberRefParentTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The length of the statement  "            uint tokenType = unchecked((uint)((TagToTokenTypeByteVector >> ((int)(memberRef & TagMask) << 3)) << TokenTypeIds.RowIdBitCount)); " is 130.
Long Statement,System.Reflection.Metadata.Ecma335,PortablePdbBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\PortablePdbBuilder.cs,Serialize,The length of the statement  "            _builder.SerializeMetadataTables(builder' _serializedMetadata.Sizes' _serializedMetadata.StringMap' methodBodyStreamRva: 0' mappedFieldDataStreamRva: 0); " is 153.
Long Statement,System.Reflection.Metadata.Ecma335,BlobEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\BlobEncoders.cs,PropertySignature,The length of the statement  "            Builder.WriteByte(new SignatureHeader(SignatureKind.Property' SignatureCallingConvention.Default' (isInstanceProperty ? SignatureAttributes.Instance : 0)).RawValue); " is 165.
Long Statement,System.Reflection.Metadata.Ecma335,NamedArgumentsEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\BlobEncoders.cs,AddArgument,The length of the statement  "            Builder.WriteByte(isField ? (byte)CustomAttributeNamedArgumentKind.Field : (byte)CustomAttributeNamedArgumentKind.Property); " is 124.
Long Statement,System.Reflection.Metadata.Ecma335,SignatureTypeEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\BlobEncoders.cs,Type,The length of the statement  "            // Note: We don't allow TypeSpec as per https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/Ecma-335-Issues.md#proposed-specification-change " is 170.
Long Statement,System.Reflection.Metadata.Ecma335,SignatureTypeEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\BlobEncoders.cs,GenericInstantiation,The length of the statement  "            // Note: We don't allow TypeSpec as per https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/Ecma-335-Issues.md#proposed-specification-change " is 170.
Long Statement,System.Reflection.Metadata.Ecma335,SignatureDecoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\SignatureDecoder.cs,DecodeTypeHandle,The length of the statement  "                            // https://github.com/dotnet/coreclr/blob/8ff2389204d7c41b17eff0e9536267aea8d6496f/src/md/compiler/mdvalidator.cpp#L6154-L6160 " is 126.
Long Statement,System.Reflection.Metadata.Ecma335,SignatureDecoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\SignatureDecoder.cs,DecodeTypeHandle,The length of the statement  "                        return _provider.GetTypeFromSpecification(_metadataReaderOpt' _genericContext' (TypeSpecificationHandle)handle' rawTypeKind); " is 125.
Long Statement,System.Reflection.Metadata.Ecma335,SignatureDecoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\SignatureDecoder.cs,CheckMethodOrPropertyHeader,The length of the statement  "                throw new BadImageFormatException(SR.Format(SR.UnexpectedSignatureHeader2' SignatureKind.Property' SignatureKind.Method' header.Kind' header.RawValue)); " is 152.
Long Statement,System.Reflection.Metadata.Ecma335,NamespaceCache,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\NamespaceCache.cs,MergeDuplicateNamespaces,The length of the statement  "            // Needs to be done outside of foreach (var group in table) to avoid modifying the dictionary while foreach'ing over it. " is 120.
Long Statement,System.Reflection.Metadata.Ecma335,TypeRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetResolutionScope,The length of the statement  "            return ResolutionScopeTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ResolutionScopeOffset' _IsResolutionScopeRefSizeSmall)); " is 142.
Long Statement,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetNamespaceDefinition,The length of the statement  "            return NamespaceDefinitionHandle.FromFullNameOffset(this.Block.PeekHeapReference(rowOffset + _NamespaceOffset' _IsStringHeapRefSizeSmall)); " is 139.
Long Statement,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetExtends,The length of the statement  "            return TypeDefOrRefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ExtendsOffset' _IsTypeDefOrRefRefSizeSmall)); " is 128.
Long Statement,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FindTypeContainingMethod,The length of the statement  "            int slot = this.Block.BinarySearchForSlot(numOfRows' this.RowSize' _MethodListOffset' (uint)methodDefOrPtrRowId' _IsMethodRefSizeSmall); " is 136.
Long Statement,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FindTypeContainingField,The length of the statement  "            int slot = this.Block.BinarySearchForSlot(numOfRows' this.RowSize' _FieldListOffset' (uint)fieldDefOrPtrRowId' _IsFieldRefSizeSmall); " is 133.
Long Statement,System.Reflection.Metadata.Ecma335,FieldPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetFieldFor,The length of the statement  "            return FieldDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _FieldOffset' _IsFieldTableRowRefSizeSmall)); " is 121.
Long Statement,System.Reflection.Metadata.Ecma335,FieldPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetRowIdForFieldDefRow,The length of the statement  "            return this.Block.LinearSearchReference(this.RowSize' _FieldOffset' (uint)fieldDefRowId' _IsFieldTableRowRefSizeSmall) + 1; " is 123.
Long Statement,System.Reflection.Metadata.Ecma335,MethodPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetMethodFor,The length of the statement  "            return MethodDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _MethodOffset' _IsMethodTableRowRefSizeSmall)); " is 124.
Long Statement,System.Reflection.Metadata.Ecma335,MethodPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetRowIdForMethodDefRow,The length of the statement  "            return this.Block.LinearSearchReference(this.RowSize' _MethodOffset' (uint)methodDefRowId' _IsMethodTableRowRefSizeSmall) + 1; " is 126.
Long Statement,System.Reflection.Metadata.Ecma335,InterfaceImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetInterface,The length of the statement  "            return TypeDefOrRefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _InterfaceOffset' _IsTypeDefOrRefRefSizeSmall)); " is 130.
Long Statement,System.Reflection.Metadata.Ecma335,MemberRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetClass,The length of the statement  "            return MemberRefParentTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ClassOffset' _IsMemberRefParentRefSizeSmall)); " is 132.
Long Statement,System.Reflection.Metadata.Ecma335,ConstantTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetParent,The length of the statement  "            return HasConstantTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ParentOffset' _IsHasConstantRefSizeSmall)); " is 125.
Long Statement,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetParent,The length of the statement  "            return HasCustomAttributeTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ParentOffset' _IsHasCustomAttributeRefSizeSmall)); " is 139.
Long Statement,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetConstructor,The length of the statement  "            return CustomAttributeTypeTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _TypeOffset' _IsCustomAttributeTypeRefSizeSmall)); " is 139.
Long Statement,System.Reflection.Metadata.Ecma335,FieldMarshalTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetParent,The length of the statement  "            return HasFieldMarshalTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ParentOffset' _IsHasFieldMarshalRefSizeSmall)); " is 133.
Long Statement,System.Reflection.Metadata.Ecma335,DeclSecurityTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetParent,The length of the statement  "            return HasDeclSecurityTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ParentOffset' _IsHasDeclSecurityRefSizeSmall)); " is 133.
Long Statement,System.Reflection.Metadata.Ecma335,ClassLayoutTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetParent,The length of the statement  "            return TypeDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _ParentOffset' _IsTypeDefTableRowRefSizeSmall)); " is 123.
Long Statement,System.Reflection.Metadata.Ecma335,FieldLayoutTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetField,The length of the statement  "            return FieldDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _FieldOffset' _IsFieldTableRowRefSizeSmall)); " is 121.
Long Statement,System.Reflection.Metadata.Ecma335,EventMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetParentType,The length of the statement  "            return TypeDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _ParentOffset' _IsTypeDefTableRowRefSizeSmall)); " is 123.
Long Statement,System.Reflection.Metadata.Ecma335,EventPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetEventFor,The length of the statement  "            return EventDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _EventOffset' _IsEventTableRowRefSizeSmall)); " is 121.
Long Statement,System.Reflection.Metadata.Ecma335,EventTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetEventType,The length of the statement  "            return TypeDefOrRefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _EventTypeOffset' _IsTypeDefOrRefRefSizeSmall)); " is 130.
Long Statement,System.Reflection.Metadata.Ecma335,PropertyMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetParentType,The length of the statement  "            return TypeDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _ParentOffset' _IsTypeDefTableRowRefSizeSmall)); " is 123.
Long Statement,System.Reflection.Metadata.Ecma335,PropertyPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetPropertyFor,The length of the statement  "            return PropertyDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _PropertyOffset' _IsPropertyTableRowRefSizeSmall)); " is 130.
Long Statement,System.Reflection.Metadata.Ecma335,MethodSemanticsTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetMethod,The length of the statement  "            return MethodDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _MethodOffset' _IsMethodTableRowRefSizeSmall)); " is 124.
Long Statement,System.Reflection.Metadata.Ecma335,MethodSemanticsTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetAssociation,The length of the statement  "            return HasSemanticsTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _AssociationOffset' _IsHasSemanticRefSizeSmall)); " is 131.
Long Statement,System.Reflection.Metadata.Ecma335,MethodImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetClass,The length of the statement  "            return TypeDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _ClassOffset' _IsTypeDefTableRowRefSizeSmall)); " is 122.
Long Statement,System.Reflection.Metadata.Ecma335,MethodImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetMethodBody,The length of the statement  "            return MethodDefOrRefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _MethodBodyOffset' _IsMethodDefOrRefRefSizeSmall)); " is 135.
Long Statement,System.Reflection.Metadata.Ecma335,MethodImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetMethodDeclaration,The length of the statement  "            return MethodDefOrRefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _MethodDeclarationOffset' _IsMethodDefOrRefRefSizeSmall)); " is 142.
Long Statement,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetImport,The length of the statement  "            var importName = StringHandle.FromOffset(Block.PeekHeapReference(rowOffset + _ImportNameOffset' _IsStringHeapRefSizeSmall)); " is 124.
Long Statement,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetImport,The length of the statement  "            var importScope = ModuleReferenceHandle.FromRowId(Block.PeekReference(rowOffset + _ImportScopeOffset' _IsModuleRefTableRowRefSizeSmall)); " is 137.
Long Statement,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetMemberForwarded,The length of the statement  "            return MemberForwardedTag.ConvertToHandle(Block.PeekTaggedReference(rowOffset + _MemberForwardedOffset' _IsMemberForwardRowRefSizeSmall)); " is 138.
Long Statement,System.Reflection.Metadata.Ecma335,AssemblyRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetPublicKeyOrToken,The length of the statement  "            return BlobHandle.FromOffset(this.Block.PeekHeapReference(rowOffset + _PublicKeyOrTokenOffset' _IsBlobHeapRefSizeSmall)); " is 121.
Long Statement,System.Reflection.Metadata.Ecma335,ExportedTypeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetTypeNamespaceString,The length of the statement  "            return StringHandle.FromOffset(this.Block.PeekHeapReference(rowOffset + _TypeNamespaceOffset' _IsStringHeapRefSizeSmall)); " is 122.
Long Statement,System.Reflection.Metadata.Ecma335,ExportedTypeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetTypeNamespace,The length of the statement  "            return NamespaceDefinitionHandle.FromFullNameOffset(this.Block.PeekHeapReference(rowOffset + _TypeNamespaceOffset' _IsStringHeapRefSizeSmall)); " is 143.
Long Statement,System.Reflection.Metadata.Ecma335,ExportedTypeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetImplementation,The length of the statement  "            return ImplementationTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ImplementationOffset' _IsImplementationRefSizeSmall)); " is 139.
Long Statement,System.Reflection.Metadata.Ecma335,ManifestResourceTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetImplementation,The length of the statement  "            return ImplementationTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ImplementationOffset' _IsImplementationRefSizeSmall)); " is 139.
Long Statement,System.Reflection.Metadata.Ecma335,NestedClassTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetNestedClass,The length of the statement  "            return TypeDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _NestedClassOffset' _IsTypeDefTableRowRefSizeSmall)); " is 128.
Long Statement,System.Reflection.Metadata.Ecma335,NestedClassTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetEnclosingClass,The length of the statement  "            return TypeDefinitionHandle.FromRowId(this.Block.PeekReference(rowOffset + _EnclosingClassOffset' _IsTypeDefTableRowRefSizeSmall)); " is 131.
Long Statement,System.Reflection.Metadata.Ecma335,NestedClassTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FindEnclosingType,The length of the statement  "            return TypeDefinitionHandle.FromRowId(this.Block.PeekReference(rowNumber * this.RowSize + _EnclosingClassOffset' _IsTypeDefTableRowRefSizeSmall)); " is 146.
Long Statement,System.Reflection.Metadata.Ecma335,GenericParamTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetOwner,The length of the statement  "            return TypeOrMethodDefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _OwnerOffset' _IsTypeOrMethodDefRefSizeSmall)); " is 132.
Long Statement,System.Reflection.Metadata.Ecma335,MethodSpecTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetMethod,The length of the statement  "            return MethodDefOrRefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _MethodOffset' _IsMethodDefOrRefRefSizeSmall)); " is 131.
Long Statement,System.Reflection.Metadata.Ecma335,GenericParamConstraintTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetConstraint,The length of the statement  "            return TypeDefOrRefTag.ConvertToHandle(this.Block.PeekTaggedReference(rowOffset + _ConstraintOffset' _IsTypeDefOrRefRefSizeSmall)); " is 131.
Long Statement,System.Reflection.Metadata.Ecma335,GenericParamConstraintTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GetOwner,The length of the statement  "            return GenericParameterHandle.FromRowId(this.Block.PeekReference(rowOffset + _OwnerOffset' _IsGenericParamTableRowRefSizeSmall)); " is 129.
Long Statement,System.Reflection.Metadata.Ecma335,MetadataAggregator,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataAggregator.cs,GetGenerationHandle,The length of the statement  "                int relativeHeapOffset = (handle.Type == HandleType.Guid || generation == 0) ? heapOffset : heapOffset - sizes[generation - 1]; " is 127.
Long Statement,System.Reflection.Metadata.Ecma335,CustomDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,GetParent,The length of the statement  "            return HasCustomDebugInformationTag.ConvertToHandle(Block.PeekTaggedReference(rowOffset + ParentOffset' _isHasCustomDebugInformationRefSizeSmall)); " is 147.
Long Statement,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,CreateSections,The length of the statement  "            builder.Add(new Section(TextSectionName' SectionCharacteristics.MemRead | SectionCharacteristics.MemExecute | SectionCharacteristics.ContainsCode)); " is 148.
Long Statement,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,CreateSections,The length of the statement  "                builder.Add(new Section(ResourceSectionName' SectionCharacteristics.MemRead | SectionCharacteristics.ContainsInitializedData)); " is 127.
Long Statement,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,CreateSections,The length of the statement  "                builder.Add(new Section(RelocationSectionName' SectionCharacteristics.MemRead | SectionCharacteristics.MemDiscardable | SectionCharacteristics.ContainsInitializedData)); " is 169.
Long Statement,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,SerializeTextSection,The length of the statement  "            _peDirectoriesBuilder.ImportAddressTable = textSection.GetImportAddressTableDirectoryEntry(location.RelativeVirtualAddress); " is 124.
Long Statement,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,CalculateOffsetToMappedFieldDataStream,The length of the statement  "                result = BitArithmetic.Align(result' Is32Bit ? 4 : 8); //optional padding to make startup stub's target address align on word or double word boundary " is 149.
Long Statement,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteRuntimeStartupStub,The length of the statement  "                // Note that the section is aligned to FileAlignment' which is at least 512' so we can align relatively to the start of the section. " is 132.
Long Statement,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteRuntimeStartupStub,The length of the statement  "                // Note that the section is aligned to FileAlignment' which is at least 512' so we can align relatively to the start of the section. " is 132.
Long Statement,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,WritePEHeader,The length of the statement  "            builder.WriteUInt32((uint)BitArithmetic.Align(lastSection.RelativeVirtualAddress + lastSection.VirtualSize' Header.SectionAlignment)); " is 134.
Long Statement,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,Sign,The length of the statement  "            byte[] signature = signatureProvider(GetContentToSign(peImage' peHeadersSize' Header.FileAlignment' strongNameSignatureFixup)); " is 127.
Long Statement,System.Reflection.PortableExecutable,PEHeaders,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEHeaders.cs,TryGetDirectoryOffset,The length of the statement  "            offset = _isLoadedImage ? directory.RelativeVirtualAddress : _sectionHeaders[sectionIndex].PointerToRawData + relativeOffset; " is 125.
Long Statement,System.Reflection.PortableExecutable,PEReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEReader.cs,ReadCodeViewDebugDirectoryData,The length of the statement  "                Throw.InvalidArgument(SR.Format(SR.UnexpectedDebugDirectoryType' nameof(DebugDirectoryEntryType.CodeView))' nameof(entry)); " is 123.
Long Statement,System.Reflection.PortableExecutable,PEReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEReader.cs,TryOpenAssociatedPortablePdb,The length of the statement  "                TryOpenCodeViewPortablePdb(codeViewEntry' peImageDirectory' pdbFileStreamProvider' out pdbReaderProvider' out pdbPath' ref errorToReport)) " is 138.
Long Statement,System.Reflection.PortableExecutable,PEReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEReader.cs,TryOpenCodeViewPortablePdb,The length of the statement  "            string collocatedPdbPath = PathUtilities.CombinePathWithRelativePath(peImageDirectory' PathUtilities.GetFileName(data.Path)); " is 125.
Long Statement,System.Reflection.PortableExecutable,PEStreamOptionsExtensions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEStreamOptions.cs,IsValid,The length of the statement  "            return (options & ~(PEStreamOptions.LeaveOpen | PEStreamOptions.PrefetchEntireImage | PEStreamOptions.PrefetchMetadata | PEStreamOptions.IsLoadedImage)) == 0; " is 158.
Complex Conditional,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The conditional expression  "parameters.Length == 3                      && parameters[0].ParameterType == typeof(byte*)                      && parameters[1].ParameterType == typeof(int)                      && parameters[2].ParameterType == typeof(Encoding)                      && methodInfo.ReturnType == typeof(String)"  is complex.
Complex Conditional,System.Reflection.PortableExecutable,PEHeaders,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEHeaders.cs,CalculateMetadataLocation,The conditional expression  "start < 0 ||                  start >= peImageSize ||                  size <= 0 ||                  start > peImageSize - size"  is complex.
Complex Conditional,System.Reflection.PortableExecutable,PEReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEReader.cs,DecodeCodeViewDebugDirectoryData,The conditional expression  "reader.ReadByte() != (byte)'R' ||                  reader.ReadByte() != (byte)'S' ||                  reader.ReadByte() != (byte)'D' ||                  reader.ReadByte() != (byte)'S'"  is complex.
Empty Catch Block,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The method has an empty catch block.
Empty Catch Block,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The method has an empty catch block.
Empty Catch Block,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The method has an empty catch block.
Empty Catch Block,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The method has an empty catch block.
Empty Catch Block,System.Reflection.Internal,LightUpHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\LightUpHelper.cs,GetType,The method has an empty catch block.
Magic Number,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetScale,The following statement contains a magic number: return unchecked((byte)(decimal.GetBits(value)[3] >> 16));
Magic Number,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetScale,The following statement contains a magic number: return unchecked((byte)(decimal.GetBits(value)[3] >> 16));
Magic Number,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetBits,The following statement contains a magic number: high = unchecked((uint)bits[2]);
Magic Number,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetBits,The following statement contains a magic number: scale = unchecked((byte)(bits[3] >> 16));
Magic Number,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetBits,The following statement contains a magic number: scale = unchecked((byte)(bits[3] >> 16));
Magic Number,System.Reflection.Internal,DecimalUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\DecimalUtilities.cs,GetBits,The following statement contains a magic number: isNegative = (bits[3] & 0x80000000) != 0;
Magic Number,System.Reflection.Internal,BitArithmetic,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BitArithmetic.cs,CountBits,The following statement contains a magic number: unchecked              {                  v = v - ((v >> 1) & 0x55555555u);                  v = (v & 0x33333333u) + ((v >> 2) & 0x33333333u);                  return (int)((v + (v >> 4) & 0xF0F0F0Fu) * 0x1010101u) >> 24;              }
Magic Number,System.Reflection.Internal,BitArithmetic,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BitArithmetic.cs,CountBits,The following statement contains a magic number: unchecked              {                  v = v - ((v >> 1) & 0x55555555u);                  v = (v & 0x33333333u) + ((v >> 2) & 0x33333333u);                  return (int)((v + (v >> 4) & 0xF0F0F0Fu) * 0x1010101u) >> 24;              }
Magic Number,System.Reflection.Internal,BitArithmetic,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BitArithmetic.cs,CountBits,The following statement contains a magic number: unchecked              {                  v = v - ((v >> 1) & 0x55555555u);                  v = (v & 0x33333333u) + ((v >> 2) & 0x33333333u);                  return (int)((v + (v >> 4) & 0xF0F0F0Fu) * 0x1010101u) >> 24;              }
Magic Number,System.Reflection.Internal,BitArithmetic,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BitArithmetic.cs,CountBits,The following statement contains a magic number: v = (v & Mask00110011) + ((v >> 2) & Mask00110011);
Magic Number,System.Reflection.Internal,BitArithmetic,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BitArithmetic.cs,CountBits,The following statement contains a magic number: return (int)(unchecked(((v + (v >> 4)) & Mask00001111) * Mask00000001) >> 56);
Magic Number,System.Reflection.Internal,BitArithmetic,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BitArithmetic.cs,CountBits,The following statement contains a magic number: return (int)(unchecked(((v + (v >> 4)) & Mask00001111) * Mask00000001) >> 56);
Magic Number,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The following statement contains a magic number: foreach (var methodInfo in createStringInfos)              {                  var parameters = methodInfo.GetParameters();                  if (parameters.Length == 3                      && parameters[0].ParameterType == typeof(byte*)                      && parameters[1].ParameterType == typeof(int)                      && parameters[2].ParameterType == typeof(Encoding)                      && methodInfo.ReturnType == typeof(String))                  {                      try                      {                          var createStringFromEncoding = (String_CreateStringFromEncoding)methodInfo.CreateDelegate(typeof(String_CreateStringFromEncoding)' null);                          return (encoding' bytes' byteCount) => GetStringUsingCreateStringFromEncoding(createStringFromEncoding' bytes' byteCount' encoding);                      }                      catch (MemberAccessException)                      {                      }                      catch (InvalidOperationException)                      {                          // thrown when accessing unapproved API in a Windows Store app                      }                  }              }
Magic Number,System.Reflection.Internal,EncodingHelper,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\EncodingHelper.cs,LoadGetStringPlatform,The following statement contains a magic number: foreach (var methodInfo in createStringInfos)              {                  var parameters = methodInfo.GetParameters();                  if (parameters.Length == 3                      && parameters[0].ParameterType == typeof(byte*)                      && parameters[1].ParameterType == typeof(int)                      && parameters[2].ParameterType == typeof(Encoding)                      && methodInfo.ReturnType == typeof(String))                  {                      try                      {                          var createStringFromEncoding = (String_CreateStringFromEncoding)methodInfo.CreateDelegate(typeof(String_CreateStringFromEncoding)' null);                          return (encoding' bytes' byteCount) => GetStringUsingCreateStringFromEncoding(createStringFromEncoding' bytes' byteCount' encoding);                      }                      catch (MemberAccessException)                      {                      }                      catch (InvalidOperationException)                      {                          // thrown when accessing unapproved API in a Windows Store app                      }                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,GetDebuggerDisplay,The following statement contains a magic number: displayedBytes = Math.Min(Length' 64);
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,GetDebuggerDisplay,The following statement contains a magic number: if (offset < displayedBytes)              {                  display = display.Insert(offset * 3' "*");              }              else if (displayedBytes == Length)              {                  display += "*";              }              else              {                  display += "*...";              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = Pointer + offset;                  return (uint)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24));              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = Pointer + offset;                  return (uint)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24));              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = Pointer + offset;                  return (uint)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24));              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = Pointer + offset;                  return (uint)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24));              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = Pointer + offset;                  return (uint)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24));              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekCompressedInteger,The following statement contains a magic number: if ((headerByte & 0x80) == 0)              {                  numberOfBytesRead = 1;                  return headerByte;              }              else if ((headerByte & 0x40) == 0)              {                  if (limit >= 2)                  {                      numberOfBytesRead = 2;                      return ((headerByte & 0x3f) << 8) | ptr[1];                  }              }              else if ((headerByte & 0x20) == 0)              {                  if (limit >= 4)                  {                      numberOfBytesRead = 4;                      return ((headerByte & 0x1f) << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekUInt16,The following statement contains a magic number: unchecked              {                  byte* ptr = Pointer + offset;                  return (ushort)(ptr[0] | (ptr[1] << 8));              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,PeekGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchForSlot,The following statement contains a magic number: while (endRowNumber - startRowNumber > 1)              {                  if (referenceValue <= startValue)                  {                      return referenceValue == startValue ? startRowNumber : startRowNumber - 1;                  }                    if (referenceValue >= endValue)                  {                      return referenceValue == endValue ? endRowNumber : endRowNumber + 1;                  }                    int midRowNumber = (startRowNumber + endRowNumber) / 2;                  uint midReferenceValue = PeekReferenceUnchecked(midRowNumber * rowSize + referenceListOffset' isReferenceSmall);                  if (referenceValue > midReferenceValue)                  {                      startRowNumber = midRowNumber;                      startValue = midReferenceValue;                  }                  else if (referenceValue < midReferenceValue)                  {                      endRowNumber = midRowNumber;                      endValue = midReferenceValue;                  }                  else                  {                      return midRowNumber;                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReference,The following statement contains a magic number: while (startRowNumber <= endRowNumber)              {                  int midRowNumber = (startRowNumber + endRowNumber) / 2;                  uint midReferenceValue = PeekReferenceUnchecked(midRowNumber * rowSize + referenceOffset' isReferenceSmall);                  if (referenceValue > midReferenceValue)                  {                      startRowNumber = midRowNumber + 1;                  }                  else if (referenceValue < midReferenceValue)                  {                      endRowNumber = midRowNumber - 1;                  }                  else                  {                      return midRowNumber;                  }              }
Magic Number,System.Reflection.Internal,MemoryBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryBlock.cs,BinarySearchReference,The following statement contains a magic number: while (startRowNumber <= endRowNumber)              {                  int midRowNumber = (startRowNumber + endRowNumber) / 2;                  uint midReferenceValue = PeekReferenceUnchecked((ptrTable[midRowNumber] - 1) * rowSize + referenceOffset' isReferenceSmall);                  if (referenceValue > midReferenceValue)                  {                      startRowNumber = midRowNumber + 1;                  }                  else if (referenceValue < midReferenceValue)                  {                      endRowNumber = midRowNumber - 1;                  }                  else                  {                      return midRowNumber;                  }              }
Magic Number,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,CreateMemoryMap,The following statement contains a magic number: try              {                  if (s_lazyCreateFromFile != null)                  {                      return (IDisposable)s_lazyCreateFromFile.Invoke(null' new object[6]                      {                          stream'                        // fileStream                          null'                          // mapName                          s_LongZero'                    // capacity                          s_MemoryMappedFileAccess_Read' // access                          s_HandleInheritability_None'   // inheritability                          s_True'                        // leaveOpen                      });                  }                  else                  {                      Debug.Assert(s_lazyCreateFromFileClassic != null);                      return (IDisposable)s_lazyCreateFromFileClassic.Invoke(null' new object[7]                      {                          stream'                        // fileStream                          null'                          // mapName                          s_LongZero'                    // capacity                          s_MemoryMappedFileAccess_Read' // access                          null'                          // memoryMappedFileSecurity                          s_HandleInheritability_None'   // inheritability                          s_True'                        // leaveOpen                      });                  }              }              catch (MemberAccessException)              {                  s_lazyIsAvailable = false;                  return null;              }              catch (InvalidOperationException)              {                  // thrown when accessing unapproved API in a Windows Store app                  s_lazyIsAvailable = false;                  return null;              }              catch (TargetInvocationException ex)              {                  ExceptionDispatchInfo.Capture(ex.InnerException).Throw();                  throw;              }
Magic Number,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,CreateMemoryMap,The following statement contains a magic number: try              {                  if (s_lazyCreateFromFile != null)                  {                      return (IDisposable)s_lazyCreateFromFile.Invoke(null' new object[6]                      {                          stream'                        // fileStream                          null'                          // mapName                          s_LongZero'                    // capacity                          s_MemoryMappedFileAccess_Read' // access                          s_HandleInheritability_None'   // inheritability                          s_True'                        // leaveOpen                      });                  }                  else                  {                      Debug.Assert(s_lazyCreateFromFileClassic != null);                      return (IDisposable)s_lazyCreateFromFileClassic.Invoke(null' new object[7]                      {                          stream'                        // fileStream                          null'                          // mapName                          s_LongZero'                    // capacity                          s_MemoryMappedFileAccess_Read' // access                          null'                          // memoryMappedFileSecurity                          s_HandleInheritability_None'   // inheritability                          s_True'                        // leaveOpen                      });                  }              }              catch (MemberAccessException)              {                  s_lazyIsAvailable = false;                  return null;              }              catch (InvalidOperationException)              {                  // thrown when accessing unapproved API in a Windows Store app                  s_lazyIsAvailable = false;                  return null;              }              catch (TargetInvocationException ex)              {                  ExceptionDispatchInfo.Capture(ex.InnerException).Throw();                  throw;              }
Magic Number,System.Reflection.Internal,MemoryMapLightUp,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\MemoryMapLightUp.netstandard1.1.cs,CreateViewAccessor,The following statement contains a magic number: try              {                  return (IDisposable)s_lazyCreateViewAccessor.Invoke(memoryMap' new object[3]                  {                      start'                       // start                      (long)size'                  // size                      s_MemoryMappedFileAccess_Read' // access                  });              }              catch (MemberAccessException)              {                  s_lazyIsAvailable = false;                  return null;              }              catch (InvalidOperationException)              {                  s_lazyIsAvailable = false;                  return null;              }              catch (TargetInvocationException ex) when (ex.InnerException is UnauthorizedAccessException)              {                  throw new IOException(ex.InnerException.Message' ex.InnerException);              }              catch (TargetInvocationException ex)              {                  ExceptionDispatchInfo.Capture(ex.InnerException).Throw();                  throw;              }
Magic Number,System.Reflection.Internal,PooledStringBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\PooledStringBuilder.cs,Free,The following statement contains a magic number: if (builder.Capacity <= 1024)              {                  builder.Clear();                  _pool.Free(this);              }
Magic Number,System.Reflection.Internal,PooledStringBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\PooledStringBuilder.cs,CreatePool,The following statement contains a magic number: pool = new ObjectPool<PooledStringBuilder>(() => new PooledStringBuilder(pool)' 32);
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,GetCompressedIntegerSize,The following statement contains a magic number: if (value <= TwoByteCompressedIntegerMaxValue)              {                  return 2;              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,GetCompressedIntegerSize,The following statement contains a magic number: return 4;
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobWriterImpl,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobWriterImpl.cs,WriteCompressedSignedInteger,The following statement contains a magic number: unchecked              {                  const int b6 = (1 << 6) - 1;                  const int b13 = (1 << 13) - 1;                  const int b28 = (1 << 28) - 1;                    // 0xffffffff for negative value                  // 0x00000000 for non-negative                  int signMask = value >> 31;                    if ((value & ~b6) == (signMask & ~b6))                  {                      int n = ((value & b6) << 1) | (signMask & 1);                      writer.WriteByte((byte)n);                  }                  else if ((value & ~b13) == (signMask & ~b13))                  {                      int n = ((value & b13) << 1) | (signMask & 1);                      writer.WriteUInt16BE((ushort)(0x8000 | n));                  }                  else if ((value & ~b28) == (signMask & ~b28))                  {                      int n = ((value & b28) << 1) | (signMask & 1);                      writer.WriteUInt32BE(0xc0000000 | (uint)n);                  }                  else                  {                      Throw.ValueArgumentOutOfRange();                  }              }
Magic Number,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,Display,The following statement contains a magic number: const int MaxDisplaySize = 64;
Magic Number,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,Display,The following statement contains a magic number: return (length <= MaxDisplaySize) ?                  BitConverter.ToString(bytes' 0' length) :                  BitConverter.ToString(bytes' 0' MaxDisplaySize / 2) + "-...-" + BitConverter.ToString(bytes' length - MaxDisplaySize / 2' MaxDisplaySize / 2);
Magic Number,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,Display,The following statement contains a magic number: return (length <= MaxDisplaySize) ?                  BitConverter.ToString(bytes' 0' length) :                  BitConverter.ToString(bytes' 0' MaxDisplaySize / 2) + "-...-" + BitConverter.ToString(bytes' length - MaxDisplaySize / 2' MaxDisplaySize / 2);
Magic Number,System.Reflection.Metadata,BlobBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobBuilder.cs,Display,The following statement contains a magic number: return (length <= MaxDisplaySize) ?                  BitConverter.ToString(bytes' 0' length) :                  BitConverter.ToString(bytes' 0' MaxDisplaySize / 2) + "-...-" + BitConverter.ToString(bytes' length - MaxDisplaySize / 2' MaxDisplaySize / 2);
Magic Number,System.Reflection.Metadata,ILOpCodeExtensions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\ILOpCodeExtensions.cs,GetBranchOperandSize,The following statement contains a magic number: switch (opCode)              {                  case ILOpCode.Br_s:                  case ILOpCode.Brfalse_s:                  case ILOpCode.Brtrue_s:                  case ILOpCode.Beq_s:                  case ILOpCode.Bge_s:                  case ILOpCode.Bgt_s:                  case ILOpCode.Ble_s:                  case ILOpCode.Blt_s:                  case ILOpCode.Bne_un_s:                  case ILOpCode.Bge_un_s:                  case ILOpCode.Bgt_un_s:                  case ILOpCode.Ble_un_s:                  case ILOpCode.Blt_un_s:                  case ILOpCode.Leave_s:                      return 1;                    case ILOpCode.Br:                  case ILOpCode.Brfalse:                  case ILOpCode.Brtrue:                  case ILOpCode.Beq:                  case ILOpCode.Bge:                  case ILOpCode.Bgt:                  case ILOpCode.Ble:                  case ILOpCode.Blt:                  case ILOpCode.Bne_un:                  case ILOpCode.Bge_un:                  case ILOpCode.Bgt_un:                  case ILOpCode.Ble_un:                  case ILOpCode.Blt_un:                  case ILOpCode.Leave:                      return 4;              }
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: const int minHashSize = 20;
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[7] = (byte)((guidPtr[7] & 0x0f) | (4 << 4));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[7] = (byte)((guidPtr[7] & 0x0f) | (4 << 4));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[7] = (byte)((guidPtr[7] & 0x0f) | (4 << 4));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[7] = (byte)((guidPtr[7] & 0x0f) | (4 << 4));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[8] = (byte)((guidPtr[8] & 0x3f) | (2 << 6));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[8] = (byte)((guidPtr[8] & 0x3f) | (2 << 6));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[8] = (byte)((guidPtr[8] & 0x3f) | (2 << 6));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: guidPtr[8] = (byte)((guidPtr[8] & 0x3f) | (2 << 6));
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]);
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]);
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]);
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]);
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]);
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]);
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,FromHash,The following statement contains a magic number: uint stamp = 0x80000000u | ((uint)hashCode[19] << 24 | (uint)hashCode[18] << 16 | (uint)hashCode[17] << 8 | hashCode[16]);
Magic Number,System.Reflection.Metadata,BlobContentId,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobContentId.cs,GetTimeBasedProvider,The following statement contains a magic number: uint timestamp = (uint)(DateTime.UtcNow - new DateTime(1970' 1' 1)).TotalSeconds;
Magic Number,System.Reflection.Metadata,BlobHandle,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\Handles.TypeSystem.cs,FromVirtualIndex,The following statement contains a magic number: return new BlobHandle(TokenTypeIds.VirtualBit | (uint)(virtualValue << 8) | (uint)virtualIndex);
Magic Number,System.Reflection.Metadata,BlobHandle,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\Handles.TypeSystem.cs,SubstituteTemplateParameters,The following statement contains a magic number: Debug.Assert(blob.Length >= TemplateParameterOffset_AttributeUsageTarget + 4);
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,GetDebuggerDisplay,The following statement contains a magic number: if (this.Offset < displayedBytes)              {                  display = display.Insert(this.Offset * 3' "*");              }              else if (displayedBytes == _block.Length)              {                  display += "*";              }              else              {                  display += "*...";              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadChar,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(char));                  return (char)(ptr[0] + (ptr[1] << 8));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt16,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(short));                  return (short)(ptr[0] + (ptr[1] << 8));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadUInt16,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(ushort));                  return (ushort)(ptr[0] + (ptr[1] << 8));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(int));                  return (int)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(int));                  return (int)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(int));                  return (int)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(int));                  return (int)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(int));                  return (int)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(uint));                  return (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(uint));                  return (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(uint));                  return (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(uint));                  return (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(uint));                  return (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadInt64,The following statement contains a magic number: unchecked              {                  byte* ptr = GetCurrentPointerAndAdvance(sizeof(long));                  uint lo = (uint)(ptr[0] + (ptr[1] << 8) + (ptr[2] << 16) + (ptr[3] << 24));                  uint hi = (uint)(ptr[4] + (ptr[5] << 8) + (ptr[6] << 16) + (ptr[7] << 24));                  return (long)(lo + ((ulong)hi << 32));              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: const int size = 16;
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadGuid,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  return *(Guid*)ptr;              }              else              {                  unchecked                  {                      return new Guid(                          (int)(ptr[0] | (ptr[1] << 8) | (ptr[2] << 16) | (ptr[3] << 24))'                          (short)(ptr[4] | (ptr[5] << 8))'                          (short)(ptr[6] | (ptr[7] << 8))'                          ptr[8]' ptr[9]' ptr[10]' ptr[11]' ptr[12]' ptr[13]' ptr[14]' ptr[15]);                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: byte* ptr = GetCurrentPointerAndAdvance(13);
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: if (scale > 28)              {                  throw new BadImageFormatException(SR.ValueTooLarge);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadDecimal,The following statement contains a magic number: unchecked              {                  return new decimal(                      (int)(ptr[1] | (ptr[2] << 8) | (ptr[3] << 16) | (ptr[4] << 24))'                      (int)(ptr[5] | (ptr[6] << 8) | (ptr[7] << 16) | (ptr[8] << 24))'                      (int)(ptr[9] | (ptr[10] << 8) | (ptr[11] << 16) | (ptr[12] << 24))'                      isNegative: (*ptr & 0x80) != 0'                      scale: scale);              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,TryReadCompressedSignedInteger,The following statement contains a magic number: if (signExtend)              {                  switch (bytesRead)                  {                      case 1:                          value |= unchecked((int)0xffffffc0);                          break;                      case 2:                          value |= unchecked((int)0xffffe000);                          break;                      default:                          Debug.Assert(bytesRead == 4);                          value |= unchecked((int)0xf0000000);                          break;                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,TryReadCompressedSignedInteger,The following statement contains a magic number: if (signExtend)              {                  switch (bytesRead)                  {                      case 1:                          value |= unchecked((int)0xffffffc0);                          break;                      case 2:                          value |= unchecked((int)0xffffe000);                          break;                      default:                          Debug.Assert(bytesRead == 4);                          value |= unchecked((int)0xf0000000);                          break;                  }              }
Magic Number,System.Reflection.Metadata,BlobReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\BlobReader.cs,ReadTypeHandle,The following statement contains a magic number: return new EntityHandle(tokenType | (value >> 2));
Magic Number,System.Reflection.Metadata,CustomAttribute,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\CustomAttribute.cs,GetProjectedValue,The following statement contains a magic number: if (rawBlobReader.Length != 8)              {                  return rawBlob;              }
Magic Number,System.Reflection.Metadata,Handle,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Handle.cs,GetHashCode,The following statement contains a magic number: return _value ^ (_vType << 24);
Magic Number,System.Reflection.Metadata,Handle,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Handle.cs,Compare,The following statement contains a magic number: return ((long)(uint)left._value | (long)left._vType << 32).CompareTo((long)(uint)right._value | (long)right._vType << 32);
Magic Number,System.Reflection.Metadata,Handle,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Handle.cs,Compare,The following statement contains a magic number: return ((long)(uint)left._value | (long)left._vType << 32).CompareTo((long)(uint)right._value | (long)right._vType << 32);
Magic Number,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,ReadStreamHeaders,The following statement contains a magic number: for (int i = 0; i < streamHeaders.Length; i++)              {                  if (memReader.RemainingBytes < COR20Constants.MinimumSizeofStreamHeader)                  {                      throw new BadImageFormatException(SR.StreamHeaderTooSmall);                  }                    streamHeaders[i].Offset = memReader.ReadUInt32();                  streamHeaders[i].Size = memReader.ReadInt32();                  streamHeaders[i].Name = memReader.ReadUtf8NullTerminated();                  bool aligned = memReader.TryAlign(4);                    if (!aligned || memReader.RemainingBytes == 0)                  {                      throw new BadImageFormatException(SR.NotEnoughSpaceForStreamHeaderName);                  }              }
Magic Number,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,ReadStandalonePortablePdbStream,The following statement contains a magic number: const int PdbIdSize = 20;
Magic Number,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The following statement contains a magic number: if (s_projectedTypeNames == null || s_projectionInfos == null)              {                  var systemRuntimeWindowsRuntime = AssemblyReferenceHandle.VirtualIndex.System_Runtime_WindowsRuntime;                  var systemRuntime = AssemblyReferenceHandle.VirtualIndex.System_Runtime;                  var systemObjectModel = AssemblyReferenceHandle.VirtualIndex.System_ObjectModel;                  var systemRuntimeWindowsUiXaml = AssemblyReferenceHandle.VirtualIndex.System_Runtime_WindowsRuntime_UI_Xaml;                  var systemRuntimeInterop = AssemblyReferenceHandle.VirtualIndex.System_Runtime_InteropServices_WindowsRuntime;                  var systemNumericsVectors = AssemblyReferenceHandle.VirtualIndex.System_Numerics_Vectors;                    // sorted by name                  var keys = new string[50];                  var values = new ProjectionInfo[50];                  int k = 0' v = 0;                    // WARNING: Keys must be sorted by name and must only contain ASCII characters. WinRTNamespace must also be ASCII only.                    keys[k++] = "AttributeTargets"; values[v++] = new ProjectionInfo("Windows.Foundation.Metadata"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.AttributeTargets' systemRuntime);                  keys[k++] = "AttributeUsageAttribute"; values[v++] = new ProjectionInfo("Windows.Foundation.Metadata"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.AttributeUsageAttribute' systemRuntime' treatment: TypeDefTreatment.RedirectedToClrAttribute);                  keys[k++] = "Color"; values[v++] = new ProjectionInfo("Windows.UI"' StringHandle.VirtualIndex.Windows_UI' StringHandle.VirtualIndex.Color' systemRuntimeWindowsRuntime);                  keys[k++] = "CornerRadius"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.CornerRadius' systemRuntimeWindowsUiXaml);                  keys[k++] = "DateTime"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.DateTimeOffset' systemRuntime);                  keys[k++] = "Duration"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.Duration' systemRuntimeWindowsUiXaml);                  keys[k++] = "DurationType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.DurationType' systemRuntimeWindowsUiXaml);                  keys[k++] = "EventHandler`1"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.EventHandler1' systemRuntime);                  keys[k++] = "EventRegistrationToken"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System_Runtime_InteropServices_WindowsRuntime' StringHandle.VirtualIndex.EventRegistrationToken' systemRuntimeInterop);                  keys[k++] = "GeneratorPosition"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Controls.Primitives"' StringHandle.VirtualIndex.Windows_UI_Xaml_Controls_Primitives' StringHandle.VirtualIndex.GeneratorPosition' systemRuntimeWindowsUiXaml);                  keys[k++] = "GridLength"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.GridLength' systemRuntimeWindowsUiXaml);                  keys[k++] = "GridUnitType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.GridUnitType' systemRuntimeWindowsUiXaml);                  keys[k++] = "HResult"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Exception' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToClass);                  keys[k++] = "IBindableIterable"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections' StringHandle.VirtualIndex.IEnumerable' systemRuntime);                  keys[k++] = "IBindableVector"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections' StringHandle.VirtualIndex.IList' systemRuntime);                  keys[k++] = "IClosable"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.IDisposable' systemRuntime' isIDisposable: true);                  keys[k++] = "ICommand"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Input"' StringHandle.VirtualIndex.System_Windows_Input' StringHandle.VirtualIndex.ICommand' systemObjectModel);                  keys[k++] = "IIterable`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IEnumerable1' systemRuntime);                  keys[k++] = "IKeyValuePair`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.KeyValuePair2' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToValueType);                  keys[k++] = "IMapView`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IReadOnlyDictionary2' systemRuntime);                  keys[k++] = "IMap`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IDictionary2' systemRuntime);                  keys[k++] = "INotifyCollectionChanged"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.INotifyCollectionChanged' systemObjectModel);                  keys[k++] = "INotifyPropertyChanged"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.INotifyPropertyChanged' systemObjectModel);                  keys[k++] = "IReference`1"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Nullable1' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToValueType);                  keys[k++] = "IVectorView`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IReadOnlyList1' systemRuntime);                  keys[k++] = "IVector`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IList1' systemRuntime);                  keys[k++] = "KeyTime"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.KeyTime' systemRuntimeWindowsUiXaml);                  keys[k++] = "Matrix"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media' StringHandle.VirtualIndex.Matrix' systemRuntimeWindowsUiXaml);                  keys[k++] = "Matrix3D"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Media3D"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Media3D' StringHandle.VirtualIndex.Matrix3D' systemRuntimeWindowsUiXaml);                  keys[k++] = "Matrix3x2"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Matrix3x2' systemNumericsVectors);                  keys[k++] = "Matrix4x4"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Matrix4x4' systemNumericsVectors);                  keys[k++] = "NotifyCollectionChangedAction"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedAction' systemObjectModel);                  keys[k++] = "NotifyCollectionChangedEventArgs"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedEventArgs' systemObjectModel);                  keys[k++] = "NotifyCollectionChangedEventHandler"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedEventHandler' systemObjectModel);                  keys[k++] = "Plane"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Plane' systemNumericsVectors);                  keys[k++] = "Point"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Point' systemRuntimeWindowsRuntime);                  keys[k++] = "PropertyChangedEventArgs"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.PropertyChangedEventArgs' systemObjectModel);                  keys[k++] = "PropertyChangedEventHandler"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.PropertyChangedEventHandler' systemObjectModel);                  keys[k++] = "Quaternion"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Quaternion' systemNumericsVectors);                  keys[k++] = "Rect"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Rect' systemRuntimeWindowsRuntime);                  keys[k++] = "RepeatBehavior"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.RepeatBehavior' systemRuntimeWindowsUiXaml);                  keys[k++] = "RepeatBehaviorType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.RepeatBehaviorType' systemRuntimeWindowsUiXaml);                  keys[k++] = "Size"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Size' systemRuntimeWindowsRuntime);                  keys[k++] = "Thickness"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.Thickness' systemRuntimeWindowsUiXaml);                  keys[k++] = "TimeSpan"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.TimeSpan' systemRuntime);                  keys[k++] = "TypeName"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Type' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToClass);                  keys[k++] = "Uri"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Uri' systemRuntime);                  keys[k++] = "Vector2"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector2' systemNumericsVectors);                  keys[k++] = "Vector3"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector3' systemNumericsVectors);                  keys[k++] = "Vector4"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector4' systemNumericsVectors);                    Debug.Assert(k == keys.Length && v == keys.Length && k == v);                  AssertSorted(keys);                    s_projectedTypeNames = keys;                  s_projectionInfos = values;              }
Magic Number,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,InitializeProjectedTypes,The following statement contains a magic number: if (s_projectedTypeNames == null || s_projectionInfos == null)              {                  var systemRuntimeWindowsRuntime = AssemblyReferenceHandle.VirtualIndex.System_Runtime_WindowsRuntime;                  var systemRuntime = AssemblyReferenceHandle.VirtualIndex.System_Runtime;                  var systemObjectModel = AssemblyReferenceHandle.VirtualIndex.System_ObjectModel;                  var systemRuntimeWindowsUiXaml = AssemblyReferenceHandle.VirtualIndex.System_Runtime_WindowsRuntime_UI_Xaml;                  var systemRuntimeInterop = AssemblyReferenceHandle.VirtualIndex.System_Runtime_InteropServices_WindowsRuntime;                  var systemNumericsVectors = AssemblyReferenceHandle.VirtualIndex.System_Numerics_Vectors;                    // sorted by name                  var keys = new string[50];                  var values = new ProjectionInfo[50];                  int k = 0' v = 0;                    // WARNING: Keys must be sorted by name and must only contain ASCII characters. WinRTNamespace must also be ASCII only.                    keys[k++] = "AttributeTargets"; values[v++] = new ProjectionInfo("Windows.Foundation.Metadata"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.AttributeTargets' systemRuntime);                  keys[k++] = "AttributeUsageAttribute"; values[v++] = new ProjectionInfo("Windows.Foundation.Metadata"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.AttributeUsageAttribute' systemRuntime' treatment: TypeDefTreatment.RedirectedToClrAttribute);                  keys[k++] = "Color"; values[v++] = new ProjectionInfo("Windows.UI"' StringHandle.VirtualIndex.Windows_UI' StringHandle.VirtualIndex.Color' systemRuntimeWindowsRuntime);                  keys[k++] = "CornerRadius"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.CornerRadius' systemRuntimeWindowsUiXaml);                  keys[k++] = "DateTime"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.DateTimeOffset' systemRuntime);                  keys[k++] = "Duration"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.Duration' systemRuntimeWindowsUiXaml);                  keys[k++] = "DurationType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.DurationType' systemRuntimeWindowsUiXaml);                  keys[k++] = "EventHandler`1"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.EventHandler1' systemRuntime);                  keys[k++] = "EventRegistrationToken"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System_Runtime_InteropServices_WindowsRuntime' StringHandle.VirtualIndex.EventRegistrationToken' systemRuntimeInterop);                  keys[k++] = "GeneratorPosition"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Controls.Primitives"' StringHandle.VirtualIndex.Windows_UI_Xaml_Controls_Primitives' StringHandle.VirtualIndex.GeneratorPosition' systemRuntimeWindowsUiXaml);                  keys[k++] = "GridLength"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.GridLength' systemRuntimeWindowsUiXaml);                  keys[k++] = "GridUnitType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.GridUnitType' systemRuntimeWindowsUiXaml);                  keys[k++] = "HResult"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Exception' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToClass);                  keys[k++] = "IBindableIterable"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections' StringHandle.VirtualIndex.IEnumerable' systemRuntime);                  keys[k++] = "IBindableVector"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections' StringHandle.VirtualIndex.IList' systemRuntime);                  keys[k++] = "IClosable"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.IDisposable' systemRuntime' isIDisposable: true);                  keys[k++] = "ICommand"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Input"' StringHandle.VirtualIndex.System_Windows_Input' StringHandle.VirtualIndex.ICommand' systemObjectModel);                  keys[k++] = "IIterable`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IEnumerable1' systemRuntime);                  keys[k++] = "IKeyValuePair`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.KeyValuePair2' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToValueType);                  keys[k++] = "IMapView`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IReadOnlyDictionary2' systemRuntime);                  keys[k++] = "IMap`2"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IDictionary2' systemRuntime);                  keys[k++] = "INotifyCollectionChanged"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.INotifyCollectionChanged' systemObjectModel);                  keys[k++] = "INotifyPropertyChanged"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.INotifyPropertyChanged' systemObjectModel);                  keys[k++] = "IReference`1"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Nullable1' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToValueType);                  keys[k++] = "IVectorView`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IReadOnlyList1' systemRuntime);                  keys[k++] = "IVector`1"; values[v++] = new ProjectionInfo("Windows.Foundation.Collections"' StringHandle.VirtualIndex.System_Collections_Generic' StringHandle.VirtualIndex.IList1' systemRuntime);                  keys[k++] = "KeyTime"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.KeyTime' systemRuntimeWindowsUiXaml);                  keys[k++] = "Matrix"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media' StringHandle.VirtualIndex.Matrix' systemRuntimeWindowsUiXaml);                  keys[k++] = "Matrix3D"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Media3D"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Media3D' StringHandle.VirtualIndex.Matrix3D' systemRuntimeWindowsUiXaml);                  keys[k++] = "Matrix3x2"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Matrix3x2' systemNumericsVectors);                  keys[k++] = "Matrix4x4"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Matrix4x4' systemNumericsVectors);                  keys[k++] = "NotifyCollectionChangedAction"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedAction' systemObjectModel);                  keys[k++] = "NotifyCollectionChangedEventArgs"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedEventArgs' systemObjectModel);                  keys[k++] = "NotifyCollectionChangedEventHandler"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System_Collections_Specialized' StringHandle.VirtualIndex.NotifyCollectionChangedEventHandler' systemObjectModel);                  keys[k++] = "Plane"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Plane' systemNumericsVectors);                  keys[k++] = "Point"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Point' systemRuntimeWindowsRuntime);                  keys[k++] = "PropertyChangedEventArgs"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.PropertyChangedEventArgs' systemObjectModel);                  keys[k++] = "PropertyChangedEventHandler"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Data"' StringHandle.VirtualIndex.System_ComponentModel' StringHandle.VirtualIndex.PropertyChangedEventHandler' systemObjectModel);                  keys[k++] = "Quaternion"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Quaternion' systemNumericsVectors);                  keys[k++] = "Rect"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Rect' systemRuntimeWindowsRuntime);                  keys[k++] = "RepeatBehavior"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.RepeatBehavior' systemRuntimeWindowsUiXaml);                  keys[k++] = "RepeatBehaviorType"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Media.Animation"' StringHandle.VirtualIndex.Windows_UI_Xaml_Media_Animation' StringHandle.VirtualIndex.RepeatBehaviorType' systemRuntimeWindowsUiXaml);                  keys[k++] = "Size"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.Windows_Foundation' StringHandle.VirtualIndex.Size' systemRuntimeWindowsRuntime);                  keys[k++] = "Thickness"; values[v++] = new ProjectionInfo("Windows.UI.Xaml"' StringHandle.VirtualIndex.Windows_UI_Xaml' StringHandle.VirtualIndex.Thickness' systemRuntimeWindowsUiXaml);                  keys[k++] = "TimeSpan"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.TimeSpan' systemRuntime);                  keys[k++] = "TypeName"; values[v++] = new ProjectionInfo("Windows.UI.Xaml.Interop"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Type' systemRuntime' signatureTreatment: TypeRefSignatureTreatment.ProjectedToClass);                  keys[k++] = "Uri"; values[v++] = new ProjectionInfo("Windows.Foundation"' StringHandle.VirtualIndex.System' StringHandle.VirtualIndex.Uri' systemRuntime);                  keys[k++] = "Vector2"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector2' systemNumericsVectors);                  keys[k++] = "Vector3"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector3' systemNumericsVectors);                  keys[k++] = "Vector4"; values[v++] = new ProjectionInfo("Windows.Foundation.Numerics"' StringHandle.VirtualIndex.System_Numerics' StringHandle.VirtualIndex.Vector4' systemNumericsVectors);                    Debug.Assert(k == keys.Length && v == keys.Length && k == v);                  AssertSorted(keys);                    s_projectedTypeNames = keys;                  s_projectionInfos = values;              }
Magic Number,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,ImplementsRedirectedInterface,The following statement contains a magic number: if (parent.Kind == HandleKind.TypeReference)              {                  typeRef = (TypeReferenceHandle)parent;              }              else if (parent.Kind == HandleKind.TypeSpecification)              {                  BlobHandle blob = TypeSpecTable.GetSignature((TypeSpecificationHandle)parent);                  BlobReader sig = new BlobReader(BlobHeap.GetMemoryBlock(blob));                    if (sig.Length < 2 ||                      sig.ReadByte() != (byte)CorElementType.ELEMENT_TYPE_GENERICINST ||                      sig.ReadByte() != (byte)CorElementType.ELEMENT_TYPE_CLASS)                  {                      return false;                  }                    EntityHandle token = sig.ReadTypeHandle();                  if (token.Kind != HandleKind.TypeReference)                  {                      return false;                  }                    typeRef = (TypeReferenceHandle)token;              }              else              {                  return false;              }
Magic Number,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,Create,The following statement contains a magic number: if ((headByte & ILFormatMask) == ILTinyFormat)              {                  // tiny IL can't have locals so technically this shouldn't matter'                   // but false is consistent with other metadata readers and helps                  // for use cases involving comparing our output with theirs.                  const bool initLocalsForTinyIL = false;                    ilSize = headByte >> ILTinyFormatSizeShift;                  return new MethodBodyBlock(                      initLocalsForTinyIL'                      8'                      default(StandaloneSignatureHandle)'                      reader.GetMemoryBlockAt(0' ilSize)'                      ImmutableArray<ExceptionRegion>.Empty'                      1 + ilSize // header + IL                  );              }
Magic Number,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,Create,The following statement contains a magic number: if (hasExceptionHandlers)              {                  reader.Align(4);                  byte sehHeader = reader.ReadByte();                  if ((sehHeader & SectEHTable) != SectEHTable)                  {                      throw new BadImageFormatException(SR.Format(SR.InvalidSehHeader' sehHeader));                  }                    bool sehFatFormat = (sehHeader & SectFatFormat) == SectFatFormat;                  int dataSize = reader.ReadByte();                  if (sehFatFormat)                  {                      dataSize += reader.ReadUInt16() << 8;                      exceptionHandlers = ReadFatExceptionHandlers(ref reader' dataSize / 24);                  }                  else                  {                      reader.Offset += 2; // skip over reserved field                      exceptionHandlers = ReadSmallExceptionHandlers(ref reader' dataSize / 12);                  }              }              else              {                  exceptionHandlers = ImmutableArray<ExceptionRegion>.Empty;              }
Magic Number,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,Create,The following statement contains a magic number: if (hasExceptionHandlers)              {                  reader.Align(4);                  byte sehHeader = reader.ReadByte();                  if ((sehHeader & SectEHTable) != SectEHTable)                  {                      throw new BadImageFormatException(SR.Format(SR.InvalidSehHeader' sehHeader));                  }                    bool sehFatFormat = (sehHeader & SectFatFormat) == SectFatFormat;                  int dataSize = reader.ReadByte();                  if (sehFatFormat)                  {                      dataSize += reader.ReadUInt16() << 8;                      exceptionHandlers = ReadFatExceptionHandlers(ref reader' dataSize / 24);                  }                  else                  {                      reader.Offset += 2; // skip over reserved field                      exceptionHandlers = ReadSmallExceptionHandlers(ref reader' dataSize / 12);                  }              }              else              {                  exceptionHandlers = ImmutableArray<ExceptionRegion>.Empty;              }
Magic Number,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,Create,The following statement contains a magic number: if (hasExceptionHandlers)              {                  reader.Align(4);                  byte sehHeader = reader.ReadByte();                  if ((sehHeader & SectEHTable) != SectEHTable)                  {                      throw new BadImageFormatException(SR.Format(SR.InvalidSehHeader' sehHeader));                  }                    bool sehFatFormat = (sehHeader & SectFatFormat) == SectFatFormat;                  int dataSize = reader.ReadByte();                  if (sehFatFormat)                  {                      dataSize += reader.ReadUInt16() << 8;                      exceptionHandlers = ReadFatExceptionHandlers(ref reader' dataSize / 24);                  }                  else                  {                      reader.Offset += 2; // skip over reserved field                      exceptionHandlers = ReadSmallExceptionHandlers(ref reader' dataSize / 12);                  }              }              else              {                  exceptionHandlers = ImmutableArray<ExceptionRegion>.Empty;              }
Magic Number,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,Create,The following statement contains a magic number: if (hasExceptionHandlers)              {                  reader.Align(4);                  byte sehHeader = reader.ReadByte();                  if ((sehHeader & SectEHTable) != SectEHTable)                  {                      throw new BadImageFormatException(SR.Format(SR.InvalidSehHeader' sehHeader));                  }                    bool sehFatFormat = (sehHeader & SectFatFormat) == SectFatFormat;                  int dataSize = reader.ReadByte();                  if (sehFatFormat)                  {                      dataSize += reader.ReadUInt16() << 8;                      exceptionHandlers = ReadFatExceptionHandlers(ref reader' dataSize / 24);                  }                  else                  {                      reader.Offset += 2; // skip over reserved field                      exceptionHandlers = ReadSmallExceptionHandlers(ref reader' dataSize / 12);                  }              }              else              {                  exceptionHandlers = ImmutableArray<ExceptionRegion>.Empty;              }
Magic Number,System.Reflection.Metadata,MethodBodyBlock,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\MethodBodyBlock.cs,Create,The following statement contains a magic number: if (hasExceptionHandlers)              {                  reader.Align(4);                  byte sehHeader = reader.ReadByte();                  if ((sehHeader & SectEHTable) != SectEHTable)                  {                      throw new BadImageFormatException(SR.Format(SR.InvalidSehHeader' sehHeader));                  }                    bool sehFatFormat = (sehHeader & SectFatFormat) == SectFatFormat;                  int dataSize = reader.ReadByte();                  if (sehFatFormat)                  {                      dataSize += reader.ReadUInt16() << 8;                      exceptionHandlers = ReadFatExceptionHandlers(ref reader' dataSize / 24);                  }                  else                  {                      reader.Offset += 2; // skip over reserved field                      exceptionHandlers = ReadSmallExceptionHandlers(ref reader' dataSize / 12);                  }              }              else              {                  exceptionHandlers = ImmutableArray<ExceptionRegion>.Empty;              }
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,MethodBodyStreamEncoder,The following statement contains a magic number: if ((builder.Count % 4) != 0)              {                  throw new ArgumentException(SR.BuilderMustAligned' nameof(builder));              }
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: const int TinyFormat = 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: const int FatFormat = 3;
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: const int MoreSections = 8;
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: bool isTiny = codeSize < 64 && maxStack <= 8 && localVariablesSignature.IsNil && exceptionRegionCount == 0;
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: bool isTiny = codeSize < 64 && maxStack <= 8 && localVariablesSignature.IsNil && exceptionRegionCount == 0;
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: if (isTiny)              {                  offset = Builder.Count;                  Builder.WriteByte((byte)((codeSize << 2) | TinyFormat));              }              else              {                  Builder.Align(4);                    offset = Builder.Count;                    ushort flags = (3 << 12) | FatFormat;                  if (exceptionRegionCount > 0)                  {                      flags |= MoreSections;                  }                    if ((attributes & MethodBodyAttributes.InitLocals) != 0)                  {                      flags |= InitLocals;                  }                    Builder.WriteUInt16((ushort)((int)attributes | flags));                  Builder.WriteUInt16(maxStack);                  Builder.WriteInt32(codeSize);                  Builder.WriteInt32(localVariablesSignature.IsNil ? 0 : MetadataTokens.GetToken(localVariablesSignature));              }
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: if (isTiny)              {                  offset = Builder.Count;                  Builder.WriteByte((byte)((codeSize << 2) | TinyFormat));              }              else              {                  Builder.Align(4);                    offset = Builder.Count;                    ushort flags = (3 << 12) | FatFormat;                  if (exceptionRegionCount > 0)                  {                      flags |= MoreSections;                  }                    if ((attributes & MethodBodyAttributes.InitLocals) != 0)                  {                      flags |= InitLocals;                  }                    Builder.WriteUInt16((ushort)((int)attributes | flags));                  Builder.WriteUInt16(maxStack);                  Builder.WriteInt32(codeSize);                  Builder.WriteInt32(localVariablesSignature.IsNil ? 0 : MetadataTokens.GetToken(localVariablesSignature));              }
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: if (isTiny)              {                  offset = Builder.Count;                  Builder.WriteByte((byte)((codeSize << 2) | TinyFormat));              }              else              {                  Builder.Align(4);                    offset = Builder.Count;                    ushort flags = (3 << 12) | FatFormat;                  if (exceptionRegionCount > 0)                  {                      flags |= MoreSections;                  }                    if ((attributes & MethodBodyAttributes.InitLocals) != 0)                  {                      flags |= InitLocals;                  }                    Builder.WriteUInt16((ushort)((int)attributes | flags));                  Builder.WriteUInt16(maxStack);                  Builder.WriteInt32(codeSize);                  Builder.WriteInt32(localVariablesSignature.IsNil ? 0 : MetadataTokens.GetToken(localVariablesSignature));              }
Magic Number,System.Reflection.Metadata.Ecma335,MethodBodyStreamEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\MethodBodyStreamEncoder.cs,SerializeHeader,The following statement contains a magic number: if (isTiny)              {                  offset = Builder.Count;                  Builder.WriteByte((byte)((codeSize << 2) | TinyFormat));              }              else              {                  Builder.Align(4);                    offset = Builder.Count;                    ushort flags = (3 << 12) | FatFormat;                  if (exceptionRegionCount > 0)                  {                      flags |= MoreSections;                  }                    if ((attributes & MethodBodyAttributes.InitLocals) != 0)                  {                      flags |= InitLocals;                  }                    Builder.WriteUInt16((ushort)((int)attributes | flags));                  Builder.WriteUInt16(maxStack);                  Builder.WriteInt32(codeSize);                  Builder.WriteInt32(localVariablesSignature.IsNil ? 0 : MetadataTokens.GetToken(localVariablesSignature));              }
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,GetSerializedMetadata,The following statement contains a magic number: Debug.Assert((int)HeapIndex.Blob == 2);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,GetSerializedMetadata,The following statement contains a magic number: Debug.Assert((int)HeapIndex.Guid == 3);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMetadataHeader,The following statement contains a magic number: builder.WriteUInt16((ushort)(5 + (sizes.IsEncDelta ? 1 : 0) + (sizes.IsStandaloneDebugMetadata ? 1 : 0)));
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeStreamHeader,The following statement contains a magic number: for (uint i = 8 + (uint)streamName.Length; i < sizeOfStreamHeader; i++)              {                  builder.WriteByte(0);              }
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,SerializeMetadataTables,The following statement contains a magic number: writer.Align(4);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,GetNewGuidHandle,The following statement contains a magic number: return GuidHandle.FromIndex((_guidBuilder.Count >> 4) + 1);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,WriteAlignedBlobHeap,The following statement contains a magic number: int alignment = BitArithmetic.Align(_blobHeapSize' 4) - _blobHeapSize;
Magic Number,System.Reflection.Metadata.Ecma335,MetadataBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataBuilder.cs,WriteAligned,The following statement contains a magic number: target.WriteBytes(0' BitArithmetic.Align(length' 4) - length);
Magic Number,System.Reflection.Metadata.Ecma335,StringHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\StringHeap.cs,TrimEnd,The following statement contains a magic number: return block.GetMemoryBlockAt(0' i + 2);
Magic Number,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The following statement contains a magic number: foreach (Blob srcBlob in srcBuilder.GetBlobs())              {                  Debug.Assert(                      srcBlobOffset == 0 ||                       srcBlobOffset == 1 && srcBlob.Buffer[0] == 0xff ||                      srcBlobOffset == 4 && srcBlob.Buffer[0] == 0xff && srcBlob.Buffer[1] == 0xff && srcBlob.Buffer[2] == 0xff && srcBlob.Buffer[3] == 0xff);                    while (true)                  {                      // copy bytes preceding the next branch' or till the end of the blob:                      int chunkSize = Math.Min(branch.ILOffset - srcOffset' srcBlob.Length - srcBlobOffset);                      dstBuilder.WriteBytes(srcBlob.Buffer' srcBlobOffset' chunkSize);                      srcOffset += chunkSize;                      srcBlobOffset += chunkSize;                        // there is no branch left in the blob:                      if (srcBlobOffset == srcBlob.Length)                      {                          srcBlobOffset = 0;                          break;                      }                        Debug.Assert(srcBlob.Buffer[srcBlobOffset] == (byte)branch.OpCode);                        int operandSize = branch.OpCode.GetBranchOperandSize();                      bool isShortInstruction = operandSize == 1;                        // Note: the 4B operand is contiguous since we wrote it via BlobBuilder.WriteInt32()                      Debug.Assert(                          srcBlobOffset + 1 == srcBlob.Length ||                           (isShortInstruction ?                              srcBlob.Buffer[srcBlobOffset + 1] == 0xff :                             BitConverter.ToUInt32(srcBlob.Buffer' srcBlobOffset + 1) == 0xffffffff));                        // write branch opcode:                      dstBuilder.WriteByte(srcBlob.Buffer[srcBlobOffset]);                        // write branch operand:                      int branchDistance;                      bool isShortDistance = branch.IsShortBranchDistance(_labels' out branchDistance);                        if (isShortInstruction && !isShortDistance)                      {                          // We could potentially implement algortihm that automatically fixes up the branch instructions as well to accomodate bigger distances'                          // however an optimal algorithm would be rather complex (something like: calculate topological ordering of crossing branch instructions                           // and then use fixed point to eliminate cycles). If the caller doesn't care about optimal IL size they can use long branches whenever the                           // distance is unknown upfront. If they do they probably already implement more sophisticad algorithm for IL layout optimization already.                           throw new InvalidOperationException(SR.Format(SR.DistanceBetweenInstructionAndLabelTooBig' branch.OpCode' srcOffset' branchDistance));                      }                        if (isShortInstruction)                      {                          dstBuilder.WriteSByte((sbyte)branchDistance);                      }                      else                      {                          dstBuilder.WriteInt32(branchDistance);                      }                        srcOffset += sizeof(byte) + operandSize;                        // next branch:                      branchIndex++;                      if (branchIndex == _branches.Count)                      {                          branch = new BranchInfo(int.MaxValue' default(LabelHandle)' 0);                      }                      else                      {                          branch = _branches[branchIndex];                      }                        // the branch starts at the very end and its operand is in the next blob:                      if (srcBlobOffset == srcBlob.Length - 1)                      {                          srcBlobOffset = operandSize;                          break;                      }                        // skip fake branch instruction:                      srcBlobOffset += sizeof(byte) + operandSize;                  }              }
Magic Number,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The following statement contains a magic number: foreach (Blob srcBlob in srcBuilder.GetBlobs())              {                  Debug.Assert(                      srcBlobOffset == 0 ||                       srcBlobOffset == 1 && srcBlob.Buffer[0] == 0xff ||                      srcBlobOffset == 4 && srcBlob.Buffer[0] == 0xff && srcBlob.Buffer[1] == 0xff && srcBlob.Buffer[2] == 0xff && srcBlob.Buffer[3] == 0xff);                    while (true)                  {                      // copy bytes preceding the next branch' or till the end of the blob:                      int chunkSize = Math.Min(branch.ILOffset - srcOffset' srcBlob.Length - srcBlobOffset);                      dstBuilder.WriteBytes(srcBlob.Buffer' srcBlobOffset' chunkSize);                      srcOffset += chunkSize;                      srcBlobOffset += chunkSize;                        // there is no branch left in the blob:                      if (srcBlobOffset == srcBlob.Length)                      {                          srcBlobOffset = 0;                          break;                      }                        Debug.Assert(srcBlob.Buffer[srcBlobOffset] == (byte)branch.OpCode);                        int operandSize = branch.OpCode.GetBranchOperandSize();                      bool isShortInstruction = operandSize == 1;                        // Note: the 4B operand is contiguous since we wrote it via BlobBuilder.WriteInt32()                      Debug.Assert(                          srcBlobOffset + 1 == srcBlob.Length ||                           (isShortInstruction ?                              srcBlob.Buffer[srcBlobOffset + 1] == 0xff :                             BitConverter.ToUInt32(srcBlob.Buffer' srcBlobOffset + 1) == 0xffffffff));                        // write branch opcode:                      dstBuilder.WriteByte(srcBlob.Buffer[srcBlobOffset]);                        // write branch operand:                      int branchDistance;                      bool isShortDistance = branch.IsShortBranchDistance(_labels' out branchDistance);                        if (isShortInstruction && !isShortDistance)                      {                          // We could potentially implement algortihm that automatically fixes up the branch instructions as well to accomodate bigger distances'                          // however an optimal algorithm would be rather complex (something like: calculate topological ordering of crossing branch instructions                           // and then use fixed point to eliminate cycles). If the caller doesn't care about optimal IL size they can use long branches whenever the                           // distance is unknown upfront. If they do they probably already implement more sophisticad algorithm for IL layout optimization already.                           throw new InvalidOperationException(SR.Format(SR.DistanceBetweenInstructionAndLabelTooBig' branch.OpCode' srcOffset' branchDistance));                      }                        if (isShortInstruction)                      {                          dstBuilder.WriteSByte((sbyte)branchDistance);                      }                      else                      {                          dstBuilder.WriteInt32(branchDistance);                      }                        srcOffset += sizeof(byte) + operandSize;                        // next branch:                      branchIndex++;                      if (branchIndex == _branches.Count)                      {                          branch = new BranchInfo(int.MaxValue' default(LabelHandle)' 0);                      }                      else                      {                          branch = _branches[branchIndex];                      }                        // the branch starts at the very end and its operand is in the next blob:                      if (srcBlobOffset == srcBlob.Length - 1)                      {                          srcBlobOffset = operandSize;                          break;                      }                        // skip fake branch instruction:                      srcBlobOffset += sizeof(byte) + operandSize;                  }              }
Magic Number,System.Reflection.Metadata.Ecma335,ControlFlowBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,CopyCodeAndFixupBranches,The following statement contains a magic number: foreach (Blob srcBlob in srcBuilder.GetBlobs())              {                  Debug.Assert(                      srcBlobOffset == 0 ||                       srcBlobOffset == 1 && srcBlob.Buffer[0] == 0xff ||                      srcBlobOffset == 4 && srcBlob.Buffer[0] == 0xff && srcBlob.Buffer[1] == 0xff && srcBlob.Buffer[2] == 0xff && srcBlob.Buffer[3] == 0xff);                    while (true)                  {                      // copy bytes preceding the next branch' or till the end of the blob:                      int chunkSize = Math.Min(branch.ILOffset - srcOffset' srcBlob.Length - srcBlobOffset);                      dstBuilder.WriteBytes(srcBlob.Buffer' srcBlobOffset' chunkSize);                      srcOffset += chunkSize;                      srcBlobOffset += chunkSize;                        // there is no branch left in the blob:                      if (srcBlobOffset == srcBlob.Length)                      {                          srcBlobOffset = 0;                          break;                      }                        Debug.Assert(srcBlob.Buffer[srcBlobOffset] == (byte)branch.OpCode);                        int operandSize = branch.OpCode.GetBranchOperandSize();                      bool isShortInstruction = operandSize == 1;                        // Note: the 4B operand is contiguous since we wrote it via BlobBuilder.WriteInt32()                      Debug.Assert(                          srcBlobOffset + 1 == srcBlob.Length ||                           (isShortInstruction ?                              srcBlob.Buffer[srcBlobOffset + 1] == 0xff :                             BitConverter.ToUInt32(srcBlob.Buffer' srcBlobOffset + 1) == 0xffffffff));                        // write branch opcode:                      dstBuilder.WriteByte(srcBlob.Buffer[srcBlobOffset]);                        // write branch operand:                      int branchDistance;                      bool isShortDistance = branch.IsShortBranchDistance(_labels' out branchDistance);                        if (isShortInstruction && !isShortDistance)                      {                          // We could potentially implement algortihm that automatically fixes up the branch instructions as well to accomodate bigger distances'                          // however an optimal algorithm would be rather complex (something like: calculate topological ordering of crossing branch instructions                           // and then use fixed point to eliminate cycles). If the caller doesn't care about optimal IL size they can use long branches whenever the                           // distance is unknown upfront. If they do they probably already implement more sophisticad algorithm for IL layout optimization already.                           throw new InvalidOperationException(SR.Format(SR.DistanceBetweenInstructionAndLabelTooBig' branch.OpCode' srcOffset' branchDistance));                      }                        if (isShortInstruction)                      {                          dstBuilder.WriteSByte((sbyte)branchDistance);                      }                      else                      {                          dstBuilder.WriteInt32(branchDistance);                      }                        srcOffset += sizeof(byte) + operandSize;                        // next branch:                      branchIndex++;                      if (branchIndex == _branches.Count)                      {                          branch = new BranchInfo(int.MaxValue' default(LabelHandle)' 0);                      }                      else                      {                          branch = _branches[branchIndex];                      }                        // the branch starts at the very end and its operand is in the next blob:                      if (srcBlobOffset == srcBlob.Length - 1)                      {                          srcBlobOffset = operandSize;                          break;                      }                        // skip fake branch instruction:                      srcBlobOffset += sizeof(byte) + operandSize;                  }              }
Magic Number,System.Reflection.Metadata.Ecma335,BranchInfo,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,IsShortBranchDistance,The following statement contains a magic number: const int shortBranchSize = 2;
Magic Number,System.Reflection.Metadata.Ecma335,BranchInfo,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ControlFlowBuilder.cs,IsShortBranchDistance,The following statement contains a magic number: const int longBranchSize = 5;
Magic Number,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,SerializeTableHeader,The following statement contains a magic number: builder.Align(4);
Magic Number,System.Reflection.Metadata.Ecma335,ExceptionRegionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\ExceptionRegionEncoder.cs,SerializeTableHeader,The following statement contains a magic number: if (hasSmallFormat)              {                  builder.WriteByte(EHTableFlag);                  builder.WriteByte(unchecked((byte)dataSize));                  builder.WriteInt16(0);              }              else              {                  Debug.Assert(dataSize <= 0x00ffffff);                  builder.WriteByte(EHTableFlag | FatFormatFlag);                  builder.WriteByte(unchecked((byte)dataSize));                  builder.WriteUInt16(unchecked((ushort)(dataSize >> 8)));              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadConstantI4,The following statement contains a magic number: switch (value)              {                  case -1: code = ILOpCode.Ldc_i4_m1; break;                  case 0: code = ILOpCode.Ldc_i4_0; break;                  case 1: code = ILOpCode.Ldc_i4_1; break;                  case 2: code = ILOpCode.Ldc_i4_2; break;                  case 3: code = ILOpCode.Ldc_i4_3; break;                  case 4: code = ILOpCode.Ldc_i4_4; break;                  case 5: code = ILOpCode.Ldc_i4_5; break;                  case 6: code = ILOpCode.Ldc_i4_6; break;                  case 7: code = ILOpCode.Ldc_i4_7; break;                  case 8: code = ILOpCode.Ldc_i4_8; break;                    default:                      if (unchecked((sbyte)value == value))                      {                          OpCode(ILOpCode.Ldc_i4_s);                          CodeBuilder.WriteSByte((sbyte)value);                      }                      else                      {                          OpCode(ILOpCode.Ldc_i4);                          CodeBuilder.WriteInt32(value);                      }                        return;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadConstantI4,The following statement contains a magic number: switch (value)              {                  case -1: code = ILOpCode.Ldc_i4_m1; break;                  case 0: code = ILOpCode.Ldc_i4_0; break;                  case 1: code = ILOpCode.Ldc_i4_1; break;                  case 2: code = ILOpCode.Ldc_i4_2; break;                  case 3: code = ILOpCode.Ldc_i4_3; break;                  case 4: code = ILOpCode.Ldc_i4_4; break;                  case 5: code = ILOpCode.Ldc_i4_5; break;                  case 6: code = ILOpCode.Ldc_i4_6; break;                  case 7: code = ILOpCode.Ldc_i4_7; break;                  case 8: code = ILOpCode.Ldc_i4_8; break;                    default:                      if (unchecked((sbyte)value == value))                      {                          OpCode(ILOpCode.Ldc_i4_s);                          CodeBuilder.WriteSByte((sbyte)value);                      }                      else                      {                          OpCode(ILOpCode.Ldc_i4);                          CodeBuilder.WriteInt32(value);                      }                        return;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadConstantI4,The following statement contains a magic number: switch (value)              {                  case -1: code = ILOpCode.Ldc_i4_m1; break;                  case 0: code = ILOpCode.Ldc_i4_0; break;                  case 1: code = ILOpCode.Ldc_i4_1; break;                  case 2: code = ILOpCode.Ldc_i4_2; break;                  case 3: code = ILOpCode.Ldc_i4_3; break;                  case 4: code = ILOpCode.Ldc_i4_4; break;                  case 5: code = ILOpCode.Ldc_i4_5; break;                  case 6: code = ILOpCode.Ldc_i4_6; break;                  case 7: code = ILOpCode.Ldc_i4_7; break;                  case 8: code = ILOpCode.Ldc_i4_8; break;                    default:                      if (unchecked((sbyte)value == value))                      {                          OpCode(ILOpCode.Ldc_i4_s);                          CodeBuilder.WriteSByte((sbyte)value);                      }                      else                      {                          OpCode(ILOpCode.Ldc_i4);                          CodeBuilder.WriteInt32(value);                      }                        return;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadConstantI4,The following statement contains a magic number: switch (value)              {                  case -1: code = ILOpCode.Ldc_i4_m1; break;                  case 0: code = ILOpCode.Ldc_i4_0; break;                  case 1: code = ILOpCode.Ldc_i4_1; break;                  case 2: code = ILOpCode.Ldc_i4_2; break;                  case 3: code = ILOpCode.Ldc_i4_3; break;                  case 4: code = ILOpCode.Ldc_i4_4; break;                  case 5: code = ILOpCode.Ldc_i4_5; break;                  case 6: code = ILOpCode.Ldc_i4_6; break;                  case 7: code = ILOpCode.Ldc_i4_7; break;                  case 8: code = ILOpCode.Ldc_i4_8; break;                    default:                      if (unchecked((sbyte)value == value))                      {                          OpCode(ILOpCode.Ldc_i4_s);                          CodeBuilder.WriteSByte((sbyte)value);                      }                      else                      {                          OpCode(ILOpCode.Ldc_i4);                          CodeBuilder.WriteInt32(value);                      }                        return;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadConstantI4,The following statement contains a magic number: switch (value)              {                  case -1: code = ILOpCode.Ldc_i4_m1; break;                  case 0: code = ILOpCode.Ldc_i4_0; break;                  case 1: code = ILOpCode.Ldc_i4_1; break;                  case 2: code = ILOpCode.Ldc_i4_2; break;                  case 3: code = ILOpCode.Ldc_i4_3; break;                  case 4: code = ILOpCode.Ldc_i4_4; break;                  case 5: code = ILOpCode.Ldc_i4_5; break;                  case 6: code = ILOpCode.Ldc_i4_6; break;                  case 7: code = ILOpCode.Ldc_i4_7; break;                  case 8: code = ILOpCode.Ldc_i4_8; break;                    default:                      if (unchecked((sbyte)value == value))                      {                          OpCode(ILOpCode.Ldc_i4_s);                          CodeBuilder.WriteSByte((sbyte)value);                      }                      else                      {                          OpCode(ILOpCode.Ldc_i4);                          CodeBuilder.WriteInt32(value);                      }                        return;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadConstantI4,The following statement contains a magic number: switch (value)              {                  case -1: code = ILOpCode.Ldc_i4_m1; break;                  case 0: code = ILOpCode.Ldc_i4_0; break;                  case 1: code = ILOpCode.Ldc_i4_1; break;                  case 2: code = ILOpCode.Ldc_i4_2; break;                  case 3: code = ILOpCode.Ldc_i4_3; break;                  case 4: code = ILOpCode.Ldc_i4_4; break;                  case 5: code = ILOpCode.Ldc_i4_5; break;                  case 6: code = ILOpCode.Ldc_i4_6; break;                  case 7: code = ILOpCode.Ldc_i4_7; break;                  case 8: code = ILOpCode.Ldc_i4_8; break;                    default:                      if (unchecked((sbyte)value == value))                      {                          OpCode(ILOpCode.Ldc_i4_s);                          CodeBuilder.WriteSByte((sbyte)value);                      }                      else                      {                          OpCode(ILOpCode.Ldc_i4);                          CodeBuilder.WriteInt32(value);                      }                        return;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadConstantI4,The following statement contains a magic number: switch (value)              {                  case -1: code = ILOpCode.Ldc_i4_m1; break;                  case 0: code = ILOpCode.Ldc_i4_0; break;                  case 1: code = ILOpCode.Ldc_i4_1; break;                  case 2: code = ILOpCode.Ldc_i4_2; break;                  case 3: code = ILOpCode.Ldc_i4_3; break;                  case 4: code = ILOpCode.Ldc_i4_4; break;                  case 5: code = ILOpCode.Ldc_i4_5; break;                  case 6: code = ILOpCode.Ldc_i4_6; break;                  case 7: code = ILOpCode.Ldc_i4_7; break;                  case 8: code = ILOpCode.Ldc_i4_8; break;                    default:                      if (unchecked((sbyte)value == value))                      {                          OpCode(ILOpCode.Ldc_i4_s);                          CodeBuilder.WriteSByte((sbyte)value);                      }                      else                      {                          OpCode(ILOpCode.Ldc_i4);                          CodeBuilder.WriteInt32(value);                      }                        return;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadLocal,The following statement contains a magic number: switch (slotIndex)              {                  case 0: OpCode(ILOpCode.Ldloc_0); break;                  case 1: OpCode(ILOpCode.Ldloc_1); break;                  case 2: OpCode(ILOpCode.Ldloc_2); break;                  case 3: OpCode(ILOpCode.Ldloc_3); break;                    default:                      if (unchecked((uint)slotIndex) <= byte.MaxValue)                      {                          OpCode(ILOpCode.Ldloc_s);                          CodeBuilder.WriteByte((byte)slotIndex);                      }                      else if (slotIndex > 0)                      {                          OpCode(ILOpCode.Ldloc);                          CodeBuilder.WriteInt32(slotIndex);                      }                      else                      {                          Throw.ArgumentOutOfRange(nameof(slotIndex));                      }                        break;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadLocal,The following statement contains a magic number: switch (slotIndex)              {                  case 0: OpCode(ILOpCode.Ldloc_0); break;                  case 1: OpCode(ILOpCode.Ldloc_1); break;                  case 2: OpCode(ILOpCode.Ldloc_2); break;                  case 3: OpCode(ILOpCode.Ldloc_3); break;                    default:                      if (unchecked((uint)slotIndex) <= byte.MaxValue)                      {                          OpCode(ILOpCode.Ldloc_s);                          CodeBuilder.WriteByte((byte)slotIndex);                      }                      else if (slotIndex > 0)                      {                          OpCode(ILOpCode.Ldloc);                          CodeBuilder.WriteInt32(slotIndex);                      }                      else                      {                          Throw.ArgumentOutOfRange(nameof(slotIndex));                      }                        break;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,StoreLocal,The following statement contains a magic number: switch (slotIndex)              {                  case 0: OpCode(ILOpCode.Stloc_0); break;                  case 1: OpCode(ILOpCode.Stloc_1); break;                  case 2: OpCode(ILOpCode.Stloc_2); break;                  case 3: OpCode(ILOpCode.Stloc_3); break;                    default:                      if (unchecked((uint)slotIndex) <= byte.MaxValue)                      {                          OpCode(ILOpCode.Stloc_s);                          CodeBuilder.WriteByte((byte)slotIndex);                      }                      else if (slotIndex > 0)                      {                          OpCode(ILOpCode.Stloc);                          CodeBuilder.WriteInt32(slotIndex);                      }                      else                      {                          Throw.ArgumentOutOfRange(nameof(slotIndex));                      }                        break;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,StoreLocal,The following statement contains a magic number: switch (slotIndex)              {                  case 0: OpCode(ILOpCode.Stloc_0); break;                  case 1: OpCode(ILOpCode.Stloc_1); break;                  case 2: OpCode(ILOpCode.Stloc_2); break;                  case 3: OpCode(ILOpCode.Stloc_3); break;                    default:                      if (unchecked((uint)slotIndex) <= byte.MaxValue)                      {                          OpCode(ILOpCode.Stloc_s);                          CodeBuilder.WriteByte((byte)slotIndex);                      }                      else if (slotIndex > 0)                      {                          OpCode(ILOpCode.Stloc);                          CodeBuilder.WriteInt32(slotIndex);                      }                      else                      {                          Throw.ArgumentOutOfRange(nameof(slotIndex));                      }                        break;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadArgument,The following statement contains a magic number: switch (argumentIndex)              {                  case 0: OpCode(ILOpCode.Ldarg_0); break;                  case 1: OpCode(ILOpCode.Ldarg_1); break;                  case 2: OpCode(ILOpCode.Ldarg_2); break;                  case 3: OpCode(ILOpCode.Ldarg_3); break;                    default:                      if (unchecked((uint)argumentIndex) <= byte.MaxValue)                      {                          OpCode(ILOpCode.Ldarg_s);                          CodeBuilder.WriteByte((byte)argumentIndex);                      }                      else if (argumentIndex > 0)                      {                          OpCode(ILOpCode.Ldarg);                          CodeBuilder.WriteInt32(argumentIndex);                      }                      else                      {                          Throw.ArgumentOutOfRange(nameof(argumentIndex));                      }                        break;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,LoadArgument,The following statement contains a magic number: switch (argumentIndex)              {                  case 0: OpCode(ILOpCode.Ldarg_0); break;                  case 1: OpCode(ILOpCode.Ldarg_1); break;                  case 2: OpCode(ILOpCode.Ldarg_2); break;                  case 3: OpCode(ILOpCode.Ldarg_3); break;                    default:                      if (unchecked((uint)argumentIndex) <= byte.MaxValue)                      {                          OpCode(ILOpCode.Ldarg_s);                          CodeBuilder.WriteByte((byte)argumentIndex);                      }                      else if (argumentIndex > 0)                      {                          OpCode(ILOpCode.Ldarg);                          CodeBuilder.WriteInt32(argumentIndex);                      }                      else                      {                          Throw.ArgumentOutOfRange(nameof(argumentIndex));                      }                        break;              }
Magic Number,System.Reflection.Metadata.Ecma335,InstructionEncoder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\Encoding\InstructionEncoder.cs,Branch,The following statement contains a magic number: if (size == 1)              {                  CodeBuilder.WriteSByte(-1);              }              else              {                  Debug.Assert(size == 4);                  CodeBuilder.WriteInt32(-1);              }
Magic Number,System.Reflection.Metadata.Ecma335,HasConstantTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(hasConstant & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,CustomAttributeTypeTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = unchecked((uint)(TagToTokenTypeByteVector >> ((int)(customAttributeType & TagMask) << 3)) << TokenTypeIds.RowIdBitCount);
Magic Number,System.Reflection.Metadata.Ecma335,HasDeclSecurityTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(hasDeclSecurity & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,HasFieldMarshalTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(hasFieldMarshal & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,HasSemanticsTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(hasSemantic & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,ImplementationTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(implementation & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,MemberForwardedTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(memberForwarded & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,MemberRefParentTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = unchecked((uint)((TagToTokenTypeByteVector >> ((int)(memberRef & TagMask) << 3)) << TokenTypeIds.RowIdBitCount));
Magic Number,System.Reflection.Metadata.Ecma335,MethodDefOrRefTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(methodDefOrRef & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,ResolutionScopeTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(resolutionScope & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,TypeDefOrRefTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(typeDefOrRefTag & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,TypeOrMethodDefTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToHandle,The following statement contains a magic number: uint tokenType = (TagToTokenTypeByteVector >> ((int)(typeOrMethodDef & TagMask) << 3)) << TokenTypeIds.RowIdBitCount;
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: MetadataVersionPaddedLength = BitArithmetic.Align(metadataVersionByteCount + 1' 4);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: CustomAttributeTypeCodedIndexIsSmall = IsReferenceSmall(3' TableIndex.MethodDef' TableIndex.MemberRef);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: DeclSecurityCodedIndexIsSmall = IsReferenceSmall(2' TableIndex.MethodDef' TableIndex.TypeDef);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: HasConstantCodedIndexIsSmall = IsReferenceSmall(2' TableIndex.Field' TableIndex.Param' TableIndex.Property);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: HasCustomAttributeCodedIndexIsSmall = IsReferenceSmall(5'                  TableIndex.MethodDef'                  TableIndex.Field'                  TableIndex.TypeRef'                  TableIndex.TypeDef'                  TableIndex.Param'                  TableIndex.InterfaceImpl'                  TableIndex.MemberRef'                  TableIndex.Module'                  TableIndex.DeclSecurity'                  TableIndex.Property'                  TableIndex.Event'                  TableIndex.StandAloneSig'                  TableIndex.ModuleRef'                  TableIndex.TypeSpec'                  TableIndex.Assembly'                  TableIndex.AssemblyRef'                  TableIndex.File'                  TableIndex.ExportedType'                  TableIndex.ManifestResource'                  TableIndex.GenericParam'                  TableIndex.GenericParamConstraint'                  TableIndex.MethodSpec);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: ImplementationCodedIndexIsSmall = IsReferenceSmall(2' TableIndex.File' TableIndex.AssemblyRef' TableIndex.ExportedType);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: MemberRefParentCodedIndexIsSmall = IsReferenceSmall(3' TableIndex.TypeDef' TableIndex.TypeRef' TableIndex.ModuleRef' TableIndex.MethodDef' TableIndex.TypeSpec);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: ResolutionScopeCodedIndexIsSmall = IsReferenceSmall(2' TableIndex.Module' TableIndex.ModuleRef' TableIndex.AssemblyRef' TableIndex.TypeRef);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: TypeDefOrRefCodedIndexIsSmall = IsReferenceSmall(2' TableIndex.TypeDef' TableIndex.TypeRef' TableIndex.TypeSpec);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: HasCustomDebugInformationCodedIndexIsSmall = IsReferenceSmall(5'                  TableIndex.MethodDef'                  TableIndex.Field'                  TableIndex.TypeRef'                  TableIndex.TypeDef'                  TableIndex.Param'                  TableIndex.InterfaceImpl'                  TableIndex.MemberRef'                  TableIndex.Module'                  TableIndex.DeclSecurity'                  TableIndex.Property'                  TableIndex.Event'                  TableIndex.StandAloneSig'                  TableIndex.ModuleRef'                  TableIndex.TypeSpec'                  TableIndex.Assembly'                  TableIndex.AssemblyRef'                  TableIndex.File'                  TableIndex.ExportedType'                  TableIndex.ManifestResource'                  TableIndex.GenericParam'                  TableIndex.GenericParamConstraint'                  TableIndex.MethodSpec'                  TableIndex.Document'                  TableIndex.LocalScope'                  TableIndex.LocalVariable'                  TableIndex.LocalConstant'                  TableIndex.ImportScope);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: const byte small = 2;
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: const byte large = 4;
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Module' 2 + 3 * guidReferenceSize + stringReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Module' 2 + 3 * guidReferenceSize + stringReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.TypeDef' 4 + stringReferenceSize + stringReferenceSize + typeDefOrRefCodedIndexSize + fieldDefReferenceSize + methodDefReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Field' 2 + stringReferenceSize + blobReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.MethodDef' 8 + stringReferenceSize + blobReferenceSize + parameterReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Param' 4 + stringReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Constant' 2 + hasConstantCodedIndexSize + blobReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.DeclSecurity' 2 + declSecurityCodedIndexSize + blobReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.ClassLayout' 6 + typeDefReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.FieldLayout' 4 + fieldDefReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Event' 2 + stringReferenceSize + typeDefOrRefCodedIndexSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Property' 2 + stringReferenceSize + blobReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.MethodSemantics' 2 + methodDefReferenceSize + hasSemanticsCodedIndexSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.ImplMap' 2 + memberForwardedCodedIndexSize + stringReferenceSize + moduleRefReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.FieldRva' 4 + fieldDefReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.EncLog' 8);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.EncMap' 4);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.Assembly' 16 + blobReferenceSize + stringReferenceSize + stringReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.AssemblyRef' 12 + blobReferenceSize + stringReferenceSize + stringReferenceSize + blobReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.File' 4 + stringReferenceSize + blobReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.ExportedType' 8 + stringReferenceSize + stringReferenceSize + implementationCodedIndexSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.ManifestResource' 8 + stringReferenceSize + implementationCodedIndexSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.GenericParam' 4 + typeOrMethodDefCodedIndexSize + stringReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.LocalScope' methodDefReferenceSize + importScopeReferenceSize + localVariableReferenceSize + localConstantReferenceSize + 4 + 4);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.LocalScope' methodDefReferenceSize + importScopeReferenceSize + localVariableReferenceSize + localConstantReferenceSize + 4 + 4);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.LocalVariable' 2 + 2 + stringReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The following statement contains a magic number: size += GetTableSize(TableIndex.LocalVariable' 2 + 2 + stringReferenceSize);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,GetMetadataStreamHeaderSize,The following statement contains a magic number: return                  sizeof(int) + // offset                  sizeof(int) + // size                  BitArithmetic.Align(streamName.Length + 1' 4);
Magic Number,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,IsReferenceSmall,The following statement contains a magic number: const int smallBitCount = 16;
Magic Number,System.Reflection.Metadata.Ecma335,ModuleTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ModuleTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ModuleTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ModuleTableReader,The following statement contains a magic number: _IsGUIDHeapRefSizeSmall = guidHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,TypeRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeRefTableReader,The following statement contains a magic number: _IsResolutionScopeRefSizeSmall = resolutionScopeRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,TypeRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeRefTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeDefTableReader,The following statement contains a magic number: _IsFieldRefSizeSmall = fieldRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeDefTableReader,The following statement contains a magic number: _IsMethodRefSizeSmall = methodRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeDefTableReader,The following statement contains a magic number: _IsTypeDefOrRefRefSizeSmall = typeDefOrRefRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,TypeDefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeDefTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FieldPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldPtrTableReader,The following statement contains a magic number: _IsFieldTableRowRefSizeSmall = fieldTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FieldTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FieldTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodPtrTableReader,The following statement contains a magic number: _IsMethodTableRowRefSizeSmall = methodTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodTableReader,The following statement contains a magic number: _IsParamRefSizeSmall = paramRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ParamPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ParamPtrTableReader,The following statement contains a magic number: _IsParamTableRowRefSizeSmall = paramTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ParamTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ParamTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,InterfaceImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,InterfaceImplTableReader,The following statement contains a magic number: _IsTypeDefTableRowRefSizeSmall = typeDefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,InterfaceImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,InterfaceImplTableReader,The following statement contains a magic number: _IsTypeDefOrRefRefSizeSmall = typeDefOrRefRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MemberRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MemberRefTableReader,The following statement contains a magic number: _IsMemberRefParentRefSizeSmall = memberRefParentRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MemberRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MemberRefTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MemberRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MemberRefTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ConstantTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ConstantTableReader,The following statement contains a magic number: _IsHasConstantRefSizeSmall = hasConstantRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ConstantTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ConstantTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,CustomAttributeTableReader,The following statement contains a magic number: _IsHasCustomAttributeRefSizeSmall = hasCustomAttributeRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,CustomAttributeTableReader,The following statement contains a magic number: _IsCustomAttributeTypeRefSizeSmall = customAttributeTypeRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,CustomAttributeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,CustomAttributeTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FieldMarshalTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldMarshalTableReader,The following statement contains a magic number: _IsHasFieldMarshalRefSizeSmall = hasFieldMarshalRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FieldMarshalTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldMarshalTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,DeclSecurityTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,DeclSecurityTableReader,The following statement contains a magic number: _IsHasDeclSecurityRefSizeSmall = hasDeclSecurityRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,DeclSecurityTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,DeclSecurityTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ClassLayoutTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ClassLayoutTableReader,The following statement contains a magic number: _IsTypeDefTableRowRefSizeSmall = typeDefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FieldLayoutTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldLayoutTableReader,The following statement contains a magic number: _IsFieldTableRowRefSizeSmall = fieldTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,StandAloneSigTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,StandAloneSigTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,EventMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,EventMapTableReader,The following statement contains a magic number: _IsTypeDefTableRowRefSizeSmall = typeDefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,EventMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,EventMapTableReader,The following statement contains a magic number: _IsEventRefSizeSmall = eventRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,EventPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,EventPtrTableReader,The following statement contains a magic number: _IsEventTableRowRefSizeSmall = eventTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,EventTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,EventTableReader,The following statement contains a magic number: _IsTypeDefOrRefRefSizeSmall = typeDefOrRefRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,EventTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,EventTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,PropertyMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,PropertyMapTableReader,The following statement contains a magic number: _IsTypeDefTableRowRefSizeSmall = typeDefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,PropertyMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,PropertyMapTableReader,The following statement contains a magic number: _IsPropertyRefSizeSmall = propertyRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,PropertyPtrTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,PropertyPtrTableReader,The following statement contains a magic number: _IsPropertyTableRowRefSizeSmall = propertyTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,PropertyTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,PropertyTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,PropertyTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,PropertyTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodSemanticsTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodSemanticsTableReader,The following statement contains a magic number: _IsMethodTableRowRefSizeSmall = methodTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodSemanticsTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodSemanticsTableReader,The following statement contains a magic number: _IsHasSemanticRefSizeSmall = hasSemanticRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodImplTableReader,The following statement contains a magic number: _IsTypeDefTableRowRefSizeSmall = typeDefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodImplTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodImplTableReader,The following statement contains a magic number: _IsMethodDefOrRefRefSizeSmall = methodDefOrRefRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ModuleRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ModuleRefTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,TypeSpecTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,TypeSpecTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ImplMapTableReader,The following statement contains a magic number: _IsModuleRefTableRowRefSizeSmall = moduleRefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ImplMapTableReader,The following statement contains a magic number: _IsMemberForwardRowRefSizeSmall = memberForwardedRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ImplMapTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ImplMapTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FieldRVATableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FieldRVATableReader,The following statement contains a magic number: _IsFieldTableRowRefSizeSmall = fieldTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,AssemblyTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,AssemblyTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,AssemblyRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyRefTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,AssemblyRefTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyRefTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,AssemblyRefProcessorTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyRefProcessorTableReader,The following statement contains a magic number: _IsAssemblyRefTableRowSizeSmall = assemblyRefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,AssemblyRefOSTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,AssemblyRefOSTableReader,The following statement contains a magic number: _IsAssemblyRefTableRowRefSizeSmall = assemblyRefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FileTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FileTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,FileTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,FileTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ExportedTypeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ExportedTypeTableReader,The following statement contains a magic number: _IsImplementationRefSizeSmall = implementationRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ExportedTypeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ExportedTypeTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ManifestResourceTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ManifestResourceTableReader,The following statement contains a magic number: _IsImplementationRefSizeSmall = implementationRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ManifestResourceTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,ManifestResourceTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,NestedClassTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,NestedClassTableReader,The following statement contains a magic number: _IsTypeDefTableRowRefSizeSmall = typeDefTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,GenericParamTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GenericParamTableReader,The following statement contains a magic number: _IsTypeOrMethodDefRefSizeSmall = typeOrMethodDefRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,GenericParamTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GenericParamTableReader,The following statement contains a magic number: _IsStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodSpecTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodSpecTableReader,The following statement contains a magic number: _IsMethodDefOrRefRefSizeSmall = methodDefOrRefRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodSpecTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,MethodSpecTableReader,The following statement contains a magic number: _IsBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,GenericParamConstraintTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GenericParamConstraintTableReader,The following statement contains a magic number: _IsGenericParamTableRowRefSizeSmall = genericParamTableRowRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,GenericParamConstraintTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\Tables.cs,GenericParamConstraintTableReader,The following statement contains a magic number: _IsTypeDefOrRefRefSizeSmall = typeDefOrRefRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MetadataAggregator,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataAggregator.cs,CalculateHeapSizes,The following statement contains a magic number: const int guidSize = 16;
Magic Number,System.Reflection.Metadata.Ecma335,DocumentTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,DocumentTableReader,The following statement contains a magic number: _isGuidHeapRefSizeSmall = guidHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,DocumentTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,DocumentTableReader,The following statement contains a magic number: _isBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,MethodDebugInformationTableReader,The following statement contains a magic number: _isDocumentRefSmall = documentRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,MethodDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,MethodDebugInformationTableReader,The following statement contains a magic number: _isBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,LocalScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalScopeTableReader,The following statement contains a magic number: _isMethodRefSmall = methodRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,LocalScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalScopeTableReader,The following statement contains a magic number: _isImportScopeRefSmall = importScopeRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,LocalScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalScopeTableReader,The following statement contains a magic number: _isLocalVariableRefSmall = localVariableRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,LocalScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalScopeTableReader,The following statement contains a magic number: _isLocalConstantRefSmall = localConstantRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,LocalVariableTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalVariableTableReader,The following statement contains a magic number: _isStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,LocalConstantTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalConstantTableReader,The following statement contains a magic number: _isStringHeapRefSizeSmall = stringHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,LocalConstantTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,LocalConstantTableReader,The following statement contains a magic number: _isBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,StateMachineMethodTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,StateMachineMethodTableReader,The following statement contains a magic number: _isMethodRefSizeSmall = methodRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ImportScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,ImportScopeTableReader,The following statement contains a magic number: _isImportScopeRefSizeSmall = importScopeRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,ImportScopeTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,ImportScopeTableReader,The following statement contains a magic number: _isBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,CustomDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,CustomDebugInformationTableReader,The following statement contains a magic number: _isHasCustomDebugInformationRefSizeSmall = hasCustomDebugInformationRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,CustomDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,CustomDebugInformationTableReader,The following statement contains a magic number: _isGuidHeapRefSizeSmall = guidHeapRefSize == 2;
Magic Number,System.Reflection.Metadata.Ecma335,CustomDebugInformationTableReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\PortablePdb\Tables.Debug.cs,CustomDebugInformationTableReader,The following statement contains a magic number: _isBlobHeapRefSizeSmall = blobHeapRefSize == 2;
Magic Number,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,CreateSections,The following statement contains a magic number: var builder = ImmutableArray.CreateBuilder<Section>(3);
Magic Number,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,WriteRelocationSection,The following statement contains a magic number: builder.WriteUInt32((((uint)entryPointAddress + 2) / 0x1000) * 0x1000);
Magic Number,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,WriteRelocationSection,The following statement contains a magic number: uint offsetWithinPage = ((uint)entryPointAddress + 2) % 0x1000;
Magic Number,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,WriteRelocationSection,The following statement contains a magic number: ushort s = (ushort)((relocType << 12) | offsetWithinPage);
Magic Number,System.Reflection.PortableExecutable,ManagedPEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedPEBuilder.cs,WriteRelocationSection,The following statement contains a magic number: if (machine == Machine.IA64)              {                  builder.WriteUInt32(relocType << 12);              }
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,CalculateOffsetToMappedFieldDataStream,The following statement contains a magic number: if (RequiresStartupStub)              {                  result += SizeOfImportTable + SizeOfNameTable;                  result = BitArithmetic.Align(result' Is32Bit ? 4 : 8); //optional padding to make startup stub's target address align on word or double word boundary                  result += SizeOfRuntimeStartupStub;              }
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,CalculateOffsetToMappedFieldDataStream,The following statement contains a magic number: if (RequiresStartupStub)              {                  result += SizeOfImportTable + SizeOfNameTable;                  result = BitArithmetic.Align(result' Is32Bit ? 4 : 8); //optional padding to make startup stub's target address align on word or double word boundary                  result += SizeOfRuntimeStartupStub;              }
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,ComputeOffsetToDebugDirectory,The following statement contains a magic number: Debug.Assert(MetadataSize % 4 == 0);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,ComputeOffsetToDebugDirectory,The following statement contains a magic number: Debug.Assert(ResourceDataSize % 4 == 0);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,ComputeOffsetToMetadata,The following statement contains a magic number: return OffsetToILStream + BitArithmetic.Align(ILStreamSize' 4);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,GetEntryPointAddress,The following statement contains a magic number: return RequiresStartupStub ?                  rva + CalculateOffsetToMappedFieldDataStream() - (Is32Bit ? 6 : 10) :                  0;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,GetEntryPointAddress,The following statement contains a magic number: return RequiresStartupStub ?                  rva + CalculateOffsetToMappedFieldDataStream() - (Is32Bit ? 6 : 10) :                  0;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,GetImportTableDirectoryEntry,The following statement contains a magic number: return RequiresStartupStub ?                  new DirectoryEntry(rva + ComputeOffsetToImportTable()' (Is32Bit ? 66 : 70) + 13) :                  default(DirectoryEntry);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,GetImportTableDirectoryEntry,The following statement contains a magic number: return RequiresStartupStub ?                  new DirectoryEntry(rva + ComputeOffsetToImportTable()' (Is32Bit ? 66 : 70) + 13) :                  default(DirectoryEntry);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,GetImportTableDirectoryEntry,The following statement contains a magic number: return RequiresStartupStub ?                  new DirectoryEntry(rva + ComputeOffsetToImportTable()' (Is32Bit ? 66 : 70) + 13) :                  default(DirectoryEntry);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,Serialize,The following statement contains a magic number: Debug.Assert(metadataBuilder.Count % 4 == 0);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,Serialize,The following statement contains a magic number: Debug.Assert((resourceBuilderOpt?.Count ?? 0) % 4 == 0);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,Serialize,The following statement contains a magic number: ilBuilder.Align(4);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportAddressTable,The following statement contains a magic number: int ilRva = importTableRva + 40;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportAddressTable,The following statement contains a magic number: int hintRva = ilRva + (Is32Bit ? 12 : 16);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportAddressTable,The following statement contains a magic number: int hintRva = ilRva + (Is32Bit ? 12 : 16);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportTable,The following statement contains a magic number: int ilRVA = importTableRva + 40;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportTable,The following statement contains a magic number: int hintRva = ilRVA + (Is32Bit ? 12 : 16);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportTable,The following statement contains a magic number: int hintRva = ilRVA + (Is32Bit ? 12 : 16);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportTable,The following statement contains a magic number: int nameRva = hintRva + 12 + 2;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportTable,The following statement contains a magic number: int nameRva = hintRva + 12 + 2;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteImportTable,The following statement contains a magic number: builder.WriteBytes(0' 20);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteCorHeader,The following statement contains a magic number: const ushort majorRuntimeVersion = 2;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteCorHeader,The following statement contains a magic number: const ushort minorRuntimeVersion = 5;
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteCorHeader,The following statement contains a magic number: Debug.Assert(builder.Count % 4 == 0);
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteRuntimeStartupStub,The following statement contains a magic number: if (Is32Bit)              {                  // Write zeros (nops) to pad the entry point code so that the target address is aligned on a 4 byte boundary.                  // Note that the section is aligned to FileAlignment' which is at least 512' so we can align relatively to the start of the section.                  sectionBuilder.Align(4);                    sectionBuilder.WriteUInt16(0);                  sectionBuilder.WriteByte(0xff);                  sectionBuilder.WriteByte(0x25); //4                  sectionBuilder.WriteUInt32((uint)importAddressTableRva + (uint)baseAddress); //8              }              else              {                  // Write zeros (nops) to pad the entry point code so that the target address is aligned on a 8 byte boundary.                  // Note that the section is aligned to FileAlignment' which is at least 512' so we can align relatively to the start of the section.                  sectionBuilder.Align(8);                    sectionBuilder.WriteUInt32(0);                  sectionBuilder.WriteUInt16(0);                  sectionBuilder.WriteByte(0xff);                  sectionBuilder.WriteByte(0x25); //8                  sectionBuilder.WriteUInt64((ulong)importAddressTableRva + baseAddress); //16              }
Magic Number,System.Reflection.PortableExecutable,ManagedTextSection,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\ManagedTextSection.cs,WriteRuntimeStartupStub,The following statement contains a magic number: if (Is32Bit)              {                  // Write zeros (nops) to pad the entry point code so that the target address is aligned on a 4 byte boundary.                  // Note that the section is aligned to FileAlignment' which is at least 512' so we can align relatively to the start of the section.                  sectionBuilder.Align(4);                    sectionBuilder.WriteUInt16(0);                  sectionBuilder.WriteByte(0xff);                  sectionBuilder.WriteByte(0x25); //4                  sectionBuilder.WriteUInt32((uint)importAddressTableRva + (uint)baseAddress); //8              }              else              {                  // Write zeros (nops) to pad the entry point code so that the target address is aligned on a 8 byte boundary.                  // Note that the section is aligned to FileAlignment' which is at least 512' so we can align relatively to the start of the section.                  sectionBuilder.Align(8);                    sectionBuilder.WriteUInt32(0);                  sectionBuilder.WriteUInt16(0);                  sectionBuilder.WriteByte(0xff);                  sectionBuilder.WriteByte(0x25); //8                  sectionBuilder.WriteUInt64((ulong)importAddressTableRva + baseAddress); //16              }
Magic Number,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,WritePEHeader,The following statement contains a magic number: builder.WriteUInt32(16);
Magic Number,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,WriteSectionHeader,The following statement contains a magic number: for (int j = 0' m = serializedSection.Name.Length; j < 8; j++)              {                  if (j < m)                  {                      builder.WriteByte((byte)serializedSection.Name[j]);                  }                  else                  {                      builder.WriteByte(0);                  }              }
Magic Number,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,CalculateChecksum,The following statement contains a magic number: foreach (var blob in blobs)              {                  var segment = blob.GetBytes();                  fixed (byte* arrayPtr = segment.Array)                  {                      Debug.Assert(segment.Count > 0);                        byte* ptr = arrayPtr + segment.Offset;                      byte* end = ptr + segment.Count;                        if (pendingByte >= 0)                      {                          // little-endian encoding:                          checksum = AggregateChecksum(checksum' (ushort)(*ptr << 8 | pendingByte));                          ptr++;                      }                        if ((end - ptr) % 2 != 0)                      {                          end--;                          pendingByte = *end;                      }                      else                      {                          pendingByte = -1;                      }                                            while (ptr < end)                      {                          checksum = AggregateChecksum(checksum' *(ushort*)ptr);                          ptr += sizeof(ushort);                      }                  }              }
Magic Number,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,CalculateChecksum,The following statement contains a magic number: foreach (var blob in blobs)              {                  var segment = blob.GetBytes();                  fixed (byte* arrayPtr = segment.Array)                  {                      Debug.Assert(segment.Count > 0);                        byte* ptr = arrayPtr + segment.Offset;                      byte* end = ptr + segment.Count;                        if (pendingByte >= 0)                      {                          // little-endian encoding:                          checksum = AggregateChecksum(checksum' (ushort)(*ptr << 8 | pendingByte));                          ptr++;                      }                        if ((end - ptr) % 2 != 0)                      {                          end--;                          pendingByte = *end;                      }                      else                      {                          pendingByte = -1;                      }                                            while (ptr < end)                      {                          checksum = AggregateChecksum(checksum' *(ushort*)ptr);                          ptr += sizeof(ushort);                      }                  }              }
Magic Number,System.Reflection.PortableExecutable,PEBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEBuilder.cs,AggregateChecksum,The following statement contains a magic number: return (sum >> 16) + unchecked((ushort)sum);
Magic Number,System.Reflection.PortableExecutable,DebugDirectoryBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\DebugDirectory\DebugDirectoryBuilder.cs,DebugDirectoryBuilder,The following statement contains a magic number: _entries = new List<Entry>(2);
Magic Number,System.Reflection.PortableExecutable,PEHeaderBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEHeaderBuilder.cs,PEHeaderBuilder,The following statement contains a magic number: if (fileAlignment < 512 || fileAlignment > 64 * 1024 || BitArithmetic.CountBits(fileAlignment) != 1)              {                  Throw.ArgumentOutOfRange(nameof(fileAlignment));              }
Magic Number,System.Reflection.PortableExecutable,PEHeaderBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEHeaderBuilder.cs,PEHeaderBuilder,The following statement contains a magic number: if (fileAlignment < 512 || fileAlignment > 64 * 1024 || BitArithmetic.CountBits(fileAlignment) != 1)              {                  Throw.ArgumentOutOfRange(nameof(fileAlignment));              }
Magic Number,System.Reflection.PortableExecutable,PEHeaderBuilder,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\PortableExecutable\PEHeaderBuilder.cs,PEHeaderBuilder,The following statement contains a magic number: if (fileAlignment < 512 || fileAlignment > 64 * 1024 || BitArithmetic.CountBits(fileAlignment) != 1)              {                  Throw.ArgumentOutOfRange(nameof(fileAlignment));              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt16,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)value;                      ptr[1] = (byte)(value >> 8);                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt16BE,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)(value >> 8);                      ptr[1] = (byte)value;                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32BE,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)(value >> 24);                      ptr[1] = (byte)(value >> 16);                      ptr[2] = (byte)(value >> 8);                      ptr[3] = (byte)value;                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32BE,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)(value >> 24);                      ptr[1] = (byte)(value >> 16);                      ptr[2] = (byte)(value >> 8);                      ptr[3] = (byte)value;                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32BE,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)(value >> 24);                      ptr[1] = (byte)(value >> 16);                      ptr[2] = (byte)(value >> 8);                      ptr[3] = (byte)value;                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32BE,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)(value >> 24);                      ptr[1] = (byte)(value >> 16);                      ptr[2] = (byte)(value >> 8);                      ptr[3] = (byte)value;                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32BE,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)(value >> 24);                      ptr[1] = (byte)(value >> 16);                      ptr[2] = (byte)(value >> 8);                      ptr[3] = (byte)value;                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)value;                      ptr[1] = (byte)(value >> 8);                      ptr[2] = (byte)(value >> 16);                      ptr[3] = (byte)(value >> 24);                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)value;                      ptr[1] = (byte)(value >> 8);                      ptr[2] = (byte)(value >> 16);                      ptr[3] = (byte)(value >> 24);                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)value;                      ptr[1] = (byte)(value >> 8);                      ptr[2] = (byte)(value >> 16);                      ptr[3] = (byte)(value >> 24);                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)value;                      ptr[1] = (byte)(value >> 8);                      ptr[2] = (byte)(value >> 16);                      ptr[3] = (byte)(value >> 24);                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt32,The following statement contains a magic number: fixed (byte* ptr = &buffer[start])              {                  unchecked                  {                      ptr[0] = (byte)value;                      ptr[1] = (byte)(value >> 8);                      ptr[2] = (byte)(value >> 16);                      ptr[3] = (byte)(value >> 24);                  }              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt64,The following statement contains a magic number: WriteUInt32(buffer' start + 4' unchecked((uint)(value >> 32)));
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUInt64,The following statement contains a magic number: WriteUInt32(buffer' start + 4' unchecked((uint)(value >> 32)));
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteDecimal,The following statement contains a magic number: WriteUInt32(buffer' start + 5' mid);
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteDecimal,The following statement contains a magic number: WriteUInt32(buffer' start + 9' high);
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteGuid,The following statement contains a magic number: fixed (byte* dst = &buffer[start])              {                  byte* src = (byte*)&value;                    uint a = *(uint*)(src + 0);                  unchecked                  {                      dst[0] = (byte)a;                      dst[1] = (byte)(a >> 8);                      dst[2] = (byte)(a >> 16);                      dst[3] = (byte)(a >> 24);                        ushort b = *(ushort*)(src + 4);                      dst[4] = (byte)b;                      dst[5] = (byte)(b >> 8);                        ushort c = *(ushort*)(src + 6);                      dst[6] = (byte)c;                      dst[7] = (byte)(c >> 8);                  }                                    dst[8] = src[8];                  dst[9] = src[9];                  dst[10] = src[10];                  dst[11] = src[11];                  dst[12] = src[12];                  dst[13] = src[13];                  dst[14] = src[14];                  dst[15] = src[15];              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,WriteUTF8,The following statement contains a magic number: fixed (byte* bufferPtr = &buffer[0])              {                  byte* ptr = bufferPtr + start;                    if (byteCount == charCount)                  {                      while (charPtr < strEnd)                      {                          Debug.Assert(*charPtr <= 0x7f);                          *ptr++ = unchecked((byte)*charPtr++);                      }                  }                  else                  {                      while (charPtr < strEnd)                      {                          char c = *charPtr++;                            if (c < 0x80)                          {                              *ptr++ = (byte)c;                              continue;                          }                            if (c < 0x800)                          {                              ptr[0] = (byte)(((c >> 6) & 0x1F) | 0xC0);                              ptr[1] = (byte)((c & 0x3F) | 0x80);                              ptr += 2;                              continue;                          }                            if (IsSurrogateChar(c))                          {                              // surrogate pair                              if (IsHighSurrogateChar(c) && charPtr < strEnd && IsLowSurrogateChar(*charPtr))                              {                                  int highSurrogate = c;                                  int lowSurrogate = *charPtr++;                                  int codepoint = (((highSurrogate - 0xd800) << 10) + lowSurrogate - 0xdc00) + 0x10000;                                  ptr[0] = (byte)(((codepoint >> 18) & 0x7) | 0xF0);                                  ptr[1] = (byte)(((codepoint >> 12) & 0x3F) | 0x80);                                  ptr[2] = (byte)(((codepoint >> 6) & 0x3F) | 0x80);                                  ptr[3] = (byte)((codepoint & 0x3F) | 0x80);                                  ptr += 4;                                  continue;                              }                                // unpaired high/low surrogate                              if (!allowUnpairedSurrogates)                              {                                  c = ReplacementCharacter;                              }                          }                            ptr[0] = (byte)(((c >> 12) & 0xF) | 0xE0);                          ptr[1] = (byte)(((c >> 6) & 0x3F) | 0x80);                          ptr[2] = (byte)((c & 0x3F) | 0x80);                          ptr += 3;                      }                  }                    Debug.Assert(ptr == bufferPtr + start + byteCount);                  Debug.Assert(charPtr == strEnd);              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,GetUTF8ByteCount,The following statement contains a magic number: while (ptr < end)              {                  int characterSize;                  char c = *ptr++;                  if (c < 0x80)                  {                      characterSize = 1;                  }                  else if (c < 0x800)                  {                      characterSize = 2;                  }                  else if (IsHighSurrogateChar(c) && ptr < end && IsLowSurrogateChar(*ptr))                  {                      // surrogate pair:                      characterSize = 4;                      ptr++;                  }                  else                  {                      characterSize = 3;                  }                    if (byteCount + characterSize > byteLimit)                  {                      ptr -= (characterSize < 4) ? 1 : 2;                      break;                  }                    byteCount += characterSize;              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,GetUTF8ByteCount,The following statement contains a magic number: while (ptr < end)              {                  int characterSize;                  char c = *ptr++;                  if (c < 0x80)                  {                      characterSize = 1;                  }                  else if (c < 0x800)                  {                      characterSize = 2;                  }                  else if (IsHighSurrogateChar(c) && ptr < end && IsLowSurrogateChar(*ptr))                  {                      // surrogate pair:                      characterSize = 4;                      ptr++;                  }                  else                  {                      characterSize = 3;                  }                    if (byteCount + characterSize > byteLimit)                  {                      ptr -= (characterSize < 4) ? 1 : 2;                      break;                  }                    byteCount += characterSize;              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,GetUTF8ByteCount,The following statement contains a magic number: while (ptr < end)              {                  int characterSize;                  char c = *ptr++;                  if (c < 0x80)                  {                      characterSize = 1;                  }                  else if (c < 0x800)                  {                      characterSize = 2;                  }                  else if (IsHighSurrogateChar(c) && ptr < end && IsLowSurrogateChar(*ptr))                  {                      // surrogate pair:                      characterSize = 4;                      ptr++;                  }                  else                  {                      characterSize = 3;                  }                    if (byteCount + characterSize > byteLimit)                  {                      ptr -= (characterSize < 4) ? 1 : 2;                      break;                  }                    byteCount += characterSize;              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,GetUTF8ByteCount,The following statement contains a magic number: while (ptr < end)              {                  int characterSize;                  char c = *ptr++;                  if (c < 0x80)                  {                      characterSize = 1;                  }                  else if (c < 0x800)                  {                      characterSize = 2;                  }                  else if (IsHighSurrogateChar(c) && ptr < end && IsLowSurrogateChar(*ptr))                  {                      // surrogate pair:                      characterSize = 4;                      ptr++;                  }                  else                  {                      characterSize = 3;                  }                    if (byteCount + characterSize > byteLimit)                  {                      ptr -= (characterSize < 4) ? 1 : 2;                      break;                  }                    byteCount += characterSize;              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,GetUTF8ByteCount,The following statement contains a magic number: while (ptr < end)              {                  int characterSize;                  char c = *ptr++;                  if (c < 0x80)                  {                      characterSize = 1;                  }                  else if (c < 0x800)                  {                      characterSize = 2;                  }                  else if (IsHighSurrogateChar(c) && ptr < end && IsLowSurrogateChar(*ptr))                  {                      // surrogate pair:                      characterSize = 4;                      ptr++;                  }                  else                  {                      characterSize = 3;                  }                    if (byteCount + characterSize > byteLimit)                  {                      ptr -= (characterSize < 4) ? 1 : 2;                      break;                  }                    byteCount += characterSize;              }
Magic Number,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,GetUserStringByteLength,The following statement contains a magic number: return characterCount * 2 + 1;
Magic Number,System.Linq,MiniLinq,C:\selectedRepos\dotnet_corefx\src\System.Private.Reflection.Metadata.Ecma335\src\Shims\MiniLinq.cs,ToArray,The following statement contains a magic number: using (var en = source.GetEnumerator())              {                  if (en.MoveNext())                  {                      const int DefaultCapacity = 4;                      T[] arr = new T[DefaultCapacity];                      arr[0] = en.Current;                      int count = 1;                        while (en.MoveNext())                      {                          if (count == arr.Length)                          {                              // MaxArrayLength is defined in Array.MaxArrayLength and in gchelpers in CoreCLR.                              // It represents the maximum number of elements that can be in an array where                              // the size of the element is greater than one byte; a separate' slightly larger constant'                              // is used when the size of the element is one.                              const int MaxArrayLength = 0x7FEFFFFF;                                // This is the same growth logic as in List<T>:                              // If the array is currently empty' we make it a default size.  Otherwise' we attempt to                              // double the size of the array.  Doubling will overflow once the size of the array reaches                              // 2^30' since doubling to 2^31 is 1 larger than Int32.MaxValue.  In that case' we instead                              // constrain the length to be MaxArrayLength (this overflow check works because of the                              // cast to uint).  Because a slightly larger constant is used when T is one byte in size' we                              // could then end up in a situation where arr.Length is MaxArrayLength or slightly larger' such                              // that we constrain newLength to be MaxArrayLength but the needed number of elements is actually                              // larger than that.  For that case' we then ensure that the newLength is large enough to hold                              // the desired capacity.  This does mean that in the very rare case where we've grown to such a                              // large size' each new element added after MaxArrayLength will end up doing a resize.                              int newLength = count << 1;                              if ((uint)newLength > MaxArrayLength)                              {                                  newLength = MaxArrayLength <= count ? count + 1 : MaxArrayLength;                              }                                Array.Resize(ref arr' newLength);                          }                            arr[count++] = en.Current;                      }                        if (count != arr.Length)                          Array.Resize(ref arr' count);                        return arr;                  }                  else                  {                      return Array.Empty<T>();                  }              }
Magic Number,System.Collections.Immutable,Builder,C:\selectedRepos\dotnet_corefx\src\System.Collections.Immutable\src\System\Collections\Immutable\ImmutableArray_1.Builder.cs,EnsureCapacity,The following statement contains a magic number: if (_elements.Length < capacity)                  {                      int newCapacity = Math.Max(_elements.Length * 2' capacity);                      Array.Resize(ref _elements' newCapacity);                  }
Duplicate Code,System.Reflection.Metadata.Ecma335,MetadataSizes,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\MetadataSizes.cs,MetadataSizes,The method contains a code clone-set at the following line numbers (starting from the method definition): ((40' 60)' (84' 104))
Missing Default,System.Reflection.Metadata,ILOpCodeExtensions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\ILOpCodeExtensions.cs,IsBranch,The following switch statement is missing a default case: switch (opCode)              {                  case ILOpCode.Br:                  case ILOpCode.Br_s:                  case ILOpCode.Brtrue:                  case ILOpCode.Brtrue_s:                  case ILOpCode.Brfalse:                  case ILOpCode.Brfalse_s:                  case ILOpCode.Beq:                  case ILOpCode.Beq_s:                  case ILOpCode.Bne_un:                  case ILOpCode.Bne_un_s:                  case ILOpCode.Bge:                  case ILOpCode.Bge_s:                  case ILOpCode.Bge_un:                  case ILOpCode.Bge_un_s:                  case ILOpCode.Bgt:                  case ILOpCode.Bgt_s:                  case ILOpCode.Bgt_un:                  case ILOpCode.Bgt_un_s:                  case ILOpCode.Ble:                  case ILOpCode.Ble_s:                  case ILOpCode.Ble_un:                  case ILOpCode.Ble_un_s:                  case ILOpCode.Blt:                  case ILOpCode.Blt_s:                  case ILOpCode.Blt_un:                  case ILOpCode.Blt_un_s:                  case ILOpCode.Leave:                  case ILOpCode.Leave_s:                      return true;              }
Missing Default,System.Reflection.Metadata,ILOpCodeExtensions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\ILOpCodeExtensions.cs,GetBranchOperandSize,The following switch statement is missing a default case: switch (opCode)              {                  case ILOpCode.Br_s:                  case ILOpCode.Brfalse_s:                  case ILOpCode.Brtrue_s:                  case ILOpCode.Beq_s:                  case ILOpCode.Bge_s:                  case ILOpCode.Bgt_s:                  case ILOpCode.Ble_s:                  case ILOpCode.Blt_s:                  case ILOpCode.Bne_un_s:                  case ILOpCode.Bge_un_s:                  case ILOpCode.Bgt_un_s:                  case ILOpCode.Ble_un_s:                  case ILOpCode.Blt_un_s:                  case ILOpCode.Leave_s:                      return 1;                    case ILOpCode.Br:                  case ILOpCode.Brfalse:                  case ILOpCode.Brtrue:                  case ILOpCode.Beq:                  case ILOpCode.Bge:                  case ILOpCode.Bgt:                  case ILOpCode.Ble:                  case ILOpCode.Blt:                  case ILOpCode.Bne_un:                  case ILOpCode.Bge_un:                  case ILOpCode.Bgt_un:                  case ILOpCode.Ble_un:                  case ILOpCode.Blt_un:                  case ILOpCode.Leave:                      return 4;              }
Missing Default,System.Reflection.Metadata,ILOpCodeExtensions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\ILOpCodeExtensions.cs,GetShortBranch,The following switch statement is missing a default case: switch (opCode)              {                  case ILOpCode.Br_s:                  case ILOpCode.Brfalse_s:                  case ILOpCode.Brtrue_s:                  case ILOpCode.Beq_s:                  case ILOpCode.Bge_s:                  case ILOpCode.Bgt_s:                  case ILOpCode.Ble_s:                  case ILOpCode.Blt_s:                  case ILOpCode.Bne_un_s:                  case ILOpCode.Bge_un_s:                  case ILOpCode.Bgt_un_s:                  case ILOpCode.Ble_un_s:                  case ILOpCode.Blt_un_s:                  case ILOpCode.Leave_s:                      return opCode;                    case ILOpCode.Br:                      return ILOpCode.Br_s;                    case ILOpCode.Brfalse:                      return ILOpCode.Brfalse_s;                    case ILOpCode.Brtrue:                      return ILOpCode.Brtrue_s;                    case ILOpCode.Beq:                      return ILOpCode.Beq_s;                    case ILOpCode.Bge:                      return ILOpCode.Bge_s;                    case ILOpCode.Bgt:                      return ILOpCode.Bgt_s;                    case ILOpCode.Ble:                      return ILOpCode.Ble_s;                    case ILOpCode.Blt:                      return ILOpCode.Blt_s;                    case ILOpCode.Bne_un:                      return ILOpCode.Bne_un_s;                    case ILOpCode.Bge_un:                      return ILOpCode.Bge_un_s;                    case ILOpCode.Bgt_un:                      return ILOpCode.Bgt_un_s;                    case ILOpCode.Ble_un:                      return ILOpCode.Ble_un_s;                    case ILOpCode.Blt_un:                      return ILOpCode.Blt_un_s;                    case ILOpCode.Leave:                      return ILOpCode.Leave_s;              }
Missing Default,System.Reflection.Metadata,ILOpCodeExtensions,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\IL\ILOpCodeExtensions.cs,GetLongBranch,The following switch statement is missing a default case: switch (opCode)              {                  case ILOpCode.Br:                  case ILOpCode.Brfalse:                  case ILOpCode.Brtrue:                  case ILOpCode.Beq:                  case ILOpCode.Bge:                  case ILOpCode.Bgt:                  case ILOpCode.Ble:                  case ILOpCode.Blt:                  case ILOpCode.Bne_un:                  case ILOpCode.Bge_un:                  case ILOpCode.Bgt_un:                  case ILOpCode.Ble_un:                  case ILOpCode.Blt_un:                  case ILOpCode.Leave:                      return opCode;                    case ILOpCode.Br_s:                      return ILOpCode.Br;                    case ILOpCode.Brfalse_s:                      return ILOpCode.Brfalse;                    case ILOpCode.Brtrue_s:                      return ILOpCode.Brtrue;                    case ILOpCode.Beq_s:                      return ILOpCode.Beq;                    case ILOpCode.Bge_s:                      return ILOpCode.Bge;                    case ILOpCode.Bgt_s:                      return ILOpCode.Bgt;                    case ILOpCode.Ble_s:                      return ILOpCode.Ble;                    case ILOpCode.Blt_s:                      return ILOpCode.Blt;                    case ILOpCode.Bne_un_s:                      return ILOpCode.Bne_un;                    case ILOpCode.Bge_un_s:                      return ILOpCode.Bge_un;                    case ILOpCode.Bgt_un_s:                      return ILOpCode.Bgt_un;                    case ILOpCode.Ble_un_s:                      return ILOpCode.Ble_un;                    case ILOpCode.Blt_un_s:                      return ILOpCode.Blt_un;                    case ILOpCode.Leave_s:                      return ILOpCode.Leave;              }
Missing Default,System.Reflection.Metadata,AssemblyReference,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\AssemblyReference.cs,GetVirtualNameIndex,The following switch statement is missing a default case: switch (index)              {                  case AssemblyReferenceHandle.VirtualIndex.System_ObjectModel:                      return StringHandle.VirtualIndex.System_ObjectModel;                    case AssemblyReferenceHandle.VirtualIndex.System_Runtime:                      return StringHandle.VirtualIndex.System_Runtime;                    case AssemblyReferenceHandle.VirtualIndex.System_Runtime_InteropServices_WindowsRuntime:                      return StringHandle.VirtualIndex.System_Runtime_InteropServices_WindowsRuntime;                    case AssemblyReferenceHandle.VirtualIndex.System_Runtime_WindowsRuntime:                      return StringHandle.VirtualIndex.System_Runtime_WindowsRuntime;                    case AssemblyReferenceHandle.VirtualIndex.System_Runtime_WindowsRuntime_UI_Xaml:                      return StringHandle.VirtualIndex.System_Runtime_WindowsRuntime_UI_Xaml;                    case AssemblyReferenceHandle.VirtualIndex.System_Numerics_Vectors:                      return StringHandle.VirtualIndex.System_Numerics_Vectors;              }
Missing Default,System.Reflection.Metadata,EventDefinition,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\EventDefinition.cs,GetAccessors,The following switch statement is missing a default case: switch (_reader.MethodSemanticsTable.GetSemantics(rowId))                  {                      case MethodSemanticsAttributes.Adder:                          adder = _reader.MethodSemanticsTable.GetMethod(rowId).RowId;                          break;                        case MethodSemanticsAttributes.Remover:                          remover = _reader.MethodSemanticsTable.GetMethod(rowId).RowId;                          break;                        case MethodSemanticsAttributes.Raiser:                          fire = _reader.MethodSemanticsTable.GetMethod(rowId).RowId;                          break;                        case MethodSemanticsAttributes.Other:                          if (other == null)                              other = ImmutableArray.CreateBuilder<MethodDefinitionHandle>();                            other.Add(_reader.MethodSemanticsTable.GetMethod(rowId));                          break;                  }
Missing Default,System.Reflection.Metadata,MetadataReader,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs,CalculateMethodDefTreatmentAndRowId,The following switch statement is missing a default case: switch (GetSpecialTypeRefTreatment((TypeReferenceHandle)parentBaseType))                          {                              case TypeRefTreatment.SystemAttribute:                                  treatment = MethodDefTreatment.AttributeMethod;                                  break;                                case TypeRefTreatment.SystemDelegate:                                  treatment = MethodDefTreatment.DelegateMethod | MethodDefTreatment.MarkPublicFlag;                                  break;                          }
Missing Default,System.Reflection.Metadata,MethodDefinition,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\MethodDefinition.cs,GetProjectedImplFlags,The following switch statement is missing a default case: switch (Treatment & MethodDefTreatment.KindMask)              {                  case MethodDefTreatment.DelegateMethod:                      flags |= MethodImplAttributes.Runtime;                      break;                    case MethodDefTreatment.DisposeMethod:                  case MethodDefTreatment.AttributeMethod:                  case MethodDefTreatment.InterfaceMethod:                  case MethodDefTreatment.HiddenInterfaceImplementation:                  case MethodDefTreatment.Other:                      flags |= MethodImplAttributes.Runtime | MethodImplAttributes.InternalCall;                      break;              }
Missing Default,System.Reflection.Metadata,PropertyDefinition,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\PropertyDefinition.cs,GetAccessors,The following switch statement is missing a default case: switch (_reader.MethodSemanticsTable.GetSemantics(rowId))                  {                      case MethodSemanticsAttributes.Getter:                          getter = _reader.MethodSemanticsTable.GetMethod(rowId).RowId;                          break;                        case MethodSemanticsAttributes.Setter:                          setter = _reader.MethodSemanticsTable.GetMethod(rowId).RowId;                          break;                        case MethodSemanticsAttributes.Other:                          if (other == null)                              other = ImmutableArray.CreateBuilder<MethodDefinitionHandle>();                            other.Add(_reader.MethodSemanticsTable.GetMethod(rowId));                          break;                  }
Missing Default,System.Reflection.Metadata,TypeDefinition,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\TypeDefinition.cs,GetProjectedFlags,The following switch statement is missing a default case: switch (treatment & TypeDefTreatment.KindMask)              {                  case TypeDefTreatment.NormalNonAttribute:                      flags |= TypeAttributes.WindowsRuntime | TypeAttributes.Import;                      break;                    case TypeDefTreatment.NormalAttribute:                      flags |= TypeAttributes.WindowsRuntime | TypeAttributes.Sealed;                      break;                    case TypeDefTreatment.UnmangleWinRTName:                      flags = flags & ~TypeAttributes.SpecialName | TypeAttributes.Public;                      break;                    case TypeDefTreatment.PrefixWinRTName:                      flags = flags & ~TypeAttributes.Public | TypeAttributes.Import;                      break;                    case TypeDefTreatment.RedirectedToClrType:                      flags = flags & ~TypeAttributes.Public | TypeAttributes.Import;                      break;                    case TypeDefTreatment.RedirectedToClrAttribute:                      flags &= ~TypeAttributes.Public;                      break;              }
Missing Default,System.Reflection.Metadata,TypeDefinition,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\TypeDefinition.cs,GetProjectedName,The following switch statement is missing a default case: switch (Treatment & TypeDefTreatment.KindMask)              {                  case TypeDefTreatment.UnmangleWinRTName:                      return name.SuffixRaw(MetadataReader.ClrPrefix.Length);                    case TypeDefTreatment.PrefixWinRTName:                      return name.WithWinRTPrefix();              }
Missing Default,System.Reflection.Metadata,TypeReference,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\TypeReference.cs,GetProjectedResolutionScope,The following switch statement is missing a default case: switch (Treatment)              {                  case TypeRefTreatment.SystemAttribute:                  case TypeRefTreatment.SystemDelegate:                      return AssemblyReferenceHandle.FromVirtualIndex(AssemblyReferenceHandle.VirtualIndex.System_Runtime);                    case TypeRefTreatment.UseProjectionInfo:                      return MetadataReader.GetProjectedAssemblyRef(RowId);              }
Missing Default,System.Reflection.Metadata,TypeReference,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\TypeSystem\TypeReference.cs,GetProjectedNamespace,The following switch statement is missing a default case: switch (Treatment)              {                  case TypeRefTreatment.SystemAttribute:                  case TypeRefTreatment.SystemDelegate:                      return StringHandle.FromVirtualIndex(StringHandle.VirtualIndex.System);                    case TypeRefTreatment.UseProjectionInfo:                      return MetadataReader.GetProjectedNamespace(RowId);              }
Missing Default,System.Reflection.Metadata.Ecma335,StringHeap,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Internal\StringHeap.cs,GetVirtualHandleString,The following switch statement is missing a default case: switch (handle.StringKind)              {                  case StringKind.Virtual:                      return GetVirtualString(handle.GetVirtualIndex());                    case StringKind.WinRTPrefixed:                      return GetNonVirtualString(handle' utf8Decoder' MetadataReader.WinRTPrefix);              }
Missing Default,System.Reflection.Metadata.Ecma335,HasCustomAttributeTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToTag,The following switch statement is missing a default case: switch (tokenType >> TokenTypeIds.RowIdBitCount)              {                  case TokenTypeIds.MethodDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | MethodDef;                  case TokenTypeIds.FieldDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Field;                  case TokenTypeIds.TypeRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | TypeRef;                  case TokenTypeIds.TypeDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | TypeDef;                  case TokenTypeIds.ParamDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Param;                  case TokenTypeIds.InterfaceImpl >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | InterfaceImpl;                  case TokenTypeIds.MemberRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | MemberRef;                  case TokenTypeIds.Module >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Module;                  case TokenTypeIds.DeclSecurity >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | DeclSecurity;                  case TokenTypeIds.Property >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Property;                  case TokenTypeIds.Event >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Event;                  case TokenTypeIds.Signature >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | StandAloneSig;                  case TokenTypeIds.ModuleRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | ModuleRef;                  case TokenTypeIds.TypeSpec >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | TypeSpec;                  case TokenTypeIds.Assembly >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Assembly;                  case TokenTypeIds.AssemblyRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | AssemblyRef;                  case TokenTypeIds.File >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | File;                  case TokenTypeIds.ExportedType >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | ExportedType;                  case TokenTypeIds.ManifestResource >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | ManifestResource;                  case TokenTypeIds.GenericParam >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | GenericParam;                  case TokenTypeIds.GenericParamConstraint >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | GenericParamConstraint;                  case TokenTypeIds.MethodSpec >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | MethodSpec;              }
Missing Default,System.Reflection.Metadata.Ecma335,HasDeclSecurityTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToTag,The following switch statement is missing a default case: switch (tokenType >> TokenTypeIds.RowIdBitCount)              {                  case TokenTypeIds.TypeDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | TypeDef;                    case TokenTypeIds.MethodDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | MethodDef;                    case TokenTypeIds.Assembly >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Assembly;              }
Missing Default,System.Reflection.Metadata.Ecma335,HasCustomDebugInformationTag,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\Ecma335\CodedIndex.cs,ConvertToTag,The following switch statement is missing a default case: switch (tokenType >> TokenTypeIds.RowIdBitCount)              {                  case TokenTypeIds.MethodDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | MethodDef;                  case TokenTypeIds.FieldDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Field;                  case TokenTypeIds.TypeRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | TypeRef;                  case TokenTypeIds.TypeDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | TypeDef;                  case TokenTypeIds.ParamDef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Param;                  case TokenTypeIds.InterfaceImpl >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | InterfaceImpl;                  case TokenTypeIds.MemberRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | MemberRef;                  case TokenTypeIds.Module >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Module;                  case TokenTypeIds.DeclSecurity >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | DeclSecurity;                  case TokenTypeIds.Property >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Property;                  case TokenTypeIds.Event >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Event;                  case TokenTypeIds.Signature >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | StandAloneSig;                  case TokenTypeIds.ModuleRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | ModuleRef;                  case TokenTypeIds.TypeSpec >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | TypeSpec;                  case TokenTypeIds.Assembly >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Assembly;                  case TokenTypeIds.AssemblyRef >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | AssemblyRef;                  case TokenTypeIds.File >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | File;                  case TokenTypeIds.ExportedType >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | ExportedType;                  case TokenTypeIds.ManifestResource >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | ManifestResource;                  case TokenTypeIds.GenericParam >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | GenericParam;                  case TokenTypeIds.GenericParamConstraint >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | GenericParamConstraint;                  case TokenTypeIds.MethodSpec >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | MethodSpec;                    case TokenTypeIds.Document >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Document;                  case TokenTypeIds.LocalScope >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | LocalScope;                  case TokenTypeIds.LocalVariable >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | LocalVariable;                  case TokenTypeIds.LocalConstant >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | LocalConstant;                  case TokenTypeIds.ImportScope >> TokenTypeIds.RowIdBitCount:                      return rowId << NumberOfBits | Import;              }
Missing Default,System.Reflection,BlobUtilities,C:\selectedRepos\dotnet_corefx\src\System.Reflection.Metadata\src\System\Reflection\Internal\Utilities\BlobUtilities.cs,GetUserStringTrailingByte,The following switch statement is missing a default case: switch ((int)ch)                  {                      case 0x1:                      case 0x2:                      case 0x3:                      case 0x4:                      case 0x5:                      case 0x6:                      case 0x7:                      case 0x8:                      case 0xE:                      case 0xF:                      case 0x10:                      case 0x11:                      case 0x12:                      case 0x13:                      case 0x14:                      case 0x15:                      case 0x16:                      case 0x17:                      case 0x18:                      case 0x19:                      case 0x1A:                      case 0x1B:                      case 0x1C:                      case 0x1D:                      case 0x1E:                      case 0x1F:                      case 0x27:                      case 0x2D:                          return 1;                  }
