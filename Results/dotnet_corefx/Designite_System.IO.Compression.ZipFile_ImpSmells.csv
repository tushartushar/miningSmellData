Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,CreateFromDirectory,The method has 5 parameters. Parameters: sourceDirectoryName' destinationArchiveFileName' compressionLevel' includeBaseDirectory' entryNameEncoding
Long Parameter List,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,DoCreateFromDirectory,The method has 5 parameters. Parameters: sourceDirectoryName' destinationArchiveFileName' compressionLevel' includeBaseDirectory' entryNameEncoding
Long Parameter List,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,EntryFromPath,The method has 5 parameters. Parameters: entry' offset' length' buffer' appendPathSeparator
Long Statement,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,CreateFromDirectory,The length of the statement  "            DoCreateFromDirectory(sourceDirectoryName' destinationArchiveFileName' compressionLevel' includeBaseDirectory' entryNameEncoding: null); " is 136.
Long Statement,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,CreateFromDirectory,The length of the statement  "            DoCreateFromDirectory(sourceDirectoryName' destinationArchiveFileName' compressionLevel' includeBaseDirectory' entryNameEncoding); " is 130.
Long Statement,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,ExtractToDirectory,The length of the statement  "            ExtractToDirectory(sourceArchiveFileName' destinationDirectoryName' overwrite: false' entryNameEncoding: entryNameEncoding); " is 124.
Long Statement,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,DoCreateFromDirectory,The length of the statement  "                                string entryName = EntryFromPath(file.FullName' basePath.Length' entryNameLength' ref entryNameBuffer' appendPathSeparator: true); " is 130.
Long Statement,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,IsDirEmpty,The length of the statement  "            using (IEnumerator<string> enumerator = Directory.EnumerateFileSystemEntries(possiblyEmptyDir.FullName).GetEnumerator()) " is 120.
Long Statement,System.IO.Compression,ZipFileExtensions,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFileExtensions.cs,DoCreateEntryFromFile,The length of the statement  "            using (Stream fs = new FileStream(sourceFileName' FileMode.Open' FileAccess.Read' FileShare.Read' bufferSize: 0x1000' useAsync: false)) " is 135.
Long Statement,System.IO.Compression,ZipFileExtensions,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFileExtensions.cs,DoCreateEntryFromFile,The length of the statement  "                // If file to be archived has an invalid last modified time' use the first datetime representable in the Zip timestamp format " is 125.
Long Statement,System.IO.Compression,ZipFileExtensions,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFileExtensions.cs,ExtractToFile,The length of the statement  "            using (Stream fs = new FileStream(destinationFileName' fMode' FileAccess.Write' FileShare.None' bufferSize: 0x1000' useAsync: false)) " is 133.
Long Statement,System.IO,PathInternal,C:\selectedRepos\dotnet_corefx\src\Common\src\System\IO\PathInternal.CaseSensitivity.cs,GetIsCaseSensitive,The length of the statement  "                using (new FileStream(pathWithUpperCase' FileMode.CreateNew' FileAccess.ReadWrite' FileShare.None' 0x1000' FileOptions.DeleteOnClose)) " is 134.
Magic Number,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,DoCreateFromDirectory,The following statement contains a magic number: using (ZipArchive archive = Open(destinationArchiveFileName' ZipArchiveMode.Create' entryNameEncoding))              {                  bool directoryIsEmpty = true;                    //add files and directories                  DirectoryInfo di = new DirectoryInfo(sourceDirectoryName);                    string basePath = di.FullName;                    if (includeBaseDirectory && di.Parent != null)                      basePath = di.Parent.FullName;                    // Windows' MaxPath (260) is used as an arbitrary default capacity' as it is likely                  // to be greater than the length of typical entry names from the file system' even                  // on non-Windows platforms. The capacity will be increased' if needed.                  const int DefaultCapacity = 260;                  char[] entryNameBuffer = ArrayPool<char>.Shared.Rent(DefaultCapacity);                    try                  {                      foreach (FileSystemInfo file in di.EnumerateFileSystemInfos("*"' SearchOption.AllDirectories))                      {                          directoryIsEmpty = false;                            int entryNameLength = file.FullName.Length - basePath.Length;                          Debug.Assert(entryNameLength > 0);                            if (file is FileInfo)                          {                              // Create entry for file:                              string entryName = EntryFromPath(file.FullName' basePath.Length' entryNameLength' ref entryNameBuffer);                              ZipFileExtensions.DoCreateEntryFromFile(archive' file.FullName' entryName' compressionLevel);                          }                          else                          {                              // Entry marking an empty dir:                              DirectoryInfo possiblyEmpty = file as DirectoryInfo;                              if (possiblyEmpty != null && IsDirEmpty(possiblyEmpty))                              {                                  // FullName never returns a directory separator character on the end'                                  // but Zip archives require it to specify an explicit directory:                                  string entryName = EntryFromPath(file.FullName' basePath.Length' entryNameLength' ref entryNameBuffer' appendPathSeparator: true);                                  archive.CreateEntry(entryName);                              }                          }                      }  // foreach                        // If no entries create an empty root directory entry:                      if (includeBaseDirectory && directoryIsEmpty)                          archive.CreateEntry(EntryFromPath(di.Name' 0' di.Name.Length' ref entryNameBuffer' appendPathSeparator: true));                  }                  finally                  {                      ArrayPool<char>.Shared.Return(entryNameBuffer);                  }                }
Magic Number,System.IO.Compression,ZipFile,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFile.cs,EnsureCapacity,The following statement contains a magic number: if (buffer.Length < min)              {                  int newCapacity = buffer.Length * 2;                  if (newCapacity < min) newCapacity = min;                  ArrayPool<char>.Shared.Return(buffer);                  buffer = ArrayPool<char>.Shared.Rent(newCapacity);              }
Magic Number,System.IO.Compression,ZipFileExtensions,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFileExtensions.cs,DoCreateEntryFromFile,The following statement contains a magic number: using (Stream fs = new FileStream(sourceFileName' FileMode.Open' FileAccess.Read' FileShare.Read' bufferSize: 0x1000' useAsync: false))              {                  ZipArchiveEntry entry = compressionLevel.HasValue                                                  ? destination.CreateEntry(entryName' compressionLevel.Value)                                                  : destination.CreateEntry(entryName);                    DateTime lastWrite = File.GetLastWriteTime(sourceFileName);                    // If file to be archived has an invalid last modified time' use the first datetime representable in the Zip timestamp format                  // (midnight on January 1' 1980):                  if (lastWrite.Year < 1980 || lastWrite.Year > 2107)                      lastWrite = new DateTime(1980' 1' 1' 0' 0' 0);                    entry.LastWriteTime = lastWrite;                    using (Stream es = entry.Open())                      fs.CopyTo(es);                    return entry;              }
Magic Number,System.IO.Compression,ZipFileExtensions,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFileExtensions.cs,DoCreateEntryFromFile,The following statement contains a magic number: using (Stream fs = new FileStream(sourceFileName' FileMode.Open' FileAccess.Read' FileShare.Read' bufferSize: 0x1000' useAsync: false))              {                  ZipArchiveEntry entry = compressionLevel.HasValue                                                  ? destination.CreateEntry(entryName' compressionLevel.Value)                                                  : destination.CreateEntry(entryName);                    DateTime lastWrite = File.GetLastWriteTime(sourceFileName);                    // If file to be archived has an invalid last modified time' use the first datetime representable in the Zip timestamp format                  // (midnight on January 1' 1980):                  if (lastWrite.Year < 1980 || lastWrite.Year > 2107)                      lastWrite = new DateTime(1980' 1' 1' 0' 0' 0);                    entry.LastWriteTime = lastWrite;                    using (Stream es = entry.Open())                      fs.CopyTo(es);                    return entry;              }
Magic Number,System.IO.Compression,ZipFileExtensions,C:\selectedRepos\dotnet_corefx\src\System.IO.Compression.ZipFile\src\System\IO\Compression\ZipFileExtensions.cs,DoCreateEntryFromFile,The following statement contains a magic number: using (Stream fs = new FileStream(sourceFileName' FileMode.Open' FileAccess.Read' FileShare.Read' bufferSize: 0x1000' useAsync: false))              {                  ZipArchiveEntry entry = compressionLevel.HasValue                                                  ? destination.CreateEntry(entryName' compressionLevel.Value)                                                  : destination.CreateEntry(entryName);                    DateTime lastWrite = File.GetLastWriteTime(sourceFileName);                    // If file to be archived has an invalid last modified time' use the first datetime representable in the Zip timestamp format                  // (midnight on January 1' 1980):                  if (lastWrite.Year < 1980 || lastWrite.Year > 2107)                      lastWrite = new DateTime(1980' 1' 1' 0' 0' 0);                    entry.LastWriteTime = lastWrite;                    using (Stream es = entry.Open())                      fs.CopyTo(es);                    return entry;              }
