Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,Get,The method has 159 lines of code.
Complex Method,System.Net,ServiceNameStore,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\ServiceNameStore.cs,NormalizeServiceName,Cyclomatic complexity of the method is 11
Complex Method,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,GetAttributeFromHeader,Cyclomatic complexity of the method is 14
Complex Method,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,FillFromString,Cyclomatic complexity of the method is 8
Complex Method,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,Cyclomatic complexity of the method is 12
Complex Method,System.Net,HttpListenerResponse,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerResponse.cs,ComputeCookies,Cyclomatic complexity of the method is 12
Complex Method,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Format,Cyclomatic complexity of the method is 8
Complex Method,System.Net,CookieTokenizer,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,FindNext,Cyclomatic complexity of the method is 13
Complex Method,System.Net,CookieTokenizer,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,Next,Cyclomatic complexity of the method is 8
Long Parameter List,System.Net,HttpRequestStream,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpRequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,HttpRequestStream,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpRequestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,HttpResponseStream,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpResponseStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,HttpResponseStream,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpResponseStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,HttpListenerRequestUriBuilder,The method has 5 parameters. Parameters: rawUri' cookedUriScheme' cookedUriHost' cookedUriPath' cookedUriQuery
Long Parameter List,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,GetRequestUri,The method has 5 parameters. Parameters: rawUri' cookedUriScheme' cookedUriHost' cookedUriPath' cookedUriQuery
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Enter,The method has 5 parameters. Parameters: thisOrContextObject' arg0' arg1' arg2' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,DumpBuffer,The method has 5 parameters. Parameters: thisOrContextObject' buffer' offset' count' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetBytes,The method has 5 parameters. Parameters: myString' charIndex' charCount' bytes' byteIndex
Long Parameter List,System.Net.WebSockets,HttpListenerWebSocketContext,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\WebSockets\HttpListenerWebSocketContext.cs,HttpListenerWebSocketContext,The method has 12 parameters. Parameters: requestUri' headers' cookieCollection' user' isAuthenticated' isLocal' isSecureConnection' origin' secWebSocketProtocols' secWebSocketVersion' secWebSocketKey' webSocket
Long Identifier,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,,The length of the parameter _extendedProtectionSelectorDelegate is 35.
Long Identifier,System.Net.WebSockets,WebSocketValidate,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebSockets\WebSocketValidate.cs,,The length of the parameter CloseStatusCodeFailedTLSHandshake is 33.
Long Statement,System.Net,HttpResponseStream,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpResponseStream.cs,BeginWrite,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' "buffer.Length:" + buffer.Length + " size:" + size + " offset:" + offset); " is 130.
Long Statement,System.Net,HttpListenerRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,GetClientCertificate,The length of the statement  "                    throw new InvalidOperationException(SR.Format(SR.net_listener_callinprogress' $"{nameof(GetClientCertificate)}()/{nameof(BeginGetClientCertificate)}()")); " is 154.
Long Statement,System.Net,HttpListenerRequest,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,BeginGetClientCertificate,The length of the statement  "                throw new InvalidOperationException(SR.Format(SR.net_listener_callinprogress' $"{nameof(GetClientCertificate)}()/{nameof(BeginGetClientCertificate)}()")); " is 154.
Long Statement,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,BuildRequestUriUsingCookedPath,The length of the statement  "                    NetEventSource.Error(this' SR.Format(SR.net_log_listener_cant_create_uri' _cookedUriScheme' _cookedUriHost' _cookedUriPath' _cookedUriQuery)); " is 142.
Long Statement,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,BuildRequestUriUsingRawPath,The length of the statement  "                    NetEventSource.Error(this' SR.Format(SR.net_log_listener_cant_create_uri' _cookedUriScheme' _cookedUriHost' _rawPath' _cookedUriQuery)); " is 136.
Long Statement,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,AppendUnicodeCodePointValuePercentEncoded,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(this' SR.Format(SR.net_log_listener_cant_convert_to_utf8' unicodeString' e.Message)); " is 136.
Long Statement,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,AddPercentEncodedOctetToRawOctetsList,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(this' SR.Format(SR.net_log_listener_cant_convert_percent_value' escapedCharacter)); " is 134.
Long Statement,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,EmptyDecodeAndAppendRawOctetsList,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(this' SR.Format(SR.net_log_listener_cant_convert_bytes' GetOctetsAsString(_rawOctets)' e.Message)); " is 150.
Long Statement,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,EmptyDecodeAndAppendRawOctetsList,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(this' SR.Format(SR.net_log_listener_cant_convert_to_utf8' decodedString' e.Message)); " is 136.
Long Statement,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The length of the statement  "                registeredPrefix = uriPrefix[j] == ':' ? String.Copy(uriPrefix) : uriPrefix.Substring(0' j) + (i == 7 ? ":80" : ":443") + uriPrefix.Substring(j); " is 145.
Long Statement,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"mapped uriPrefix: {uriPrefix} to registeredPrefix: {registeredPrefix}"); " is 130.
Long Statement,System.Net,HttpListenerResponse,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerResponse.cs,ComputeCookies,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Entering Set-Cookie: {Headers[HttpResponseHeader.SetCookie]}' Set-Cookie2: {Headers[HttpKnownHeaderNames.SetCookie2]}"); " is 178.
Long Statement,System.Net,HttpListenerResponse,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerResponse.cs,ComputeCookies,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Exiting Set-Cookie: {Headers[HttpResponseHeader.SetCookie]} Set-Cookie2: {Headers[HttpKnownHeaderNames.SetCookie2]}"); " is 176.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Enter,The length of the statement  "            if (IsEnabled) Log.Enter(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 134.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Exit,The length of the statement  "            if (IsEnabled) Log.Exit(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Info,The length of the statement  "            if (IsEnabled) Log.Info(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,DumpBuffer,The length of the statement  "                    Fail(thisOrContextObject' $"Invalid {nameof(DumpBuffer)} Args. Length={buffer.Length}' Offset={offset}' Count={count}"' memberName); " is 132.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is ValueType)' $"Should not be passing value type {arg?.GetType()} to logging without IsEnabled check"); " is 123.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is FormattableString)' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 124.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,DebugValidateArg,The length of the statement  "            Debug.Assert(IsEnabled || arg == null' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 121.
Long Statement,System.Net,CookieExtensions,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\Windows\CookieExtensions.cs,ToServerString,The length of the statement  "                s_toServerStringFunc = (Func<Cookie' string>)typeof(Cookie).GetMethod("ToServerString"' flags).CreateDelegate(typeof(Func<Cookie' string>)); " is 140.
Long Statement,System.Net,CookieExtensions,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\Windows\CookieExtensions.cs,Clone,The length of the statement  "                s_cloneFunc = (Func<Cookie' Cookie>)typeof(Cookie).GetMethod("Clone"' flags).CreateDelegate(typeof(Func<Cookie' Cookie>)); " is 122.
Long Statement,System.Net,CookieExtensions,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\Windows\CookieExtensions.cs,IsRfc2965Variant,The length of the statement  "                s_getVariantFunc = (Func<Cookie' CookieVariant>)typeof(Cookie).GetProperty("Variant"' flags).GetGetMethod(true).CreateDelegate(typeof(Func<Cookie' CookieVariant>)); " is 164.
Long Statement,System.Net,CookieCollectionExtensions,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\Windows\CookieExtensions.cs,InternalAdd,The length of the statement  "                s_internalAddFunc = (Func<CookieCollection' Cookie' bool' int>)typeof(CookieCollection).GetMethod("InternalAdd"' flags).CreateDelegate(typeof(Func<CookieCollection' Cookie' bool' int>)); " is 186.
Long Statement,System.Net.WebSockets,WebSocketValidate,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebSockets\WebSocketValidate.cs,ValidateSubprotocol,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_WebSockets_InvalidCharInProtocolString' subProtocol' invalidChar)' nameof(subProtocol)); " is 133.
Complex Conditional,System.Net,ServiceNameStore,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\ServiceNameStore.cs,ExtractHostname,The conditional expression  "j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrackets)"  is complex.
Complex Conditional,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,GetAttributeFromHeader,The conditional expression  "(chPrev == ';' || chPrev == ''' || char.IsWhiteSpace(chPrev)) && (chNext == '=' || char.IsWhiteSpace(chNext))"  is complex.
Complex Conditional,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The conditional expression  "h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0"  is complex.
Complex Conditional,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The conditional expression  "j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrakets)"  is complex.
Complex Conditional,System.Net,CookieTokenizer,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,FindNext,The conditional expression  "(_index < _length)                         && (_tokenStream[_index] != ';')                         && (ignoreEquals || (_tokenStream[_index] != '='))                         && (ignoreComma || (_tokenStream[_index] != '''))"  is complex.
Complex Conditional,System.Net.WebSockets,WebSocketValidate,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebSockets\WebSocketValidate.cs,ValidateCloseStatus,The conditional expression  "(closeStatusCode >= InvalidCloseStatusCodesFrom &&                  closeStatusCode <= InvalidCloseStatusCodesTo) ||                  closeStatusCode == CloseStatusCodeAbort ||                  closeStatusCode == CloseStatusCodeFailedTLSHandshake"  is complex.
Empty Catch Block,System.Net,LazyAsyncResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\LazyAsyncResult.cs,ProtectedInvokeCallback,The method has an empty catch block.
Empty Catch Block,System.Net,LazyAsyncResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\LazyAsyncResult.cs,WaitForCompletion,The method has an empty catch block.
Empty Catch Block,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,DecodeUtf8FromString,The method has an empty catch block.
Magic Number,System.Net,ServiceNameStore,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\ServiceNameStore.cs,ExtractHostname,The following statement contains a magic number: if (Uri.IsWellFormedUriString(uriPrefix' UriKind.Absolute))              {                  Uri hostUri = new Uri(uriPrefix);                  return hostUri.Host;              }              else if (allowInvalidUriStrings)              {                  int i = uriPrefix.IndexOf("://") + 3;                  int j = i;                    bool inSquareBrackets = false;                  while (j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrackets))                  {                      if (uriPrefix[j] == '[')                      {                          if (inSquareBrackets)                          {                              j = i;                              break;                          }                          inSquareBrackets = true;                      }                      if (inSquareBrackets && uriPrefix[j] == ']')                      {                          inSquareBrackets = false;                      }                      j++;                  }                    return uriPrefix.Substring(i' j - i);              }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)                  {                      char ch = s[pos];                        if (ch == '+')                      {                          ch = ' ';                      }                      else if (ch == '%' && pos < count - 2)                      {                          if (s[pos + 1] == 'u' && pos < count - 5)                          {                              int h1 = HexToInt(s[pos + 2]);                              int h2 = HexToInt(s[pos + 3]);                              int h3 = HexToInt(s[pos + 4]);                              int h4 = HexToInt(s[pos + 5]);                                if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                              {   // valid 4 hex chars                                  ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                                  pos += 5;                                    // only add as char                                  helper.AddChar(ch);                                  continue;                              }                          }                          else                          {                              int h1 = HexToInt(s[pos + 1]);                              int h2 = HexToInt(s[pos + 2]);                                if (h1 >= 0 && h2 >= 0)                              {     // valid 2 hex chars                                  byte b = (byte)((h1 << 4) | h2);                                  pos += 2;                                    // don't add as char                                  helper.AddByte(b);                                  continue;                              }                          }                      }                        if ((ch & 0xFF80) == 0)                          helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                      else                          helper.AddChar(ch);                  }
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' :                  (h >= 'a' && h <= 'f') ? h - 'a' + 10 :                  (h >= 'A' && h <= 'F') ? h - 'A' + 10 :                  -1;
Magic Number,System.Net,Helpers,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequest.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' :                  (h >= 'a' && h <= 'f') ? h - 'a' + 10 :                  (h >= 'A' && h <= 'F') ? h - 'A' + 10 :                  -1;
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,ParseRawPath,The following statement contains a magic number: while (index < _rawPath.Length)              {                  current = _rawPath[index];                  if (current == '%')                  {                      // Assert is enough' since http.sys accepted the request string already. This should never happen.                      Debug.Assert(index + 2 < _rawPath.Length' "Expected >=2 characters after '%' (e.g. %2F)");                        index++;                      current = _rawPath[index];                      if (current == 'u' || current == 'U')                      {                          // We found "%u" which means' we have a Unicode code point of the form "%uXXXX".                          Debug.Assert(index + 4 < _rawPath.Length' "Expected >=4 characters after '%u' (e.g. %u0062)");                            // Decode the content of rawOctets into percent encoded UTF-8 characters and append them                          // to requestUriString.                          if (!EmptyDecodeAndAppendRawOctetsList(encoding))                          {                              return ParsingResult.EncodingError;                          }                          if (!AppendUnicodeCodePointValuePercentEncoded(_rawPath.Substring(index + 1' 4)))                          {                              return ParsingResult.InvalidString;                          }                          index += 5;                      }                      else                      {                          // We found '%'' but not followed by 'u'' i.e. we have a percent encoded octed: %XX                           if (!AddPercentEncodedOctetToRawOctetsList(encoding' _rawPath.Substring(index' 2)))                          {                              return ParsingResult.InvalidString;                          }                          index += 2;                      }                  }                  else                  {                      // We found a non-'%' character: decode the content of rawOctets into percent encoded                      // UTF-8 characters and append it to the result.                       if (!EmptyDecodeAndAppendRawOctetsList(encoding))                      {                          return ParsingResult.EncodingError;                      }                      // Append the current character to the result.                      _requestUriString.Append(current);                      index++;                  }              }
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,ParseRawPath,The following statement contains a magic number: while (index < _rawPath.Length)              {                  current = _rawPath[index];                  if (current == '%')                  {                      // Assert is enough' since http.sys accepted the request string already. This should never happen.                      Debug.Assert(index + 2 < _rawPath.Length' "Expected >=2 characters after '%' (e.g. %2F)");                        index++;                      current = _rawPath[index];                      if (current == 'u' || current == 'U')                      {                          // We found "%u" which means' we have a Unicode code point of the form "%uXXXX".                          Debug.Assert(index + 4 < _rawPath.Length' "Expected >=4 characters after '%u' (e.g. %u0062)");                            // Decode the content of rawOctets into percent encoded UTF-8 characters and append them                          // to requestUriString.                          if (!EmptyDecodeAndAppendRawOctetsList(encoding))                          {                              return ParsingResult.EncodingError;                          }                          if (!AppendUnicodeCodePointValuePercentEncoded(_rawPath.Substring(index + 1' 4)))                          {                              return ParsingResult.InvalidString;                          }                          index += 5;                      }                      else                      {                          // We found '%'' but not followed by 'u'' i.e. we have a percent encoded octed: %XX                           if (!AddPercentEncodedOctetToRawOctetsList(encoding' _rawPath.Substring(index' 2)))                          {                              return ParsingResult.InvalidString;                          }                          index += 2;                      }                  }                  else                  {                      // We found a non-'%' character: decode the content of rawOctets into percent encoded                      // UTF-8 characters and append it to the result.                       if (!EmptyDecodeAndAppendRawOctetsList(encoding))                      {                          return ParsingResult.EncodingError;                      }                      // Append the current character to the result.                      _requestUriString.Append(current);                      index++;                  }              }
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,ParseRawPath,The following statement contains a magic number: while (index < _rawPath.Length)              {                  current = _rawPath[index];                  if (current == '%')                  {                      // Assert is enough' since http.sys accepted the request string already. This should never happen.                      Debug.Assert(index + 2 < _rawPath.Length' "Expected >=2 characters after '%' (e.g. %2F)");                        index++;                      current = _rawPath[index];                      if (current == 'u' || current == 'U')                      {                          // We found "%u" which means' we have a Unicode code point of the form "%uXXXX".                          Debug.Assert(index + 4 < _rawPath.Length' "Expected >=4 characters after '%u' (e.g. %u0062)");                            // Decode the content of rawOctets into percent encoded UTF-8 characters and append them                          // to requestUriString.                          if (!EmptyDecodeAndAppendRawOctetsList(encoding))                          {                              return ParsingResult.EncodingError;                          }                          if (!AppendUnicodeCodePointValuePercentEncoded(_rawPath.Substring(index + 1' 4)))                          {                              return ParsingResult.InvalidString;                          }                          index += 5;                      }                      else                      {                          // We found '%'' but not followed by 'u'' i.e. we have a percent encoded octed: %XX                           if (!AddPercentEncodedOctetToRawOctetsList(encoding' _rawPath.Substring(index' 2)))                          {                              return ParsingResult.InvalidString;                          }                          index += 2;                      }                  }                  else                  {                      // We found a non-'%' character: decode the content of rawOctets into percent encoded                      // UTF-8 characters and append it to the result.                       if (!EmptyDecodeAndAppendRawOctetsList(encoding))                      {                          return ParsingResult.EncodingError;                      }                      // Append the current character to the result.                      _requestUriString.Append(current);                      index++;                  }              }
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,ParseRawPath,The following statement contains a magic number: while (index < _rawPath.Length)              {                  current = _rawPath[index];                  if (current == '%')                  {                      // Assert is enough' since http.sys accepted the request string already. This should never happen.                      Debug.Assert(index + 2 < _rawPath.Length' "Expected >=2 characters after '%' (e.g. %2F)");                        index++;                      current = _rawPath[index];                      if (current == 'u' || current == 'U')                      {                          // We found "%u" which means' we have a Unicode code point of the form "%uXXXX".                          Debug.Assert(index + 4 < _rawPath.Length' "Expected >=4 characters after '%u' (e.g. %u0062)");                            // Decode the content of rawOctets into percent encoded UTF-8 characters and append them                          // to requestUriString.                          if (!EmptyDecodeAndAppendRawOctetsList(encoding))                          {                              return ParsingResult.EncodingError;                          }                          if (!AppendUnicodeCodePointValuePercentEncoded(_rawPath.Substring(index + 1' 4)))                          {                              return ParsingResult.InvalidString;                          }                          index += 5;                      }                      else                      {                          // We found '%'' but not followed by 'u'' i.e. we have a percent encoded octed: %XX                           if (!AddPercentEncodedOctetToRawOctetsList(encoding' _rawPath.Substring(index' 2)))                          {                              return ParsingResult.InvalidString;                          }                          index += 2;                      }                  }                  else                  {                      // We found a non-'%' character: decode the content of rawOctets into percent encoded                      // UTF-8 characters and append it to the result.                       if (!EmptyDecodeAndAppendRawOctetsList(encoding))                      {                          return ParsingResult.EncodingError;                      }                      // Append the current character to the result.                      _requestUriString.Append(current);                      index++;                  }              }
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,ParseRawPath,The following statement contains a magic number: while (index < _rawPath.Length)              {                  current = _rawPath[index];                  if (current == '%')                  {                      // Assert is enough' since http.sys accepted the request string already. This should never happen.                      Debug.Assert(index + 2 < _rawPath.Length' "Expected >=2 characters after '%' (e.g. %2F)");                        index++;                      current = _rawPath[index];                      if (current == 'u' || current == 'U')                      {                          // We found "%u" which means' we have a Unicode code point of the form "%uXXXX".                          Debug.Assert(index + 4 < _rawPath.Length' "Expected >=4 characters after '%u' (e.g. %u0062)");                            // Decode the content of rawOctets into percent encoded UTF-8 characters and append them                          // to requestUriString.                          if (!EmptyDecodeAndAppendRawOctetsList(encoding))                          {                              return ParsingResult.EncodingError;                          }                          if (!AppendUnicodeCodePointValuePercentEncoded(_rawPath.Substring(index + 1' 4)))                          {                              return ParsingResult.InvalidString;                          }                          index += 5;                      }                      else                      {                          // We found '%'' but not followed by 'u'' i.e. we have a percent encoded octed: %XX                           if (!AddPercentEncodedOctetToRawOctetsList(encoding' _rawPath.Substring(index' 2)))                          {                              return ParsingResult.InvalidString;                          }                          index += 2;                      }                  }                  else                  {                      // We found a non-'%' character: decode the content of rawOctets into percent encoded                      // UTF-8 characters and append it to the result.                       if (!EmptyDecodeAndAppendRawOctetsList(encoding))                      {                          return ParsingResult.EncodingError;                      }                      // Append the current character to the result.                      _requestUriString.Append(current);                      index++;                  }              }
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,ParseRawPath,The following statement contains a magic number: while (index < _rawPath.Length)              {                  current = _rawPath[index];                  if (current == '%')                  {                      // Assert is enough' since http.sys accepted the request string already. This should never happen.                      Debug.Assert(index + 2 < _rawPath.Length' "Expected >=2 characters after '%' (e.g. %2F)");                        index++;                      current = _rawPath[index];                      if (current == 'u' || current == 'U')                      {                          // We found "%u" which means' we have a Unicode code point of the form "%uXXXX".                          Debug.Assert(index + 4 < _rawPath.Length' "Expected >=4 characters after '%u' (e.g. %u0062)");                            // Decode the content of rawOctets into percent encoded UTF-8 characters and append them                          // to requestUriString.                          if (!EmptyDecodeAndAppendRawOctetsList(encoding))                          {                              return ParsingResult.EncodingError;                          }                          if (!AppendUnicodeCodePointValuePercentEncoded(_rawPath.Substring(index + 1' 4)))                          {                              return ParsingResult.InvalidString;                          }                          index += 5;                      }                      else                      {                          // We found '%'' but not followed by 'u'' i.e. we have a percent encoded octed: %XX                           if (!AddPercentEncodedOctetToRawOctetsList(encoding' _rawPath.Substring(index' 2)))                          {                              return ParsingResult.InvalidString;                          }                          index += 2;                      }                  }                  else                  {                      // We found a non-'%' character: decode the content of rawOctets into percent encoded                      // UTF-8 characters and append it to the result.                       if (!EmptyDecodeAndAppendRawOctetsList(encoding))                      {                          return ParsingResult.EncodingError;                      }                      // Append the current character to the result.                      _requestUriString.Append(current);                      index++;                  }              }
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,GetPath,The following statement contains a magic number: if (uriString[0] != '/')              {                  // We can't check against cookedUriScheme' since http.sys allows for request http://myserver/ to                  // use a request line 'GET https://myserver/' (note http vs. https). Therefore check if the                  // Uri starts with either http:// or https://.                  int authorityStartIndex = 0;                  if (uriString.StartsWith("http://"' StringComparison.OrdinalIgnoreCase))                  {                      authorityStartIndex = 7;                  }                  else if (uriString.StartsWith("https://"' StringComparison.OrdinalIgnoreCase))                  {                      authorityStartIndex = 8;                  }                    if (authorityStartIndex > 0)                  {                      // we have an absolute Uri. Find out where the authority ends and the path begins.                      // Note that Uris like "http://server?query=value/1/2" are invalid according to RFC2616                      // and http.sys behavior: If the Uri contains a query' there must be at least one '/'                      // between the authority and the '?' character: It's safe to just look for the first                      // '/' after the authority to determine the beginning of the path.                      pathStartIndex = uriString.IndexOf('/'' authorityStartIndex);                      if (pathStartIndex == -1)                      {                          // e.g. for request lines like: 'GET http://myserver' (no final '/')                          pathStartIndex = uriString.Length;                      }                  }                  else                  {                      // RFC2616: Request-URI = "*" | absoluteURI | abs_path | authority                      // 'authority' can only be used with CONNECT which is never received by HttpListener.                      // I.e. if we don't have an absolute path (must start with '/') and we don't have                      // an absolute Uri (must start with http:// or https://)' then 'uriString' must be '*'.                      Debug.Assert((uriString.Length == 1) && (uriString[0] == '*')' "Unknown request Uri string format"'                          "Request Uri string is not an absolute Uri' absolute path' or '*': {0}"' uriString);                        // Should we ever get here' be consistent with 2.0/3.5 behavior: just add an initial                      // slash to the string and treat it as a path:                      uriString = "/" + uriString;                  }              }
Magic Number,System.Net,HttpListenerRequestUriBuilder,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListenerRequestUriBuilder.cs,GetPath,The following statement contains a magic number: if (uriString[0] != '/')              {                  // We can't check against cookedUriScheme' since http.sys allows for request http://myserver/ to                  // use a request line 'GET https://myserver/' (note http vs. https). Therefore check if the                  // Uri starts with either http:// or https://.                  int authorityStartIndex = 0;                  if (uriString.StartsWith("http://"' StringComparison.OrdinalIgnoreCase))                  {                      authorityStartIndex = 7;                  }                  else if (uriString.StartsWith("https://"' StringComparison.OrdinalIgnoreCase))                  {                      authorityStartIndex = 8;                  }                    if (authorityStartIndex > 0)                  {                      // we have an absolute Uri. Find out where the authority ends and the path begins.                      // Note that Uris like "http://server?query=value/1/2" are invalid according to RFC2616                      // and http.sys behavior: If the Uri contains a query' there must be at least one '/'                      // between the authority and the '?' character: It's safe to just look for the first                      // '/' after the authority to determine the beginning of the path.                      pathStartIndex = uriString.IndexOf('/'' authorityStartIndex);                      if (pathStartIndex == -1)                      {                          // e.g. for request lines like: 'GET http://myserver' (no final '/')                          pathStartIndex = uriString.Length;                      }                  }                  else                  {                      // RFC2616: Request-URI = "*" | absoluteURI | abs_path | authority                      // 'authority' can only be used with CONNECT which is never received by HttpListener.                      // I.e. if we don't have an absolute path (must start with '/') and we don't have                      // an absolute Uri (must start with http:// or https://)' then 'uriString' must be '*'.                      Debug.Assert((uriString.Length == 1) && (uriString[0] == '*')' "Unknown request Uri string format"'                          "Request Uri string is not an absolute Uri' absolute path' or '*': {0}"' uriString);                        // Should we ever get here' be consistent with 2.0/3.5 behavior: just add an initial                      // slash to the string and treat it as a path:                      uriString = "/" + uriString;                  }              }
Magic Number,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The following statement contains a magic number: try              {                  if (uriPrefix == null)                  {                      throw new ArgumentNullException(nameof(uriPrefix));                  }                  CheckDisposed();                  int i;                  if (string.Compare(uriPrefix' 0' "http://"' 0' 7' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 7;                  }                  else if (string.Compare(uriPrefix' 0' "https://"' 0' 8' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 8;                  }                  else                  {                      throw new ArgumentException(SR.net_listener_scheme' nameof(uriPrefix));                  }                  bool inSquareBrakets = false;                  int j = i;                  while (j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrakets))                  {                      if (uriPrefix[j] == '[')                      {                          if (inSquareBrakets)                          {                              j = i;                              break;                          }                          inSquareBrakets = true;                      }                      if (inSquareBrakets && uriPrefix[j] == ']')                      {                          inSquareBrakets = false;                      }                      j++;                  }                  if (i == j)                  {                      throw new ArgumentException(SR.net_listener_host' nameof(uriPrefix));                  }                  if (uriPrefix[uriPrefix.Length - 1] != '/')                  {                      throw new ArgumentException(SR.net_listener_slash' nameof(uriPrefix));                  }                  registeredPrefix = uriPrefix[j] == ':' ? String.Copy(uriPrefix) : uriPrefix.Substring(0' j) + (i == 7 ? ":80" : ":443") + uriPrefix.Substring(j);                  fixed (char* pChar = registeredPrefix)                  {                      i = 0;                      while (pChar[i] != ':')                      {                          pChar[i] = (char)CaseInsensitiveAscii.AsciiToLower[(byte)pChar[i]];                          i++;                      }                  }                  if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"mapped uriPrefix: {uriPrefix} to registeredPrefix: {registeredPrefix}");                  if (_state == State.Started)                  {                      AddPrefixCore(registeredPrefix);                  }                  _uriPrefixes[uriPrefix] = registeredPrefix;                  _defaultServiceNames.Add(uriPrefix);              }              catch (Exception exception)              {                  if (NetEventSource.IsEnabled) NetEventSource.Error(this' exception);                  throw;              }              finally              {                  if (NetEventSource.IsEnabled) NetEventSource.Exit(this' $"prefix: {registeredPrefix}");              }
Magic Number,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The following statement contains a magic number: try              {                  if (uriPrefix == null)                  {                      throw new ArgumentNullException(nameof(uriPrefix));                  }                  CheckDisposed();                  int i;                  if (string.Compare(uriPrefix' 0' "http://"' 0' 7' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 7;                  }                  else if (string.Compare(uriPrefix' 0' "https://"' 0' 8' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 8;                  }                  else                  {                      throw new ArgumentException(SR.net_listener_scheme' nameof(uriPrefix));                  }                  bool inSquareBrakets = false;                  int j = i;                  while (j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrakets))                  {                      if (uriPrefix[j] == '[')                      {                          if (inSquareBrakets)                          {                              j = i;                              break;                          }                          inSquareBrakets = true;                      }                      if (inSquareBrakets && uriPrefix[j] == ']')                      {                          inSquareBrakets = false;                      }                      j++;                  }                  if (i == j)                  {                      throw new ArgumentException(SR.net_listener_host' nameof(uriPrefix));                  }                  if (uriPrefix[uriPrefix.Length - 1] != '/')                  {                      throw new ArgumentException(SR.net_listener_slash' nameof(uriPrefix));                  }                  registeredPrefix = uriPrefix[j] == ':' ? String.Copy(uriPrefix) : uriPrefix.Substring(0' j) + (i == 7 ? ":80" : ":443") + uriPrefix.Substring(j);                  fixed (char* pChar = registeredPrefix)                  {                      i = 0;                      while (pChar[i] != ':')                      {                          pChar[i] = (char)CaseInsensitiveAscii.AsciiToLower[(byte)pChar[i]];                          i++;                      }                  }                  if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"mapped uriPrefix: {uriPrefix} to registeredPrefix: {registeredPrefix}");                  if (_state == State.Started)                  {                      AddPrefixCore(registeredPrefix);                  }                  _uriPrefixes[uriPrefix] = registeredPrefix;                  _defaultServiceNames.Add(uriPrefix);              }              catch (Exception exception)              {                  if (NetEventSource.IsEnabled) NetEventSource.Error(this' exception);                  throw;              }              finally              {                  if (NetEventSource.IsEnabled) NetEventSource.Exit(this' $"prefix: {registeredPrefix}");              }
Magic Number,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The following statement contains a magic number: try              {                  if (uriPrefix == null)                  {                      throw new ArgumentNullException(nameof(uriPrefix));                  }                  CheckDisposed();                  int i;                  if (string.Compare(uriPrefix' 0' "http://"' 0' 7' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 7;                  }                  else if (string.Compare(uriPrefix' 0' "https://"' 0' 8' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 8;                  }                  else                  {                      throw new ArgumentException(SR.net_listener_scheme' nameof(uriPrefix));                  }                  bool inSquareBrakets = false;                  int j = i;                  while (j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrakets))                  {                      if (uriPrefix[j] == '[')                      {                          if (inSquareBrakets)                          {                              j = i;                              break;                          }                          inSquareBrakets = true;                      }                      if (inSquareBrakets && uriPrefix[j] == ']')                      {                          inSquareBrakets = false;                      }                      j++;                  }                  if (i == j)                  {                      throw new ArgumentException(SR.net_listener_host' nameof(uriPrefix));                  }                  if (uriPrefix[uriPrefix.Length - 1] != '/')                  {                      throw new ArgumentException(SR.net_listener_slash' nameof(uriPrefix));                  }                  registeredPrefix = uriPrefix[j] == ':' ? String.Copy(uriPrefix) : uriPrefix.Substring(0' j) + (i == 7 ? ":80" : ":443") + uriPrefix.Substring(j);                  fixed (char* pChar = registeredPrefix)                  {                      i = 0;                      while (pChar[i] != ':')                      {                          pChar[i] = (char)CaseInsensitiveAscii.AsciiToLower[(byte)pChar[i]];                          i++;                      }                  }                  if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"mapped uriPrefix: {uriPrefix} to registeredPrefix: {registeredPrefix}");                  if (_state == State.Started)                  {                      AddPrefixCore(registeredPrefix);                  }                  _uriPrefixes[uriPrefix] = registeredPrefix;                  _defaultServiceNames.Add(uriPrefix);              }              catch (Exception exception)              {                  if (NetEventSource.IsEnabled) NetEventSource.Error(this' exception);                  throw;              }              finally              {                  if (NetEventSource.IsEnabled) NetEventSource.Exit(this' $"prefix: {registeredPrefix}");              }
Magic Number,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The following statement contains a magic number: try              {                  if (uriPrefix == null)                  {                      throw new ArgumentNullException(nameof(uriPrefix));                  }                  CheckDisposed();                  int i;                  if (string.Compare(uriPrefix' 0' "http://"' 0' 7' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 7;                  }                  else if (string.Compare(uriPrefix' 0' "https://"' 0' 8' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 8;                  }                  else                  {                      throw new ArgumentException(SR.net_listener_scheme' nameof(uriPrefix));                  }                  bool inSquareBrakets = false;                  int j = i;                  while (j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrakets))                  {                      if (uriPrefix[j] == '[')                      {                          if (inSquareBrakets)                          {                              j = i;                              break;                          }                          inSquareBrakets = true;                      }                      if (inSquareBrakets && uriPrefix[j] == ']')                      {                          inSquareBrakets = false;                      }                      j++;                  }                  if (i == j)                  {                      throw new ArgumentException(SR.net_listener_host' nameof(uriPrefix));                  }                  if (uriPrefix[uriPrefix.Length - 1] != '/')                  {                      throw new ArgumentException(SR.net_listener_slash' nameof(uriPrefix));                  }                  registeredPrefix = uriPrefix[j] == ':' ? String.Copy(uriPrefix) : uriPrefix.Substring(0' j) + (i == 7 ? ":80" : ":443") + uriPrefix.Substring(j);                  fixed (char* pChar = registeredPrefix)                  {                      i = 0;                      while (pChar[i] != ':')                      {                          pChar[i] = (char)CaseInsensitiveAscii.AsciiToLower[(byte)pChar[i]];                          i++;                      }                  }                  if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"mapped uriPrefix: {uriPrefix} to registeredPrefix: {registeredPrefix}");                  if (_state == State.Started)                  {                      AddPrefixCore(registeredPrefix);                  }                  _uriPrefixes[uriPrefix] = registeredPrefix;                  _defaultServiceNames.Add(uriPrefix);              }              catch (Exception exception)              {                  if (NetEventSource.IsEnabled) NetEventSource.Error(this' exception);                  throw;              }              finally              {                  if (NetEventSource.IsEnabled) NetEventSource.Exit(this' $"prefix: {registeredPrefix}");              }
Magic Number,System.Net,HttpListener,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\HttpListener.cs,AddPrefix,The following statement contains a magic number: try              {                  if (uriPrefix == null)                  {                      throw new ArgumentNullException(nameof(uriPrefix));                  }                  CheckDisposed();                  int i;                  if (string.Compare(uriPrefix' 0' "http://"' 0' 7' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 7;                  }                  else if (string.Compare(uriPrefix' 0' "https://"' 0' 8' StringComparison.OrdinalIgnoreCase) == 0)                  {                      i = 8;                  }                  else                  {                      throw new ArgumentException(SR.net_listener_scheme' nameof(uriPrefix));                  }                  bool inSquareBrakets = false;                  int j = i;                  while (j < uriPrefix.Length && uriPrefix[j] != '/' && (uriPrefix[j] != ':' || inSquareBrakets))                  {                      if (uriPrefix[j] == '[')                      {                          if (inSquareBrakets)                          {                              j = i;                              break;                          }                          inSquareBrakets = true;                      }                      if (inSquareBrakets && uriPrefix[j] == ']')                      {                          inSquareBrakets = false;                      }                      j++;                  }                  if (i == j)                  {                      throw new ArgumentException(SR.net_listener_host' nameof(uriPrefix));                  }                  if (uriPrefix[uriPrefix.Length - 1] != '/')                  {                      throw new ArgumentException(SR.net_listener_slash' nameof(uriPrefix));                  }                  registeredPrefix = uriPrefix[j] == ':' ? String.Copy(uriPrefix) : uriPrefix.Substring(0' j) + (i == 7 ? ":80" : ":443") + uriPrefix.Substring(j);                  fixed (char* pChar = registeredPrefix)                  {                      i = 0;                      while (pChar[i] != ':')                      {                          pChar[i] = (char)CaseInsensitiveAscii.AsciiToLower[(byte)pChar[i]];                          i++;                      }                  }                  if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"mapped uriPrefix: {uriPrefix} to registeredPrefix: {registeredPrefix}");                  if (_state == State.Started)                  {                      AddPrefixCore(registeredPrefix);                  }                  _uriPrefixes[uriPrefix] = registeredPrefix;                  _defaultServiceNames.Add(uriPrefix);              }              catch (Exception exception)              {                  if (NetEventSource.IsEnabled) NetEventSource.Error(this' exception);                  throw;              }              finally              {                  if (NetEventSource.IsEnabled) NetEventSource.Exit(this' $"prefix: {registeredPrefix}");              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\NetEventSource.HttpListener.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,CheckQuoted,The following statement contains a magic number: if (value.Length < 2 || value[0] != '\"' || value[value.Length - 1] != '\"')                  return value;
Magic Number,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,CheckQuoted,The following statement contains a magic number: return value.Length == 2 ? string.Empty : value.Substring(1' value.Length - 2);
Magic Number,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,CheckQuoted,The following statement contains a magic number: return value.Length == 2 ? string.Empty : value.Substring(1' value.Length - 2);
Magic Number,System.Net,CaseInsensitiveAscii,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CaseInsensitiveAscii.cs,GetHashCode,The following statement contains a magic number: myHashCode ^= AsciiToLower[(byte)myString[0]] << 24 ^ AsciiToLower[(byte)myString[myHashCode - 1]] << 16;
Magic Number,System.Net,CaseInsensitiveAscii,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CaseInsensitiveAscii.cs,GetHashCode,The following statement contains a magic number: myHashCode ^= AsciiToLower[(byte)myString[0]] << 24 ^ AsciiToLower[(byte)myString[myHashCode - 1]] << 16;
Magic Number,System.Net,CaseInsensitiveAscii,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CaseInsensitiveAscii.cs,FastGetHashCode,The following statement contains a magic number: if (myHashCode != 0)              {                  myHashCode ^= AsciiToLower[(byte)myString[0]] << 24 ^ AsciiToLower[(byte)myString[myHashCode - 1]] << 16;              }
Magic Number,System.Net,CaseInsensitiveAscii,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CaseInsensitiveAscii.cs,FastGetHashCode,The following statement contains a magic number: if (myHashCode != 0)              {                  myHashCode ^= AsciiToLower[(byte)myString[0]] << 24 ^ AsciiToLower[(byte)myString[myHashCode - 1]] << 16;              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,GetString,The following statement contains a magic number: fixed (char* pStr = s)              {                  char* pString = pStr;                  while (byteCount >= 8)                  {                      pString[0] = (char)pBytes[0];                      pString[1] = (char)pBytes[1];                      pString[2] = (char)pBytes[2];                      pString[3] = (char)pBytes[3];                      pString[4] = (char)pBytes[4];                      pString[5] = (char)pBytes[5];                      pString[6] = (char)pBytes[6];                      pString[7] = (char)pBytes[7];                      pString += 8;                      pBytes += 8;                      byteCount -= 8;                  }                  for (int i = 0; i < byteCount; i++)                  {                      pString[i] = (char)pBytes[i];                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,DecodeUtf8FromString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  if (input[i] > (char)255)                  {                      return input; // This couldn't have come from the wire' someone assigned it directly.                  }                  else if (input[i] > (char)127)                  {                      possibleUtf8 = true;                      break;                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,DecodeUtf8FromString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  if (input[i] > (char)255)                  {                      return input; // This couldn't have come from the wire' someone assigned it directly.                  }                  else if (input[i] > (char)127)                  {                      possibleUtf8 = true;                      break;                  }              }
Magic Number,System.Net,WebHeaderEncoding,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\WebHeaderEncoding.cs,DecodeUtf8FromString,The following statement contains a magic number: if (possibleUtf8)              {                  byte[] rawBytes = new byte[input.Length];                  for (int i = 0; i < input.Length; i++)                  {                      if (input[i] > (char)255)                      {                          return input; // This couldn't have come from the wire' someone assigned it directly.                      }                      rawBytes[i] = (byte)input[i];                  }                  try                  {                      return s_utf8Decoder.GetString(rawBytes);                  }                  catch (ArgumentException) { } // Not actually Utf-8              }
Magic Number,System.Net.WebSockets,HttpWebSocket,C:\selectedRepos\dotnet_corefx\src\System.Net.HttpListener\src\System\Net\WebSockets\HttpWebSocket.cs,ValidateWebSocketHeaders,The following statement contains a magic number: if (!isSecWebSocketKeyInvalid)              {                  try                  {                      // key must be 16 bytes then base64-encoded                      isSecWebSocketKeyInvalid = Convert.FromBase64String(secWebSocketKey).Length != 16;                  }                  catch                  {                      isSecWebSocketKeyInvalid = true;                  }              }
Missing Default,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,Get,The following switch statement is missing a default case: switch (token)                      {                          case CookieToken.NameValuePair:                              switch (_tokenizer.Token)                              {                                  case CookieToken.Comment:                                      if (!commentSet)                                      {                                          commentSet = true;                                          cookie.Comment = _tokenizer.Value;                                      }                                      break;                                    case CookieToken.CommentUrl:                                      if (!commentUriSet)                                      {                                          commentUriSet = true;                                          if (Uri.TryCreate(CheckQuoted(_tokenizer.Value)' UriKind.Absolute' out Uri parsed))                                          {                                              cookie.CommentUri = parsed;                                          }                                      }                                      break;                                    case CookieToken.Domain:                                      if (!domainSet)                                      {                                          domainSet = true;                                          cookie.Domain = CheckQuoted(_tokenizer.Value);                                          IsQuotedDomainField.SetValue(cookie' _tokenizer.Quoted);                                      }                                      break;                                    case CookieToken.Expires:                                      if (!expiresSet)                                      {                                          expiresSet = true;                                            if (DateTime.TryParse(CheckQuoted(_tokenizer.Value)'                                              CultureInfo.InvariantCulture' DateTimeStyles.AllowWhiteSpaces' out DateTime expires))                                          {                                              cookie.Expires = expires;                                          }                                          else                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.MaxAge:                                      if (!expiresSet)                                      {                                          expiresSet = true;                                          if (int.TryParse(CheckQuoted(_tokenizer.Value)' out int parsed))                                          {                                              cookie.Expires = DateTime.Now.AddSeconds(parsed);                                          }                                          else                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.Path:                                      if (!pathSet)                                      {                                          pathSet = true;                                          cookie.Path = _tokenizer.Value;                                      }                                      break;                                    case CookieToken.Port:                                      if (!portSet)                                      {                                          portSet = true;                                          try                                          {                                              cookie.Port = _tokenizer.Value;                                          }                                          catch                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.Version:                                      if (!versionSet)                                      {                                          versionSet = true;                                          int parsed;                                          if (int.TryParse(CheckQuoted(_tokenizer.Value)' out parsed))                                          {                                              cookie.Version = parsed;                                              IsQuotedVersionField.SetValue(cookie' _tokenizer.Quoted);                                          }                                          else                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                              }                              break;                            case CookieToken.Attribute:                              switch (_tokenizer.Token)                              {                                  case CookieToken.Discard:                                      if (!discardSet)                                      {                                          discardSet = true;                                          cookie.Discard = true;                                      }                                      break;                                    case CookieToken.Secure:                                      if (!secureSet)                                      {                                          secureSet = true;                                          cookie.Secure = true;                                      }                                      break;                                    case CookieToken.HttpOnly:                                      cookie.HttpOnly = true;                                      break;                                    case CookieToken.Port:                                      if (!portSet)                                      {                                          portSet = true;                                          cookie.Port = string.Empty;                                      }                                      break;                              }                              break;                      }
Missing Default,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,Get,The following switch statement is missing a default case: switch (_tokenizer.Token)                              {                                  case CookieToken.Comment:                                      if (!commentSet)                                      {                                          commentSet = true;                                          cookie.Comment = _tokenizer.Value;                                      }                                      break;                                    case CookieToken.CommentUrl:                                      if (!commentUriSet)                                      {                                          commentUriSet = true;                                          if (Uri.TryCreate(CheckQuoted(_tokenizer.Value)' UriKind.Absolute' out Uri parsed))                                          {                                              cookie.CommentUri = parsed;                                          }                                      }                                      break;                                    case CookieToken.Domain:                                      if (!domainSet)                                      {                                          domainSet = true;                                          cookie.Domain = CheckQuoted(_tokenizer.Value);                                          IsQuotedDomainField.SetValue(cookie' _tokenizer.Quoted);                                      }                                      break;                                    case CookieToken.Expires:                                      if (!expiresSet)                                      {                                          expiresSet = true;                                            if (DateTime.TryParse(CheckQuoted(_tokenizer.Value)'                                              CultureInfo.InvariantCulture' DateTimeStyles.AllowWhiteSpaces' out DateTime expires))                                          {                                              cookie.Expires = expires;                                          }                                          else                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.MaxAge:                                      if (!expiresSet)                                      {                                          expiresSet = true;                                          if (int.TryParse(CheckQuoted(_tokenizer.Value)' out int parsed))                                          {                                              cookie.Expires = DateTime.Now.AddSeconds(parsed);                                          }                                          else                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.Path:                                      if (!pathSet)                                      {                                          pathSet = true;                                          cookie.Path = _tokenizer.Value;                                      }                                      break;                                    case CookieToken.Port:                                      if (!portSet)                                      {                                          portSet = true;                                          try                                          {                                              cookie.Port = _tokenizer.Value;                                          }                                          catch                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.Version:                                      if (!versionSet)                                      {                                          versionSet = true;                                          int parsed;                                          if (int.TryParse(CheckQuoted(_tokenizer.Value)' out parsed))                                          {                                              cookie.Version = parsed;                                              IsQuotedVersionField.SetValue(cookie' _tokenizer.Quoted);                                          }                                          else                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                              }
Missing Default,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,Get,The following switch statement is missing a default case: switch (_tokenizer.Token)                              {                                  case CookieToken.Discard:                                      if (!discardSet)                                      {                                          discardSet = true;                                          cookie.Discard = true;                                      }                                      break;                                    case CookieToken.Secure:                                      if (!secureSet)                                      {                                          secureSet = true;                                          cookie.Secure = true;                                      }                                      break;                                    case CookieToken.HttpOnly:                                      cookie.HttpOnly = true;                                      break;                                    case CookieToken.Port:                                      if (!portSet)                                      {                                          portSet = true;                                          cookie.Port = string.Empty;                                      }                                      break;                              }
Missing Default,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,GetServer,The following switch statement is missing a default case: switch (token)                      {                          case CookieToken.NameValuePair:                              switch (_tokenizer.Token)                              {                                  case CookieToken.Domain:                                      if (!domainSet)                                      {                                          domainSet = true;                                          cookie.Domain = CheckQuoted(_tokenizer.Value);                                          IsQuotedDomainField.SetValue(cookie' _tokenizer.Quoted);                                      }                                      break;                                    case CookieToken.Path:                                      if (!pathSet)                                      {                                          pathSet = true;                                          cookie.Path = _tokenizer.Value;                                      }                                      break;                                    case CookieToken.Port:                                      if (!portSet)                                      {                                          portSet = true;                                          try                                          {                                              cookie.Port = _tokenizer.Value;                                          }                                          catch (CookieException)                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.Version:                                      // this is a new cookie' this token is for the next cookie.                                      _savedCookie = new Cookie();                                      if (int.TryParse(_tokenizer.Value' out int parsed))                                      {                                          _savedCookie.Version = parsed;                                      }                                      return cookie;                                    case CookieToken.Unknown:                                      // this is a new cookie' the token is for the next cookie.                                      _savedCookie = new Cookie();                                      InternalSetNameMethod(_savedCookie' _tokenizer.Name);                                      _savedCookie.Value = _tokenizer.Value;                                      return cookie;                              }                              break;                            case CookieToken.Attribute:                              if (_tokenizer.Token == CookieToken.Port && !portSet)                              {                                  portSet = true;                                  cookie.Port = string.Empty;                              }                              break;                      }
Missing Default,System.Net,CookieParser,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\CookieParser.cs,GetServer,The following switch statement is missing a default case: switch (_tokenizer.Token)                              {                                  case CookieToken.Domain:                                      if (!domainSet)                                      {                                          domainSet = true;                                          cookie.Domain = CheckQuoted(_tokenizer.Value);                                          IsQuotedDomainField.SetValue(cookie' _tokenizer.Quoted);                                      }                                      break;                                    case CookieToken.Path:                                      if (!pathSet)                                      {                                          pathSet = true;                                          cookie.Path = _tokenizer.Value;                                      }                                      break;                                    case CookieToken.Port:                                      if (!portSet)                                      {                                          portSet = true;                                          try                                          {                                              cookie.Port = _tokenizer.Value;                                          }                                          catch (CookieException)                                          {                                              // This cookie will be rejected                                              InternalSetNameMethod(cookie' string.Empty);                                          }                                      }                                      break;                                    case CookieToken.Version:                                      // this is a new cookie' this token is for the next cookie.                                      _savedCookie = new Cookie();                                      if (int.TryParse(_tokenizer.Value' out int parsed))                                      {                                          _savedCookie.Version = parsed;                                      }                                      return cookie;                                    case CookieToken.Unknown:                                      // this is a new cookie' the token is for the next cookie.                                      _savedCookie = new Cookie();                                      InternalSetNameMethod(_savedCookie' _tokenizer.Name);                                      _savedCookie.Value = _tokenizer.Value;                                      return cookie;                              }
Missing Default,System.Net,HttpStatusDescription,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\HttpStatusDescription.cs,Get,The following switch statement is missing a default case: switch (code)              {                  case 100: return "Continue";                  case 101: return "Switching Protocols";                  case 102: return "Processing";                    case 200: return "OK";                  case 201: return "Created";                  case 202: return "Accepted";                  case 203: return "Non-Authoritative Information";                  case 204: return "No Content";                  case 205: return "Reset Content";                  case 206: return "Partial Content";                  case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Found";                  case 303: return "See Other";                  case 304: return "Not Modified";                  case 305: return "Use Proxy";                  case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 409: return "Conflict";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-Uri Too Long";                  case 415: return "Unsupported Media Type";                  case 416: return "Requested Range Not Satisfiable";                  case 417: return "Expectation Failed";                  case 422: return "Unprocessable Entity";                  case 423: return "Locked";                  case 424: return "Failed Dependency";                  case 426: return "Upgrade Required"; // RFC 2817                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "Http Version Not Supported";                  case 507: return "Insufficient Storage";              }
