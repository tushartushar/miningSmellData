Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,Select,Cyclomatic complexity of the method is 8
Complex Method,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,SequenceEqual,Cyclomatic complexity of the method is 9
Complex Method,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,ToDictionary,Cyclomatic complexity of the method is 8
Complex Method,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,ToDictionary,Cyclomatic complexity of the method is 9
Long Parameter List,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,GroupJoinIterator,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,JoinIterator,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,AppendPrependN,The method has 5 parameters. Parameters: source' prepended' appended' prependCount' appendCount
Long Parameter List,System.Linq,GroupedResultEnumerable<TSource;TKey;TElement;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Grouping.cs,GroupedResultEnumerable,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,OrderedEnumerable<TElement;TKey>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\OrderedEnumerable.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' keySelector' comparer' descending' parent
Long Parameter List,System.Linq,EnumerableSorter<TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\OrderedEnumerable.cs,PartialQuickSort,The method has 5 parameters. Parameters: map' left' right' minIdx' maxIdx
Long Parameter List,System.Linq,EnumerableSorter<TElement;TKey>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\OrderedEnumerable.cs,PartialQuickSort,The method has 5 parameters. Parameters: map' left' right' minIdx' maxIdx
Long Statement,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,Union,The length of the statement  "            return first is UnionIterator<TSource> union && AreEqualityComparersEqual(comparer' union._comparer) ? union.Union(second) : new UnionIterator2<TSource>(first' second' comparer); " is 178.
Long Statement,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,Append,The length of the statement  "                    return new AppendPrependN<TSource>(_source' null' new SingleLinkedNode<TSource>(_item).Add(item)' prependCount: 0' appendCount: 2); " is 131.
Long Statement,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,Append,The length of the statement  "                    return new AppendPrependN<TSource>(_source' new SingleLinkedNode<TSource>(_item)' new SingleLinkedNode<TSource>(item)' prependCount: 1' appendCount: 1); " is 152.
Long Statement,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,Prepend,The length of the statement  "                    return new AppendPrependN<TSource>(_source' new SingleLinkedNode<TSource>(item)' new SingleLinkedNode<TSource>(_item)' prependCount: 1' appendCount: 1); " is 152.
Long Statement,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,Prepend,The length of the statement  "                    return new AppendPrependN<TSource>(_source' new SingleLinkedNode<TSource>(_item).Add(item)' null' prependCount: 2' appendCount: 0); " is 131.
Long Statement,System.Linq,GroupedEnumerable<TSource;TKey;TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Grouping.cs,ToArray,The length of the statement  "            IIListProvider<IGrouping<TKey' TElement>> lookup = Lookup<TKey' TElement>.Create(_source' _keySelector' _elementSelector' _comparer); " is 133.
Long Statement,System.Linq,GroupedEnumerable<TSource;TKey;TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Grouping.cs,ToList,The length of the statement  "            IIListProvider<IGrouping<TKey' TElement>> lookup = Lookup<TKey' TElement>.Create(_source' _keySelector' _elementSelector' _comparer); " is 133.
Long Statement,System.Linq,OrderedPartition<TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,Skip,The length of the statement  "            return unchecked((uint)minIndex > (uint)_maxIndexInclusive) ? EmptyPartition<TElement>.Instance : new OrderedPartition<TElement>(_source' minIndex' _maxIndexInclusive); " is 168.
Long Statement,System.Linq,ListPartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,MoveNext,The length of the statement  "                if (unchecked((uint)index <= (uint)(_maxIndexInclusive - _minIndexInclusive) && index < _source.Count - _minIndexInclusive)) " is 124.
Long Statement,System.Linq,ListPartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,Skip,The length of the statement  "                return (uint)minIndex > (uint)_maxIndexInclusive ? EmptyPartition<TSource>.Instance : new ListPartition<TSource>(_source' minIndex' _maxIndexInclusive); " is 152.
Long Statement,System.Linq,ListPartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,Take,The length of the statement  "                return unchecked((uint)maxIndex >= (uint)_maxIndexInclusive) ? this : new ListPartition<TSource>(_source' _minIndexInclusive' maxIndex); " is 136.
Long Statement,System.Linq,ListPartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,TryGetElementAt,The length of the statement  "                if (unchecked((uint)index <= (uint)(_maxIndexInclusive - _minIndexInclusive) && index < _source.Count - _minIndexInclusive)) " is 124.
Long Statement,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,TryGetElementAt,The length of the statement  "                        Debug.Assert(_minIndexInclusive + index >= 0' $"Adding {nameof(index)} caused {nameof(_minIndexInclusive)} to overflow."); " is 122.
Long Statement,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,TryGetLast,The length of the statement  "                        int comparand = HasLimit ? 0 : int.MinValue; // If we don't have an upper bound' have the comparison always return true. " is 120.
Long Statement,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,ToArray,The length of the statement  "                        int comparand = HasLimit ? 0 : int.MinValue; // If we don't have an upper bound' have the comparison always return true. " is 120.
Long Statement,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,ToList,The length of the statement  "                        int comparand = HasLimit ? 0 : int.MinValue; // If we don't have an upper bound' have the comparison always return true. " is 120.
Long Statement,System.Linq,SelectListPartitionIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The length of the statement  "                if (unchecked((uint)index <= (uint)(_maxIndexInclusive - _minIndexInclusive) && index < _source.Count - _minIndexInclusive)) " is 124.
Long Statement,System.Linq,SelectListPartitionIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,Skip,The length of the statement  "                return (uint)minIndex > (uint)_maxIndexInclusive ? EmptyPartition<TResult>.Instance : new SelectListPartitionIterator<TSource' TResult>(_source' _selector' minIndex' _maxIndexInclusive); " is 186.
Long Statement,System.Linq,SelectListPartitionIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,Take,The length of the statement  "                return (uint)maxIndex >= (uint)_maxIndexInclusive ? this : new SelectListPartitionIterator<TSource' TResult>(_source' _selector' _minIndexInclusive' maxIndex); " is 159.
Long Statement,System.Linq,Set<TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Set.cs,Add,The length of the statement  "            Debug.Assert(!_haveRemoved' "This class is optimised for never calling Add after Remove. If your changes need to do so' undo that optimization."); " is 146.
Magic Number,System.Collections.Generic,ArrayBuilder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Collections\Generic\ArrayBuilder.cs,EnsureCapacity,The following statement contains a magic number: int nextCapacity = capacity == 0 ? DefaultCapacity : 2 * capacity;
Magic Number,System.Collections.Generic,EnumerableHelpers,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Collections\Generic\EnumerableHelpers.cs,ToArray,The following statement contains a magic number: if (source is ICollection<T> ic)              {                  int count = ic.Count;                  if (count != 0)                  {                      // Allocate an array of the desired size' then copy the elements into it. Note that this has the same                      // issue regarding concurrency as other existing collections like List<T>. If the collection size                      // concurrently changes between the array allocation and the CopyTo' we could end up either getting an                      // exception from overrunning the array (if the size went up) or we could end up not filling as many                      // items as 'count' suggests (if the size went down).  This is only an issue for concurrent collections                      // that implement ICollection<T>' which as of .NET 4.6 is just ConcurrentDictionary<TKey' TValue>.                      T[] arr = new T[count];                      ic.CopyTo(arr' 0);                      length = count;                      return arr;                  }              }              else              {                  using (var en = source.GetEnumerator())                  {                      if (en.MoveNext())                      {                          const int DefaultCapacity = 4;                          T[] arr = new T[DefaultCapacity];                          arr[0] = en.Current;                          int count = 1;                            while (en.MoveNext())                          {                              if (count == arr.Length)                              {                                  // MaxArrayLength is defined in Array.MaxArrayLength and in gchelpers in CoreCLR.                                  // It represents the maximum number of elements that can be in an array where                                  // the size of the element is greater than one byte; a separate' slightly larger constant'                                  // is used when the size of the element is one.                                  const int MaxArrayLength = 0x7FEFFFFF;                                    // This is the same growth logic as in List<T>:                                  // If the array is currently empty' we make it a default size.  Otherwise' we attempt to                                  // double the size of the array.  Doubling will overflow once the size of the array reaches                                  // 2^30' since doubling to 2^31 is 1 larger than Int32.MaxValue.  In that case' we instead                                  // constrain the length to be MaxArrayLength (this overflow check works because of the                                  // cast to uint).  Because a slightly larger constant is used when T is one byte in size' we                                  // could then end up in a situation where arr.Length is MaxArrayLength or slightly larger' such                                  // that we constrain newLength to be MaxArrayLength but the needed number of elements is actually                                  // larger than that.  For that case' we then ensure that the newLength is large enough to hold                                  // the desired capacity.  This does mean that in the very rare case where we've grown to such a                                  // large size' each new element added after MaxArrayLength will end up doing a resize.                                  int newLength = count << 1;                                  if ((uint)newLength > MaxArrayLength)                                  {                                      newLength = MaxArrayLength <= count ? count + 1 : MaxArrayLength;                                  }                                    Array.Resize(ref arr' newLength);                              }                                arr[count++] = en.Current;                          }                            length = count;                          return arr;                      }                  }              }
Magic Number,System.Collections.Generic,LargeArrayBuilder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Collections\Generic\LargeArrayBuilder.cs,GetBuffer,The following statement contains a magic number: Debug.Assert(index >= 0 && index < _buffers.Count + 2);
Magic Number,System.Collections.Generic,LargeArrayBuilder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Collections\Generic\LargeArrayBuilder.cs,AllocateBuffer,The following statement contains a magic number: if ((uint)_count < (uint)ResizeLimit)              {                  // We haven't passed ResizeLimit. Resize _first' copying over the previous items.                  Debug.Assert(_current == _first && _count == _first.Length);                    int nextCapacity = Math.Min(_count == 0 ? StartingCapacity : _count * 2' _maxCapacity);                    _current = new T[nextCapacity];                  Array.Copy(_first' 0' _current' 0' _count);                  _first = _current;              }              else              {                  Debug.Assert(_maxCapacity > ResizeLimit);                  Debug.Assert(_count == ResizeLimit ^ _current != _first);                    int nextCapacity;                  if (_count == ResizeLimit)                  {                      nextCapacity = ResizeLimit;                  }                  else                  {                      // Example scenario: Let's say _count == 64.                      // Then our buffers look like this: | 8 | 8 | 16 | 32 |                      // As you can see' our count will be just double the last buffer.                      // Now' say _maxCapacity is 100. We will find the right amount to allocate by                      // doing min(64' 100 - 64). The lhs represents double the last buffer'                      // the rhs the limit minus the amount we've already allocated.                        Debug.Assert(_count >= ResizeLimit * 2);                      Debug.Assert(_count == _current.Length * 2);                        _buffers.Add(_current);                      nextCapacity = Math.Min(_count' _maxCapacity - _count);                  }                    _current = new T[nextCapacity];                  _index = 0;              }
Magic Number,System.Collections.Generic,LargeArrayBuilder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Collections\Generic\LargeArrayBuilder.cs,AllocateBuffer,The following statement contains a magic number: if ((uint)_count < (uint)ResizeLimit)              {                  // We haven't passed ResizeLimit. Resize _first' copying over the previous items.                  Debug.Assert(_current == _first && _count == _first.Length);                    int nextCapacity = Math.Min(_count == 0 ? StartingCapacity : _count * 2' _maxCapacity);                    _current = new T[nextCapacity];                  Array.Copy(_first' 0' _current' 0' _count);                  _first = _current;              }              else              {                  Debug.Assert(_maxCapacity > ResizeLimit);                  Debug.Assert(_count == ResizeLimit ^ _current != _first);                    int nextCapacity;                  if (_count == ResizeLimit)                  {                      nextCapacity = ResizeLimit;                  }                  else                  {                      // Example scenario: Let's say _count == 64.                      // Then our buffers look like this: | 8 | 8 | 16 | 32 |                      // As you can see' our count will be just double the last buffer.                      // Now' say _maxCapacity is 100. We will find the right amount to allocate by                      // doing min(64' 100 - 64). The lhs represents double the last buffer'                      // the rhs the limit minus the amount we've already allocated.                        Debug.Assert(_count >= ResizeLimit * 2);                      Debug.Assert(_count == _current.Length * 2);                        _buffers.Add(_current);                      nextCapacity = Math.Min(_count' _maxCapacity - _count);                  }                    _current = new T[nextCapacity];                  _index = 0;              }
Magic Number,System.Collections.Generic,LargeArrayBuilder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Collections\Generic\LargeArrayBuilder.cs,AllocateBuffer,The following statement contains a magic number: if ((uint)_count < (uint)ResizeLimit)              {                  // We haven't passed ResizeLimit. Resize _first' copying over the previous items.                  Debug.Assert(_current == _first && _count == _first.Length);                    int nextCapacity = Math.Min(_count == 0 ? StartingCapacity : _count * 2' _maxCapacity);                    _current = new T[nextCapacity];                  Array.Copy(_first' 0' _current' 0' _count);                  _first = _current;              }              else              {                  Debug.Assert(_maxCapacity > ResizeLimit);                  Debug.Assert(_count == ResizeLimit ^ _current != _first);                    int nextCapacity;                  if (_count == ResizeLimit)                  {                      nextCapacity = ResizeLimit;                  }                  else                  {                      // Example scenario: Let's say _count == 64.                      // Then our buffers look like this: | 8 | 8 | 16 | 32 |                      // As you can see' our count will be just double the last buffer.                      // Now' say _maxCapacity is 100. We will find the right amount to allocate by                      // doing min(64' 100 - 64). The lhs represents double the last buffer'                      // the rhs the limit minus the amount we've already allocated.                        Debug.Assert(_count >= ResizeLimit * 2);                      Debug.Assert(_count == _current.Length * 2);                        _buffers.Add(_current);                      nextCapacity = Math.Min(_count' _maxCapacity - _count);                  }                    _current = new T[nextCapacity];                  _index = 0;              }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _state = 2;                          if (!_appending)                          {                              _current = _item;                              return true;                          }                            goto case 2;                      case 2:                          GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appending)                          {                              _current = _item;                              return true;                          }                            break;                  }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _state = 2;                          if (!_appending)                          {                              _current = _item;                              return true;                          }                            goto case 2;                      case 2:                          GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appending)                          {                              _current = _item;                              return true;                          }                            break;                  }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _state = 2;                          if (!_appending)                          {                              _current = _item;                              return true;                          }                            goto case 2;                      case 2:                          GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appending)                          {                              _current = _item;                              return true;                          }                            break;                  }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _state = 2;                          if (!_appending)                          {                              _current = _item;                              return true;                          }                            goto case 2;                      case 2:                          GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appending)                          {                              _current = _item;                              return true;                          }                            break;                  }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _state = 2;                          if (!_appending)                          {                              _current = _item;                              return true;                          }                            goto case 2;                      case 2:                          GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appending)                          {                              _current = _item;                              return true;                          }                            break;                  }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _state = 2;                          if (!_appending)                          {                              _current = _item;                              return true;                          }                            goto case 2;                      case 2:                          GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appending)                          {                              _current = _item;                              return true;                          }                            break;                  }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,Append,The following statement contains a magic number: if (_appending)                  {                      return new AppendPrependN<TSource>(_source' null' new SingleLinkedNode<TSource>(_item).Add(item)' prependCount: 0' appendCount: 2);                  }                  else                  {                      return new AppendPrependN<TSource>(_source' new SingleLinkedNode<TSource>(_item)' new SingleLinkedNode<TSource>(item)' prependCount: 1' appendCount: 1);                  }
Magic Number,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,Prepend,The following statement contains a magic number: if (_appending)                  {                      return new AppendPrependN<TSource>(_source' new SingleLinkedNode<TSource>(item)' new SingleLinkedNode<TSource>(_item)' prependCount: 1' appendCount: 1);                  }                  else                  {                      return new AppendPrependN<TSource>(_source' new SingleLinkedNode<TSource>(_item).Add(item)' null' prependCount: 2' appendCount: 0);                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,AppendPrependN,The following statement contains a magic number: Debug.Assert(prependCount + appendCount >= 2);
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Magic Number,System.Linq,Concat2Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Concat.cs,Concat,The following statement contains a magic number: return new ConcatNIterator<TSource>(this' next' 2' hasOnlyCollections);
Magic Number,System.Linq,Concat2Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Concat.cs,GetEnumerable,The following statement contains a magic number: Debug.Assert(index >= 0 && index <= 2);
Magic Number,System.Linq,ConcatNIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Concat.cs,ConcatNIterator,The following statement contains a magic number: Debug.Assert(headIndex >= 2);
Magic Number,System.Linq,ConcatNIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Concat.cs,Concat,The following statement contains a magic number: if (_headIndex == int.MaxValue - 2)                  {                      // In the unlikely case of this many concatenations' if we produced a ConcatNIterator                      // with int.MaxValue then state would overflow before it matched its index.                      // So we use the naïve approach of just having a left and right sequence.                      return new Concat2Iterator<TSource>(this' next);                  }
Magic Number,System.Linq,ConcatIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Concat.cs,MoveNext,The following statement contains a magic number: if (_state == 1)                  {                      _enumerator = GetEnumerable(0).GetEnumerator();                      _state = 2;                  }
Magic Number,System.Linq,DefaultIfEmptyIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\DefaultIfEmpty.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          if (_enumerator.MoveNext())                          {                              _current = _enumerator.Current;                              _state = 2;                          }                          else                          {                              _current = _default;                              _state = -1;                          }                            return true;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _enumerator.Current;                              return true;                          }                            break;                  }
Magic Number,System.Linq,DefaultIfEmptyIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\DefaultIfEmpty.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          if (_enumerator.MoveNext())                          {                              _current = _enumerator.Current;                              _state = 2;                          }                          else                          {                              _current = _default;                              _state = -1;                          }                            return true;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _enumerator.Current;                              return true;                          }                            break;                  }
Magic Number,System.Linq,DistinctIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Distinct.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          if (!_enumerator.MoveNext())                          {                              Dispose();                              return false;                          }                            TSource element = _enumerator.Current;                          _set = new Set<TSource>(_comparer);                          _set.Add(element);                          _current = element;                          _state = 2;                          return true;                      case 2:                          while (_enumerator.MoveNext())                          {                              element = _enumerator.Current;                              if (_set.Add(element))                              {                                  _current = element;                                  return true;                              }                          }                            break;                  }
Magic Number,System.Linq,DistinctIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Distinct.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          if (!_enumerator.MoveNext())                          {                              Dispose();                              return false;                          }                            TSource element = _enumerator.Current;                          _set = new Set<TSource>(_comparer);                          _set.Add(element);                          _current = element;                          _state = 2;                          return true;                      case 2:                          while (_enumerator.MoveNext())                          {                              element = _enumerator.Current;                              if (_set.Add(element))                              {                                  _current = element;                                  return true;                              }                          }                            break;                  }
Magic Number,System.Linq,Grouping<TKey;TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Grouping.cs,Add,The following statement contains a magic number: if (_elements.Length == _count)              {                  Array.Resize(ref _elements' checked(_count * 2));              }
Magic Number,System.Linq,Lookup<TKey;TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Lookup.cs,Lookup,The following statement contains a magic number: _groupings = new Grouping<TKey' TElement>[7];
Magic Number,System.Linq,Lookup<TKey;TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Lookup.cs,Resize,The following statement contains a magic number: int newSize = checked((_count * 2) + 1);
Magic Number,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,MoveNext,The following statement contains a magic number: int taken = _state - 3;
Magic Number,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,MoveNext,The following statement contains a magic number: if (taken < -2)                  {                      Dispose();                      return false;                  }
Magic Number,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (!SkipBeforeFirst(_enumerator))                          {                              // Reached the end before we finished skipping.                              break;                          }                            _state = 3;                          goto default;                      default:                          if ((!HasLimit || taken < Limit) && _enumerator.MoveNext())                          {                              if (HasLimit)                              {                                  // If we are taking an unknown number of elements' it's important not to increment _state.                                  // _state - 3 may eventually end up overflowing & we'll hit the Dispose branch even though                                  // we haven't finished enumerating.                                  _state++;                              }                              _current = _enumerator.Current;                              return true;                          }                            break;                  }
Magic Number,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (!SkipBeforeFirst(_enumerator))                          {                              // Reached the end before we finished skipping.                              break;                          }                            _state = 3;                          goto default;                      default:                          if ((!HasLimit || taken < Limit) && _enumerator.MoveNext())                          {                              if (HasLimit)                              {                                  // If we are taking an unknown number of elements' it's important not to increment _state.                                  // _state - 3 may eventually end up overflowing & we'll hit the Dispose branch even though                                  // we haven't finished enumerating.                                  _state++;                              }                              _current = _enumerator.Current;                              return true;                          }                            break;                  }
Magic Number,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (!SkipBeforeFirst(_enumerator))                          {                              // Reached the end before we finished skipping.                              break;                          }                            _state = 3;                          goto default;                      default:                          if ((!HasLimit || taken < Limit) && _enumerator.MoveNext())                          {                              if (HasLimit)                              {                                  // If we are taking an unknown number of elements' it's important not to increment _state.                                  // _state - 3 may eventually end up overflowing & we'll hit the Dispose branch even though                                  // we haven't finished enumerating.                                  _state++;                              }                              _current = _enumerator.Current;                              return true;                          }                            break;                  }
Magic Number,System.Linq,EnumerablePartition<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Partition.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (!SkipBeforeFirst(_enumerator))                          {                              // Reached the end before we finished skipping.                              break;                          }                            _state = 3;                          goto default;                      default:                          if ((!HasLimit || taken < Limit) && _enumerator.MoveNext())                          {                              if (HasLimit)                              {                                  // If we are taking an unknown number of elements' it's important not to increment _state.                                  // _state - 3 may eventually end up overflowing & we'll hit the Dispose branch even though                                  // we haven't finished enumerating.                                  _state++;                              }                              _current = _enumerator.Current;                              return true;                          }                            break;                  }
Magic Number,System.Linq,RangeIterator,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Range.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          Debug.Assert(_start != _end);                          _current = _start;                          _state = 2;                          return true;                      case 2:                          if (unchecked(++_current) == _end)                          {                              break;                          }                            return true;                  }
Magic Number,System.Linq,RangeIterator,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Range.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          Debug.Assert(_start != _end);                          _current = _start;                          _state = 2;                          return true;                      case 2:                          if (unchecked(++_current) == _end)                          {                              break;                          }                            return true;                  }
Magic Number,System.Linq,ReverseIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Reverse.cs,MoveNext,The following statement contains a magic number: if (_state - 2 <= -2)                  {                      // Either someone called a method and cast us to IEnumerable without calling GetEnumerator'                      // or we were already disposed. In either case' iteration has ended' so return false.                      // A comparison is made against -2 instead of _state <= 0 because we want to handle cases where                      // the source is really large and adding the bias causes _state to overflow.                      Debug.Assert(_state == -1 || _state == 0);                      Dispose();                      return false;                  }
Magic Number,System.Linq,ReverseIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Reverse.cs,MoveNext,The following statement contains a magic number: if (_state - 2 <= -2)                  {                      // Either someone called a method and cast us to IEnumerable without calling GetEnumerator'                      // or we were already disposed. In either case' iteration has ended' so return false.                      // A comparison is made against -2 instead of _state <= 0 because we want to handle cases where                      // the source is really large and adding the bias causes _state to overflow.                      Debug.Assert(_state == -1 || _state == 0);                      Dispose();                      return false;                  }
Magic Number,System.Linq,ReverseIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Reverse.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Iteration has just started. Capture the source into an array and set _state to 2 + the count.                          // Having an extra field for the count would be more readable' but we save it into _state with a                          // bias instead to minimize field size of the iterator.                          Buffer<TSource> buffer = new Buffer<TSource>(_source);                          _buffer = buffer._items;                          _state = buffer._count + 2;                          goto default;                      default:                          // At this stage' _state starts from 2 + the count. _state - 3 represents the current index into the                          // buffer. It is continuously decremented until it hits 2' which means that we've run out of items to                          // yield and should return false.                          int index = _state - 3;                          if (index != -1)                          {                              _current = _buffer[index];                              --_state;                              return true;                          }                            break;                  }
Magic Number,System.Linq,ReverseIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Reverse.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Iteration has just started. Capture the source into an array and set _state to 2 + the count.                          // Having an extra field for the count would be more readable' but we save it into _state with a                          // bias instead to minimize field size of the iterator.                          Buffer<TSource> buffer = new Buffer<TSource>(_source);                          _buffer = buffer._items;                          _state = buffer._count + 2;                          goto default;                      default:                          // At this stage' _state starts from 2 + the count. _state - 3 represents the current index into the                          // buffer. It is continuously decremented until it hits 2' which means that we've run out of items to                          // yield and should return false.                          int index = _state - 3;                          if (index != -1)                          {                              _current = _buffer[index];                              --_state;                              return true;                          }                            break;                  }
Magic Number,System.Linq,SelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectIListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectIListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectIListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectIPartitionIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectIPartitionIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectIPartitionIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Magic Number,System.Linq,Set<TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Set.cs,Set,The following statement contains a magic number: _buckets = new int[7];
Magic Number,System.Linq,Set<TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Set.cs,Set,The following statement contains a magic number: _slots = new Slot[7];
Magic Number,System.Linq,Set<TElement>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Set.cs,Resize,The following statement contains a magic number: int newSize = checked((_count * 2) + 1);
Magic Number,System.Linq,UnionIterator2<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Union.cs,GetEnumerable,The following statement contains a magic number: Debug.Assert(index >= 0 && index <= 2);
Magic Number,System.Linq,UnionIterator2<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Union.cs,Union,The following statement contains a magic number: return new UnionIteratorN<TSource>(sources' 2' _comparer);
Magic Number,System.Linq,UnionIteratorN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Union.cs,UnionIteratorN,The following statement contains a magic number: Debug.Assert(headIndex >= 2);
Magic Number,System.Linq,UnionIteratorN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Union.cs,Union,The following statement contains a magic number: if (_headIndex == int.MaxValue - 2)                  {                      // In the unlikely case of this many unions' if we produced a UnionIteratorN                      // with int.MaxValue then state would overflow before it matched it's index.                      // So we use the naïve approach of just having a left and right sequence.                      return new UnionIterator2<TSource>(this' next' _comparer);                  }
Magic Number,System.Linq,WhereEnumerableIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereEnumerableIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereEnumerableIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereListIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereListIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereListIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereSelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereSelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereSelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereSelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereSelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
Magic Number,System.Linq,WhereSelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,Single,The following switch statement is missing a default case: switch (list.Count)                  {                      case 0:                          throw Error.NoElements();                      case 1:                          return list[0];                  }
Missing Default,System.Linq,Enumerable,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Aggregate.cs,SingleOrDefault,The following switch statement is missing a default case: switch (list.Count)                  {                      case 0:                          return default(TSource);                      case 1:                          return list[0];                  }
Missing Default,System.Linq,AppendPrepend1Iterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _state = 2;                          if (!_appending)                          {                              _current = _item;                              return true;                          }                            goto case 2;                      case 2:                          GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appending)                          {                              _current = _item;                              return true;                          }                            break;                  }
Missing Default,System.Linq,AppendPrependN<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\AppendPrepend.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _node = _prepended;                          _state = 2;                          goto case 2;                      case 2:                          if (_node != null)                          {                              _current = _node.Item;                              _node = _node.Linked;                              return true;                          }                            GetSourceEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          if (LoadFromEnumerator())                          {                              return true;                          }                            if (_appended == null)                          {                              return false;                          }                            _enumerator = _appended.GetEnumerator(_appendCount);                          _state = 4;                          goto case 4;                      case 4:                          return LoadFromEnumerator();                  }
Missing Default,System.Linq,DefaultIfEmptyIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\DefaultIfEmpty.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          if (_enumerator.MoveNext())                          {                              _current = _enumerator.Current;                              _state = 2;                          }                          else                          {                              _current = _default;                              _state = -1;                          }                            return true;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _enumerator.Current;                              return true;                          }                            break;                  }
Missing Default,System.Linq,DistinctIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Distinct.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          if (!_enumerator.MoveNext())                          {                              Dispose();                              return false;                          }                            TSource element = _enumerator.Current;                          _set = new Set<TSource>(_comparer);                          _set.Add(element);                          _current = element;                          _state = 2;                          return true;                      case 2:                          while (_enumerator.MoveNext())                          {                              element = _enumerator.Current;                              if (_set.Add(element))                              {                                  _current = element;                                  return true;                              }                          }                            break;                  }
Missing Default,System.Linq,RangeIterator,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Range.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          Debug.Assert(_start != _end);                          _current = _start;                          _state = 2;                          return true;                      case 2:                          if (unchecked(++_current) == _end)                          {                              break;                          }                            return true;                  }
Missing Default,System.Linq,SelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,SelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,SelectIListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,SelectIPartitionIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Select.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,SelectManySingleSelectorIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\SelectMany.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          // Retrieve the source enumerator.                          _sourceEnumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          // Take the next element from the source enumerator.                          if (!_sourceEnumerator.MoveNext())                          {                              break;                          }                            TSource element = _sourceEnumerator.Current;                            // Project it into a sub-collection and get its enumerator.                          _subEnumerator = _selector(element).GetEnumerator();                          _state = 3;                          goto case 3;                      case 3:                          // Take the next element from the sub-collection and yield.                          if (!_subEnumerator.MoveNext())                          {                              _subEnumerator.Dispose();                              _subEnumerator = null;                              _state = 2;                              goto case 2;                          }                            _current = _subEnumerator.Current;                          return true;                  }
Missing Default,System.Linq,WhereEnumerableIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,WhereListIterator<TSource>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,WhereSelectListIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
Missing Default,System.Linq,WhereSelectEnumerableIterator<TSource;TResult>,C:\selectedRepos\dotnet_corefx\src\System.Linq\src\System\Linq\Where.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                      case 2:                          while (_enumerator.MoveNext())                          {                              TSource item = _enumerator.Current;                              if (_predicate(item))                              {                                  _current = _selector(item);                                  return true;                              }                          }                            Dispose();                          break;                  }
