Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The method has 113 lines of code.
Long Method,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The method has 104 lines of code.
Long Method,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The method has 146 lines of code.
Long Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,InspectAce,The method has 104 lines of code.
Long Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MergeAces,The method has 102 lines of code.
Long Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,CanonicalCheck,The method has 128 lines of code.
Long Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The method has 383 lines of code.
Long Method,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,GetRules,The method has 112 lines of code.
Long Method,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The method has 105 lines of code.
Long Method,System.Security.AccessControl,NativeObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\NativeObjectSecurity.cs,Persist,The method has 131 lines of code.
Long Method,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,ToggleState,The method has 113 lines of code.
Long Method,System.Security.AccessControl,TlsContents,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,TlsContents,The method has 113 lines of code.
Long Method,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,GetBinaryForm,The method has 116 lines of code.
Long Method,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,RawSecurityDescriptor,The method has 119 lines of code.
Long Method,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,GetSecurityInfo,The method has 115 lines of code.
Long Method,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,SetSecurityInfo,The method has 112 lines of code.
Complex Method,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,Cyclomatic complexity of the method is 13
Complex Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,QuickSort,Cyclomatic complexity of the method is 9
Complex Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,InspectAce,Cyclomatic complexity of the method is 9
Complex Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MergeAces,Cyclomatic complexity of the method is 13
Complex Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddQualifiedAce,Cyclomatic complexity of the method is 10
Complex Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetQualifiedAce,Cyclomatic complexity of the method is 11
Complex Method,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAcesSpecific,Cyclomatic complexity of the method is 14
Complex Method,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,GetRules,Cyclomatic complexity of the method is 12
Complex Method,System.Security.AccessControl,NativeObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\NativeObjectSecurity.cs,Persist,Cyclomatic complexity of the method is 14
Complex Method,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,GetBinaryForm,Cyclomatic complexity of the method is 9
Complex Method,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,RawSecurityDescriptor,Cyclomatic complexity of the method is 11
Complex Method,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,GetSecurityInfo,Cyclomatic complexity of the method is 9
Complex Method,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,SetSecurityInfo,Cyclomatic complexity of the method is 9
Long Parameter List,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The method has 5 parameters. Parameters: binaryForm' offset' accessMask' compoundAceType' sid
Long Parameter List,System.Security.AccessControl,QualifiedAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,QualifiedAce,The method has 5 parameters. Parameters: type' flags' accessMask' sid' opaque
Long Parameter List,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CommonAce,The method has 6 parameters. Parameters: flags' qualifier' accessMask' sid' isCallback' opaque
Long Parameter List,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The method has 7 parameters. Parameters: binaryForm' offset' qualifier' accessMask' sid' isCallback' opaque
Long Parameter List,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ObjectAce,The method has 9 parameters. Parameters: aceFlags' qualifier' accessMask' sid' flags' type' inheritedType' isCallback' opaque
Long Parameter List,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The method has 10 parameters. Parameters: binaryForm' offset' qualifier' accessMask' sid' objectFlags' objectAceType' inheritedObjectAceType' isCallback' opaque
Long Parameter List,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,VerifyHeader,The method has 5 parameters. Parameters: binaryForm' offset' revision' count' length
Long Parameter List,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveInheritanceBits,The method has 5 parameters. Parameters: existing' remove' isDS' result' total
Long Parameter List,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,GetObjectTypesForSplit,The method has 6 parameters. Parameters: originalAce' accessMask' aceFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,CommonAcl,The method has 5 parameters. Parameters: isContainer' isDS' rawAcl' trusted' isDacl
Long Parameter List,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddQualifiedAce,The method has 7 parameters. Parameters: sid' qualifier' accessMask' flags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetQualifiedAce,The method has 7 parameters. Parameters: sid' qualifier' accessMask' flags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The method has 8 parameters. Parameters: sid' qualifier' accessMask' flags' saclSemantics' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAcesSpecific,The method has 7 parameters. Parameters: sid' qualifier' accessMask' flags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAudit,The method has 5 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAudit,The method has 5 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAudit,The method has 5 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAuditSpecific,The method has 5 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAudit,The method has 8 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAudit,The method has 8 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAudit,The method has 8 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAuditSpecific,The method has 8 parameters. Parameters: auditFlags' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAccess,The method has 5 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAccess,The method has 5 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccess,The method has 5 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccessSpecific,The method has 5 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAccess,The method has 8 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAccess,The method has 8 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccess,The method has 8 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccessSpecific,The method has 8 parameters. Parameters: accessType' sid' accessMask' inheritanceFlags' propagationFlags' objectFlags' objectType' inheritedObjectType
Long Parameter List,System.Security.AccessControl,NativeObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\NativeObjectSecurity.cs,NativeObjectSecurity,The method has 6 parameters. Parameters: isContainer' resourceType' name' includeSections' exceptionFromErrorCode' exceptionContext
Long Parameter List,System.Security.AccessControl,NativeObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\NativeObjectSecurity.cs,NativeObjectSecurity,The method has 6 parameters. Parameters: isContainer' resourceType' handle' includeSections' exceptionFromErrorCode' exceptionContext
Long Parameter List,System.Security.AccessControl,NativeObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\NativeObjectSecurity.cs,CreateInternal,The method has 8 parameters. Parameters: resourceType' isContainer' name' handle' includeSections' createByName' exceptionFromErrorCode' exceptionContext
Long Parameter List,System.Security.AccessControl,ObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurity.cs,AccessRuleFactory,The method has 6 parameters. Parameters: identityReference' accessMask' isInherited' inheritanceFlags' propagationFlags' type
Long Parameter List,System.Security.AccessControl,ObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurity.cs,AuditRuleFactory,The method has 6 parameters. Parameters: identityReference' accessMask' isInherited' inheritanceFlags' propagationFlags' flags
Long Parameter List,System.Security.AccessControl,AccessRule<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AccessRule,The method has 5 parameters. Parameters: identity' rights' inheritanceFlags' propagationFlags' type
Long Parameter List,System.Security.AccessControl,AccessRule<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AccessRule,The method has 5 parameters. Parameters: identity' rights' inheritanceFlags' propagationFlags' type
Long Parameter List,System.Security.AccessControl,AccessRule<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AccessRule,The method has 6 parameters. Parameters: identity' accessMask' isInherited' inheritanceFlags' propagationFlags' type
Long Parameter List,System.Security.AccessControl,AuditRule<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AuditRule,The method has 5 parameters. Parameters: identity' rights' inheritanceFlags' propagationFlags' flags
Long Parameter List,System.Security.AccessControl,AuditRule<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AuditRule,The method has 5 parameters. Parameters: identity' rights' inheritanceFlags' propagationFlags' flags
Long Parameter List,System.Security.AccessControl,AuditRule<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AuditRule,The method has 6 parameters. Parameters: identity' accessMask' isInherited' inheritanceFlags' propagationFlags' flags
Long Parameter List,System.Security.AccessControl,ObjectSecurity<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,ObjectSecurity,The method has 6 parameters. Parameters: isContainer' resourceType' name' includeSections' exceptionFromErrorCode' exceptionContext
Long Parameter List,System.Security.AccessControl,ObjectSecurity<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,ObjectSecurity,The method has 6 parameters. Parameters: isContainer' resourceType' safeHandle' includeSections' exceptionFromErrorCode' exceptionContext
Long Parameter List,System.Security.AccessControl,ObjectSecurity<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AccessRuleFactory,The method has 6 parameters. Parameters: identityReference' accessMask' isInherited' inheritanceFlags' propagationFlags' type
Long Parameter List,System.Security.AccessControl,ObjectSecurity<T>,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurityT.cs,AuditRuleFactory,The method has 6 parameters. Parameters: identityReference' accessMask' isInherited' inheritanceFlags' propagationFlags' flags
Long Parameter List,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,CreateFromParts,The method has 5 parameters. Parameters: flags' owner' group' systemAcl' discretionaryAcl
Long Parameter List,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,RawSecurityDescriptor,The method has 5 parameters. Parameters: flags' owner' group' systemAcl' discretionaryAcl
Long Parameter List,System.Security.AccessControl,CommonSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,CreateFromParts,The method has 7 parameters. Parameters: isContainer' isDS' flags' owner' group' systemAcl' discretionaryAcl
Long Parameter List,System.Security.AccessControl,CommonSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,CommonSecurityDescriptor,The method has 7 parameters. Parameters: isContainer' isDS' flags' owner' group' systemAcl' discretionaryAcl
Long Parameter List,System.Security.AccessControl,CommonSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,CommonSecurityDescriptor,The method has 7 parameters. Parameters: isContainer' isDS' flags' owner' group' systemAcl' discretionaryAcl
Long Parameter List,System.Security.AccessControl,AuthorizationRule,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Rules.cs,AuthorizationRule,The method has 5 parameters. Parameters: identity' accessMask' isInherited' inheritanceFlags' propagationFlags
Long Parameter List,System.Security.AccessControl,AccessRule,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Rules.cs,AccessRule,The method has 6 parameters. Parameters: identity' accessMask' isInherited' inheritanceFlags' propagationFlags' type
Long Parameter List,System.Security.AccessControl,ObjectAccessRule,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Rules.cs,ObjectAccessRule,The method has 8 parameters. Parameters: identity' accessMask' isInherited' inheritanceFlags' propagationFlags' objectType' inheritedObjectType' type
Long Parameter List,System.Security.AccessControl,AuditRule,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Rules.cs,AuditRule,The method has 6 parameters. Parameters: identity' accessMask' isInherited' inheritanceFlags' propagationFlags' auditFlags
Long Parameter List,System.Security.AccessControl,ObjectAuditRule,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Rules.cs,ObjectAuditRule,The method has 8 parameters. Parameters: identity' accessMask' isInherited' inheritanceFlags' propagationFlags' objectType' inheritedObjectType' auditFlags
Long Parameter List,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,GetSecurityInfo,The method has 5 parameters. Parameters: resourceType' name' handle' accessControlSections' resultSd
Long Parameter List,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,SetSecurityInfo,The method has 8 parameters. Parameters: type' name' handle' securityInformation' owner' group' sacl' dacl
Long Identifier,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,GetAccessMaskForRemoval,The length of the parameter commonAccessBitsWithObjectTypeExist is 35.
Long Identifier,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,,The length of the parameter TrustedCredentialManagerAccess is 30.
Long Statement,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The length of the statement  "                if (true == CommonAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out isCallback' out opaque)) " is 126.
Long Statement,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The length of the statement  "                if (true == ObjectAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out objectFlags' out objectAceType' out inheritedObjectAceType' out isCallback' out opaque)) " is 190.
Long Statement,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The length of the statement  "                    result = new ObjectAce(flags' qualifier' accessMask' sid' objectFlags' objectAceType' inheritedObjectAceType' isCallback' opaque); " is 130.
Long Statement,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The length of the statement  "            if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength)) " is 120.
Long Statement,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The length of the statement  "                || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength))) " is 214.
Long Statement,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,InheritedObjectTypesMatch,The length of the statement  "            if ((ObjectAceFlags & ObjectAceFlags.InheritedObjectAceTypePresent) != (objectFlags & ObjectAceFlags.InheritedObjectAceTypePresent)) " is 132.
Long Statement,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The length of the statement  "            if (binaryForm.Length - offset < HeaderLength + AccessMaskLength + ObjectFlagsLength + SecurityIdentifier.MinBinaryLength) " is 122.
Long Statement,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,MaxOpaqueLength,The length of the statement  "            return ushort.MaxValue - HeaderLength - AccessMaskLength - ObjectFlagsLength - 2 * GuidLength - SecurityIdentifier.MaxBinaryLength; " is 131.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AccessMasksAreMergeable,The length of the statement  "            if ((( ace.AccessMask & newAce.AccessMask & ObjectAce.AccessMaskWithObjectType ) ==  ( newAce.AccessMask & ObjectAce.AccessMaskWithObjectType )) && " is 147.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AceFlagsAreMergeable,The length of the statement  "                Debug.Assert(( ace.AccessMask & newAce.AccessMask) ==  newAce.AccessMask' "AceFlagsAreMergeable:: AccessMask of existing ace does not contain all access bits of new ace."); " is 172.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MergeAces,The length of the statement  "                    // for object aces we need to match the inherited object types (for inheritance flags equality) and object type (for access mask equality) as well " is 146.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                        if (((( ace.AceFlags & AceFlags.ContainerInherit ) == 0 ) && (( flags & AceFlags.ContainerInherit ) != 0 )  && (( flags & AceFlags.InheritOnly ) != 0 )) || " is 155.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                             ((( flags & AceFlags.ContainerInherit ) == 0 ) && (( ace.AceFlags & AceFlags.ContainerInherit ) != 0 )  && (( ace.AceFlags & AceFlags.InheritOnly ) != 0))) " is 155.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                        if ((( originalFlags & AceFlags.ContainerInherit ) != 0 ) && (( originalFlags & AceFlags.InheritOnly ) != 0 ) && (( flags & AceFlags.ContainerInherit ) == 0 ))  " is 159.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                    //                                                     inheritance for a specific child type when it exists for all child types " is 127.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                        GetObjectTypesForSplit( ace as ObjectAce' ps_AccessMask /* access mask for this split */' ps_AceFlags /* flags remain the same */' out ps_ObjectAceFlags' out ps_ObjectAceType' out ps_InheritedObjectAceType ); " is 208.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                            GetObjectTypesForSplit( ace as ObjectAce' as_AccessMask /* access mask for this split */' as_AceFlags /* flags remain the same for inheritance */' out as_ObjectAceFlags' out as_ObjectAceType' out as_InheritedObjectAceType ); " is 224.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                                GetObjectTypesForSplit( ace as ObjectAce' ms_AccessMask /* access mask for this split */' mergeResultFlags /* flags for this split */' out ms_ObjectAceFlags' out ms_ObjectAceType' out ms_InheritedObjectAceType ); " is 212.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                                newObjectAce = new ObjectAce( ps_AceFlags' qualifier' ps_AccessMask' ace.SecurityIdentifier' ps_ObjectAceFlags' ps_ObjectAceType' ps_InheritedObjectAceType' false' null ); " is 171.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                                newAce = new ObjectAce( as_AceFlags' qualifier' as_AccessMask' ace.SecurityIdentifier' as_ObjectAceFlags' as_ObjectAceType' as_InheritedObjectAceType' false' null ); " is 165.
Long Statement,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The length of the statement  "                                newAce = new ObjectAce( mergeResultFlags' qualifier' ms_AccessMask' ace.SecurityIdentifier' ms_ObjectAceFlags' ms_ObjectAceType' ms_InheritedObjectAceType' false' null ); " is 170.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAudit,The length of the statement  "            AddQualifiedAce( sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags( auditFlags ) | GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 235.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAudit,The length of the statement  "            SetQualifiedAce( sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags( auditFlags ) | GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 235.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAudit,The length of the statement  "            return RemoveQualifiedAces(sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags( auditFlags ) | GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' true' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 251.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAuditSpecific,The length of the statement  "            RemoveQualifiedAcesSpecific( sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags( auditFlags ) | GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 247.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAudit,The length of the statement  "            AddAudit(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 155.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAudit,The length of the statement  "            AddQualifiedAce(sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags(auditFlags) | GenericAce.AceFlagsFromInheritanceFlags(inheritanceFlags' propagationFlags)' objectFlags' objectType' inheritedObjectType); " is 230.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAudit,The length of the statement  "            SetAudit(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 155.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAudit,The length of the statement  "            SetQualifiedAce(sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags(auditFlags) | GenericAce.AceFlagsFromInheritanceFlags(inheritanceFlags' propagationFlags)' objectFlags' objectType' inheritedObjectType); " is 230.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAudit,The length of the statement  "            return RemoveAudit(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 165.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAudit,The length of the statement  "            return RemoveQualifiedAces(sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags(auditFlags) | GenericAce.AceFlagsFromInheritanceFlags(inheritanceFlags' propagationFlags)' true' objectFlags' objectType' inheritedObjectType); " is 247.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAuditSpecific,The length of the statement  "            RemoveAuditSpecific(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 166.
Long Statement,System.Security.AccessControl,SystemAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAuditSpecific,The length of the statement  "            RemoveQualifiedAcesSpecific(sid' AceQualifier.SystemAudit' accessMask' GenericAce.AceFlagsFromAuditFlags(auditFlags) | GenericAce.AceFlagsFromInheritanceFlags(inheritanceFlags' propagationFlags)' objectFlags' objectType' inheritedObjectType); " is 242.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAccess,The length of the statement  "            AddQualifiedAce( sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 255.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAccess,The length of the statement  "            SetQualifiedAce( sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 255.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccess,The length of the statement  "            return RemoveQualifiedAces( sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' false' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 273.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccessSpecific,The length of the statement  "            RemoveQualifiedAcesSpecific(sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' ObjectAceFlags.None' Guid.Empty' Guid.Empty ); " is 266.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAccess,The length of the statement  "            AddAccess(accessType' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 151.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,AddAccess,The length of the statement  "            AddQualifiedAce( sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' objectFlags' objectType' inheritedObjectType ); " is 256.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAccess,The length of the statement  "            SetAccess(accessType' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 151.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetAccess,The length of the statement  "            SetQualifiedAce( sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' objectFlags' objectType' inheritedObjectType); " is 255.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccess,The length of the statement  "            return RemoveAccess(accessType' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 161.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccess,The length of the statement  "            return RemoveQualifiedAces(sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' false' objectFlags' objectType' inheritedObjectType ); " is 273.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccessSpecific,The length of the statement  "            RemoveAccessSpecific(accessType' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags' rule.ObjectFlags' rule.ObjectType' rule.InheritedObjectType); " is 162.
Long Statement,System.Security.AccessControl,DiscretionaryAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveAccessSpecific,The length of the statement  "            RemoveQualifiedAcesSpecific( sid' accessType == AccessControlType.Allow ? AceQualifier.AccessAllowed : AceQualifier.AccessDenied' accessMask' GenericAce.AceFlagsFromInheritanceFlags( inheritanceFlags' propagationFlags )' objectFlags' objectType' inheritedObjectType ); " is 268.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.AddAccess(AccessControlType.Allow' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 140.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.SetAccess(AccessControlType.Allow' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 140.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.RemoveAccess(AccessControlType.Deny' sid' -1' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' 0); " is 154.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.SetAccess(AccessControlType.Allow' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 140.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            result = _securityDescriptor.DiscretionaryAcl.RemoveAccess(AccessControlType.Allow' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 152.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            result = _securityDescriptor.DiscretionaryAcl.RemoveAccess(AccessControlType.Allow' sid' -1' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' 0); " is 164.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType.Allow' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 151.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.AddAccess(AccessControlType.Deny' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 139.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.SetAccess(AccessControlType.Deny' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 139.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.RemoveAccess(AccessControlType.Allow' sid' -1' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' 0); " is 155.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.SetAccess(AccessControlType.Deny' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 139.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            result = _securityDescriptor.DiscretionaryAcl.RemoveAccess(AccessControlType.Deny' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 151.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            result = _securityDescriptor.DiscretionaryAcl.RemoveAccess(AccessControlType.Deny' sid' -1' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' 0); " is 163.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAccess,The length of the statement  "                            _securityDescriptor.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType.Deny' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 150.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAudit,The length of the statement  "                        _securityDescriptor.SystemAcl.AddAudit(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 124.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAudit,The length of the statement  "                        _securityDescriptor.SystemAcl.SetAudit(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 124.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAudit,The length of the statement  "                        _securityDescriptor.SystemAcl.SetAudit(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 124.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAudit,The length of the statement  "                        result = _securityDescriptor.SystemAcl.RemoveAudit(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 136.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAudit,The length of the statement  "                        result = _securityDescriptor.SystemAcl.RemoveAudit(AuditFlags.Failure | AuditFlags.Success' sid' -1' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' 0); " is 172.
Long Statement,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,ModifyAudit,The length of the statement  "                        _securityDescriptor.SystemAcl.RemoveAuditSpecific(rule.AuditFlags' sid' rule.AccessMask' rule.InheritanceFlags' rule.PropagationFlags); " is 135.
Long Statement,System.Security.AccessControl,NativeObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\NativeObjectSecurity.cs,CreateInternal,The length of the statement  "                        Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "Win32GetSecurityInfo() failed with unexpected error code {0}"' error)); " is 136.
Long Statement,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,LuidFromPrivilege,The length of the statement  "                            System.Diagnostics.Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "LookupPrivilegeValue() failed with unrecognized error code {0}"' error)); " is 157.
Long Statement,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,ToggleState,The length of the statement  "                    luidAndAttrs.Attributes = enable ? Interop.Advapi32.SEPrivileges.SE_PRIVILEGE_ENABLED : Interop.Advapi32.SEPrivileges.SE_PRIVILEGE_DISABLED; " is 140.
Long Statement,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,ToggleState,The length of the statement  "                        this.initialState = ((previousState.Privileges[0].Attributes & Interop.Advapi32.SEPrivileges.SE_PRIVILEGE_ENABLED) != 0); " is 121.
Long Statement,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,ToggleState,The length of the statement  "                System.Diagnostics.Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "AdjustTokenPrivileges() failed with unrecognized error code {0}"' error)); " is 158.
Long Statement,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,Revert,The length of the statement  "                        luidAndAttrs.Attributes = (this.initialState ? Interop.Advapi32.SEPrivileges.SE_PRIVILEGE_ENABLED : Interop.Advapi32.SEPrivileges.SE_PRIVILEGE_DISABLED); " is 153.
Long Statement,System.Security.AccessControl,Privilege,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Privilege.cs,Revert,The length of the statement  "                System.Diagnostics.Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "AdjustTokenPrivileges() failed with unrecognized error code {0}"' error)); " is 158.
Long Statement,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,GetBinaryForm,The length of the statement  "                 ((ControlFlags & ControlFlags.RMControlValid) != 0)) ? ((this as RawSecurityDescriptor).ResourceManagerControl) : (byte)0; " is 122.
Long Statement,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,BinaryFormFromSddlForm,The length of the statement  "                        Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "Unexpected error out of Win32.ConvertStringSdToSd: {0}"' error)); " is 130.
Long Statement,System.Security.AccessControl,CommonSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,CreateFromParts,The length of the statement  "            _rawSd = new RawSecurityDescriptor(actualFlags' owner' group' systemAcl == null ? null : systemAcl.RawAcl' discretionaryAcl.RawAcl); " is 132.
Long Statement,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,ConvertSdToSddl,The length of the statement  "            if (!Interop.Advapi32.ConvertSdToStringSd(binaryForm' (uint)requestedRevision' (uint)si' out ByteArray' ref ByteArraySize)) " is 123.
Long Statement,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,GetSecurityInfo,The length of the statement  "                    errorCode = (int)Interop.Advapi32.GetSecurityInfoByName(name' (uint)resourceType' (uint)SecurityInfos' out SidOwner' out SidGroup' out Dacl' out Sacl' out ByteArray); " is 166.
Long Statement,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,GetSecurityInfo,The length of the statement  "                        errorCode = (int)Interop.Advapi32.GetSecurityInfoByHandle(handle' (uint)resourceType' (uint)SecurityInfos' out SidOwner' out SidGroup' out Dacl' out Sacl' out ByteArray); " is 170.
Long Statement,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,SetSecurityInfo,The length of the statement  "                    errorCode = (int)Interop.Advapi32.SetSecurityInfoByName(name' (uint)type' unchecked((uint)securityInformation)' OwnerBinary' GroupBinary' DaclBinary' SaclBinary); " is 162.
Long Statement,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,SetSecurityInfo,The length of the statement  "                        errorCode = (int)Interop.Advapi32.SetSecurityInfoByHandle(handle' (uint)type' (uint)securityInformation' OwnerBinary' GroupBinary' DaclBinary' SaclBinary); " is 155.
Complex Conditional,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The conditional expression  "type == AceType.AccessAllowed ||                  type == AceType.AccessDenied ||                  type == AceType.SystemAudit ||                  type == AceType.SystemAlarm ||                  type == AceType.AccessAllowedCallback ||                  type == AceType.AccessDeniedCallback ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback"  is complex.
Complex Conditional,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The conditional expression  "type == AceType.AccessAllowedObject ||                  type == AceType.AccessDeniedObject ||                  type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject ||                  type == AceType.AccessAllowedCallbackObject ||                  type == AceType.AccessDeniedCallbackObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject"  is complex.
Complex Conditional,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The conditional expression  "((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength))"  is complex.
Complex Conditional,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The conditional expression  "type == AceType.AccessAllowed ||                  type == AceType.AccessDenied ||                  type == AceType.SystemAudit ||                  type == AceType.SystemAlarm"  is complex.
Complex Conditional,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The conditional expression  "type == AceType.AccessAllowedCallback ||                  type == AceType.AccessDeniedCallback ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback"  is complex.
Complex Conditional,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The conditional expression  "type == AceType.AccessAllowedObject ||                  type == AceType.AccessDeniedObject ||                  type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject"  is complex.
Complex Conditional,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The conditional expression  "type == AceType.AccessAllowedCallbackObject ||                  type == AceType.AccessDeniedCallbackObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject"  is complex.
Complex Conditional,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SaclAcePriority,The conditional expression  "type == AceType.SystemAudit ||                  type == AceType.SystemAlarm ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback"  is complex.
Complex Conditional,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SaclAcePriority,The conditional expression  "type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject"  is complex.
Complex Conditional,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,RemoveQualifiedAces,The conditional expression  "((( ace.AceFlags & AceFlags.ContainerInherit ) == 0 ) && (( flags & AceFlags.ContainerInherit ) != 0 )  && (( flags & AceFlags.InheritOnly ) != 0 )) ||                               ((( flags & AceFlags.ContainerInherit ) == 0 ) && (( ace.AceFlags & AceFlags.ContainerInherit ) != 0 )  && (( ace.AceFlags & AceFlags.InheritOnly ) != 0))"  is complex.
Complex Conditional,System.Security.AccessControl,CommonObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs,AceNeedsTranslation,The conditional expression  "(includeExplicit &&                  ((ace.AceFlags & AceFlags.Inherited) == 0)) ||                  (includeInherited &&                  ((ace.AceFlags & AceFlags.Inherited) != 0))"  is complex.
Complex Conditional,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,BinaryFormFromSddlForm,The conditional expression  "error == Interop.Errors.ERROR_INVALID_PARAMETER ||                          error == Interop.Errors.ERROR_INVALID_ACL ||                          error == Interop.Errors.ERROR_INVALID_SECURITY_DESCR ||                          error == Interop.Errors.ERROR_UNKNOWN_REVISION"  is complex.
Empty Catch Block,System.Security.AccessControl,ObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurity.cs,Persist,The method has an empty catch block.
Empty Catch Block,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,GetSecurityInfo,The method has an empty catch block.
Empty Catch Block,System.Security.AccessControl,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\Win32.cs,SetSecurityInfo,The method has an empty catch block.
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 2] = unchecked((byte)(Length >> 0));
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 3] = (byte)(Length >> 8);
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 3] = (byte)(Length >> 8);
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,VerifyHeader,The following statement contains a magic number: if (binaryForm == null)              {                  throw new ArgumentNullException(nameof(binaryForm));              }              else if (offset < 0)              {                  throw new ArgumentOutOfRangeException(  nameof(offset)'                       SR.ArgumentOutOfRange_NeedNonNegNum);              }              else if (binaryForm.Length - offset < HeaderLength)              {                  //                  // We expect at least the ACE header ( 4 bytes )                  //                    throw new ArgumentOutOfRangeException(  nameof(binaryForm)'                       SR.ArgumentOutOfRange_ArrayTooSmall);              }              else if ((binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0) > binaryForm.Length - offset)              {                  //                  // Reported length of ACE ought to be no longer than the                  // length of the buffer passed in                  //                    throw new ArgumentOutOfRangeException(  nameof(binaryForm)'                       SR.ArgumentOutOfRange_ArrayTooSmall);              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,VerifyHeader,The following statement contains a magic number: if (binaryForm == null)              {                  throw new ArgumentNullException(nameof(binaryForm));              }              else if (offset < 0)              {                  throw new ArgumentOutOfRangeException(  nameof(offset)'                       SR.ArgumentOutOfRange_NeedNonNegNum);              }              else if (binaryForm.Length - offset < HeaderLength)              {                  //                  // We expect at least the ACE header ( 4 bytes )                  //                    throw new ArgumentOutOfRangeException(  nameof(binaryForm)'                       SR.ArgumentOutOfRange_ArrayTooSmall);              }              else if ((binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0) > binaryForm.Length - offset)              {                  //                  // Reported length of ACE ought to be no longer than the                  // length of the buffer passed in                  //                    throw new ArgumentOutOfRangeException(  nameof(binaryForm)'                       SR.ArgumentOutOfRange_ArrayTooSmall);              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,VerifyHeader,The following statement contains a magic number: if (binaryForm == null)              {                  throw new ArgumentNullException(nameof(binaryForm));              }              else if (offset < 0)              {                  throw new ArgumentOutOfRangeException(  nameof(offset)'                       SR.ArgumentOutOfRange_NeedNonNegNum);              }              else if (binaryForm.Length - offset < HeaderLength)              {                  //                  // We expect at least the ACE header ( 4 bytes )                  //                    throw new ArgumentOutOfRangeException(  nameof(binaryForm)'                       SR.ArgumentOutOfRange_ArrayTooSmall);              }              else if ((binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0) > binaryForm.Length - offset)              {                  //                  // Reported length of ACE ought to be no longer than the                  // length of the buffer passed in                  //                    throw new ArgumentOutOfRangeException(  nameof(binaryForm)'                       SR.ArgumentOutOfRange_ArrayTooSmall);              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (type == AceType.AccessAllowed ||                  type == AceType.AccessDenied ||                  type == AceType.SystemAudit ||                  type == AceType.SystemAlarm ||                  type == AceType.AccessAllowedCallback ||                  type == AceType.AccessDeniedCallback ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  bool isCallback;                  byte[] opaque;                    if (true == CommonAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CommonAce(flags' qualifier' accessMask' sid' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedObject ||                  type == AceType.AccessDeniedObject ||                  type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject ||                  type == AceType.AccessAllowedCallbackObject ||                  type == AceType.AccessDeniedCallbackObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  ObjectAceFlags objectFlags;                  Guid objectAceType;                  Guid inheritedObjectAceType;                  bool isCallback;                  byte[] opaque;                    if (true == ObjectAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out objectFlags' out objectAceType' out inheritedObjectAceType' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new ObjectAce(flags' qualifier' accessMask' sid' objectFlags' objectAceType' inheritedObjectAceType' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedCompound)              {                  int accessMask;                  CompoundAceType compoundAceType;                  SecurityIdentifier sid;                    if (true == CompoundAce.ParseBinaryForm(binaryForm' offset' out accessMask' out compoundAceType' out sid))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CompoundAce(flags' accessMask' compoundAceType' sid);                  }                  else                  {                      goto InvalidParameter;                  }              }              else              {                  AceFlags flags = (AceFlags)binaryForm[offset + 1];                  byte[] opaque = null;                  int aceLength = (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                    if (aceLength % 4 != 0)                  {                      goto InvalidParameter;                  }                    int opaqueLength = aceLength - HeaderLength;                    if (opaqueLength > 0)                  {                      opaque = new byte[opaqueLength];                        for (int i = 0; i < opaqueLength; i++)                      {                          opaque[i] = binaryForm[offset + aceLength - opaqueLength + i];                      }                  }                    result = new CustomAce(type' flags' opaque);              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (type == AceType.AccessAllowed ||                  type == AceType.AccessDenied ||                  type == AceType.SystemAudit ||                  type == AceType.SystemAlarm ||                  type == AceType.AccessAllowedCallback ||                  type == AceType.AccessDeniedCallback ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  bool isCallback;                  byte[] opaque;                    if (true == CommonAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CommonAce(flags' qualifier' accessMask' sid' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedObject ||                  type == AceType.AccessDeniedObject ||                  type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject ||                  type == AceType.AccessAllowedCallbackObject ||                  type == AceType.AccessDeniedCallbackObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  ObjectAceFlags objectFlags;                  Guid objectAceType;                  Guid inheritedObjectAceType;                  bool isCallback;                  byte[] opaque;                    if (true == ObjectAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out objectFlags' out objectAceType' out inheritedObjectAceType' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new ObjectAce(flags' qualifier' accessMask' sid' objectFlags' objectAceType' inheritedObjectAceType' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedCompound)              {                  int accessMask;                  CompoundAceType compoundAceType;                  SecurityIdentifier sid;                    if (true == CompoundAce.ParseBinaryForm(binaryForm' offset' out accessMask' out compoundAceType' out sid))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CompoundAce(flags' accessMask' compoundAceType' sid);                  }                  else                  {                      goto InvalidParameter;                  }              }              else              {                  AceFlags flags = (AceFlags)binaryForm[offset + 1];                  byte[] opaque = null;                  int aceLength = (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                    if (aceLength % 4 != 0)                  {                      goto InvalidParameter;                  }                    int opaqueLength = aceLength - HeaderLength;                    if (opaqueLength > 0)                  {                      opaque = new byte[opaqueLength];                        for (int i = 0; i < opaqueLength; i++)                      {                          opaque[i] = binaryForm[offset + aceLength - opaqueLength + i];                      }                  }                    result = new CustomAce(type' flags' opaque);              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (type == AceType.AccessAllowed ||                  type == AceType.AccessDenied ||                  type == AceType.SystemAudit ||                  type == AceType.SystemAlarm ||                  type == AceType.AccessAllowedCallback ||                  type == AceType.AccessDeniedCallback ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  bool isCallback;                  byte[] opaque;                    if (true == CommonAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CommonAce(flags' qualifier' accessMask' sid' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedObject ||                  type == AceType.AccessDeniedObject ||                  type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject ||                  type == AceType.AccessAllowedCallbackObject ||                  type == AceType.AccessDeniedCallbackObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  ObjectAceFlags objectFlags;                  Guid objectAceType;                  Guid inheritedObjectAceType;                  bool isCallback;                  byte[] opaque;                    if (true == ObjectAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out objectFlags' out objectAceType' out inheritedObjectAceType' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new ObjectAce(flags' qualifier' accessMask' sid' objectFlags' objectAceType' inheritedObjectAceType' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedCompound)              {                  int accessMask;                  CompoundAceType compoundAceType;                  SecurityIdentifier sid;                    if (true == CompoundAce.ParseBinaryForm(binaryForm' offset' out accessMask' out compoundAceType' out sid))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CompoundAce(flags' accessMask' compoundAceType' sid);                  }                  else                  {                      goto InvalidParameter;                  }              }              else              {                  AceFlags flags = (AceFlags)binaryForm[offset + 1];                  byte[] opaque = null;                  int aceLength = (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                    if (aceLength % 4 != 0)                  {                      goto InvalidParameter;                  }                    int opaqueLength = aceLength - HeaderLength;                    if (opaqueLength > 0)                  {                      opaque = new byte[opaqueLength];                        for (int i = 0; i < opaqueLength; i++)                      {                          opaque[i] = binaryForm[offset + aceLength - opaqueLength + i];                      }                  }                    result = new CustomAce(type' flags' opaque);              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (type == AceType.AccessAllowed ||                  type == AceType.AccessDenied ||                  type == AceType.SystemAudit ||                  type == AceType.SystemAlarm ||                  type == AceType.AccessAllowedCallback ||                  type == AceType.AccessDeniedCallback ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  bool isCallback;                  byte[] opaque;                    if (true == CommonAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CommonAce(flags' qualifier' accessMask' sid' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedObject ||                  type == AceType.AccessDeniedObject ||                  type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject ||                  type == AceType.AccessAllowedCallbackObject ||                  type == AceType.AccessDeniedCallbackObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject)              {                  AceQualifier qualifier;                  int accessMask;                  SecurityIdentifier sid;                  ObjectAceFlags objectFlags;                  Guid objectAceType;                  Guid inheritedObjectAceType;                  bool isCallback;                  byte[] opaque;                    if (true == ObjectAce.ParseBinaryForm(binaryForm' offset' out qualifier' out accessMask' out sid' out objectFlags' out objectAceType' out inheritedObjectAceType' out isCallback' out opaque))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new ObjectAce(flags' qualifier' accessMask' sid' objectFlags' objectAceType' inheritedObjectAceType' isCallback' opaque);                  }                  else                  {                      goto InvalidParameter;                  }              }              else if (type == AceType.AccessAllowedCompound)              {                  int accessMask;                  CompoundAceType compoundAceType;                  SecurityIdentifier sid;                    if (true == CompoundAce.ParseBinaryForm(binaryForm' offset' out accessMask' out compoundAceType' out sid))                  {                      AceFlags flags = (AceFlags)binaryForm[offset + 1];                      result = new CompoundAce(flags' accessMask' compoundAceType' sid);                  }                  else                  {                      goto InvalidParameter;                  }              }              else              {                  AceFlags flags = (AceFlags)binaryForm[offset + 1];                  byte[] opaque = null;                  int aceLength = (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                    if (aceLength % 4 != 0)                  {                      goto InvalidParameter;                  }                    int opaqueLength = aceLength - HeaderLength;                    if (opaqueLength > 0)                  {                      opaque = new byte[opaqueLength];                        for (int i = 0; i < opaqueLength; i++)                      {                          opaque[i] = binaryForm[offset + aceLength - opaqueLength + i];                      }                  }                    result = new CustomAce(type' flags' opaque);              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,CreateFromBinaryForm,The following statement contains a magic number: if (((!(result is ObjectAce)) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength))                  //                  // This is needed because object aces created through ADSI have the advertised ACE length                  // greater than the actual length by 32 (bug in ADSI).                  //                  || ((result is ObjectAce) && ((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) != result.BinaryLength) && (((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8) - 32) != result.BinaryLength)))              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetHashCode,The following statement contains a magic number: while (i < binaryLength)              {                  int increment = ((int)array[i]) +                                  (((int)array[i + 1]) << 8) +                                  (((int)array[i + 2]) << 16) +                                  (((int)array[i + 3]) << 24);                    result ^= increment;                  i += 4;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetHashCode,The following statement contains a magic number: while (i < binaryLength)              {                  int increment = ((int)array[i]) +                                  (((int)array[i + 1]) << 8) +                                  (((int)array[i + 2]) << 16) +                                  (((int)array[i + 3]) << 24);                    result ^= increment;                  i += 4;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetHashCode,The following statement contains a magic number: while (i < binaryLength)              {                  int increment = ((int)array[i]) +                                  (((int)array[i + 1]) << 8) +                                  (((int)array[i + 2]) << 16) +                                  (((int)array[i + 3]) << 24);                    result ^= increment;                  i += 4;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetHashCode,The following statement contains a magic number: while (i < binaryLength)              {                  int increment = ((int)array[i]) +                                  (((int)array[i + 1]) << 8) +                                  (((int)array[i + 2]) << 16) +                                  (((int)array[i + 3]) << 24);                    result ^= increment;                  i += 4;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetHashCode,The following statement contains a magic number: while (i < binaryLength)              {                  int increment = ((int)array[i]) +                                  (((int)array[i + 1]) << 8) +                                  (((int)array[i + 2]) << 16) +                                  (((int)array[i + 3]) << 24);                    result ^= increment;                  i += 4;              }
Magic Number,System.Security.AccessControl,GenericAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetHashCode,The following statement contains a magic number: while (i < binaryLength)              {                  int increment = ((int)array[i]) +                                  (((int)array[i + 1]) << 8) +                                  (((int)array[i + 2]) << 16) +                                  (((int)array[i + 3]) << 24);                    result ^= increment;                  i += 4;              }
Magic Number,System.Security.AccessControl,CustomAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,SetOpaque,The following statement contains a magic number: if (opaque != null)              {                  if (opaque.Length > MaxOpaqueLength)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLength' 0' MaxOpaqueLength));                  }                  else if (opaque.Length % 4 != 0)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLengthMultiple' 4));                  }              }
Magic Number,System.Security.AccessControl,CustomAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,SetOpaque,The following statement contains a magic number: if (opaque != null)              {                  if (opaque.Length > MaxOpaqueLength)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLength' 0' MaxOpaqueLength));                  }                  else if (opaque.Length % 4 != 0)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLengthMultiple' 4));                  }              }
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: compoundAceType =                  (CompoundAceType)(                  (((uint)binaryForm[baseOffset + offsetLocal + 0]) << 0) +                  (((uint)binaryForm[baseOffset + offsetLocal + 1]) << 8));
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 1] = (byte)((ushort)CompoundAceType >> 8);
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 2] = 0;
Magic Number,System.Security.AccessControl,CompoundAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 3] = 0;
Magic Number,System.Security.AccessControl,QualifiedAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,SetOpaque,The following statement contains a magic number: if (opaque != null)              {                  if (opaque.Length > MaxOpaqueLengthInternal)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLength' 0' MaxOpaqueLengthInternal));                  }                  else if (opaque.Length % 4 != 0)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLengthMultiple' 4));                  }              }
Magic Number,System.Security.AccessControl,QualifiedAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,SetOpaque,The following statement contains a magic number: if (opaque != null)              {                  if (opaque.Length > MaxOpaqueLengthInternal)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLength' 0' MaxOpaqueLengthInternal));                  }                  else if (opaque.Length % 4 != 0)                  {                      throw new ArgumentOutOfRangeException(  nameof(opaque)'                          string.Format(CultureInfo.CurrentCulture' SR.ArgumentOutOfRange_ArrayLengthMultiple' 4));                  }              }
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  (int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24));
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  (int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24));
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  (int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24));
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  (int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24));
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  (int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24));
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: int aceLength = (binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0);
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: int aceLength = (binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0);
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: int aceLength = (binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0);
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: if (aceLength % 4 != 0)              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,CommonAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: accessMask =                  unchecked((int)(                  (((uint)binaryForm[baseOffset + 0]) << 0) +                  (((uint)binaryForm[baseOffset + 1]) << 8) +                  (((uint)binaryForm[baseOffset + 2]) << 16) +                  (((uint)binaryForm[baseOffset + 3]) << 24)));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: objectFlags =                  (ObjectAceFlags)(                  (((uint)binaryForm[baseOffset + offsetLocal + 0]) << 0) +                  (((uint)binaryForm[baseOffset + offsetLocal + 1]) << 8) +                  (((uint)binaryForm[baseOffset + offsetLocal + 2]) << 16) +                  (((uint)binaryForm[baseOffset + offsetLocal + 3]) << 24));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: objectFlags =                  (ObjectAceFlags)(                  (((uint)binaryForm[baseOffset + offsetLocal + 0]) << 0) +                  (((uint)binaryForm[baseOffset + offsetLocal + 1]) << 8) +                  (((uint)binaryForm[baseOffset + offsetLocal + 2]) << 16) +                  (((uint)binaryForm[baseOffset + offsetLocal + 3]) << 24));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: objectFlags =                  (ObjectAceFlags)(                  (((uint)binaryForm[baseOffset + offsetLocal + 0]) << 0) +                  (((uint)binaryForm[baseOffset + offsetLocal + 1]) << 8) +                  (((uint)binaryForm[baseOffset + offsetLocal + 2]) << 16) +                  (((uint)binaryForm[baseOffset + offsetLocal + 3]) << 24));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: objectFlags =                  (ObjectAceFlags)(                  (((uint)binaryForm[baseOffset + offsetLocal + 0]) << 0) +                  (((uint)binaryForm[baseOffset + offsetLocal + 1]) << 8) +                  (((uint)binaryForm[baseOffset + offsetLocal + 2]) << 16) +                  (((uint)binaryForm[baseOffset + offsetLocal + 3]) << 24));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: objectFlags =                  (ObjectAceFlags)(                  (((uint)binaryForm[baseOffset + offsetLocal + 0]) << 0) +                  (((uint)binaryForm[baseOffset + offsetLocal + 1]) << 8) +                  (((uint)binaryForm[baseOffset + offsetLocal + 2]) << 16) +                  (((uint)binaryForm[baseOffset + offsetLocal + 3]) << 24));
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: int aceLength = (binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0);
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: int aceLength = (binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0);
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: int aceLength = (binaryForm[offset + 3] << 8) + (binaryForm[offset + 2] << 0);
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,ParseBinaryForm,The following statement contains a magic number: if (aceLength % 4 != 0)              {                  goto InvalidParameter;              }
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,MaxOpaqueLength,The following statement contains a magic number: return ushort.MaxValue - HeaderLength - AccessMaskLength - ObjectFlagsLength - 2 * GuidLength - SecurityIdentifier.MaxBinaryLength;
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: unchecked              {                  binaryForm[baseOffset + 0] = (byte)(AccessMask >> 0);                  binaryForm[baseOffset + 1] = (byte)(AccessMask >> 8);                  binaryForm[baseOffset + 2] = (byte)(AccessMask >> 16);                  binaryForm[baseOffset + 3] = (byte)(AccessMask >> 24);              }
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 1] = (byte)(((uint)ObjectAceFlags) >> 8);
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 2] = (byte)(((uint)ObjectAceFlags) >> 16);
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 2] = (byte)(((uint)ObjectAceFlags) >> 16);
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 3] = (byte)(((uint)ObjectAceFlags) >> 24);
Magic Number,System.Security.AccessControl,ObjectAce,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACE.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[baseOffset + offsetLocal + 3] = (byte)(((uint)ObjectAceFlags) >> 24);
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,VerifyHeader,The following statement contains a magic number: length = ( binaryForm[offset + 2] << 0 ) + ( binaryForm[offset + 3] << 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,VerifyHeader,The following statement contains a magic number: length = ( binaryForm[offset + 2] << 0 ) + ( binaryForm[offset + 3] << 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,VerifyHeader,The following statement contains a magic number: length = ( binaryForm[offset + 2] << 0 ) + ( binaryForm[offset + 3] << 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,VerifyHeader,The following statement contains a magic number: count = ( binaryForm[offset + 4] << 0 ) + ( binaryForm[offset + 5] << 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,VerifyHeader,The following statement contains a magic number: count = ( binaryForm[offset + 4] << 0 ) + ( binaryForm[offset + 5] << 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,VerifyHeader,The following statement contains a magic number: count = ( binaryForm[offset + 4] << 0 ) + ( binaryForm[offset + 5] << 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 2] = unchecked(( byte )( BinaryLength >> 0 ));
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 3] = ( byte )( BinaryLength >> 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 3] = ( byte )( BinaryLength >> 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 4] = unchecked(( byte )( Count >> 0 ));
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 5] = ( byte )( Count >> 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 5] = ( byte )( Count >> 8 );
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 6] = 0;
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,MarshalHeader,The following statement contains a magic number: binaryForm[offset + 7] = 0;
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetBinaryForm,The following statement contains a magic number: for ( int i = 0; i < count; i++ )              {                  GenericAce ace = GenericAce.CreateFromBinaryForm( binaryForm' offset );                    int aceLength = ace.BinaryLength;                    if ( binaryLength + aceLength > MaxBinaryLength )                  {                      //                      // The ACE was too long - it would overflow the ACL maximum length                      //                        throw new ArgumentException(                          SR.ArgumentException_InvalidAclBinaryForm '  nameof(binaryForm));                  }                    _aces.Add( ace );                    if ( aceLength % 4 != 0 )                  {                      //                      // This indicates a bug in one of the ACE classes.                      // Binary length of an ace must ALWAYS be divisible by 4.                      //                        Debug.Assert( false' "aceLength % 4 != 0" );                      // Replacing SystemException with InvalidOperationException. This code path                       // indicates a bad ACE' but I don't know of a great exception to represent that.                       // InvalidOperation seems to be the closest' though it's definitely not exactly                       // right for this scenario.                      throw new InvalidOperationException();                  }                    binaryLength += aceLength;                    if ( _revision == AclRevisionDS )                  {                      //                      // Increment the offset by the advertised length rather than the                       // actual binary length. (Ideally these two should match' but for                      // object aces created through ADSI' the actual length is 32 bytes                       // less than the allocated size of the ACE. This is a bug in ADSI.)                      //                      offset += (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                  }                  else                  {                      offset += aceLength;                  }                    //                  // Verify that no more than the advertised length of the ACL was consumed                  //                    if ( offset > length )                  {                      goto InvalidParameter;                  }              }
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetBinaryForm,The following statement contains a magic number: for ( int i = 0; i < count; i++ )              {                  GenericAce ace = GenericAce.CreateFromBinaryForm( binaryForm' offset );                    int aceLength = ace.BinaryLength;                    if ( binaryLength + aceLength > MaxBinaryLength )                  {                      //                      // The ACE was too long - it would overflow the ACL maximum length                      //                        throw new ArgumentException(                          SR.ArgumentException_InvalidAclBinaryForm '  nameof(binaryForm));                  }                    _aces.Add( ace );                    if ( aceLength % 4 != 0 )                  {                      //                      // This indicates a bug in one of the ACE classes.                      // Binary length of an ace must ALWAYS be divisible by 4.                      //                        Debug.Assert( false' "aceLength % 4 != 0" );                      // Replacing SystemException with InvalidOperationException. This code path                       // indicates a bad ACE' but I don't know of a great exception to represent that.                       // InvalidOperation seems to be the closest' though it's definitely not exactly                       // right for this scenario.                      throw new InvalidOperationException();                  }                    binaryLength += aceLength;                    if ( _revision == AclRevisionDS )                  {                      //                      // Increment the offset by the advertised length rather than the                       // actual binary length. (Ideally these two should match' but for                      // object aces created through ADSI' the actual length is 32 bytes                       // less than the allocated size of the ACE. This is a bug in ADSI.)                      //                      offset += (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                  }                  else                  {                      offset += aceLength;                  }                    //                  // Verify that no more than the advertised length of the ACL was consumed                  //                    if ( offset > length )                  {                      goto InvalidParameter;                  }              }
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetBinaryForm,The following statement contains a magic number: for ( int i = 0; i < count; i++ )              {                  GenericAce ace = GenericAce.CreateFromBinaryForm( binaryForm' offset );                    int aceLength = ace.BinaryLength;                    if ( binaryLength + aceLength > MaxBinaryLength )                  {                      //                      // The ACE was too long - it would overflow the ACL maximum length                      //                        throw new ArgumentException(                          SR.ArgumentException_InvalidAclBinaryForm '  nameof(binaryForm));                  }                    _aces.Add( ace );                    if ( aceLength % 4 != 0 )                  {                      //                      // This indicates a bug in one of the ACE classes.                      // Binary length of an ace must ALWAYS be divisible by 4.                      //                        Debug.Assert( false' "aceLength % 4 != 0" );                      // Replacing SystemException with InvalidOperationException. This code path                       // indicates a bad ACE' but I don't know of a great exception to represent that.                       // InvalidOperation seems to be the closest' though it's definitely not exactly                       // right for this scenario.                      throw new InvalidOperationException();                  }                    binaryLength += aceLength;                    if ( _revision == AclRevisionDS )                  {                      //                      // Increment the offset by the advertised length rather than the                       // actual binary length. (Ideally these two should match' but for                      // object aces created through ADSI' the actual length is 32 bytes                       // less than the allocated size of the ACE. This is a bug in ADSI.)                      //                      offset += (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                  }                  else                  {                      offset += aceLength;                  }                    //                  // Verify that no more than the advertised length of the ACL was consumed                  //                    if ( offset > length )                  {                      goto InvalidParameter;                  }              }
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SetBinaryForm,The following statement contains a magic number: for ( int i = 0; i < count; i++ )              {                  GenericAce ace = GenericAce.CreateFromBinaryForm( binaryForm' offset );                    int aceLength = ace.BinaryLength;                    if ( binaryLength + aceLength > MaxBinaryLength )                  {                      //                      // The ACE was too long - it would overflow the ACL maximum length                      //                        throw new ArgumentException(                          SR.ArgumentException_InvalidAclBinaryForm '  nameof(binaryForm));                  }                    _aces.Add( ace );                    if ( aceLength % 4 != 0 )                  {                      //                      // This indicates a bug in one of the ACE classes.                      // Binary length of an ace must ALWAYS be divisible by 4.                      //                        Debug.Assert( false' "aceLength % 4 != 0" );                      // Replacing SystemException with InvalidOperationException. This code path                       // indicates a bad ACE' but I don't know of a great exception to represent that.                       // InvalidOperation seems to be the closest' though it's definitely not exactly                       // right for this scenario.                      throw new InvalidOperationException();                  }                    binaryLength += aceLength;                    if ( _revision == AclRevisionDS )                  {                      //                      // Increment the offset by the advertised length rather than the                       // actual binary length. (Ideally these two should match' but for                      // object aces created through ADSI' the actual length is 32 bytes                       // less than the allocated size of the ACE. This is a bug in ADSI.)                      //                      offset += (binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8);                  }                  else                  {                      offset += aceLength;                  }                    //                  // Verify that no more than the advertised length of the ACL was consumed                  //                    if ( offset > length )                  {                      goto InvalidParameter;                  }              }
Magic Number,System.Security.AccessControl,RawAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,GetBinaryForm,The following statement contains a magic number: for ( int i = 0; i < Count; i++ )              {                  GenericAce ace = _aces[i];                    ace.GetBinaryForm( binaryForm' offset );                    int aceLength = ace.BinaryLength;                    if ( aceLength % 4 != 0 )                  {                      //                      // This indicates a bug in one of the ACE classes.                      // Binary length of an ace must ALWAYS be divisible by 4.                      //                        Debug.Assert( false' "aceLength % 4 != 0" );                      // Replacing SystemException with InvalidOperationException. This code path                       // indicates a bad ACE' but I don't know of a great exception to represent that.                       // InvalidOperation seems to be the closest' though it's definitely not exactly                       // right for this scenario.                      throw new InvalidOperationException();                  }                    offset += aceLength;              }
Magic Number,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,CreateAFtoPMConversionMatrix,The following statement contains a magic number: var afToPm = new PM[16];
Magic Number,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,CreatePMtoAFConversionMatrix,The following statement contains a magic number: var pmToAf = new AF[32];
Magic Number,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,DaclAcePriority,The following statement contains a magic number: if (( ace.AceFlags & AceFlags.Inherited ) != 0 )              {                  //                  // inherited aces are at the end as a group                  //                    result = 2 * ushort.MaxValue + ace._indexInAcl;              }              else if ( type == AceType.AccessDenied ||                  type == AceType.AccessDeniedCallback )              {                  result = 0;              }              else if ( type == AceType.AccessDeniedObject ||                  type == AceType.AccessDeniedCallbackObject )              {                  result = 1;              }              else if ( type == AceType.AccessAllowed ||                  type == AceType.AccessAllowedCallback )              {                  result = 2;              }              else if ( type == AceType.AccessAllowedObject ||                  type == AceType.AccessAllowedCallbackObject )              {                  result = 3;              }              else              {                  //                  // custom aces are at the second group                  //                  result = ushort.MaxValue + ace._indexInAcl;              }
Magic Number,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,DaclAcePriority,The following statement contains a magic number: if (( ace.AceFlags & AceFlags.Inherited ) != 0 )              {                  //                  // inherited aces are at the end as a group                  //                    result = 2 * ushort.MaxValue + ace._indexInAcl;              }              else if ( type == AceType.AccessDenied ||                  type == AceType.AccessDeniedCallback )              {                  result = 0;              }              else if ( type == AceType.AccessDeniedObject ||                  type == AceType.AccessDeniedCallbackObject )              {                  result = 1;              }              else if ( type == AceType.AccessAllowed ||                  type == AceType.AccessAllowedCallback )              {                  result = 2;              }              else if ( type == AceType.AccessAllowedObject ||                  type == AceType.AccessAllowedCallbackObject )              {                  result = 3;              }              else              {                  //                  // custom aces are at the second group                  //                  result = ushort.MaxValue + ace._indexInAcl;              }
Magic Number,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,DaclAcePriority,The following statement contains a magic number: if (( ace.AceFlags & AceFlags.Inherited ) != 0 )              {                  //                  // inherited aces are at the end as a group                  //                    result = 2 * ushort.MaxValue + ace._indexInAcl;              }              else if ( type == AceType.AccessDenied ||                  type == AceType.AccessDeniedCallback )              {                  result = 0;              }              else if ( type == AceType.AccessDeniedObject ||                  type == AceType.AccessDeniedCallbackObject )              {                  result = 1;              }              else if ( type == AceType.AccessAllowed ||                  type == AceType.AccessAllowedCallback )              {                  result = 2;              }              else if ( type == AceType.AccessAllowedObject ||                  type == AceType.AccessAllowedCallbackObject )              {                  result = 3;              }              else              {                  //                  // custom aces are at the second group                  //                  result = ushort.MaxValue + ace._indexInAcl;              }
Magic Number,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,SaclAcePriority,The following statement contains a magic number: if (( ace.AceFlags & AceFlags.Inherited ) != 0 )              {                  result = 2 * ushort.MaxValue + ace._indexInAcl;              }              else if ( type == AceType.SystemAudit ||                  type == AceType.SystemAlarm ||                  type == AceType.SystemAuditCallback ||                  type == AceType.SystemAlarmCallback )              {                  result = 0;              }              else if ( type == AceType.SystemAuditObject ||                  type == AceType.SystemAlarmObject ||                  type == AceType.SystemAuditCallbackObject ||                  type == AceType.SystemAlarmCallbackObject )              {                  result = 1;              }              else              {                  result = ushort.MaxValue + ace._indexInAcl;              }
Magic Number,System.Security.AccessControl,CommonAcl,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ACL.cs,CanonicalCheck,The following statement contains a magic number: if ( isDacl )              {                  //                  // DACL canonical order:                  //   Explicit Deny - Explicit Allow - Inherited                  //                    const int AccessDenied = 0;                  const int AccessAllowed = 1;                  const int Inherited = 2;                    int currentStage = AccessDenied;                    //                  // In this loop' do NOT use 'Count' as upper bound of the loop'                  // since doing so will canonicalize the ACL invalidating the result                  // of this check!                  //                    for ( int i = 0; i < _acl.Count; i++ )                  {                      int aceStage;                        GenericAce ace = _acl[i];                        if (( ace.AceFlags & AceFlags.Inherited ) != 0 )                      {                          aceStage = Inherited;                      }                      else                      {                          QualifiedAce qualifiedAce = ace as QualifiedAce;                            if ( qualifiedAce == null )                          {                              //                              // Explicit ACE is not recognized - this is not a canonical ACL                              //                                return false;                          }                            if ( qualifiedAce.AceQualifier == AceQualifier.AccessAllowed )                          {                              aceStage = AccessAllowed;                          }                          else if ( qualifiedAce.AceQualifier == AceQualifier.AccessDenied )                          {                              aceStage = AccessDenied;                          }                          else                          {                              //                              // Only allow and deny ACEs are allowed here                              //                                Debug.Assert( false' "Audit and alarm ACEs must have been stripped by remove-meaningless logic" );                              return false;                          }                      }                        if ( aceStage > currentStage )                      {                          currentStage = aceStage;                      }                      else if ( aceStage < currentStage )                      {                          return false;                      }                  }              }              else              {                  //                  // SACL canonical order:                  //   Explicit - Inherited                                  //                    const int Explicit = 0;                  const int Inherited = 1;                    int currentStage = Explicit;                    //                  // In this loop' do NOT use 'Count' as upper bound of the loop'                  // since doing so will canonicalize the ACL invalidating the result                  // of this check!                  //                    for ( int i = 0; i < _acl.Count; i++ )                  {                      int aceStage;                        GenericAce ace = _acl[i];                        if ( ace == null )                      {                          //                          // <markpu-9/19/2004> Afraid to yank this statement now                          // for fear of destabilization' so adding an assert instead                          //                            Debug.Assert( ace != null' "How did a null ACE end up in a SACL?" );                          continue;                      }                        if (( ace.AceFlags & AceFlags.Inherited ) != 0 )                      {                          aceStage = Inherited;                      }                      else                      {                          QualifiedAce qualifiedAce = ace as QualifiedAce;                            if ( qualifiedAce == null )                          {                              //                              // Explicit ACE is not recognized - this is not a canonical ACL                              //                                return false;                          }                            if ( qualifiedAce.AceQualifier == AceQualifier.SystemAudit ||                              qualifiedAce.AceQualifier == AceQualifier.SystemAlarm )                          {                              aceStage = Explicit;                          }                          else                          {                              //                              // Only audit and alarm ACEs are allowed here                              //                                Debug.Assert( false' "Allow and deny ACEs must have been stripped by remove-meaningless logic" );                              return false;                          }                      }                        if ( aceStage > currentStage )                      {                          currentStage = aceStage;                      }                      else if ( aceStage < currentStage )                      {                          return false;                      }                  }              }
Magic Number,System.Security.AccessControl,ObjectSecurity,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\ObjectSecurity.cs,ObjectSecurity,The following statement contains a magic number: DiscretionaryAcl dacl = new DiscretionaryAcl(isContainer' isDS' 5);
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,MarshalInt,The following statement contains a magic number: binaryForm[offset + 1] = (byte)(number >> 8);
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,MarshalInt,The following statement contains a magic number: binaryForm[offset + 2] = (byte)(number >> 16);
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,MarshalInt,The following statement contains a magic number: binaryForm[offset + 2] = (byte)(number >> 16);
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,MarshalInt,The following statement contains a magic number: binaryForm[offset + 3] = (byte)(number >> 24);
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,MarshalInt,The following statement contains a magic number: binaryForm[offset + 3] = (byte)(number >> 24);
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,UnmarshalInt,The following statement contains a magic number: return (int)(                  (binaryForm[offset + 0] << 0) +                  (binaryForm[offset + 1] << 8) +                  (binaryForm[offset + 2] << 16) +                  (binaryForm[offset + 3] << 24));
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,UnmarshalInt,The following statement contains a magic number: return (int)(                  (binaryForm[offset + 0] << 0) +                  (binaryForm[offset + 1] << 8) +                  (binaryForm[offset + 2] << 16) +                  (binaryForm[offset + 3] << 24));
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,UnmarshalInt,The following statement contains a magic number: return (int)(                  (binaryForm[offset + 0] << 0) +                  (binaryForm[offset + 1] << 8) +                  (binaryForm[offset + 2] << 16) +                  (binaryForm[offset + 3] << 24));
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,UnmarshalInt,The following statement contains a magic number: return (int)(                  (binaryForm[offset + 0] << 0) +                  (binaryForm[offset + 1] << 8) +                  (binaryForm[offset + 2] << 16) +                  (binaryForm[offset + 3] << 24));
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,UnmarshalInt,The following statement contains a magic number: return (int)(                  (binaryForm[offset + 0] << 0) +                  (binaryForm[offset + 1] << 8) +                  (binaryForm[offset + 2] << 16) +                  (binaryForm[offset + 3] << 24));
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[offset + 2] = unchecked((byte)((int)materializedControlFlags >> 0));
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[offset + 3] = (byte)((int)materializedControlFlags >> 8);
Magic Number,System.Security.AccessControl,GenericSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,GetBinaryForm,The following statement contains a magic number: binaryForm[offset + 3] = (byte)((int)materializedControlFlags >> 8);
Magic Number,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,RawSecurityDescriptor,The following statement contains a magic number: flags = (ControlFlags)((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8));
Magic Number,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,RawSecurityDescriptor,The following statement contains a magic number: flags = (ControlFlags)((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8));
Magic Number,System.Security.AccessControl,RawSecurityDescriptor,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\AccessControl\SecurityDescriptor.cs,RawSecurityDescriptor,The following statement contains a magic number: flags = (ControlFlags)((binaryForm[offset + 2] << 0) + (binaryForm[offset + 3] << 8));
Magic Number,System.Security.Principal,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\Principal\Win32.cs,OpenThreadToken,The following statement contains a magic number: if (!Interop.Advapi32.OpenThreadToken((IntPtr)(-2)' dwDesiredAccess' openAsSelf' out phThreadToken))              {                  if (dwOpenAs == WinSecurityContext.Both)                  {                      openAsSelf = false;                      hr = 0;                      if (!Interop.Advapi32.OpenThreadToken((IntPtr)(-2)' dwDesiredAccess' openAsSelf' out phThreadToken))                          hr = Marshal.GetHRForLastWin32Error();                  }                  else                  {                      hr = Marshal.GetHRForLastWin32Error();                  }              }
Magic Number,System.Security.Principal,Win32,C:\selectedRepos\dotnet_corefx\src\System.Security.AccessControl\src\System\Security\Principal\Win32.cs,OpenThreadToken,The following statement contains a magic number: if (!Interop.Advapi32.OpenThreadToken((IntPtr)(-2)' dwDesiredAccess' openAsSelf' out phThreadToken))              {                  if (dwOpenAs == WinSecurityContext.Both)                  {                      openAsSelf = false;                      hr = 0;                      if (!Interop.Advapi32.OpenThreadToken((IntPtr)(-2)' dwDesiredAccess' openAsSelf' out phThreadToken))                          hr = Marshal.GetHRForLastWin32Error();                  }                  else                  {                      hr = Marshal.GetHRForLastWin32Error();                  }              }
