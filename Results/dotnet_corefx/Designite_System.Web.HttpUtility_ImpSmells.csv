Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Web,HttpUtility,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 9
Complex Method,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,JavaScriptStringEncode,Cyclomatic complexity of the method is 9
Complex Method,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncode,Cyclomatic complexity of the method is 8
Complex Method,System.Web.Util,Utf16StringValidator,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\Utf16StringValidator.cs,ValidateString,Cyclomatic complexity of the method is 9
Complex Conditional,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The conditional expression  "h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0"  is complex.
Complex Conditional,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The conditional expression  "h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0"  is complex.
Complex Conditional,System.Web.Util,HttpEncoderUtility,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoderUtility.cs,IsUrlSafeChar,The conditional expression  "(ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')"  is complex.
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,JavaScriptStringEncode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  char c = value[i];                    // Append the unhandled characters (that do not require special treament)                  // to the string builder when special characters are detected.                  if (CharRequiresJavaScriptEncoding(c))                  {                      if (b == null)                      {                          b = new StringBuilder(value.Length + 5);                      }                        if (count > 0)                      {                          b.Append(value' startIndex' count);                      }                        startIndex = i + 1;                      count = 0;                        switch (c)                      {                          case '\r':                              b.Append("\\r");                              break;                          case '\t':                              b.Append("\\t");                              break;                          case '\"':                              b.Append("\\\"");                              break;                          case '\\':                              b.Append("\\\\");                              break;                          case '\n':                              b.Append("\\n");                              break;                          case '\b':                              b.Append("\\b");                              break;                          case '\f':                              b.Append("\\f");                              break;                          default:                              AppendCharAsUnicodeJavaScript(b' c);                              break;                      }                  }                  else                  {                      count++;                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                      int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                        if (h1 >= 0 && h2 >= 0)                      {                             // valid 2 hex chars                          b = (byte)((h1 << 4) | h2);                          i += 2;                      }                  }                    decodedBytes[decodedBytesCount++] = b;              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                      int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                        if (h1 >= 0 && h2 >= 0)                      {                             // valid 2 hex chars                          b = (byte)((h1 << 4) | h2);                          i += 2;                      }                  }                    decodedBytes[decodedBytesCount++] = b;              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                      int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                        if (h1 >= 0 && h2 >= 0)                      {                             // valid 2 hex chars                          b = (byte)((h1 << 4) | h2);                          i += 2;                      }                  }                    decodedBytes[decodedBytesCount++] = b;              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                      int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                        if (h1 >= 0 && h2 >= 0)                      {                             // valid 2 hex chars                          b = (byte)((h1 << 4) | h2);                          i += 2;                      }                  }                    decodedBytes[decodedBytesCount++] = b;              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int pos = offset + i;                  byte b = bytes[pos];                    // The code assumes that + and % cannot be in multibyte sequence                    if (b == '+')                  {                      b = (byte)' ';                  }                  else if (b == '%' && i < count - 2)                  {                      if (bytes[pos + 1] == 'u' && i < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt((char)bytes[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt((char)bytes[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              char ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              i += 5;                                // don't add as byte                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt((char)bytes[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt((char)bytes[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              b = (byte)((h1 << 4) | h2);                              i += 2;                          }                      }                  }                    helper.AddByte(b);              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++)              {                  char ch = value[pos];                    if (ch == '+')                  {                      ch = ' ';                  }                  else if (ch == '%' && pos < count - 2)                  {                      if (value[pos + 1] == 'u' && pos < count - 5)                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 2]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 3]);                          int h3 = HttpEncoderUtility.HexToInt(value[pos + 4]);                          int h4 = HttpEncoderUtility.HexToInt(value[pos + 5]);                            if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0)                          {   // valid 4 hex chars                              ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);                              pos += 5;                                // only add as char                              helper.AddChar(ch);                              continue;                          }                      }                      else                      {                          int h1 = HttpEncoderUtility.HexToInt(value[pos + 1]);                          int h2 = HttpEncoderUtility.HexToInt(value[pos + 2]);                            if (h1 >= 0 && h2 >= 0)                          {     // valid 2 hex chars                              byte b = (byte)((h1 << 4) | h2);                              pos += 2;                                // don't add as char                              helper.AddByte(b);                              continue;                          }                      }                  }                    if ((ch & 0xFF80) == 0)                  {                      helper.AddByte((byte)ch); // 7 bit have to go as bytes because of Unicode                  }                  else                  {                      helper.AddChar(ch);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncode,The following statement contains a magic number: byte[] expandedBytes = new byte[count + cUnsafe * 2];
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  byte b = bytes[offset + i];                  char ch = (char)b;                    if (HttpEncoderUtility.IsUrlSafeChar(ch))                  {                      expandedBytes[pos++] = b;                  }                  else if (ch == ' ')                  {                      expandedBytes[pos++] = (byte)'+';                  }                  else                  {                      expandedBytes[pos++] = (byte)'%';                      expandedBytes[pos++] = (byte)HttpEncoderUtility.IntToHex((b >> 4) & 0xf);                      expandedBytes[pos++] = (byte)HttpEncoderUtility.IntToHex(b & 0x0f);                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncodeNonAscii,The following statement contains a magic number: byte[] expandedBytes = new byte[count + cNonAscii * 2];
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncodeNonAscii,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  byte b = bytes[offset + i];                    if (IsNonAsciiByte(b))                  {                      expandedBytes[pos++] = (byte)'%';                      expandedBytes[pos++] = (byte)HttpEncoderUtility.IntToHex((b >> 4) & 0xf);                      expandedBytes[pos++] = (byte)HttpEncoderUtility.IntToHex(b & 0x0f);                  }                  else                  {                      expandedBytes[pos++] = b;                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncodeUnicode,The following statement contains a magic number: for (int i = 0; i < l; i++)              {                  char ch = value[i];                    if ((ch & 0xff80) == 0)                  {  // 7 bit?                      if (HttpEncoderUtility.IsUrlSafeChar(ch))                      {                          sb.Append(ch);                      }                      else if (ch == ' ')                      {                          sb.Append('+');                      }                      else                      {                          sb.Append('%');                          sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                          sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                      }                  }                  else                  { // arbitrary Unicode?                      sb.Append("%u");                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 12) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 8) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncodeUnicode,The following statement contains a magic number: for (int i = 0; i < l; i++)              {                  char ch = value[i];                    if ((ch & 0xff80) == 0)                  {  // 7 bit?                      if (HttpEncoderUtility.IsUrlSafeChar(ch))                      {                          sb.Append(ch);                      }                      else if (ch == ' ')                      {                          sb.Append('+');                      }                      else                      {                          sb.Append('%');                          sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                          sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                      }                  }                  else                  { // arbitrary Unicode?                      sb.Append("%u");                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 12) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 8) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncodeUnicode,The following statement contains a magic number: for (int i = 0; i < l; i++)              {                  char ch = value[i];                    if ((ch & 0xff80) == 0)                  {  // 7 bit?                      if (HttpEncoderUtility.IsUrlSafeChar(ch))                      {                          sb.Append(ch);                      }                      else if (ch == ' ')                      {                          sb.Append('+');                      }                      else                      {                          sb.Append('%');                          sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                          sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                      }                  }                  else                  { // arbitrary Unicode?                      sb.Append("%u");                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 12) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 8) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                  }              }
Magic Number,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,UrlEncodeUnicode,The following statement contains a magic number: for (int i = 0; i < l; i++)              {                  char ch = value[i];                    if ((ch & 0xff80) == 0)                  {  // 7 bit?                      if (HttpEncoderUtility.IsUrlSafeChar(ch))                      {                          sb.Append(ch);                      }                      else if (ch == ' ')                      {                          sb.Append('+');                      }                      else                      {                          sb.Append('%');                          sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                          sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                      }                  }                  else                  { // arbitrary Unicode?                      sb.Append("%u");                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 12) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 8) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch >> 4) & 0xf));                      sb.Append(HttpEncoderUtility.IntToHex((ch) & 0xf));                  }              }
Magic Number,System.Web.Util,HttpEncoderUtility,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoderUtility.cs,IntToHex,The following statement contains a magic number: return n <= 9 ? (char)(n + '0') : (char)(n - 10 + 'a');
Magic Number,System.Web.Util,HttpEncoderUtility,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoderUtility.cs,IntToHex,The following statement contains a magic number: return n <= 9 ? (char)(n + '0') : (char)(n - 10 + 'a');
Missing Default,System.Web.Util,HttpEncoder,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoder.cs,IndexOfHtmlAttributeEncodingChars,The following switch statement is missing a default case: switch (ch)                          {                              case '<':                              case '"':                              case '\'':                              case '&':                                  return s.Length - cch;                          }
Missing Default,System.Web.Util,HttpEncoderUtility,C:\selectedRepos\dotnet_corefx\src\System.Web.HttpUtility\src\System\Web\Util\HttpEncoderUtility.cs,IsUrlSafeChar,The following switch statement is missing a default case: switch (ch)              {                  case '-':                  case '_':                  case '.':                  case '!':                  case '*':                  case '(':                  case ')':                      return true;              }
