Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,The method has 102 lines of code.
Long Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Dispose,The method has 110 lines of code.
Long Method,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,Connect,The method has 119 lines of code.
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Connect,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Connect,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Accept,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Send,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Send,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SendTo,Cyclomatic complexity of the method is 11
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Receive,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Receive,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFrom,Cyclomatic complexity of the method is 13
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveFrom,Cyclomatic complexity of the method is 17
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginConnect,Cyclomatic complexity of the method is 12
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginConnect,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndConnect,Cyclomatic complexity of the method is 11
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndDisconnect,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSend,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndSend,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSendTo,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndSendTo,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceive,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceive,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,Cyclomatic complexity of the method is 16
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceiveMessageFrom,Cyclomatic complexity of the method is 12
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveFrom,Cyclomatic complexity of the method is 11
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceiveFrom,Cyclomatic complexity of the method is 12
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndAccept,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,AcceptAsync,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ConnectAsync,Cyclomatic complexity of the method is 11
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ConnectAsync,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginConnectEx,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Sockets,TcpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\TCPClient.cs,Connect,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Format,Cyclomatic complexity of the method is 8
Complex Method,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,Cyclomatic complexity of the method is 9
Complex Method,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadSource,Cyclomatic complexity of the method is 9
Complex Method,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,CaptureOrComplete,Cyclomatic complexity of the method is 12
Long Parameter List,System.Net.Sockets,NetworkStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetworkStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net.Sockets,NetworkStream,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetworkStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' size' callback' state
Long Parameter List,System.Net.Sockets,SendPacketsElement,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SendPacketsElement.cs,Initialize,The method has 6 parameters. Parameters: filePath' buffer' offset' count' flags' endOfPacket
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Send,The method has 5 parameters. Parameters: buffer' offset' size' socketFlags' errorCode
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SendTo,The method has 5 parameters. Parameters: buffer' offset' size' socketFlags' remoteEP
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Receive,The method has 5 parameters. Parameters: buffer' offset' size' socketFlags' errorCode
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFrom,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' remoteEP' ipPacketInformation
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveFrom,The method has 5 parameters. Parameters: buffer' offset' size' socketFlags' remoteEP
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSend,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSend,The method has 7 parameters. Parameters: buffer' offset' size' socketFlags' errorCode' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginSend,The method has 5 parameters. Parameters: buffer' offset' size' socketFlags' asyncResult
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSend,The method has 5 parameters. Parameters: buffers' socketFlags' errorCode' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSendFile,The method has 6 parameters. Parameters: fileName' preBuffer' postBuffer' flags' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSendTo,The method has 7 parameters. Parameters: buffer' offset' size' socketFlags' remoteEP' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginSendTo,The method has 7 parameters. Parameters: buffer' offset' size' socketFlags' endPointSnapshot' socketAddress' asyncResult
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceive,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceive,The method has 7 parameters. Parameters: buffer' offset' size' socketFlags' errorCode' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginReceive,The method has 5 parameters. Parameters: buffer' offset' size' socketFlags' asyncResult
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceive,The method has 5 parameters. Parameters: buffers' socketFlags' errorCode' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,The method has 7 parameters. Parameters: buffer' offset' size' socketFlags' remoteEP' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveFrom,The method has 7 parameters. Parameters: buffer' offset' size' socketFlags' remoteEP' callback' state
Long Parameter List,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginReceiveFrom,The method has 7 parameters. Parameters: buffer' offset' size' socketFlags' endPointSnapshot' socketAddress' asyncResult
Long Parameter List,System.Net.Sockets,MultipleAddressConnectAsyncResult,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,MultipleAddressConnectAsyncResult,The method has 5 parameters. Parameters: addresses' port' socket' myState' myCallBack
Long Parameter List,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,BeginSend,The method has 5 parameters. Parameters: datagram' bytes' endPoint' requestCallback' state
Long Parameter List,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,BeginSend,The method has 6 parameters. Parameters: datagram' bytes' hostname' port' requestCallback' state
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DumpBuffer,The method has 5 parameters. Parameters: thisOrContextObject' buffer' offset' count' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Enter,The method has 5 parameters. Parameters: thisOrContextObject' arg0' arg1' arg2' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DumpBuffer,The method has 5 parameters. Parameters: thisOrContextObject' buffer' offset' count' memberName
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The method has 5 parameters. Parameters: eventId' arg1' arg2' arg3' arg4
Long Parameter List,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,ContextAwareResult,The method has 5 parameters. Parameters: captureIdentity' forceCaptureContext' myObject' myState' myCallBack
Long Parameter List,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,ContextAwareResult,The method has 6 parameters. Parameters: captureIdentity' forceCaptureContext' threadSafeContextCopy' myObject' myState' myCallBack
Long Identifier,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,,The length of the parameter _nonBlockingConnectRightEndPoint is 32.
Long Identifier,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,,The length of the parameter s_multipleAddressConnectCallback is 32.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBind,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} Interop.Winsock.bind returns errorCode:{errorCode}"); " is 131.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Listen,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} Interop.Winsock.listen returns errorCode:{errorCode}"); " is 133.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Send,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} DST:{RemoteEndPoint} Interop.Winsock.send returns errorCode:{errorCode} bytesTransferred:{bytesTransferred}"); " is 188.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SendFile,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"::SendFile() SRC:{LocalEndPoint} DST:{RemoteEndPoint} fileName:{fileName}"); " is 134.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SendFile,The length of the statement  "                    NetEventSource.Info(this' $"::SendFile() SRC:{LocalEndPoint} DST:{RemoteEndPoint} UnsafeNclNativeMethods.OSSOCK.TransmitFile returns errorCode:{errorCode}"); " is 157.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SendTo,The length of the statement  "            SocketError errorCode = SocketPal.SendTo(_handle' buffer' offset' size' socketFlags' socketAddress.Buffer' socketAddress.Size' out bytesTransferred); " is 149.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Receive,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} DST:{RemoteEndPoint} bytesTransferred:{bytesTransferred}"); " is 137.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Receive,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} DST:{RemoteEndPoint} Interop.Winsock.send returns errorCode:{errorCode} bytesTransferred:{bytesTransferred}"); " is 188.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Receive,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} DST:{RemoteEndPoint} bytesTransferred:{bytesTransferred}"); " is 137.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFrom,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidEndPointAddressFamily' remoteEP.AddressFamily' _addressFamily)' nameof(remoteEP)); " is 134.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFrom,The length of the statement  "            SocketError errorCode = SocketPal.ReceiveMessageFrom(this' _handle' buffer' offset' size' ref socketFlags' socketAddress' out receiveAddress' out ipPacketInformation' out bytesTransferred); " is 189.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveFrom,The length of the statement  "            SocketError errorCode = SocketPal.ReceiveFrom(_handle' buffer' offset' size' socketFlags' socketAddress.Buffer' ref socketAddress.InternalSize' out bytesTransferred); " is 166.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,IOControl,The length of the statement  "            SocketError errorCode = SocketPal.WindowsIoctl(_handle' ioControlCode' optionInValue' optionOutValue' out realOptionLength); " is 124.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"optionLevel:{optionLevel} optionName:{optionName} optionValue:{optionValue}"); " is 136.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"optionLevel:{optionLevel} optionName:{optionName} optionValue:{optionValue}"); " is 136.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"optionLevel:{optionLevel} optionName:{optionName} optionValue:{optionValue}"); " is 136.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,The length of the statement  "                    throw new ArgumentException(SR.Format(SR.ArgumentOutOfRange_Bounds_Lower_Upper' 0' (int)UInt16.MaxValue)' "optionValue.LingerTime"); " is 132.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,The length of the statement  "            else if (optionLevel == SocketOptionLevel.IP && (optionName == SocketOptionName.AddMembership || optionName == SocketOptionName.DropMembership)) " is 144.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,The length of the statement  "            else if (optionLevel == SocketOptionLevel.IPv6 && (optionName == SocketOptionName.AddMembership || optionName == SocketOptionName.DropMembership)) " is 146.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,GetSocketOption,The length of the statement  "            else if (optionLevel == SocketOptionLevel.IP && (optionName == SocketOptionName.AddMembership || optionName == SocketOptionName.DropMembership)) " is 144.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,GetSocketOption,The length of the statement  "            else if (optionLevel == SocketOptionLevel.IPv6 && (optionName == SocketOptionName.AddMembership || optionName == SocketOptionName.DropMembership)) " is 146.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Poll,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.select returns socketCount:{(int)errorCode}"); " is 120.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Select,The length of the statement  "            if ((checkRead == null || checkRead.Count == 0) && (checkWrite == null || checkWrite.Count == 0) && (checkError == null || checkError.Count == 0)) " is 146.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Select,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(checkRead)' SR.Format(SR.net_sockets_toolarge_select' nameof(checkRead)' MaxSelect.ToString(NumberFormatInfo.CurrentInfo))); " is 169.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Select,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(checkWrite)' SR.Format(SR.net_sockets_toolarge_select' nameof(checkWrite)' MaxSelect.ToString(NumberFormatInfo.CurrentInfo))); " is 171.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Select,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(checkError)' SR.Format(SR.net_sockets_toolarge_select' nameof(checkError)' MaxSelect.ToString(NumberFormatInfo.CurrentInfo))); " is 171.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginConnect,The length of the statement  "            MultipleAddressConnectAsyncResult result = new MultipleAddressConnectAsyncResult(null' port' this' state' requestCallback); " is 123.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginConnect,The length of the statement  "            MultipleAddressConnectAsyncResult result = new MultipleAddressConnectAsyncResult(addresses' port' this' state' requestCallback); " is 128.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginDisconnect,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"UnsafeNclNativeMethods.OSSOCK.DisConnectEx returns:{errorCode}"); " is 123.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Disconnect,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"UnsafeNclNativeMethods.OSSOCK.DisConnectEx returns:{errorCode}"); " is 123.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndConnect,The length of the statement  "                    SocketException se = SocketExceptionFactory.CreateSocketException(castedAsyncResult.ErrorCode' castedAsyncResult.RemoteEndPoint); " is 129.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginSend,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.WSASend returns:{errorCode} size:{size} returning AsyncResult:{asyncResult}"); " is 152.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginSend,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.WSASend returns:{errorCode} returning AsyncResult:{asyncResult}"); " is 140.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginSendFile,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"::DoBeginSendFile() SRC:{LocalEndPoint} DST:{RemoteEndPoint} fileName:{fileName}"); " is 141.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginSendTo,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.WSASend returns:{errorCode} size:{size} returning AsyncResult:{asyncResult}"); " is 152.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginReceive,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.WSARecv returns:{errorCode} returning AsyncResult:{asyncResult}"); " is 140.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginReceive,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.WSARecv returns:{errorCode} returning AsyncResult:{asyncResult}"); " is 140.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceive,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} DST:{RemoteEndPoint} bytesTransferred:{bytesTransferred}"); " is 137.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidEndPointAddressFamily' remoteEP.AddressFamily' _addressFamily)' nameof(remoteEP)); " is 134.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,The length of the statement  "                errorCode = SocketPal.ReceiveMessageFromAsync(this' _handle' buffer' offset' size' socketFlags' socketAddress' asyncResult); " is 124.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,The length of the statement  "                    // or not depending on the error code.  If WSAEMSGSIZE would have been normally returned' it returns WSA_IO_PENDING instead. " is 124.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.WSARecvMsg returns:{errorCode} size:{size} returning AsyncResult:{asyncResult}"); " is 155.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceiveMessageFrom,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidEndPointAddressFamily' endPoint.AddressFamily' _addressFamily)' nameof(endPoint)); " is 134.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceiveMessageFrom,The length of the statement  "            if ((SocketError)castedAsyncResult.ErrorCode != SocketError.Success && (SocketError)castedAsyncResult.ErrorCode != SocketError.MessageSize) " is 139.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveFrom,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidEndPointAddressFamily' remoteEP.AddressFamily' _addressFamily)' nameof(remoteEP)); " is 134.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginReceiveFrom,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"Interop.Winsock.WSARecvFrom returns:{errorCode} size:{size} returning AsyncResult:{asyncResult}"); " is 156.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceiveFrom,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidEndPointAddressFamily' endPoint.AddressFamily' _addressFamily)' nameof(endPoint)); " is 134.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoBeginAccept,The length of the statement  "            SocketError errorCode = SocketPal.AcceptAsync(this' _handle' acceptHandle' receiveSize' socketAddressSize' asyncResult); " is 120.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndAccept,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} acceptedSocket:{socket} acceptedSocket.SRC:{socket.LocalEndPoint} acceptSocket.DST:{socket.RemoteEndPoint} bytesTransferred:{bytesTransferred}"); " is 223.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveFromAsync,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidEndPointAddressFamily' e.RemoteEndPoint.AddressFamily' _addressFamily)' "RemoteEndPoint"); " is 142.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFromAsync,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidEndPointAddressFamily' e.RemoteEndPoint.AddressFamily' _addressFamily)' "RemoteEndPoint"); " is 142.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,GetIPProtocolInformation,The length of the statement  "            bool isIPv4MappedToIPv6 = socketAddress.Family == AddressFamily.InterNetworkV6 && socketAddress.GetIPAddress().IsIPv4MappedToIPv6; " is 130.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,DoConnect,The length of the statement  "                    if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"SRC:{LocalEndPoint} DST:{RemoteEndPoint} Interop.Winsock.WSAConnect returns errorCode:{errorCode}"); " is 158.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetReceivingPacketInformation,The length of the statement  "                if ((boundAddress != null && IsDualMode && (boundAddress.IsIPv4MappedToIPv6 || boundAddress.Equals(IPAddress.IPv6Any)))) " is 120.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetSocketOption,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Enter(this' $"optionLevel:{optionLevel} optionName:{optionName} optionValue:{optionValue} silent:{silent}"); " is 153.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,InternalSetBlocking,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Enter(this' $"desired:{desired} willBlock:{_willBlock} willBlockInternal:{_willBlockInternal}"); " is 141.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,InternalSetBlocking,The length of the statement  "            if (NetEventSource.IsEnabled) NetEventSource.Info(this' $"errorCode:{errorCode} willBlock:{_willBlock} willBlockInternal:{_willBlockInternal}"); " is 144.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,PostOneBeginConnect,The length of the statement  "                return context._lastException != null ? context._lastException : new ArgumentException(SR.net_invalidAddressList' nameof(context)); " is 131.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,PostOneBeginConnect,The length of the statement  "                IAsyncResult connectResult = context._socket.UnsafeBeginConnect(endPoint' CachedMultipleAddressConnectCallback' context); " is 121.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,AcceptAsync,The length of the statement  "            TaskSocketAsyncEventArgs<Socket> saea = Interlocked.Exchange(ref LazyInitializer.EnsureInitialized(ref _cachedTaskEventArgs).Accept' s_rentedSocketSentinel); " is 157.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFromAsync,The length of the statement  "            var tcs = new StateTaskCompletionSource<SocketFlags' EndPoint' SocketReceiveMessageFromResult>(this) { _field1 = socketFlags' _field2 = remoteEndPoint }; " is 153.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFromAsync,The length of the statement  "                    int receivedBytes = ((Socket)innerTcs.Task.AsyncState).EndReceiveMessageFrom(iar' ref innerTcs._field1' ref innerTcs._field2' out ipPacketInformation); " is 151.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SendAsync,The length of the statement  "                ConfigureBuffer(saea' Unsafe.As<ReadOnlyMemory<byte>'Memory<byte>>(ref buffer)' socketFlags' wrapExceptionsInIOExceptions: fromNetworkStream); " is 142.
Long Statement,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,GetValueTaskForSendReceive,The length of the statement  "                    new ValueTask<int>(Task.FromException<int>(GetException(saea.SocketError' wrapExceptionsInIOExceptions: fromNetworkStream))); " is 125.
Long Statement,System.Net.Sockets,TaskSocketAsyncEventArgs<TResult>,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs,GetCompletionResponsibility,The length of the statement  "                    var ignored = _builder.Task; // force initialization under the lock (builder itself lazily initializes w/o synchronization) " is 123.
Long Statement,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,FinishOperationSyncSuccess,The length of the statement  "                        _acceptSocket = _currentSocket.UpdateAcceptSocket(_acceptSocket' _currentSocket._rightEndPoint.Create(remoteSocketAddress)); " is 124.
Long Statement,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,FinishOperationSyncSuccess,The length of the statement  "                        if (NetEventSource.IsEnabled) NetEventSource.Accepted(_acceptSocket' _acceptSocket.RemoteEndPoint' _acceptSocket.LocalEndPoint); " is 128.
Long Statement,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,FinishOperationSyncSuccess,The length of the statement  "                        if (NetEventSource.IsEnabled) NetEventSource.Connected(_currentSocket' _currentSocket.LocalEndPoint' _currentSocket.RemoteEndPoint); " is 132.
Long Statement,System.Net.Sockets,TcpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\TCPClient.cs,Connect,The length of the statement  "                            Debug.Assert(address.AddressFamily == AddressFamily.InterNetwork || address.AddressFamily == AddressFamily.InterNetworkV6); " is 123.
Long Statement,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,BeginReceive,The length of the statement  "            return _clientSocket.BeginReceiveFrom(_buffer' 0' MaxUDPSize' SocketFlags.None' ref tempRemoteEP' requestCallback' state); " is 122.
Long Statement,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,SendAsync,The length of the statement  "                (targetDatagram' targetBytes' callback' state) => ((UdpClient)state).BeginSend(targetDatagram' targetBytes' callback' state)' " is 125.
Long Statement,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,SendAsync,The length of the statement  "                (targetDatagram' targetBytes' targetEndpoint' callback' state) => ((UdpClient)state).BeginSend(targetDatagram' targetBytes' targetEndpoint' callback' state)' " is 157.
Long Statement,System.Net.Sockets,MultipleConnectAsync,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\MultipleConnectAsync.cs,Succeed,The length of the statement  "            _userArgs.FinishWrapperConnectSuccess(_internalArgs.ConnectSocket' _internalArgs.BytesTransferred' _internalArgs.SocketFlags); " is 126.
Long Statement,System.Net.Sockets,SafeCloseSocket,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SafeCloseSocket.cs,ReleaseHandle,The length of the statement  "            InnerSafeCloseSocket innerSocket = _innerSocket == null ? null : Interlocked.Exchange<InnerSafeCloseSocket>(ref _innerSocket' null); " is 132.
Long Statement,System.Net.Sockets,SafeCloseSocket,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SafeCloseSocket.cs,CloseAsIs,The length of the statement  "                InnerSafeCloseSocket innerSocket = _innerSocket == null ? null : Interlocked.Exchange<InnerSafeCloseSocket>(ref _innerSocket' null); " is 132.
Long Statement,System.Net.Sockets,IPEndPointExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPEndPointExtensions.cs,Create,The length of the statement  "                throw new ArgumentException(SR.Format(SR.net_InvalidAddressFamily' family.ToString()' thisObj.GetType().FullName' thisObj.AddressFamily.ToString())' nameof(socketAddress)); " is 172.
Long Statement,System.Net.Sockets,IPEndPointExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPEndPointExtensions.cs,Create,The length of the statement  "                    throw new ArgumentException(SR.Format(SR.net_InvalidSocketAddressSize' socketAddress.GetType().FullName' thisObj.GetType().FullName)' nameof(socketAddress)); " is 157.
Long Statement,System.Net.Sockets,IPAddressExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPAddressExtensions.cs,Snapshot,The length of the statement  "#pragma warning disable CS0618 // IPAddress.Address is obsoleted' but it's the most efficient way to get the Int32 IPv4 address " is 127.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DumpBuffer,The length of the statement  "                    Fail(thisOrContextObject' $"Invalid {nameof(DumpBuffer)} Args. Length={buffer.Length}' Offset={offset}' Count={count}"' memberName); " is 132.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DumpBuffer,The length of the statement  "                byte[] slice = buffer.TryGetArray(out ArraySegment<byte> arraySegment) && arraySegment.Offset == 0 && arraySegment.Count == buffer.Length ? " is 139.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Enter,The length of the statement  "            if (IsEnabled) Log.Enter(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 134.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Exit,The length of the statement  "            if (IsEnabled) Log.Exit(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Info,The length of the statement  "            if (IsEnabled) Log.Info(IdOf(thisOrContextObject)' memberName' formattableString != null ? Format(formattableString) : NoParameters); " is 133.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DumpBuffer,The length of the statement  "                    Fail(thisOrContextObject' $"Invalid {nameof(DumpBuffer)} Args. Length={buffer.Length}' Offset={offset}' Count={count}"' memberName); " is 132.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is ValueType)' $"Should not be passing value type {arg?.GetType()} to logging without IsEnabled check"); " is 123.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DebugValidateArg,The length of the statement  "                Debug.Assert(!(arg is FormattableString)' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 124.
Long Statement,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,DebugValidateArg,The length of the statement  "            Debug.Assert(IsEnabled || arg == null' $"Should not be formatting FormattableString \"{arg}\" if tracing isn't enabled"); " is 121.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "Thread changed from User to System; user's thread shouldn't be hijacked."); " is 133.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "Thread changed from Async to Sync' may block an Async thread."); " is 122.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadKind,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "Thread from a limited resource changed to Sync' may deadlock or bottleneck."); " is 136.
Long Statement,System.Net,DebugThreadTracking,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Logging\DebugThreadTracking.cs,SetThreadSource,The length of the statement  "                if (NetEventSource.IsEnabled) NetEventSource.Error(null' "SetThreadSource must be called at the base of the stack' or the stack has been corrupted."); " is 150.
Long Statement,System.Net,ContextAwareResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ContextAwareResult.cs,Complete,The length of the statement  "            // the completion for the CaptureOrComplete() call to avoid the context flow.  If not' we know CaptureOrComplete() has completed. " is 129.
Complex Conditional,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Select,The conditional expression  "(checkRead == null || checkRead.Count == 0) && (checkWrite == null || checkWrite.Count == 0) && (checkError == null || checkError.Count == 0)"  is complex.
Complex Conditional,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,SetReceivingPacketInformation,The conditional expression  "(boundAddress != null && IsDualMode && (boundAddress.IsIPv4MappedToIPv6 || boundAddress.Equals(IPAddress.IPv6Any)))"  is complex.
Complex Conditional,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,UpdateStatusAfterSocketError,The conditional expression  "_isConnected && (_handle.IsInvalid || (errorCode != SocketError.WouldBlock &&                      errorCode != SocketError.IOPending && errorCode != SocketError.NoBufferSpaceAvailable &&                      errorCode != SocketError.TimedOut))"  is complex.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveMessageFrom,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,ReceiveFrom,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveMessageFrom,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceiveMessageFrom,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,BeginReceiveFrom,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,EndReceiveFrom,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Dispose,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,InternalShutdown,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,FinishOperationSyncSuccess,The method has an empty catch block.
Empty Catch Block,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,FinishOperationSyncSuccess,The method has an empty catch block.
Empty Catch Block,System.Net,LazyAsyncResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\LazyAsyncResult.cs,ProtectedInvokeCallback,The method has an empty catch block.
Empty Catch Block,System.Net,LazyAsyncResult,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\LazyAsyncResult.cs,WaitForCompletion,The method has an empty catch block.
Magic Number,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Select,The following statement contains a magic number: const int MaxSelect = 65536;
Magic Number,System.Net.Sockets,Socket,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs,Dispose,The following statement contains a magic number: while ((last = Interlocked.CompareExchange(ref _intCleanedUp' 1' 0)) == 2)              {                  sw.SpinOnce();              }
Magic Number,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,StartOperationAccept,The following statement contains a magic number: _acceptAddressBufferCount = 2 * (Socket.GetAddressSize(_currentSocket._rightEndPoint) + 16);
Magic Number,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,StartOperationAccept,The following statement contains a magic number: _acceptAddressBufferCount = 2 * (Socket.GetAddressSize(_currentSocket._rightEndPoint) + 16);
Magic Number,System.Net.Sockets,UdpClient,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\UDPClient.cs,JoinMulticastGroup,The following statement contains a magic number: if (!RangeValidationHelpers.ValidateRange(timeToLive' 0' 255))              {                  throw new ArgumentOutOfRangeException(nameof(timeToLive));              }
Magic Number,System.Net.Sockets,IPEndPointExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPEndPointExtensions.cs,Create,The following statement contains a magic number: if (family == AddressFamily.InterNetwork || family == AddressFamily.InterNetworkV6)              {                  if (socketAddress.Size < 8)                  {                      throw new ArgumentException(SR.Format(SR.net_InvalidSocketAddressSize' socketAddress.GetType().FullName' thisObj.GetType().FullName)' nameof(socketAddress));                  }                    return socketAddress.GetIPEndPoint();              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,Format,The following statement contains a magic number: switch (s.ArgumentCount)              {                  case 0: return s.Format;                  case 1: return string.Format(s.Format' Format(s.GetArgument(0)));                  case 2: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1)));                  case 3: return string.Format(s.Format' Format(s.GetArgument(0))' Format(s.GetArgument(1))' Format(s.GetArgument(2)));                  default:                      object[] args = s.GetArguments();                      object[] formattedArgs = new object[args.Length];                      for (int i = 0; i < args.Length; i++)                      {                          formattedArgs[i] = Format(args[i]);                      }                      return string.Format(s.Format' formattedArgs);              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                  if (arg4 == null) arg4 = "";                    fixed (char* string1Bytes = arg1)                  fixed (char* string2Bytes = arg2)                  fixed (char* string3Bytes = arg3)                  fixed (char* string4Bytes = arg4)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)string1Bytes;                      descrs[0].Size = ((arg1.Length + 1) * 2);                        descrs[1].DataPointer = (IntPtr)string2Bytes;                      descrs[1].Size = ((arg2.Length + 1) * 2);                        descrs[2].DataPointer = (IntPtr)string3Bytes;                      descrs[2].Size = ((arg3.Length + 1) * 2);                        descrs[3].DataPointer = (IntPtr)string4Bytes;                      descrs[3].Size = ((arg4.Length + 1) * 2);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = Array.Empty<byte>();                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (byte* arg3Ptr = arg3)                  {                      int bufferLength = arg3.Length;                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)arg1Ptr;                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)arg2Ptr;                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&bufferLength);                      descrs[2].Size = 4;                        descrs[3].DataPointer = (IntPtr)arg3Ptr;                      descrs[3].Size = bufferLength;                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                    fixed (char* arg1Ptr = arg1)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(&arg2);                      descrs[1].Size = sizeof(int);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  {                      const int NumEventDatas = 3;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(&arg3);                      descrs[2].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,NetEventSource,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\NetEventSource.Sockets.cs,WriteEvent,The following statement contains a magic number: if (IsEnabled())              {                  if (arg1 == null) arg1 = "";                  if (arg2 == null) arg2 = "";                  if (arg3 == null) arg3 = "";                    fixed (char* arg1Ptr = arg1)                  fixed (char* arg2Ptr = arg2)                  fixed (char* arg3Ptr = arg3)                  {                      const int NumEventDatas = 4;                      var descrs = stackalloc EventData[NumEventDatas];                        descrs[0].DataPointer = (IntPtr)(arg1Ptr);                      descrs[0].Size = (arg1.Length + 1) * sizeof(char);                        descrs[1].DataPointer = (IntPtr)(arg2Ptr);                      descrs[1].Size = (arg2.Length + 1) * sizeof(char);                        descrs[2].DataPointer = (IntPtr)(arg3Ptr);                      descrs[2].Size = (arg3.Length + 1) * sizeof(char);                        descrs[3].DataPointer = (IntPtr)(&arg4);                      descrs[3].Size = sizeof(int);                        WriteEventCore(eventId' NumEventDatas' descrs);                  }              }
Magic Number,System.Net,ByteOrder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ByteOrder.cs,HostToNetworkBytes,The following statement contains a magic number: bytes[index] = (byte)(host >> 8);
Magic Number,System.Net,ByteOrder,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\ByteOrder.cs,NetworkBytesToHostUInt16,The following statement contains a magic number: return (ushort)(((ushort)bytes[index] << 8) | (ushort)bytes[index + 1]);
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,SocketAddress,The following statement contains a magic number: Buffer = new byte[(size / IntPtr.Size + 2) * IntPtr.Size];
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 1] = unchecked((byte)(InternalSize >> 8));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 2] = unchecked((byte)(InternalSize >> 16));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 2] = unchecked((byte)(InternalSize >> 16));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 3] = unchecked((byte)(InternalSize >> 24));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,CopyAddressSizeIntoBuffer,The following statement contains a magic number: Buffer[Buffer.Length - IntPtr.Size + 3] = unchecked((byte)(InternalSize >> 24));
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Magic Number,System.Net.Internals,SocketAddress,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\SocketAddress.cs,GetHashCode,The following statement contains a magic number: if (_changed)              {                  _changed = false;                  _hash = 0;                    int i;                  int size = Size & ~3;                    for (i = 0; i < size; i += 4)                  {                      _hash ^= (int)Buffer[i]                              | ((int)Buffer[i + 1] << 8)                              | ((int)Buffer[i + 2] << 16)                              | ((int)Buffer[i + 3] << 24);                  }                  if ((Size & 3) != 0)                  {                      int remnant = 0;                      int shift = 0;                        for (; i < Size; ++i)                      {                          remnant |= ((int)Buffer[i]) << shift;                          shift += 8;                      }                      _hash ^= remnant;                  }              }
Missing Default,System.Net.Sockets,SocketAsyncEventArgs,C:\selectedRepos\dotnet_corefx\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs,FinishOperationSyncSuccess,The following switch statement is missing a default case: switch (_completedOperation)              {                  case SocketAsyncOperation.Accept:                      // Get the endpoint.                      Internals.SocketAddress remoteSocketAddress = IPEndPointExtensions.Serialize(_currentSocket._rightEndPoint);                        socketError = FinishOperationAccept(remoteSocketAddress);                        if (socketError == SocketError.Success)                      {                          _acceptSocket = _currentSocket.UpdateAcceptSocket(_acceptSocket' _currentSocket._rightEndPoint.Create(remoteSocketAddress));                            if (NetEventSource.IsEnabled) NetEventSource.Accepted(_acceptSocket' _acceptSocket.RemoteEndPoint' _acceptSocket.LocalEndPoint);                      }                      else                      {                          SetResults(socketError' bytesTransferred' flags);                          _acceptSocket = null;                          _currentSocket.UpdateStatusAfterSocketError(socketError);                      }                      break;                    case SocketAsyncOperation.Connect:                      socketError = FinishOperationConnect();                      if (socketError == SocketError.Success)                      {                          if (NetEventSource.IsEnabled) NetEventSource.Connected(_currentSocket' _currentSocket.LocalEndPoint' _currentSocket.RemoteEndPoint);                            // Mark socket connected.                          _currentSocket.SetToConnected();                          _connectSocket = _currentSocket;                      }                      else                      {                          SetResults(socketError' bytesTransferred' flags);                          _currentSocket.UpdateStatusAfterSocketError(socketError);                      }                      break;                    case SocketAsyncOperation.Disconnect:                      _currentSocket.SetToDisconnected();                      _currentSocket._remoteEndPoint = null;                      break;                    case SocketAsyncOperation.ReceiveFrom:                      // Deal with incoming address.                      _socketAddress.InternalSize = GetSocketAddressSize();                      Internals.SocketAddress socketAddressOriginal = IPEndPointExtensions.Serialize(_remoteEndPoint);                      if (!socketAddressOriginal.Equals(_socketAddress))                      {                          try                          {                              _remoteEndPoint = _remoteEndPoint.Create(_socketAddress);                          }                          catch                          {                          }                      }                      break;                    case SocketAsyncOperation.ReceiveMessageFrom:                      // Deal with incoming address.                      _socketAddress.InternalSize = GetSocketAddressSize();                      socketAddressOriginal = IPEndPointExtensions.Serialize(_remoteEndPoint);                      if (!socketAddressOriginal.Equals(_socketAddress))                      {                          try                          {                              _remoteEndPoint = _remoteEndPoint.Create(_socketAddress);                          }                          catch                          {                          }                      }                        FinishOperationReceiveMessageFrom();                      break;                    case SocketAsyncOperation.SendPackets:                      FinishOperationSendPackets();                      break;              }
Missing Default,System.Net.Sockets,IPAddressExtensions,C:\selectedRepos\dotnet_corefx\src\Common\src\System\Net\Internals\IPAddressExtensions.cs,Snapshot,The following switch statement is missing a default case: switch (original.AddressFamily)              {                  case AddressFamily.InterNetwork:  #pragma warning disable CS0618 // IPAddress.Address is obsoleted' but it's the most efficient way to get the Int32 IPv4 address                      return new IPAddress(original.Address);  #pragma warning restore CS0618                    case AddressFamily.InterNetworkV6:                      Span<byte> addressBytes = stackalloc byte[IPAddressParserStatics.IPv6AddressBytes];                      original.TryWriteBytes(addressBytes' out int bytesWritten);                      Debug.Assert(bytesWritten == IPAddressParserStatics.IPv6AddressBytes);                      return new IPAddress(addressBytes' (uint)original.ScopeId);              }
