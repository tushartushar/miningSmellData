Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,Encode,The method has 207 lines of code.
Long Method,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,TryDecode,The method has 161 lines of code.
Long Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,SendRequestHelper,The method has 340 lines of code.
Long Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The method has 143 lines of code.
Long Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The method has 200 lines of code.
Long Method,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,StartTransportLayerSecurity,The method has 169 lines of code.
Complex Method,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,Encode,Cyclomatic complexity of the method is 9
Complex Method,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,TryDecode,Cyclomatic complexity of the method is 8
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BeginSendRequest,Cyclomatic complexity of the method is 10
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,SendRequestHelper,Cyclomatic complexity of the method is 9
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ProcessClientCertificate,Cyclomatic complexity of the method is 8
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,Connect,Cyclomatic complexity of the method is 8
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,Cyclomatic complexity of the method is 9
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BuildControlArray,Cyclomatic complexity of the method is 8
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BuildAttributes,Cyclomatic complexity of the method is 10
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,Cyclomatic complexity of the method is 9
Complex Method,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructParsedResult,Cyclomatic complexity of the method is 8
Complex Method,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,StartTransportLayerSecurity,Cyclomatic complexity of the method is 15
Long Parameter List,System.DirectoryServices.Protocols,DirSyncResponseControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,DirSyncResponseControl,The method has 5 parameters. Parameters: cookie' moreData' resultSize' criticality' controlValue
Long Parameter List,System.DirectoryServices.Protocols,VlvResponseControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,VlvResponseControl,The method has 6 parameters. Parameters: targetPosition' count' context' result' criticality' value
Long Parameter List,System.DirectoryServices.Protocols,DirectoryResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,DirectoryResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,DeleteResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,DeleteResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,AddResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,AddResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,ModifyResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,ModifyResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,ModifyDNResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,ModifyDNResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,CompareResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,CompareResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,ExtendedResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,ExtendedResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,SearchResponse,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryResponse.cs,SearchResponse,The method has 5 parameters. Parameters: dn' controls' result' message' referral
Long Parameter List,System.DirectoryServices.Protocols,LdapPartialAsyncResult,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapAsyncResult.cs,LdapPartialAsyncResult,The method has 7 parameters. Parameters: messageID' callbackRoutine' state' partialResults' con' partialCallback' requestTimeout
Long Parameter List,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BeginSendRequest,The method has 5 parameters. Parameters: request' requestTimeout' partialMode' callback' state
Long Parameter List,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The method has 5 parameters. Parameters: messageId' operation' resultType' requestTimeOut' exceptionOnTimeOut
Long Parameter List,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructParsedResult,The method has 6 parameters. Parameters: ldapResult' serverError' responseDn' responseMessage' responseReferral' responseControl
Long Parameter List,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessQueryConnection,The method has 8 parameters. Parameters: PrimaryConnection' ReferralFromConnection' NewDNPtr' HostName' PortNumber' SecAuthIdentity' CurrentUserToken' ConnectionToUse
Long Parameter List,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessNotifyConnection,The method has 9 parameters. Parameters: primaryConnection' referralFromConnection' newDNPtr' hostName' newConnection' portNumber' SecAuthIdentity' currentUser' errorCodeFromBind
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_delete_ext,The method has 5 parameters. Parameters: ldapHandle' dn' servercontrol' clientcontrol' messageNumber
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_result,The method has 5 parameters. Parameters: ldapHandle' messageId' all' timeout' Mesage
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_parse_result,The method has 8 parameters. Parameters: ldapHandle' result' serverError' dn' message' referral' control' freeIt
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_parse_result_referral,The method has 8 parameters. Parameters: ldapHandle' result' serverError' dn' message' referral' control' freeIt
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_start_tls,The method has 5 parameters. Parameters: ldapHandle' ServerReturnValue' Message' ServerControls' ClientControls
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_rename,The method has 8 parameters. Parameters: ldapHandle' dn' newRdn' newParentDn' deleteOldRdn' servercontrol' clientcontrol' messageNumber
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_compare,The method has 8 parameters. Parameters: ldapHandle' dn' attributeName' strValue' binaryValue' servercontrol' clientcontrol' messageNumber
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_add,The method has 6 parameters. Parameters: ldapHandle' dn' attrs' servercontrol' clientcontrol' messageNumber
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_modify,The method has 6 parameters. Parameters: ldapHandle' dn' attrs' servercontrol' clientcontrol' messageNumber
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_extended_operation,The method has 6 parameters. Parameters: ldapHandle' oid' data' servercontrol' clientcontrol' messageNumber
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_parse_extended_result,The method has 5 parameters. Parameters: ldapHandle' result' oid' data' freeIt
Long Parameter List,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,ldap_search,The method has 11 parameters. Parameters: ldapHandle' dn' scope' filter' attributes' attributeOnly' servercontrol' clientcontrol' timelimit' sizelimit' messageNumber
Long Identifier,System.DirectoryServices.Protocols,DirectoryAttribute,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryAttribute.cs,,The length of the parameter s_utf8EncoderWithErrorDetection is 31.
Long Identifier,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,,The length of the parameter SEC_WINNT_AUTH_IDENTITY_UNICODE is 31.
Long Identifier,System.DirectoryServices.Protocols,Wldap32,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\Wldap32UnsafeMethods.cs,,The length of the parameter SEC_WINNT_AUTH_IDENTITY_VERSION is 31.
Long Statement,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,Encode,The length of the statement  "                // can't use SafeBerval here as CLR creates a SafeBerval which points to a different memory location' but when doing memory " is 123.
Long Statement,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,DecodingByteArrayHelper,The length of the statement  "            // can't use SafeBerval here as CLR creates a SafeBerval which points to a different memory location' but when doing memory " is 123.
Long Statement,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The length of the statement  "                    PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue()); " is 132.
Long Statement,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The length of the statement  "                    DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue()); " is 162.
Long Statement,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The length of the statement  "                    // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception " is 125.
Long Statement,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The length of the statement  "                    SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue()); " is 130.
Long Statement,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The length of the statement  "                    VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue()); " is 142.
Long Statement,System.DirectoryServices.Protocols,SortRequestControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,GetValue,The length of the statement  "                int error = Wldap32.ldap_create_sort_control(UtilityHandle.GetHandle()' memHandle' critical ? (byte)1 : (byte)0' ref control); " is 126.
Long Statement,System.DirectoryServices.Protocols,Utility,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\utils.cs,IsResultCode,The length of the statement  "            return (code == ResultCode.AliasDereferencingProblem || code == ResultCode.InappropriateAuthentication || code == ResultCode.SortControlMissing || code == ResultCode.OffsetRangeError || code == ResultCode.VirtualListViewError || code == ResultCode.Other); " is 255.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,Init,The length of the statement  "                _ldapHandle = new ConnectionHandle(Wldap32.cldap_open(hostname' ((LdapDirectoryIdentifier)_directoryIdentifier).PortNumber)' _needDispose); " is 139.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,Init,The length of the statement  "                _ldapHandle = new ConnectionHandle(Wldap32.ldap_init(hostname' ((LdapDirectoryIdentifier)_directoryIdentifier).PortNumber)' _needDispose); " is 138.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BeginSendRequest,The length of the statement  "            if (partialMode < PartialResultProcessing.NoPartialResultSupport || partialMode > PartialResultProcessing.ReturnPartialResultsAndNotifyCallback) " is 144.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BeginSendRequest,The length of the statement  "                    _fd.BeginInvoke(messageID' operation' ResultAll.LDAP_MSG_ALL' requestTimeout' true' new AsyncCallback(ResponseCallback)' requestState); " is 135.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,SendRequestHelper,The length of the statement  "                    error = Wldap32.ldap_delete_ext(_ldapHandle' ((DeleteRequest)request).DistinguishedName' serverControlArray' clientControlArray' ref messageID); " is 144.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ProcessClientCertificate,The length of the statement  "            // If the user specify certificate through property and not though option' we don't need to check the certificate authority. " is 124.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ProcessClientCertificate,The length of the statement  "                SecPkgContext_IssuerListInfoEx trustedCAs = (SecPkgContext_IssuerListInfoEx)Marshal.PtrToStructure(CAs' typeof(SecPkgContext_IssuerListInfoEx)); " is 144.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,Connect,The length of the statement  "                int certError = Wldap32.ldap_set_option_clientcert(_ldapHandle' LdapOption.LDAP_OPT_CLIENT_CERTIFICATE' _clientCertificateRoutine); " is 131.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The length of the statement  "            if (AuthType == AuthType.Anonymous && (newCredential != null && (!string.IsNullOrEmpty(newCredential.Password) || string.IsNullOrEmpty(newCredential.UserName)))) " is 161.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The length of the statement  "                _directoryCredential = tempCredential = (newCredential != null ? new NetworkCredential(newCredential.UserName' newCredential.Password' newCredential.Domain) : null); " is 165.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The length of the statement  "            if (tempCredential != null && tempCredential.UserName.Length == 0 && tempCredential.Password.Length == 0 && tempCredential.Domain.Length == 0) " is 142.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The length of the statement  "                        resultError = ConstructParsedResult(ldapResult' ref serverError' ref responseDn' ref responseMessage' ref responseReferral' ref responseControl); " is 145.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The length of the statement  "                            response = new ModifyDNResponse(responseDn' responseControl' (ResultCode)resultError' responseMessage' responseReferral); " is 121.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The length of the statement  "                            response = new CompareResponse(responseDn' responseControl' (ResultCode)resultError' responseMessage' responseReferral); " is 120.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The length of the statement  "                            response = new ExtendedResponse(responseDn' responseControl' (ResultCode)resultError' responseMessage' responseReferral); " is 121.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The length of the statement  "                                resultError = Wldap32.ldap_parse_extended_result(_ldapHandle' ldapResult' ref requestName' ref requestValue' 0 /*not free it*/); " is 128.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The length of the statement  "                        if (resultError != (int)ResultCode.Success && resultError != (int)ResultCode.CompareFalse && resultError != (int)ResultCode.CompareTrue && resultError != (int)ResultCode.Referral && resultError != (int)ResultCode.ReferralV2) " is 224.
Long Statement,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructParsedResult,The length of the statement  "                int resultError = Wldap32.ldap_parse_result(_ldapHandle' ldapResult' ref serverError' ref dn' ref message' ref referral' ref control' 0 /* not free it */); " is 155.
Long Statement,System.DirectoryServices.Protocols,LdapPartialResultsProcessor,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapPartialResultsProcessor.cs,RetrievingSearchResults,The length of the statement  "                    if (asyncResult._response != null && (asyncResult._response.Entries.Count > 0 || asyncResult._response.References.Count > 0)) " is 125.
Long Statement,System.DirectoryServices.Protocols,LdapPartialResultsProcessor,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapPartialResultsProcessor.cs,GetResultsHelper,The length of the statement  "                SearchResponse response = (SearchResponse)connection.ConstructResponse(asyncResult._messageID' LdapOperation.LdapSearch' resultType' asyncResult._requestTimeout' false); " is 169.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,FastConcurrentBind,The length of the statement  "            int error = Wldap32.ldap_set_option_int(_connection._ldapHandle' LdapOption.LDAP_OPT_FAST_CONCURRENT_BIND' ref inValue); " is 120.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,StartTransportLayerSecurity,The length of the statement  "                int error = Wldap32.ldap_start_tls(_connection._ldapHandle' ref serverError' ref ldapResult' serverControlArray' clientControlArray); " is 133.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,StartTransportLayerSecurity,The length of the statement  "                    int resultError = Wldap32.ldap_parse_result_referral(_connection._ldapHandle' ldapResult' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero' ref referral' IntPtr.Zero' 0 /* not free it */); " is 177.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessCallBackRoutine,The length of the statement  "            int error = Wldap32.ldap_set_option_referral(_connection._ldapHandle' LdapOption.LDAP_OPT_REFERRAL_CALLBACK' ref value); " is 120.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessQueryConnection,The length of the statement  "                            tempReferralConnection = new LdapConnection(((LdapDirectoryIdentifier)(_connection.Directory))' _connection.GetCredential()' _connection.AuthType' ReferralFromConnection); " is 171.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessQueryConnection,The length of the statement  "                LdapConnection con = _callbackRoutine.QueryForConnection(_connection' tempReferralConnection' NewDN' identifier' cred' tokenValue); " is 131.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessNotifyConnection,The length of the statement  "                            tempReferralConnection = new LdapConnection(((LdapDirectoryIdentifier)(_connection.Directory))' _connection.GetCredential()' _connection.AuthType' referralFromConnection); " is 171.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessNotifyConnection,The length of the statement  "                bool value = _callbackRoutine.NotifyNewConnection(_connection' tempReferralConnection' newDN' identifier' tempNewConnection' cred' tokenValue' errorCodeFromBind); " is 162.
Long Statement,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessDereferenceConnection,The length of the statement  "                    dereferenceConnection = new LdapConnection(((LdapDirectoryIdentifier)(_connection.Directory))' _connection.GetCredential()' _connection.AuthType' ConnectionToDereference); " is 171.
Complex Conditional,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,Encode,The conditional expression  "fmt == '{' || fmt == '}' || fmt == '[' || fmt == ']' || fmt == 'n'"  is complex.
Complex Conditional,System.DirectoryServices.Protocols,BerConverter,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\BerConverter.cs,TryDecode,The conditional expression  "fmt == '{' || fmt == '}' || fmt == '[' || fmt == ']' || fmt == 'n' || fmt == 'x'"  is complex.
Complex Conditional,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,LdapConnection,The conditional expression  "AuthType == AuthType.Anonymous && (_directoryCredential != null && (!string.IsNullOrEmpty(_directoryCredential.Password) || !string.IsNullOrEmpty(_directoryCredential.UserName)))"  is complex.
Complex Conditional,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,SendRequestHelper,The conditional expression  "AutoBind && (!_bounded || _needRebind) && ((LdapDirectoryIdentifier)Directory).Connectionless != true"  is complex.
Complex Conditional,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The conditional expression  "AuthType == AuthType.Anonymous && (newCredential != null && (!string.IsNullOrEmpty(newCredential.Password) || string.IsNullOrEmpty(newCredential.UserName)))"  is complex.
Complex Conditional,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The conditional expression  "tempCredential != null && tempCredential.UserName.Length == 0 && tempCredential.Password.Length == 0 && tempCredential.Domain.Length == 0"  is complex.
Complex Conditional,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,ConstructResponse,The conditional expression  "resultError != (int)ResultCode.Success && resultError != (int)ResultCode.CompareFalse && resultError != (int)ResultCode.CompareTrue && resultError != (int)ResultCode.Referral && resultError != (int)ResultCode.ReferralV2"  is complex.
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,DirectoryControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,TransformControls,The following statement contains a magic number: for (int i = 0; i < controls.Length; i++)              {                  Debug.Assert(controls[i] != null);                  byte[] value = controls[i].GetValue();                  if (controls[i].Type == "1.2.840.113556.1.4.319")                  {                      // The control is a PageControl.                      object[] result = BerConverter.Decode("{iO}"' value);                      Debug.Assert((result != null) && (result.Length == 2));                        int size = (int)result[0];                      // user expects cookie with length 0 as paged search is done.                      byte[] cookie = (byte[])result[1] ?? Array.Empty<byte>();                        PageResultResponseControl pageControl = new PageResultResponseControl(size' cookie' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = pageControl;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.1504")                  {                      // The control is an AsqControl.                      object[] o = BerConverter.Decode("{e}"' value);                      Debug.Assert((o != null) && (o.Length == 1));                        int result = (int)o[0];                      AsqResponseControl asq = new AsqResponseControl(result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = asq;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.841")                  {                      // The control is a DirSyncControl.                      object[] o = BerConverter.Decode("{iiO}"' value);                      Debug.Assert(o != null && o.Length == 3);                        int moreData = (int)o[0];                      int count = (int)o[1];                      byte[] dirsyncCookie = (byte[])o[2];                        DirSyncResponseControl dirsync = new DirSyncResponseControl(dirsyncCookie' (moreData == 0 ? false : true)' count' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = dirsync;                  }                  else if (controls[i].Type == "1.2.840.113556.1.4.474")                  {                      // The control is a SortControl.                      int result = 0;                      string attribute = null;                      object[] o = BerConverter.TryDecode("{ea}"' value' out bool decodeSucceeded);                        // decode might fail as AD for example never returns attribute name' we don't want to unnecessarily throw and catch exception                      if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 2);                          result = (int)o[0];                          attribute = (string)o[1];                      }                      else                      {                          // decoding might fail as attribute is optional                          o = BerConverter.Decode("{e}"' value);                          Debug.Assert(o != null && o.Length == 1);                            result = (int)o[0];                      }                        SortResponseControl sort = new SortResponseControl((ResultCode)result' attribute' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = sort;                  }                  else if (controls[i].Type == "2.16.840.1.113730.3.4.10")                  {                      // The control is a VlvResponseControl.                      int position;                      int count;                      int result;                      byte[] context = null;                      object[] o = BerConverter.TryDecode("{iieO}"' value' out bool decodeSucceeded);                        if (decodeSucceeded)                      {                          Debug.Assert(o != null && o.Length == 4);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                          context = (byte[])o[3];                      }                      else                      {                          o = BerConverter.Decode("{iie}"' value);                          Debug.Assert(o != null && o.Length == 3);                          position = (int)o[0];                          count = (int)o[1];                          result = (int)o[2];                      }                        VlvResponseControl vlv = new VlvResponseControl(position' count' context' (ResultCode)result' controls[i].IsCritical' controls[i].GetValue());                      controls[i] = vlv;                  }              }
Magic Number,System.DirectoryServices.Protocols,CrossDomainMoveControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,GetValue,The following statement contains a magic number: if (TargetDomainController != null)              {                  UTF8Encoding encoder = new UTF8Encoding();                  byte[] bytes = encoder.GetBytes(TargetDomainController);                    // Allocate large enough space for the '\0' character.                  _directoryControlValue = new byte[bytes.Length + 2];                  for (int i = 0; i < bytes.Length; i++)                  {                      _directoryControlValue[i] = bytes[i];                  }              }
Magic Number,System.DirectoryServices.Protocols,VlvRequestControl,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\common\DirectoryControl.cs,GetValue,The following statement contains a magic number: var seq = new StringBuilder(10);
Magic Number,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,Init,The following statement contains a magic number: if (servers != null && servers.Length != 0)              {                  var temp = new StringBuilder(200);                  for (int i = 0; i < servers.Length; i++)                  {                      if (servers[i] != null)                      {                          temp.Append(servers[i]);                          if (i < servers.Length - 1)                          {                              temp.Append(" ");                          }                      }                  }                    if (temp.Length != 0)                  {                      hostname = temp.ToString();                  }              }
Magic Number,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The following statement contains a magic number: if (AuthType == AuthType.Anonymous)              {                  error = Wldap32.ldap_simple_bind_s(_ldapHandle' null' null);              }              else if (AuthType == AuthType.Basic)              {                  var tempDomainName = new StringBuilder(100);                  if (domainName != null && domainName.Length != 0)                  {                      tempDomainName.Append(domainName);                      tempDomainName.Append("\\");                  }                    tempDomainName.Append(username);                  error = Wldap32.ldap_simple_bind_s(_ldapHandle' tempDomainName.ToString()' password);              }              else              {                  var cred = new SEC_WINNT_AUTH_IDENTITY_EX()                  {                      version = Wldap32.SEC_WINNT_AUTH_IDENTITY_VERSION'                      length = Marshal.SizeOf(typeof(SEC_WINNT_AUTH_IDENTITY_EX))'                      flags = Wldap32.SEC_WINNT_AUTH_IDENTITY_UNICODE                  };                  if (AuthType == AuthType.Kerberos)                  {                      cred.packageList = Wldap32.MICROSOFT_KERBEROS_NAME_W;                      cred.packageListLength = cred.packageList.Length;                  }                    if (tempCredential != null)                  {                      cred.user = username;                      cred.userLength = (username == null ? 0 : username.Length);                      cred.domain = domainName;                      cred.domainLength = (domainName == null ? 0 : domainName.Length);                      cred.password = password;                      cred.passwordLength = (password == null ? 0 : password.Length);                  }                    BindMethod method = BindMethod.LDAP_AUTH_NEGOTIATE;                  switch (AuthType)                  {                      case AuthType.Negotiate:                          method = BindMethod.LDAP_AUTH_NEGOTIATE;                          break;                      case AuthType.Kerberos:                          method = BindMethod.LDAP_AUTH_NEGOTIATE;                          break;                      case AuthType.Ntlm:                          method = BindMethod.LDAP_AUTH_NTLM;                          break;                      case AuthType.Digest:                          method = BindMethod.LDAP_AUTH_DIGEST;                          break;                      case AuthType.Sicily:                          method = BindMethod.LDAP_AUTH_SICILY;                          break;                      case AuthType.Dpa:                          method = BindMethod.LDAP_AUTH_DPA;                          break;                      case AuthType.Msn:                          method = BindMethod.LDAP_AUTH_MSN;                          break;                      case AuthType.External:                          method = BindMethod.LDAP_AUTH_EXTERNAL;                          break;                  }                    if (tempCredential == null && AuthType == AuthType.External)                  {                      error = Wldap32.ldap_bind_s(_ldapHandle' null' null' method);                  }                  else                  {                      error = Wldap32.ldap_bind_s(_ldapHandle' null' cred' method);                  }              }
Magic Number,System.DirectoryServices.Protocols,PartialResultsRetriever,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapPartialResultsProcessor.cs,ThreadRoutine,The following statement contains a magic number: while (true)              {                  // Make sure there is work to do.                  _workThreadWaitHandle.WaitOne();                    // Do the real work.                  try                  {                      _processor.RetrievingSearchResults();                  }                  catch (Exception e)                  {                      // We catch the exception here as we don't really want our worker thread to die because it                      // encounter certain exception when processing a single async operation.                      Debug.WriteLine(e.Message);                  }                    // Voluntarily gives up the CPU time.                  Thread.Sleep(250);              }
Magic Number,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,FastConcurrentBind,The following statement contains a magic number: ProtocolVersion = 3;
Magic Number,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessQueryConnection,The following statement contains a magic number: if (_callbackRoutine.QueryForConnection != null)              {                  if (NewDNPtr != IntPtr.Zero)                  {                      NewDN = Marshal.PtrToStringUni(NewDNPtr);                  }                    var target = new StringBuilder();                  target.Append(HostName);                  target.Append(":");                  target.Append(PortNumber);                  var identifier = new LdapDirectoryIdentifier(target.ToString());                    NetworkCredential cred = ProcessSecAuthIdentity(SecAuthIdentity);                  LdapConnection tempReferralConnection = null;                    // If ReferralFromConnection handle is valid.                  if (ReferralFromConnection != IntPtr.Zero)                  {                      lock (LdapConnection.s_objectLock)                      {                          // Make sure first whether we have saved it in the handle table before                          WeakReference reference = (WeakReference)(LdapConnection.s_handleTable[ReferralFromConnection]);                          if (reference != null && reference.IsAlive)                          {                              // Save this before and object has not been garbage collected yet.                              tempReferralConnection = (LdapConnection)reference.Target;                          }                          else                          {                              if (reference != null)                              {                                  // Connection has been garbage collected' we need to remove this one.                                  LdapConnection.s_handleTable.Remove(ReferralFromConnection);                              }                                // We don't have it yet' construct a new one.                              tempReferralConnection = new LdapConnection(((LdapDirectoryIdentifier)(_connection.Directory))' _connection.GetCredential()' _connection.AuthType' ReferralFromConnection);                                                            // Save it to the handle table.                              LdapConnection.s_handleTable.Add(ReferralFromConnection' new WeakReference(tempReferralConnection));                          }                      }                  }                    long tokenValue = (uint)CurrentUserToken.LowPart + (((long)CurrentUserToken.HighPart) << 32);                    LdapConnection con = _callbackRoutine.QueryForConnection(_connection' tempReferralConnection' NewDN' identifier' cred' tokenValue);                  if (con != null && con._ldapHandle != null && !con._ldapHandle.IsInvalid)                  {                      bool success = AddLdapHandleRef(con);                      if (success)                      {                          ConnectionToUse = con._ldapHandle.DangerousGetHandle();                      }                  }                    return 0;              }
Magic Number,System.DirectoryServices.Protocols,LdapSessionOptions,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapSessionOptions.cs,ProcessNotifyConnection,The following statement contains a magic number: if (newConnection != IntPtr.Zero && _callbackRoutine.NotifyNewConnection != null)              {                  string newDN = null;                  if (newDNPtr != IntPtr.Zero)                  {                      newDN = Marshal.PtrToStringUni(newDNPtr);                  }                    var target = new StringBuilder();                  target.Append(hostName);                  target.Append(":");                  target.Append(portNumber);                  var identifier = new LdapDirectoryIdentifier(target.ToString());                    NetworkCredential cred = ProcessSecAuthIdentity(SecAuthIdentity);                  LdapConnection tempNewConnection = null;                  LdapConnection tempReferralConnection = null;                    lock (LdapConnection.s_objectLock)                  {                      // Check whether the referralFromConnection handle is valid.                      if (referralFromConnection != IntPtr.Zero)                      {                          // Check whether we have save it in the handle table before.                          WeakReference reference = (WeakReference)(LdapConnection.s_handleTable[referralFromConnection]);                          if (reference != null && reference.IsAlive && null != ((LdapConnection)reference.Target)._ldapHandle)                          {                              // Save this before and object has not been garbage collected yet.                              tempReferralConnection = (LdapConnection)reference.Target;                          }                          else                          {                              // Connection has been garbage collected' we need to remove this one.                              if (reference != null)                              {                                  LdapConnection.s_handleTable.Remove(referralFromConnection);                              }                                // We don't have it yet' construct a new one.                              tempReferralConnection = new LdapConnection(((LdapDirectoryIdentifier)(_connection.Directory))' _connection.GetCredential()' _connection.AuthType' referralFromConnection);                                                            // Save it to the handle table.                              LdapConnection.s_handleTable.Add(referralFromConnection' new WeakReference(tempReferralConnection));                          }                      }                        if (newConnection != IntPtr.Zero)                      {                          // Check whether we have save it in the handle table before.                          WeakReference reference = (WeakReference)(LdapConnection.s_handleTable[newConnection]);                          if (reference != null && reference.IsAlive && null != ((LdapConnection)reference.Target)._ldapHandle)                          {                              // Save this before and object has not been garbage collected yet.                              tempNewConnection = (LdapConnection)reference.Target;                          }                          else                          {                              // Connection has been garbage collected' we need to remove this one.                              if (reference != null)                              {                                  LdapConnection.s_handleTable.Remove(newConnection);                              }                                // We don't have it yet' construct a new one.                              tempNewConnection = new LdapConnection(identifier' cred' _connection.AuthType' newConnection);                                // Save it to the handle table.                              LdapConnection.s_handleTable.Add(newConnection' new WeakReference(tempNewConnection));                          }                      }                  }                    long tokenValue = (uint)currentUser.LowPart + (((long)currentUser.HighPart) << 32);                  bool value = _callbackRoutine.NotifyNewConnection(_connection' tempReferralConnection' newDN' identifier' tempNewConnection' cred' tokenValue' errorCodeFromBind);                    if (value)                  {                      value = AddLdapHandleRef(tempNewConnection);                      if (value)                      {                          tempNewConnection.NeedDispose = true;                      }                  }                    return value;              }
Magic Number,System.DirectoryServices.Protocols,ConnectionHandle,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\SafeHandles.cs,ConnectionHandle,The following statement contains a magic number: SetHandle(Wldap32.ldap_init(null' 389));
Missing Default,System.DirectoryServices.Protocols,LdapConnection,C:\selectedRepos\dotnet_corefx\src\System.DirectoryServices.Protocols\src\System\DirectoryServices\Protocols\ldap\LdapConnection.cs,BindHelper,The following switch statement is missing a default case: switch (AuthType)                  {                      case AuthType.Negotiate:                          method = BindMethod.LDAP_AUTH_NEGOTIATE;                          break;                      case AuthType.Kerberos:                          method = BindMethod.LDAP_AUTH_NEGOTIATE;                          break;                      case AuthType.Ntlm:                          method = BindMethod.LDAP_AUTH_NTLM;                          break;                      case AuthType.Digest:                          method = BindMethod.LDAP_AUTH_DIGEST;                          break;                      case AuthType.Sicily:                          method = BindMethod.LDAP_AUTH_SICILY;                          break;                      case AuthType.Dpa:                          method = BindMethod.LDAP_AUTH_DPA;                          break;                      case AuthType.Msn:                          method = BindMethod.LDAP_AUTH_MSN;                          break;                      case AuthType.External:                          method = BindMethod.LDAP_AUTH_EXTERNAL;                          break;                  }
