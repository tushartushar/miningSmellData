Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Resque,Worker,C:\repos\alexdemers_csharp-resque\Worker.cs,Work,Cyclomatic complexity of the method is 8
Long Statement,Resque,Job,C:\repos\alexdemers_csharp-resque\Job.cs,GetInstance,The length of the statement  "            var performMethod = type.GetMethod("Perform"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy); " is 123.
Long Statement,Resque,Job,C:\repos\alexdemers_csharp-resque\Job.cs,GetInstance,The length of the statement  "            type.InvokeMember("Job"' BindingFlags.SetProperty | BindingFlags.Instance | BindingFlags.Public' null' _instance' new object[] { this }); " is 137.
Long Statement,Resque,Job,C:\repos\alexdemers_csharp-resque\Job.cs,GetInstance,The length of the statement  "            type.InvokeMember("Args"' BindingFlags.SetProperty | BindingFlags.Instance | BindingFlags.Public' null' _instance' new object[] { GetArgs() }); " is 143.
Long Statement,Resque,Job,C:\repos\alexdemers_csharp-resque\Job.cs,GetInstance,The length of the statement  "            type.InvokeMember("Queue"' BindingFlags.SetProperty | BindingFlags.Instance | BindingFlags.Public' null' _instance' new object[] { Queue }); " is 140.
Magic Number,Resque,Worker,C:\repos\alexdemers_csharp-resque\Worker.cs,Work,The following statement contains a magic number: try              {                  Startup();                    var threads = new List<Thread>();                    while (true)                  {                      if (_shutDown)                      {                          break;                      }                        var jobs = new List<Job>();                        if (!_paused)                      {                          Job job;                          do                          {                              job = Reserve();                                if (job != null)                              {                                  jobs.Add(job);                              }                                if (_maxThreads >= 0 && jobs.Count >= _maxThreads)                              {                                  break;                              }                          } while (job != null);                      }                        if (jobs.Count == 0)                      {                          if (interval == 0) break;                            Log("Sleeping for " + interval * 1000);                          Thread.Sleep(interval * 1000);                          continue;                      }                        foreach (var job in jobs)                      {                          var job1 = job;                            ThreadStart threadStart = delegate                          {                              Log("Got " + job1.Queue);                              WorkingOn(job1);                              Perform(job1);                          };                          var thread = new Thread(threadStart);                          threads.Add(thread);                          thread.Start();                      }                        foreach (var thread in threads)                      {                          thread.Join();                      }                                            DoneWorking();                  }              }              finally              {                  UnregisterWorker();              }
Magic Number,Resque,Worker,C:\repos\alexdemers_csharp-resque\Worker.cs,Work,The following statement contains a magic number: try              {                  Startup();                    var threads = new List<Thread>();                    while (true)                  {                      if (_shutDown)                      {                          break;                      }                        var jobs = new List<Job>();                        if (!_paused)                      {                          Job job;                          do                          {                              job = Reserve();                                if (job != null)                              {                                  jobs.Add(job);                              }                                if (_maxThreads >= 0 && jobs.Count >= _maxThreads)                              {                                  break;                              }                          } while (job != null);                      }                        if (jobs.Count == 0)                      {                          if (interval == 0) break;                            Log("Sleeping for " + interval * 1000);                          Thread.Sleep(interval * 1000);                          continue;                      }                        foreach (var job in jobs)                      {                          var job1 = job;                            ThreadStart threadStart = delegate                          {                              Log("Got " + job1.Queue);                              WorkingOn(job1);                              Perform(job1);                          };                          var thread = new Thread(threadStart);                          threads.Add(thread);                          thread.Start();                      }                        foreach (var thread in threads)                      {                          thread.Join();                      }                                            DoneWorking();                  }              }              finally              {                  UnregisterWorker();              }
Magic Number,Resque.Jobs,Status,C:\repos\alexdemers_csharp-resque\Jobs\Status.cs,Create,The following statement contains a magic number: var unixTimestamp = (long)(DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0)).TotalSeconds;
Magic Number,Resque.Jobs,Status,C:\repos\alexdemers_csharp-resque\Jobs\Status.cs,Update,The following statement contains a magic number: var unixTimestamp = (long)(DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0)).TotalSeconds;
Missing Default,Resque,Worker,C:\repos\alexdemers_csharp-resque\Worker.cs,Log,The following switch statement is missing a default case: switch (LogLevel)              {                  case LogType.Normal:                      Console.WriteLine("*** " + message);                      break;                  case LogType.Verbose:                      Console.WriteLine(string.Format("[{0}] {1}"' DateTime.UtcNow.ToString("u")' message));                      break;              }
