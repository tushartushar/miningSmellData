Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.IO.UnitTests,RMSAssert,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,BuffersAreEqual,The method has 6 parameters. Parameters: buffer1' offset1' buffer2' offset2' count' tolerance
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(0' 100' 200' this.useExponentialLargeBuffer)); " is 129.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(-1' 100' 200' this.useExponentialLargeBuffer)); " is 130.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' 0' 200' this.useExponentialLargeBuffer)); " is 129.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' -1' 200' this.useExponentialLargeBuffer)); " is 130.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferSizeLessThanBlockSize,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' 100' 99' this.useExponentialLargeBuffer)); " is 130.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The length of the statement  "            Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer)); " is 123.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The length of the statement  "            Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer)); " is 123.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The length of the statement  "                var memMgr = new RecyclableMemoryStreamManager(BlockSize' LargeBufferMultiple' MaxBufferSize' this.useExponentialLargeBuffer) " is 125.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The length of the statement  "                var memMgr = new RecyclableMemoryStreamManager(BlockSize' LargeBufferMultiple' MaxBufferSize' this.useExponentialLargeBuffer) " is 125.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The length of the statement  "            var manager = new RecyclableMemoryStreamManager(blockSize: blockSize' largeBufferMultiple: 20' maximumBufferSize: 160' useExponentialLargeBuffer: this.useExponentialLargeBuffer); " is 178.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The length of the statement  "            RecyclableMemoryStream recyclableMemoryStream = new RecyclableMemoryStream(manager' TestContext.CurrentContext.Test.Name); " is 122.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The length of the statement  "            Assert.AreEqual(0' manager.SmallPoolFreeSize' "Verify manager reports no size for free blocks after stream was written to"); " is 124.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The length of the statement  "            Assert.AreEqual(data.Length' manager.SmallPoolInUseSize' "Verify manager gave the stream the correct amount of blocks based on the write"); " is 139.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The length of the statement  "                Assert.AreEqual(data.Length / blockSize' manager.SmallBlocksFree' "Verify manager has correct free blocks after double dispose"); " is 129.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The length of the statement  "                Assert.AreEqual(data.Length' manager.SmallPoolFreeSize' "Verify manager reports correct free pool size after double dispose"); " is 126.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The length of the statement  "                Assert.AreEqual(0' manager.SmallPoolInUseSize' "Verify manager reports the correct pool usage size after double dispose"); " is 122.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The length of the statement  "            Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer)); " is 123.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The length of the statement  "            Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer)); " is 123.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The length of the statement  "            Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 3072' this.useExponentialLargeBuffer)); " is 123.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetLargeBufferAlwaysAMultipleOrExponentialOfMegabyteAndAtLeastAsMuchAsRequestedForLargeBuffer,The length of the statement  "                Assert.That(memMgr.LargeBufferMultiple * (int)Math.Pow(2' Math.Floor(Math.Log(buffer.Length / memMgr.LargeBufferMultiple' 2))) == buffer.Length' Is.True' " is 153.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The length of the statement  "                var memMgr = new RecyclableMemoryStreamManager(BlockSize' LargeBufferMultiple' MaxBufferSize' this.useExponentialLargeBuffer) " is 125.
Long Statement,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The length of the statement  "                var memMgr = new RecyclableMemoryStreamManager(BlockSize' LargeBufferMultiple' MaxBufferSize' this.useExponentialLargeBuffer) " is 125.
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamEventListener,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\RecyclableMemoryStreamEventListener.cs,EventWritten,The following statement contains a magic number: switch (eventId)              {              case MemoryStreamDisposed:                  Thread.Sleep(10);                  break;              case MemoryStreamDoubleDispose:                  MemoryStreamDoubleDisposeCalled = true;                  break;              }
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(0' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(0' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(-1' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(-1' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(1' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroBlockSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(1' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' 0' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' 0' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' -1' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' -1' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnZeroLargeBufferMultipleSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 100' 200' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferSizeLessThanBlockSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' 100' 99' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferSizeLessThanBlockSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' 100' 99' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferSizeLessThanBlockSize,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new RecyclableMemoryStreamManager(100' 100' 99' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferSizeLessThanBlockSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 100' 100' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferSizeLessThanBlockSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 100' 100' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferSizeLessThanBlockSize,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 100' 100' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 2048' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 2048' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 2048' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetLargeBufferAlwaysAMultipleOrExponentialOfMegabyteAndAtLeastAsMuchAsRequestedForLargeBuffer,The following statement contains a magic number: const int step = 200000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetLargeBufferAlwaysAMultipleOrExponentialOfMegabyteAndAtLeastAsMuchAsRequestedForLargeBuffer,The following statement contains a magic number: const int end = 16000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The following statement contains a magic number: const int BlockSize = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The following statement contains a magic number: const int LargeBufferMultiple = 1000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The following statement contains a magic number: const int MaxBufferSize = 8000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReturnLargeBufferWithWrongSizedBufferThrowsException,The following statement contains a magic number: var buffer = new byte[100];
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReturnBlocksWithInvalidBuffersThrowsException,The following statement contains a magic number: var buffers = new byte[3][];
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReturnBlocksWithInvalidBuffersThrowsException,The following statement contains a magic number: buffers[2] = memMgr.GetBlock();
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReturningBlocksAreDroppedIfEnoughFree,The following statement contains a magic number: const int MaxFreeBuffersAllowed = 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReturningBlocksNeverDroppedIfMaxFreeSizeZero,The following statement contains a magic number: const int BuffersToTest = 99;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReturningLargeBufferIsDroppedIfEnoughFree,The following statement contains a magic number: this.TestDroppingLargeBuffer(8000);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: const int BlockSize = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: const int LargeBufferMultiple = 1000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: const int MaxBufferSize = 8000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: var buffersToRetrieve = (maxFreeLargeBufferSize > 0) ? (maxFreeLargeBufferSize / size + 1) : 10;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetBufferAdjustsLargePoolFreeSize,The following statement contains a magic number: var bufferLength = stream.MemoryManager.BlockSize * 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: buffer[stream.MemoryManager.BlockSize] = 13;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: var bytesToWrite = this.GetRandomBuffer(10);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: Assert.That(buffer[stream.MemoryManager.BlockSize]' Is.EqualTo(13));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteByteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: buffer[stream.MemoryManager.BlockSize] = 13;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteByteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: stream.WriteByte(14);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteByteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: Assert.That(buffer[stream.MemoryManager.BlockSize]' Is.EqualTo(13));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteByteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: Assert.That(buffer[stream.MemoryManager.BlockSize + 1]' Is.EqualTo(14));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,CallingWriteByteAfterLargeGetBufferDoesNotLoseData,The following statement contains a magic number: Assert.That(stream.Position' Is.EqualTo(stream.MemoryManager.BlockSize + 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GiantAllocationSucceeds,The following statement contains a magic number: i < 2
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteUpdatesLengthAndPosition,The following statement contains a magic number: const int expectedLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteInMiddleOfBufferDoesNotChangeLength,The following statement contains a magic number: const int expectedLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteInMiddleOfBufferDoesNotChangeLength,The following statement contains a magic number: var smallBufferLength = 25;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSmallBufferStoresDataCorrectly,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WritePastEndIncreasesCapacity,The following statement contains a magic number: Assert.That(stream.Capacity' Is.EqualTo(2 * DefaultBlockSize));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WritePastEndIncreasesCapacity,The following statement contains a magic number: Assert.That(stream.MemoryManager.SmallPoolInUseSize' Is.EqualTo(2 * DefaultBlockSize));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WritePastEndOfLargeBufferIncreasesCapacityAndCopiesBuffer,The following statement contains a magic number: Assert.That(get2.Length' Is.EqualTo(stream.MemoryManager.LargeBufferMultiple * 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteStartPastBufferThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => stream.Write(new byte[] {0' 1}' 2' 1));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteCountOutOfRangeThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => stream.Write(new byte[] {0' 1}' 0' 3));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteUpdatesPosition,The following statement contains a magic number: var bufferLength = stream.MemoryManager.BlockSize / 2 + 1;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteUpdatesPosition,The following statement contains a magic number: i < 10
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteAfterEndIncreasesLength,The following statement contains a magic number: const int initialPosition = 13;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteAfterEndIncreasesLength,The following statement contains a magic number: var buffer = this.GetRandomBuffer(10);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WritePastMaxStreamLengthThrowsException,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanUpdatesLengthAndPosition,The following statement contains a magic number: const int expectedLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanInMiddleOfBufferDoesNotChangeLength,The following statement contains a magic number: const int expectedLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanInMiddleOfBufferDoesNotChangeLength,The following statement contains a magic number: var smallBufferLength = 25;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanSmallBufferStoresDataCorrectly,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanPastEndIncreasesCapacity,The following statement contains a magic number: Assert.That(stream.Capacity' Is.EqualTo(2 * DefaultBlockSize));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanPastEndIncreasesCapacity,The following statement contains a magic number: Assert.That(stream.MemoryManager.SmallPoolInUseSize' Is.EqualTo(2 * DefaultBlockSize));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanPastEndOfLargeBufferIncreasesCapacityAndCopiesBuffer,The following statement contains a magic number: Assert.That(get2.Length' Is.EqualTo(stream.MemoryManager.LargeBufferMultiple * 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanUpdatesPosition,The following statement contains a magic number: var bufferLength = stream.MemoryManager.BlockSize / 2 + 1;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanUpdatesPosition,The following statement contains a magic number: i < 10
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanAfterEndIncreasesLength,The following statement contains a magic number: const int initialPosition = 13;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanAfterEndIncreasesLength,The following statement contains a magic number: var buffer = this.GetRandomBuffer(10);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteSpanPastMaxStreamLengthThrowsException,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteInMiddleSetsCorrectValue,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteInMiddleSetsCorrectValue,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteInMiddleSetsCorrectValue,The following statement contains a magic number: var buffer2 = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteAtEndSetsCorrectValue,The following statement contains a magic number: const int testValue = 255;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteAtEndIncreasesLengthByOne,The following statement contains a magic number: stream.WriteByte(255);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteAtEndIncreasesLengthByOne,The following statement contains a magic number: stream.WriteByte(255);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteInMiddleDoesNotChangeLength,The following statement contains a magic number: const int bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteInMiddleDoesNotChangeLength,The following statement contains a magic number: stream.Position = bufferLength / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteInMiddleDoesNotChangeLength,The following statement contains a magic number: stream.WriteByte(255);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteDoesNotIncreaseCapacity,The following statement contains a magic number: stream.Position = bufferLength / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteDoesNotIncreaseCapacity,The following statement contains a magic number: stream.WriteByte(255);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteIncreasesCapacity,The following statement contains a magic number: stream.WriteByte(255);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteIncreasesCapacity,The following statement contains a magic number: Assert.That(stream.Capacity' Is.EqualTo(2 * bufferLength));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteUpdatesPosition,The following statement contains a magic number: stream.WriteByte(255);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteUpdatesLength,The following statement contains a magic number: stream.Position = 13;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteUpdatesLength,The following statement contains a magic number: stream.WriteByte(255);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteByteUpdatesLength,The following statement contains a magic number: Assert.That(stream.Length' Is.EqualTo(14));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadByteDoesNotDependOnStreamPosition,The following statement contains a magic number: var buffer = this.GetRandomBuffer(stream.Capacity * 2);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadByteCanBeUsedInParallel,The following statement contains a magic number: var bufferLength = 1000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadByteCanBeUsedInParallel,The following statement contains a magic number: Action read = () =>              {                  for (var i = 0; i < 1000; i++)                  {                      var position = this.random.Next(0' bufferLength);                      var byteRead = stream.SafeReadByte(ref position);                        Assert.That(byteRead' Is.EqualTo(buffer[position - 1]));                  }              };
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadByteCanBeUsedInParallel,The following statement contains a magic number: Parallel.For(0' 100' i => read());
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadByteUpdatesPosition,The following statement contains a magic number: var buffer = this.GetRandomBuffer(stream.Capacity * 2);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadByteAtEndReturnsNegOne,The following statement contains a magic number: const int bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadDoesNotUpdateStreamPosition,The following statement contains a magic number: var step = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadDoesNotDependOnStreamPosition,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadDoesNotDependOnStreamPosition,The following statement contains a magic number: var step = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadCallsDontAffectOtherSafeReadCalls,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadCallsDontAffectOtherSafeReadCalls,The following statement contains a magic number: var stepSlow = stream.MemoryManager.BlockSize / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadCallsDontAffectOtherSafeReadCalls,The following statement contains a magic number: var stepFast = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadCanBeUsedInParallel,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadCanBeUsedInParallel,The following statement contains a magic number: Action read = () =>              {                  for (var i = 0; i < 5; i++)                  {                      var position = this.random.Next(0' bufferLength);                      var startPosition = position;                      var length = this.random.Next(0' bufferLength - position);                      var readBuffer = new byte[length];                      var bytesRead = stream.SafeRead(readBuffer' 0' length' ref position);                        RMSAssert.BuffersAreEqual(readBuffer' 0' buffer' startPosition' bytesRead);                  }              };
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadCanBeUsedInParallel,The following statement contains a magic number: Parallel.For(0' 5' i => read());
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanDoesNotUpdateStreamPosition,The following statement contains a magic number: var step = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanDoesNotDependOnStreamPosition,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanDoesNotDependOnStreamPosition,The following statement contains a magic number: var step = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanCallsDontAffectOtherSafeReadCalls,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanCallsDontAffectOtherSafeReadCalls,The following statement contains a magic number: var stepSlow = stream.MemoryManager.BlockSize / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanCallsDontAffectOtherSafeReadCalls,The following statement contains a magic number: var stepFast = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanCanBeUsedInParallel,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanCanBeUsedInParallel,The following statement contains a magic number: Action read = () =>              {                  for (var i = 0; i < 5; i++)                  {                      var position = this.random.Next(0' bufferLength);                      var startPosition = position;                      var length = this.random.Next(0' bufferLength - position);                      var readBuffer = new byte[length];                      var bytesRead = stream.SafeRead(readBuffer.AsSpan(0' length)' ref position);                        RMSAssert.BuffersAreEqual(readBuffer' 0' buffer' startPosition' bytesRead);                  }              };
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SafeReadSpanCanBeUsedInParallel,The following statement contains a magic number: Parallel.For(0' 5' i => read());
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadNegativeOffsetThrowsException,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadOffsetPastEndThrowsException,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadNegativeCountThrowsException,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadCountOutOfBoundsThrowsException,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadOffsetPlusCountLargerThanBufferThrowsException,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadOffsetPlusCountLargerThanBufferThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => stream1.Read(new byte[bufferLength]' bufferLength / 2' bufferLength / 2 + 1));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadOffsetPlusCountLargerThanBufferThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => stream1.Read(new byte[bufferLength]' bufferLength / 2' bufferLength / 2 + 1));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadOffsetPlusCountLargerThanBufferThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => stream2.Read(new byte[bufferLength]' bufferLength / 2 + 1' bufferLength / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadOffsetPlusCountLargerThanBufferThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => stream2.Read(new byte[bufferLength]' bufferLength / 2 + 1' bufferLength / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadMultipleBlocksReturnsCorrectBytesReadAndContentsAreCorrect,The following statement contains a magic number: this.WriteAndReadBytes(DefaultBlockSize * 2);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: stream.Position = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var amountToRead = buffer.Length / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: RMSAssert.BuffersAreEqual(buffer' buffer.Length / 2' newBuffer' 0' amountRead);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var newBufferSize = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var amountToRead = buffer.Length / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: stream.Position = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var newBufferSize = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var amountToRead = buffer.Length / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: RMSAssert.BuffersAreEqual(buffer' buffer.Length / 2' newBuffer' offset' amountRead);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadUpdatesPosition,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadUpdatesPosition,The following statement contains a magic number: var step = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadReturnsEarlyIfLackOfData,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadReturnsEarlyIfLackOfData,The following statement contains a magic number: stream.Position = bufferLength / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadReturnsEarlyIfLackOfData,The following statement contains a magic number: Assert.That(amountRead' Is.EqualTo(bufferLength / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadPastEndOfLargeBufferIsOk,The following statement contains a magic number: stream.Position = stream.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadPastEndOfLargeBufferIsOk,The following statement contains a magic number: Assert.That(amountRead' Is.EqualTo(stream.Length / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadFromPastEndReturnsZero,The following statement contains a magic number: const int bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanMultipleBlocksReturnsCorrectBytesReadAndContentsAreCorrect,The following statement contains a magic number: this.WriteAndReadSpanBytes(DefaultBlockSize * 2);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: stream.Position = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var amountToRead = buffer.Length / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromOffsetHasCorrectLengthAndContents,The following statement contains a magic number: RMSAssert.BuffersAreEqual(buffer' buffer.Length / 2' newBuffer' 0' amountRead);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var newBufferSize = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var amountToRead = buffer.Length / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: stream.Position = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var newBufferSize = buffer.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: var amountToRead = buffer.Length / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromAndToOffsetHasCorrectLengthAndContents,The following statement contains a magic number: RMSAssert.BuffersAreEqual(buffer' buffer.Length / 2' newBuffer' offset' amountRead);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanUpdatesPosition,The following statement contains a magic number: var bufferLength = 1000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanUpdatesPosition,The following statement contains a magic number: var step = stream.MemoryManager.BlockSize / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanReturnsEarlyIfLackOfData,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanReturnsEarlyIfLackOfData,The following statement contains a magic number: stream.Position = bufferLength / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanReturnsEarlyIfLackOfData,The following statement contains a magic number: Assert.That(amountRead' Is.EqualTo(bufferLength / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanPastEndOfLargeBufferIsOk,The following statement contains a magic number: stream.Position = stream.Length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanPastEndOfLargeBufferIsOk,The following statement contains a magic number: Assert.That(amountRead' Is.EqualTo(stream.Length / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ReadSpanFromPastEndReturnsZero,The following statement contains a magic number: const int bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetCapacityRoundsUp,The following statement contains a magic number: const int step = 51001;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetCapacityRoundsUp,The following statement contains a magic number: i < 100
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,DecreaseCapacityDoesNothing,The following statement contains a magic number: stream.Capacity *= 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,DecreaseCapacityDoesNothing,The following statement contains a magic number: stream.Capacity /= 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,EnsureCapacityOperatesOnLargeBufferWhenNeeded,The following statement contains a magic number: Assert.That(stream.Capacity' Is.EqualTo(stream.MemoryManager.LargeBufferMultiple * 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthSetsLength,The following statement contains a magic number: var length = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthCanSetPosition,The following statement contains a magic number: var length = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthCanSetPosition,The following statement contains a magic number: stream.Position = length / 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthCanSetPosition,The following statement contains a magic number: Assert.That(stream.Position' Is.EqualTo(length / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthDoesNotResetPositionWhenGrowing,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthDoesNotResetPositionWhenGrowing,The following statement contains a magic number: stream.Position = bufferLength / 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthDoesNotResetPositionWhenGrowing,The following statement contains a magic number: stream.SetLength(bufferLength / 2);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthDoesNotResetPositionWhenGrowing,The following statement contains a magic number: Assert.That(stream.Position' Is.EqualTo(bufferLength / 4));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthMovesPositionToBeInBounds,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthMovesPositionToBeInBounds,The following statement contains a magic number: stream.SetLength(bufferLength / 2);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SetLengthMovesPositionToBeInBounds,The following statement contains a magic number: Assert.That(stream.Length' Is.EqualTo(bufferLength / 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ToStringReturnsHelpfulDebugInfo,The following statement contains a magic number: var buffer = this.GetRandomBuffer(1000);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ToStringWithNullTagIsOk,The following statement contains a magic number: var buffer = this.GetRandomBuffer(1000);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ToArrayReturnsDifferentBufferThanGetBufferWithSameContents,The following statement contains a magic number: var bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ToArrayWithLargeBufferReturnsDifferentBufferThanGetBufferWithSameContents,The following statement contains a magic number: var bufferLength = stream.MemoryManager.BlockSize * 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekWithBadOriginThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => stream.Seek(1' (SeekOrigin)99));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekPastEndOfStreamHasCorrectPosition,The following statement contains a magic number: const int expected = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekFromBeginningHasCorrectPosition,The following statement contains a magic number: var position = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekFromCurrentHasCorrectPosition,The following statement contains a magic number: var position = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekFromCurrentHasCorrectPosition,The following statement contains a magic number: stream.Seek(-100' SeekOrigin.Current);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekFromEndHasCorrectPosition,The following statement contains a magic number: var length = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekPastEndAndWriteHasCorrectLengthAndPosition,The following statement contains a magic number: const int position = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,SeekPastEndAndWriteHasCorrectLengthAndPosition,The following statement contains a magic number: const int bufferLength = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,PositionSetToAnyValue,The following statement contains a magic number: var step = maxValue / 32;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,Pooling_DisposeMultipleBlocksAdjustsInUseAndFreeBytes,The following statement contains a magic number: var bufferLength = stream.MemoryManager.BlockSize * 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,Pooling_DisposingFreesBlocks,The following statement contains a magic number: const int numBlocks = 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,DisposeReturnsLargeBuffer,The following statement contains a magic number: const int numBlocks = 4;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The following statement contains a magic number: int blockSize = 10;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The following statement contains a magic number: var manager = new RecyclableMemoryStreamManager(blockSize: blockSize' largeBufferMultiple: 20' maximumBufferSize: 160' useExponentialLargeBuffer: this.useExponentialLargeBuffer);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The following statement contains a magic number: var manager = new RecyclableMemoryStreamManager(blockSize: blockSize' largeBufferMultiple: 20' maximumBufferSize: 160' useExponentialLargeBuffer: this.useExponentialLargeBuffer);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,ConcurrentDoubleDisposeSucceeds,The following statement contains a magic number: byte[] data = this.GetRandomBuffer(length: 100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AccessingObjectAfterDisposeThrowsObjectDisposedException,The following statement contains a magic number: var buffer = new byte[100];
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AccessingObjectAfterDisposeThrowsObjectDisposedException,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { stream.WriteByte(255); });
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AccessingObjectAfterDisposeThrowsObjectDisposedException,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { stream.SetLength(100); });
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetStreamWithTagAndRequiredSize,The following statement contains a magic number: var requiredSize = 13131313;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetStreamWithTagAndRequiredSizeAndContiguousBuffer,The following statement contains a magic number: var requiredSize = 13131313;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetStreamWithBuffer,The following statement contains a magic number: var buffer = this.GetRandomBuffer(1000);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,WriteToOtherStreamHasEqualsContents,The following statement contains a magic number: var buffer = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,MaximumStreamCapacity_NoLimit,The following statement contains a magic number: stream.Capacity = (DefaultMaximumBufferSize * 2) + 1;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,MaximumStreamCapacity_NoLimit,The following statement contains a magic number: Assert.That(stream.Capacity' Is.AtLeast((DefaultMaximumBufferSize * 2) + 1));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,MaximumStreamCapacity_Limit,The following statement contains a magic number: var maxCapacity = DefaultMaximumBufferSize * 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,MaximumStreamCapacity_StreamUnchanged,The following statement contains a magic number: var maxCapacity = DefaultMaximumBufferSize * 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,MaximumStreamCapacity_StreamUnchangedAfterWriteOverLimit,The following statement contains a magic number: var maxCapacity = DefaultMaximumBufferSize * 2;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,MaximumStreamCapacity_StreamUnchangedAfterWriteOverLimit,The following statement contains a magic number: var buffer1 = this.GetRandomBuffer(100);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTests,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetRandomStream,The following statement contains a magic number: var buffer = this.GetRandomBuffer(stream.Capacity * 2);
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferRelease,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolInUseSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferRelease,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolInUseSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 3)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferRelease,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolInUseSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 3)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferRelease,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolFreeSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 3)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferRelease,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolFreeSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 3)));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2025' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 2023' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 3072' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 3072' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new RecyclableMemoryStreamManager(100' 1024' 3072' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 2048' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 2048' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 2048' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 4096' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 4096' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RecyclableMemoryManagerThrowsExceptionOnMaximumBufferNotMultipleOrExponentialOfLargeBufferMultiple,The following statement contains a magic number: Assert.DoesNotThrow(() => new RecyclableMemoryStreamManager(100' 1024' 4096' this.useExponentialLargeBuffer));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetLargeBufferAlwaysAMultipleOrExponentialOfMegabyteAndAtLeastAsMuchAsRequestedForLargeBuffer,The following statement contains a magic number: const int step = 200000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetLargeBufferAlwaysAMultipleOrExponentialOfMegabyteAndAtLeastAsMuchAsRequestedForLargeBuffer,The following statement contains a magic number: const int end = 16000000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetLargeBufferAlwaysAMultipleOrExponentialOfMegabyteAndAtLeastAsMuchAsRequestedForLargeBuffer,The following statement contains a magic number: Assert.That(memMgr.LargeBufferMultiple * (int)Math.Pow(2' Math.Floor(Math.Log(buffer.Length / memMgr.LargeBufferMultiple' 2))) == buffer.Length' Is.True'                              "buffer length of {0} is not a exponential of {1}"' buffer.Length' memMgr.LargeBufferMultiple);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,GetLargeBufferAlwaysAMultipleOrExponentialOfMegabyteAndAtLeastAsMuchAsRequestedForLargeBuffer,The following statement contains a magic number: Assert.That(memMgr.LargeBufferMultiple * (int)Math.Pow(2' Math.Floor(Math.Log(buffer.Length / memMgr.LargeBufferMultiple' 2))) == buffer.Length' Is.True'                              "buffer length of {0} is not a exponential of {1}"' buffer.Length' memMgr.LargeBufferMultiple);
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The following statement contains a magic number: const int BlockSize = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The following statement contains a magic number: const int LargeBufferMultiple = 1000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,AllMultiplesOrExponentialUpToMaxCanBePooled,The following statement contains a magic number: const int MaxBufferSize = 8000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,RequestTooLargeBufferAdjustsInUseCounter,The following statement contains a magic number: Assert.That(buffer.Length' Is.EqualTo(memMgr.MaximumBufferSize * 2));
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: const int BlockSize = 100;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: const int LargeBufferMultiple = 1000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: const int MaxBufferSize = 8000;
Magic Number,Microsoft.IO.UnitTests,BaseRecyclableMemoryStreamTestsUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,TestDroppingLargeBuffer,The following statement contains a magic number: var buffersToRetrieve = (maxFreeLargeBufferSize > 0) ? (maxFreeLargeBufferSize / size + 1) : 10;
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferReleaseUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolInUseSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferReleaseUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolInUseSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 4)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferReleaseUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolInUseSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 4)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferReleaseUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolFreeSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 4)));
Magic Number,Microsoft.IO.UnitTests,RecyclableMemoryStreamTestsWithPassiveBufferReleaseUsingExponentialLargeBuffer,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\Tests.cs,OldBuffersAreKeptInStreamUntilDispose,The following statement contains a magic number: Assert.That(memMgr.LargePoolFreeSize' Is.EqualTo(memMgr.LargeBufferMultiple * (1 + 2 + 4)));
Missing Default,Microsoft.IO.UnitTests,RecyclableMemoryStreamEventListener,D:\research\architectureSmells\repos\Microsoft_Microsoft.IO.RecyclableMemoryStream\UnitTests\RecyclableMemoryStreamEventListener.cs,EventWritten,The following switch statement is missing a default case: switch (eventId)              {              case MemoryStreamDisposed:                  Thread.Sleep(10);                  break;              case MemoryStreamDoubleDispose:                  MemoryStreamDoubleDisposeCalled = true;                  break;              }
