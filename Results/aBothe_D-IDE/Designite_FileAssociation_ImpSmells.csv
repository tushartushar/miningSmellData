Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BrendanGrant.Helpers.FileAssociation,AssociationManager,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\AssociationManager.cs,Associate,The length of the statement  "			pai.AddVerb(new ProgramVerb("open"' executablePath+" \"%1\"")); // Note: the %1 ensures that the opened file will be passed to the program's command line " is 153.
Empty Catch Block,BrendanGrant.Helpers.FileAssociation,ProgramAssociationInfo,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramAssociationInfo.cs,TryGetInt,The method has an empty catch block.
Magic Number,BrendanGrant.Helpers.FileAssociation,ProgramIcon,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramIcon.cs,Parse,The following statement contains a magic number: if (regString.StartsWith("\"") && regString.EndsWith("\""))           {              if (regString.Length > 3)                 regString = regString.Substring(1' regString.Length - 2);           }
Magic Number,BrendanGrant.Helpers.FileAssociation,ProgramIcon,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramIcon.cs,Parse,The following statement contains a magic number: if (regString.StartsWith("\"") && regString.EndsWith("\""))           {              if (regString.Length > 3)                 regString = regString.Substring(1' regString.Length - 2);           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,C:\repos\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++)           {              key = key.OpenSubKey(parts[x]' true);                if (key == null)              {                 key = lastKey.CreateSubKey(parts[x]);              }                if (x == parts.Length - 1)              {                 if (value is string)                 {                    key.SetValue(valueName' value.ToString());                 }                 else if (value is uint || value.GetType().IsEnum)                 {                    object o = key.GetValue(valueName' null);                      if (o == null)                    {                       key.SetValue(valueName' value' RegistryValueKind.DWord);                    }                    else                    {                       RegistryValueKind kind = key.GetValueKind(valueName);                         if (kind == RegistryValueKind.DWord)                       {                          key.SetValue(valueName' value' RegistryValueKind.DWord);                       }                       else if (kind == RegistryValueKind.Binary)                       {                          uint num = (uint)value;                            byte[] b = new byte[4];                          b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 1);                          b[2] = (byte)((num & 0x00FF0000) >> 2);                          b[3] = (byte)((num & 0xFF000000) >> 3);                              b[0] = (byte)((num & 0x000000FF) >> 0);                          b[1] = (byte)((num & 0x0000FF00) >> 8);                          b[2] = (byte)((num & 0x00FF0000) >> 16);                          b[3] = (byte)((num & 0xFF000000) >> 24);                            key.SetValue(valueName' b' RegistryValueKind.Binary);                       }                       else if (kind == RegistryValueKind.String)                       {                          key.SetValue(valueName' "x" + ((uint)value).ToString("X8"));                       }                      }                   }                 else if (value is Guid)                 {                    key.SetValue(valueName' ((Guid)value).ToString("B"));                 }                }                lastKey = key;           }
