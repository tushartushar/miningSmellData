Implementation smell,Namespace,Class,File,Method,Description
Long Method,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,Main,The method has 86 lines of code.
Complex Method,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,Main,Cyclomatic complexity of the method is 28
Complex Method,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,Cyclomatic complexity of the method is 12
Long Statement,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,Main,The length of the statement  "	if (DownloadLatestBuild (ArchiveUrl + (OfflineVersionExists ? "?IsUpdate=true" : "")' out archive) && CheckForOpenInstances () && ExtractFiles (archive' OutputDir)) { " is 166.
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,CheckForOpenInstances,The following statement contains a magic number: while (true) {  	var prcs = Process.GetProcessesByName ("D-IDE");  	if (prcs == null || prcs.Length < 1)  		break;  	if (i < 0)  		return false;  	bool br = true;  	foreach (var prc in prcs) {  		if (Path.GetDirectoryName (prc.Modules [0].FileName) == OutputDir) {  			Console.WriteLine ("Close D-IDE.exe first to enable update! (" + i.ToString () + " attempts remaining!)");  			i--;  			Thread.Sleep (2000);  			br = false;  		}  	}  	if (br)  		break;  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,CheckForOpenInstances,The following statement contains a magic number: foreach (var prc in prcs) {  	if (Path.GetDirectoryName (prc.Modules [0].FileName) == OutputDir) {  		Console.WriteLine ("Close D-IDE.exe first to enable update! (" + i.ToString () + " attempts remaining!)");  		i--;  		Thread.Sleep (2000);  		br = false;  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,CheckForOpenInstances,The following statement contains a magic number: if (Path.GetDirectoryName (prc.Modules [0].FileName) == OutputDir) {  	Console.WriteLine ("Close D-IDE.exe first to enable update! (" + i.ToString () + " attempts remaining!)");  	i--;  	Thread.Sleep (2000);  	br = false;  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,CheckForOpenInstances,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: try {  	Console.WriteLine ("Extract temp archive to " + OutputDirectory + "\r\n");  	using (ZipInputStream s = new ZipInputStream (File.OpenRead (ZipFile))) {  		ZipEntry theEntry;  		while ((theEntry = s.GetNextEntry ()) != null) {  			Console.WriteLine (theEntry.Name);  			string directoryName = Path.GetDirectoryName (theEntry.Name);  			string fileName = Path.GetFileName (theEntry.Name);  			if (theEntry.IsDirectory) {  				CreateDirectoryRecursively (theEntry.Name);  				continue;  			}  			// create directory  			if (directoryName.Length > 0)  				CreateDirectoryRecursively (OutputDirectory + "\\" + directoryName);  			if (fileName != String.Empty) {  				using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  					int size = 2048;  					byte[] data = new byte[2048];  					while (true) {  						size = s.Read (data' 0' data.Length);  						if (size > 0)  							streamWriter.Write (data' 0' size);  						else  							break;  					}  				}  			}  		}  	}  } catch (Exception ex) {  	Console.WriteLine ("Error:");  	Console.WriteLine (ex.Message);  	return false;  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: try {  	Console.WriteLine ("Extract temp archive to " + OutputDirectory + "\r\n");  	using (ZipInputStream s = new ZipInputStream (File.OpenRead (ZipFile))) {  		ZipEntry theEntry;  		while ((theEntry = s.GetNextEntry ()) != null) {  			Console.WriteLine (theEntry.Name);  			string directoryName = Path.GetDirectoryName (theEntry.Name);  			string fileName = Path.GetFileName (theEntry.Name);  			if (theEntry.IsDirectory) {  				CreateDirectoryRecursively (theEntry.Name);  				continue;  			}  			// create directory  			if (directoryName.Length > 0)  				CreateDirectoryRecursively (OutputDirectory + "\\" + directoryName);  			if (fileName != String.Empty) {  				using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  					int size = 2048;  					byte[] data = new byte[2048];  					while (true) {  						size = s.Read (data' 0' data.Length);  						if (size > 0)  							streamWriter.Write (data' 0' size);  						else  							break;  					}  				}  			}  		}  	}  } catch (Exception ex) {  	Console.WriteLine ("Error:");  	Console.WriteLine (ex.Message);  	return false;  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: using (ZipInputStream s = new ZipInputStream (File.OpenRead (ZipFile))) {  	ZipEntry theEntry;  	while ((theEntry = s.GetNextEntry ()) != null) {  		Console.WriteLine (theEntry.Name);  		string directoryName = Path.GetDirectoryName (theEntry.Name);  		string fileName = Path.GetFileName (theEntry.Name);  		if (theEntry.IsDirectory) {  			CreateDirectoryRecursively (theEntry.Name);  			continue;  		}  		// create directory  		if (directoryName.Length > 0)  			CreateDirectoryRecursively (OutputDirectory + "\\" + directoryName);  		if (fileName != String.Empty) {  			using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  				int size = 2048;  				byte[] data = new byte[2048];  				while (true) {  					size = s.Read (data' 0' data.Length);  					if (size > 0)  						streamWriter.Write (data' 0' size);  					else  						break;  				}  			}  		}  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: using (ZipInputStream s = new ZipInputStream (File.OpenRead (ZipFile))) {  	ZipEntry theEntry;  	while ((theEntry = s.GetNextEntry ()) != null) {  		Console.WriteLine (theEntry.Name);  		string directoryName = Path.GetDirectoryName (theEntry.Name);  		string fileName = Path.GetFileName (theEntry.Name);  		if (theEntry.IsDirectory) {  			CreateDirectoryRecursively (theEntry.Name);  			continue;  		}  		// create directory  		if (directoryName.Length > 0)  			CreateDirectoryRecursively (OutputDirectory + "\\" + directoryName);  		if (fileName != String.Empty) {  			using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  				int size = 2048;  				byte[] data = new byte[2048];  				while (true) {  					size = s.Read (data' 0' data.Length);  					if (size > 0)  						streamWriter.Write (data' 0' size);  					else  						break;  				}  			}  		}  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: while ((theEntry = s.GetNextEntry ()) != null) {  	Console.WriteLine (theEntry.Name);  	string directoryName = Path.GetDirectoryName (theEntry.Name);  	string fileName = Path.GetFileName (theEntry.Name);  	if (theEntry.IsDirectory) {  		CreateDirectoryRecursively (theEntry.Name);  		continue;  	}  	// create directory  	if (directoryName.Length > 0)  		CreateDirectoryRecursively (OutputDirectory + "\\" + directoryName);  	if (fileName != String.Empty) {  		using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  			int size = 2048;  			byte[] data = new byte[2048];  			while (true) {  				size = s.Read (data' 0' data.Length);  				if (size > 0)  					streamWriter.Write (data' 0' size);  				else  					break;  			}  		}  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: while ((theEntry = s.GetNextEntry ()) != null) {  	Console.WriteLine (theEntry.Name);  	string directoryName = Path.GetDirectoryName (theEntry.Name);  	string fileName = Path.GetFileName (theEntry.Name);  	if (theEntry.IsDirectory) {  		CreateDirectoryRecursively (theEntry.Name);  		continue;  	}  	// create directory  	if (directoryName.Length > 0)  		CreateDirectoryRecursively (OutputDirectory + "\\" + directoryName);  	if (fileName != String.Empty) {  		using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  			int size = 2048;  			byte[] data = new byte[2048];  			while (true) {  				size = s.Read (data' 0' data.Length);  				if (size > 0)  					streamWriter.Write (data' 0' size);  				else  					break;  			}  		}  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: if (fileName != String.Empty) {  	using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  		int size = 2048;  		byte[] data = new byte[2048];  		while (true) {  			size = s.Read (data' 0' data.Length);  			if (size > 0)  				streamWriter.Write (data' 0' size);  			else  				break;  		}  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: if (fileName != String.Empty) {  	using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  		int size = 2048;  		byte[] data = new byte[2048];  		while (true) {  			size = s.Read (data' 0' data.Length);  			if (size > 0)  				streamWriter.Write (data' 0' size);  			else  				break;  		}  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  	int size = 2048;  	byte[] data = new byte[2048];  	while (true) {  		size = s.Read (data' 0' data.Length);  		if (size > 0)  			streamWriter.Write (data' 0' size);  		else  			break;  	}  }  
Magic Number,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,ExtractFiles,The following statement contains a magic number: using (FileStream streamWriter = File.Create (OutputDirectory + "\\" + theEntry.Name)) {  	int size = 2048;  	byte[] data = new byte[2048];  	while (true) {  		size = s.Read (data' 0' data.Length);  		if (size > 0)  			streamWriter.Write (data' 0' size);  		else  			break;  	}  }  
Missing Default,D_IDE.Updater,IDEUpdater,D:\newReposJune17\aBothe_D-IDE\D-IDE.Updater\IDEUpdater.cs,Main,The following switch statement is missing a default case: switch (args [i]) {  case "-s":  	DontAsk = true;  	break;  case "-a":  	StartImmediately = true;  	break;  case "-o":  	i++;  	if (args.Length > i)  		OutputDir = args [i];  	break;  case "-help":  case "-?":  	Console.WriteLine ("Commands:");  	Console.WriteLine ("-s\tDon't halt on errors");  	Console.WriteLine ("-a\tAutomatically launch D-IDE after update has been finished");  	Console.WriteLine ("-o %Path%\tSpecify output directory");  	return 0;  }  
