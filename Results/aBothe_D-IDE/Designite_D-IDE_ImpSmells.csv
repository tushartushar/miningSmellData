Implementation smell,Namespace,Class,File,Method,Description
Long Method,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,OpenFile,The method has 104 lines of code.
Long Method,D_IDE,MainWindow,D:\newReposJune17\aBothe_D-IDE\D-IDE2\MainWindow.xaml.cs,MainWindow,The method has 64 lines of code.
Long Method,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_MouseClick,The method has 176 lines of code.
Complex Method,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,ThreadedInit,Cyclomatic complexity of the method is 7
Complex Method,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,SaveIDEStates,Cyclomatic complexity of the method is 7
Complex Method,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,OpenFile,Cyclomatic complexity of the method is 32
Complex Method,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,SaveAllFiles,Cyclomatic complexity of the method is 8
Complex Method,D_IDE.Controls.Panels,LogPanel,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\LogPanel.xaml.cs,AppendOutput,Cyclomatic complexity of the method is 18
Complex Method,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_AfterLabelEdit,Cyclomatic complexity of the method is 12
Complex Method,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,Cyclomatic complexity of the method is 8
Complex Method,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,DoPaste,Cyclomatic complexity of the method is 10
Complex Method,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,DoPaste,Cyclomatic complexity of the method is 7
Complex Method,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_MouseClick,Cyclomatic complexity of the method is 7
Complex Method,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,SetupTreeIcons,Cyclomatic complexity of the method is 13
Complex Method,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,ApplySearchOptions,Cyclomatic complexity of the method is 7
Complex Method,D_IDE.Dialogs.SettingsPages,Page_FileAssociations,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SettingsPages\Page_FileAssociations.xaml.cs,LoadCurrent,Cyclomatic complexity of the method is 15
Complex Method,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,Cyclomatic complexity of the method is 13
Long Parameter List,D_IDE.Controls.Panels,LogPanel,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\LogPanel.xaml.cs,AddMarkerForOffsetUntilEnd,The method has 4 parameters.
Long Parameter List,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,AddCutCopyPasteButtons,The method has 5 parameters.
Long Parameter List,BrendanGrant.Helpers.FileAssociation,FileAssociationInfo,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\FileAssociationInfo.cs,Create,The method has 4 parameters.
Long Parameter List,BrendanGrant.Helpers.FileAssociation,ShellNotification,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ShellNotification.cs,SHChangeNotify,The method has 4 parameters.
Long Statement,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,ThreadedInit,The length of the statement  "		LanguageLoader.LoadLanguageInterface (Util.ApplicationStartUpPath + "\\D-IDE.D.dll"' "D_IDE.ResourceFiles.ResScriptFileBinding"); " is 129.
Long Statement,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,DoNewProject,The length of the statement  "	var pdlg = new NewProjectDlg (NewProjectDlg.DialogMode.CreateNew | (IDEManager.CurrentSolution != null ? NewProjectDlg.DialogMode.Add : 0)); " is 140.
Long Statement,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,DoNewProject,The length of the statement  "			IDEManager.ProjectManagement.AddNewProjectToSolution (pdlg.SelectedLanguageBinding' pdlg.SelectedProjectType' pdlg.ProjectName' pdir); " is 134.
Long Statement,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,DoNewProject,The length of the statement  "			IDEManager.CurrentSolution = IDEManager.ProjectManagement.CreateNewProjectAndSolution (pdlg.SelectedLanguageBinding' pdlg.SelectedProjectType' pdlg.ProjectName' pdir' pdlg.SolutionName); " is 186.
Long Statement,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,DoDebugSolution,The length of the statement  "	else if (RootWindow.RunCurrentModuleOnly ? ((br = IDEManager.BuildManagement.BuildSingle ()) != null && br.Successful) : IDEManager.BuildManagement.Build ()) " is 157.
Long Statement,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,DoLaunchWithoutDebugger,The length of the statement  "	if (RootWindow.RunCurrentModuleOnly ? ((br = IDEManager.BuildManagement.BuildSingle ()) != null && br.Successful) : IDEManager.BuildManagement.Build ()) " is 152.
Long Statement,D_IDE,IDEUtil,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\IDEUtil.cs,CheckForUpdates,The length of the statement  "				if (MessageBox.Show ("A program update is available. Install it now?\r\nWarning: The program will be closed then!"' "Update available"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.Yes) == MessageBoxResult.Yes) " is 232.
Long Statement,D_IDE,IDEUtil,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\IDEUtil.cs,DoUpdate,The length of the statement  "	var upt = FileExecution.ExecuteAsync (UpdaterExe' "-a -o \"" + ApplicationStartUpPath + "\""' ApplicationStartUpPath' null); " is 124.
Long Statement,D_IDE,IDELogger,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\IDEUtil.cs,SendErrorReport,The length of the statement  "		MessageBox.Show ("Error occurred while trying to send error report - And yes' I know that it sounds stupid:\r\n\r\n" + ex); " is 123.
Long Statement,D_IDE,MainWindow,D:\newReposJune17\aBothe_D-IDE\D-IDE2\MainWindow.xaml.cs,RefreshMenu,The length of the statement  "	Tab_Build.IsEnabled = ((IsEditable && ed.LanguageBinding != null && ed.LanguageBinding.CanBuild) || IDEManager.CurrentSolution != null) && !IDEManager.IDEDebugManagement.IsExecuting; " is 182.
Long Statement,D_IDE,MainWindow,D:\newReposJune17\aBothe_D-IDE\D-IDE2\MainWindow.xaml.cs,RefreshMenu,The length of the statement  "	Button_ResumeExecution.IsEnabled = Button_RestartExecution.IsEnabled = Button_PauseExecution.IsEnabled = Button_StepIn.IsEnabled = Button_StepOut.IsEnabled = Button_StepOver.IsEnabled = IDEManager.IDEDebugManagement.IsDebugging; " is 228.
Long Statement,D_IDE,MainWindow,D:\newReposJune17\aBothe_D-IDE\D-IDE2\MainWindow.xaml.cs,DockMgr_DocumentClosing,The length of the statement  "		var res = MessageBox.Show (this' "Save file before close?"' ed.Title' MessageBoxButton.YesNoCancel' MessageBoxImage.Question' MessageBoxResult.Yes); " is 148.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_AfterLabelEdit,The length of the statement  "		renamingSuccessful = (e.Node as ProjectNode).IsUnloaded || !IDEManager.ProjectManagement.Rename ((e.Node as ProjectNode).Project' e.Label); " is 139.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_AfterLabelEdit,The length of the statement  "			renamingSuccessful = IDEManager.FileManagement.AddNewDirectoryToProject (dn.ParentProjectNode.Project' dn.RelativePath' e.Label); " is 129.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_AfterLabelEdit,The length of the statement  "			renamingSuccessful = IDEManager.FileManagement.RenameDirectory (dn.ParentProjectNode.Project' dn.RelativePath' e.Label); " is 120.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragDrop,The length of the statement  "	var targetNode = new DnDData (MainTree.GetNodeAt (MainTree.PointToClient (new System.Drawing.Point (e.X' e.Y))) as PrjExplorerNode); " is 132.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,The length of the statement  "	var targetNode = new DnDData (MainTree.GetNodeAt (MainTree.PointToClient (new System.Drawing.Point (e.X' e.Y))) as PrjExplorerNode); " is 132.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,AddCutCopyPasteButtons,The length of the statement  "	if (CutAllowed || CopyAllowed || (PasteAllowed && CutCopyNode != null && IsDropAllowed (CutCopyNode.AbsolutePath' node))) " is 121.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_MouseClick,The length of the statement  "					IDEManager.ProjectManagement.AddNewProjectToSolution (sln' pdlg.SelectedLanguageBinding' pdlg.SelectedProjectType' pdlg.ProjectName' pdlg.ProjectDir); " is 150.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_MouseClick,The length of the statement  "					if (MessageBox.Show ("Continue with excluding project?"' "Excluding project"' MessageBoxButtons.YesNo' MessageBoxIcon.Asterisk' MessageBoxDefaultButton.Button2) == DialogResult.Yes) " is 181.
Long Statement,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_MouseClick,The length of the statement  "					if (MessageBox.Show ("Continue with excluding project?"' "Excluding project"' MessageBoxButtons.YesNo' MessageBoxIcon.Asterisk' MessageBoxDefaultButton.Button2) == DialogResult.Yes) " is 181.
Long Statement,D_IDE.Controls.Panels,StartPage,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\StartPage.xaml.cs,RefreshNews,The length of the statement  "			var data = new System.Net.WebClient ().DownloadString ("http://d-ide.sourceforge.net/classes/news.php?xml=1&max=20&fromIDE=1"); " is 127.
Long Statement,D_IDE.Dialogs,FeedbackDialog,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\FeedbackDialog.xaml.cs,button_Send_Click,The length of the statement  "	if (!string.IsNullOrWhiteSpace (mail) && !Regex.IsMatch (mail' @"^[\w\.\-]+@[a-zA-Z0-9\-]+(\.[a-zA-Z0-9\-]{1'})*(\.[a-zA-Z]{2'3}){1'2}$")) { " is 140.
Long Statement,D_IDE.Dialogs,FeedbackDialog,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\FeedbackDialog.xaml.cs,button_Cancel_Click,The length of the statement  "	if (input_Message.Text.Length > 0 && MessageBox.Show ("Discard entered feedback message?"' "Discard feedback"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.Yes) == MessageBoxResult.No) " is 206.
Long Statement,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,SetWindowPositionNextToCurrentCaret,The length of the statement  "	bool IsInWindow = (CaretRealtedToThis.X >= 0 && CaretRealtedToThis.X < Width) || (CaretRealtedToThis.Y >= 0 && CaretRealtedToThis.Y < Height); " is 142.
Long Statement,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,LoadSearchOptions,The length of the statement  "	checkBox_EscapeSequences.IsChecked = fsm.SearchOptions.HasFlag (IDEManager.FileSearchManagement.SearchFlags.EscapeSequences); " is 125.
Long Statement,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,LoadSearchOptions,The length of the statement  "	checkBox_CaseSensitive.IsChecked = fsm.SearchOptions.HasFlag (IDEManager.FileSearchManagement.SearchFlags.CaseSensitive); " is 121.
Long Statement,BrendanGrant.Helpers.FileAssociation,ShellNotification,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ShellNotification.cs,NotifyOfChange,The length of the statement  "	SHChangeNotify ((uint)ShellChangeNotificationEvents.SHCNE_ASSOCCHANGED' (uint)(ShellChangeNotificationFlags.SHCNF_IDLIST | ShellChangeNotificationFlags.SHCNF_FLUSHNOWAIT)' IntPtr.Zero' IntPtr.Zero); " is 198.
Complex Conditional,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,AddCutCopyPasteButtons,The conditional expression  "CutAllowed || CopyAllowed || (PasteAllowed && CutCopyNode != null && IsDropAllowed (CutCopyNode.AbsolutePath' node))"  is complex.
Empty Catch Block,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,OpenFile,The method has an empty catch block.
Empty Catch Block,D_IDE,IDELogger,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\IDEUtil.cs,OnLog,The method has an empty catch block.
Empty Catch Block,D_IDE,MainWindow,D:\newReposJune17\aBothe_D-IDE\D-IDE2\MainWindow.xaml.cs,MainWindow,The method has an empty catch block.
Empty Catch Block,D_IDE.Controls.Panels,StartPage,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\StartPage.xaml.cs,RefreshNews,The method has an empty catch block.
Empty Catch Block,BrendanGrant.Helpers.FileAssociation,ProgramAssociationInfo,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramAssociationInfo.cs,TryGetInt,The method has an empty catch block.
Magic Number,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,ThreadedInit,The following statement contains a magic number: if (RootWindow.splashScreen != null)  	RootWindow.splashScreen.Close (TimeSpan.FromSeconds (0.5));  
Magic Number,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,ThreadedInit,The following statement contains a magic number: RootWindow.splashScreen.Close (TimeSpan.FromSeconds (0.5));  
Magic Number,D_IDE,WorkbenchLogic,D:\newReposJune17\aBothe_D-IDE\D-IDE2\WorkbenchLogic.cs,AdjustLastFileList,The following statement contains a magic number: while (l.Count > 10)  	l.RemoveAt (l.Count - 1);  
Magic Number,D_IDE,IDELogger,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\IDEUtil.cs,SendErrorReport,The following statement contains a magic number: try {  	var versionString = System.Reflection.Assembly.GetEntryAssembly ().GetName ().Version.ToString (3);  	var wc = new WebClient ();  	var nvc = new NameValueCollection ();  	nvc.Add ("report_data"' message);  	nvc.Add ("comment"' userComment);  	nvc.Add ("ide_version"' versionString);  	wc.UploadValues (new Uri (ReportContributionUrl)' "POST"' nvc);  	MessageBox.Show ("Report uploaded!");  } catch (Exception ex) {  	MessageBox.Show ("Error occurred while trying to send error report - And yes' I know that it sounds stupid:\r\n\r\n" + ex);  }  
Magic Number,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent (System.Windows.Forms.DataFormats.FileDrop)) {  	var files = e.Data.GetData (DataFormats.FileDrop) as string[];  	// Force all files to be droppable  	foreach (var file in files)  		if (!IsDropAllowed (file' targetNode.Node))  			return;  	e.Effect = System.Windows.Forms.DragDropEffects.Copy;  } else if (e.Data.GetDataPresent (typeof(DnDData))) {  	var d = e.Data.GetData (typeof(DnDData)) as DnDData;  	if (!IsDropAllowed (d.Path' targetNode.Node))  		return;  	// If src prj and dest prj are equal' set default action to 'move'  	bool Move = d.Project == targetNode.Project;  	// If ctrl is pressed anyway' turn action  	if ((e.KeyState & 8) == 8)  		Move = !Move;  	if (!Move)  		// If ctrl has been pressed  		e.Effect = System.Windows.Forms.DragDropEffects.Copy;  	else  		e.Effect = System.Windows.Forms.DragDropEffects.Move;  	// Move file/dir by default  }  
Magic Number,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent (System.Windows.Forms.DataFormats.FileDrop)) {  	var files = e.Data.GetData (DataFormats.FileDrop) as string[];  	// Force all files to be droppable  	foreach (var file in files)  		if (!IsDropAllowed (file' targetNode.Node))  			return;  	e.Effect = System.Windows.Forms.DragDropEffects.Copy;  } else if (e.Data.GetDataPresent (typeof(DnDData))) {  	var d = e.Data.GetData (typeof(DnDData)) as DnDData;  	if (!IsDropAllowed (d.Path' targetNode.Node))  		return;  	// If src prj and dest prj are equal' set default action to 'move'  	bool Move = d.Project == targetNode.Project;  	// If ctrl is pressed anyway' turn action  	if ((e.KeyState & 8) == 8)  		Move = !Move;  	if (!Move)  		// If ctrl has been pressed  		e.Effect = System.Windows.Forms.DragDropEffects.Copy;  	else  		e.Effect = System.Windows.Forms.DragDropEffects.Move;  	// Move file/dir by default  }  
Magic Number,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent (typeof(DnDData))) {  	var d = e.Data.GetData (typeof(DnDData)) as DnDData;  	if (!IsDropAllowed (d.Path' targetNode.Node))  		return;  	// If src prj and dest prj are equal' set default action to 'move'  	bool Move = d.Project == targetNode.Project;  	// If ctrl is pressed anyway' turn action  	if ((e.KeyState & 8) == 8)  		Move = !Move;  	if (!Move)  		// If ctrl has been pressed  		e.Effect = System.Windows.Forms.DragDropEffects.Copy;  	else  		e.Effect = System.Windows.Forms.DragDropEffects.Move;  	// Move file/dir by default  }  
Magic Number,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent (typeof(DnDData))) {  	var d = e.Data.GetData (typeof(DnDData)) as DnDData;  	if (!IsDropAllowed (d.Path' targetNode.Node))  		return;  	// If src prj and dest prj are equal' set default action to 'move'  	bool Move = d.Project == targetNode.Project;  	// If ctrl is pressed anyway' turn action  	if ((e.KeyState & 8) == 8)  		Move = !Move;  	if (!Move)  		// If ctrl has been pressed  		e.Effect = System.Windows.Forms.DragDropEffects.Copy;  	else  		e.Effect = System.Windows.Forms.DragDropEffects.Move;  	// Move file/dir by default  }  
Magic Number,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,The following statement contains a magic number: if ((e.KeyState & 8) == 8)  	Move = !Move;  
Magic Number,D_IDE.Controls.Panels,ProjectExplorer,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\ProjectExplorer.xaml.cs,MainTree_DragOver,The following statement contains a magic number: if ((e.KeyState & 8) == 8)  	Move = !Move;  
Magic Number,D_IDE.Controls.Panels,StartPage,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Controls\Panels\StartPage.xaml.cs,StartPage,The following statement contains a magic number: Label_Version.Content = "Version " + System.Reflection.Assembly.GetCallingAssembly ().GetName ().Version.ToString (4);  
Magic Number,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,SetWindowPositionNextToCurrentCaret,The following statement contains a magic number: if (IsInWindow) {  	Left = cr_absolute.X + 100;  	if (Left + Width > SystemParameters.PrimaryScreenWidth)  		Left = cr_absolute.X - 100 - Width;  }  
Magic Number,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,SetWindowPositionNextToCurrentCaret,The following statement contains a magic number: if (IsInWindow) {  	Left = cr_absolute.X + 100;  	if (Left + Width > SystemParameters.PrimaryScreenWidth)  		Left = cr_absolute.X - 100 - Width;  }  
Magic Number,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,SetWindowPositionNextToCurrentCaret,The following statement contains a magic number: Left = cr_absolute.X + 100;  
Magic Number,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,SetWindowPositionNextToCurrentCaret,The following statement contains a magic number: if (Left + Width > SystemParameters.PrimaryScreenWidth)  	Left = cr_absolute.X - 100 - Width;  
Magic Number,D_IDE.Dialogs,SearchAndReplaceDlg,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Dialogs\SearchAndReplaceDlg.xaml.cs,SetWindowPositionNextToCurrentCaret,The following statement contains a magic number: Left = cr_absolute.X - 100 - Width;  
Magic Number,BrendanGrant.Helpers.FileAssociation,ProgramIcon,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramIcon.cs,Parse,The following statement contains a magic number: if (regString.StartsWith ("\"") && regString.EndsWith ("\"")) {  	if (regString.Length > 3)  		regString = regString.Substring (1' regString.Length - 2);  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,ProgramIcon,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramIcon.cs,Parse,The following statement contains a magic number: if (regString.StartsWith ("\"") && regString.EndsWith ("\"")) {  	if (regString.Length > 3)  		regString = regString.Substring (1' regString.Length - 2);  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,ProgramIcon,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramIcon.cs,Parse,The following statement contains a magic number: if (regString.Length > 3)  	regString = regString.Substring (1' regString.Length - 2);  
Magic Number,BrendanGrant.Helpers.FileAssociation,ProgramIcon,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramIcon.cs,Parse,The following statement contains a magic number: if (regString.Length > 3)  	regString = regString.Substring (1' regString.Length - 2);  
Magic Number,BrendanGrant.Helpers.FileAssociation,ProgramIcon,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\ProgramIcon.cs,Parse,The following statement contains a magic number: regString = regString.Substring (1' regString.Length - 2);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: for (int x = 0; x < parts.Length; x++) {  	key = key.OpenSubKey (parts [x]' true);  	if (key == null) {  		key = lastKey.CreateSubKey (parts [x]);  	}  	if (x == parts.Length - 1) {  		if (value is string) {  			key.SetValue (valueName' value.ToString ());  		} else if (value is uint || value.GetType ().IsEnum) {  			object o = key.GetValue (valueName' null);  			if (o == null) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else {  				RegistryValueKind kind = key.GetValueKind (valueName);  				if (kind == RegistryValueKind.DWord) {  					key.SetValue (valueName' value' RegistryValueKind.DWord);  				} else if (kind == RegistryValueKind.Binary) {  					uint num = (uint)value;  					byte[] b = new byte[4];  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 1);  					b [2] = (byte)((num & 0x00FF0000) >> 2);  					b [3] = (byte)((num & 0xFF000000) >> 3);  					b [0] = (byte)((num & 0x000000FF) >> 0);  					b [1] = (byte)((num & 0x0000FF00) >> 8);  					b [2] = (byte)((num & 0x00FF0000) >> 16);  					b [3] = (byte)((num & 0xFF000000) >> 24);  					key.SetValue (valueName' b' RegistryValueKind.Binary);  				} else if (kind == RegistryValueKind.String) {  					key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  				}  			}  		} else if (value is Guid) {  			key.SetValue (valueName' ((Guid)value).ToString ("B"));  		}  	}  	lastKey = key;  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (x == parts.Length - 1) {  	if (value is string) {  		key.SetValue (valueName' value.ToString ());  	} else if (value is uint || value.GetType ().IsEnum) {  		object o = key.GetValue (valueName' null);  		if (o == null) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else {  			RegistryValueKind kind = key.GetValueKind (valueName);  			if (kind == RegistryValueKind.DWord) {  				key.SetValue (valueName' value' RegistryValueKind.DWord);  			} else if (kind == RegistryValueKind.Binary) {  				uint num = (uint)value;  				byte[] b = new byte[4];  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 1);  				b [2] = (byte)((num & 0x00FF0000) >> 2);  				b [3] = (byte)((num & 0xFF000000) >> 3);  				b [0] = (byte)((num & 0x000000FF) >> 0);  				b [1] = (byte)((num & 0x0000FF00) >> 8);  				b [2] = (byte)((num & 0x00FF0000) >> 16);  				b [3] = (byte)((num & 0xFF000000) >> 24);  				key.SetValue (valueName' b' RegistryValueKind.Binary);  			} else if (kind == RegistryValueKind.String) {  				key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  			}  		}  	} else if (value is Guid) {  		key.SetValue (valueName' ((Guid)value).ToString ("B"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is string) {  	key.SetValue (valueName' value.ToString ());  } else if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (value is uint || value.GetType ().IsEnum) {  	object o = key.GetValue (valueName' null);  	if (o == null) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else {  		RegistryValueKind kind = key.GetValueKind (valueName);  		if (kind == RegistryValueKind.DWord) {  			key.SetValue (valueName' value' RegistryValueKind.DWord);  		} else if (kind == RegistryValueKind.Binary) {  			uint num = (uint)value;  			byte[] b = new byte[4];  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 1);  			b [2] = (byte)((num & 0x00FF0000) >> 2);  			b [3] = (byte)((num & 0xFF000000) >> 3);  			b [0] = (byte)((num & 0x000000FF) >> 0);  			b [1] = (byte)((num & 0x0000FF00) >> 8);  			b [2] = (byte)((num & 0x00FF0000) >> 16);  			b [3] = (byte)((num & 0xFF000000) >> 24);  			key.SetValue (valueName' b' RegistryValueKind.Binary);  		} else if (kind == RegistryValueKind.String) {  			key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  		}  	}  } else if (value is Guid) {  	key.SetValue (valueName' ((Guid)value).ToString ("B"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (o == null) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else {  	RegistryValueKind kind = key.GetValueKind (valueName);  	if (kind == RegistryValueKind.DWord) {  		key.SetValue (valueName' value' RegistryValueKind.DWord);  	} else if (kind == RegistryValueKind.Binary) {  		uint num = (uint)value;  		byte[] b = new byte[4];  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 1);  		b [2] = (byte)((num & 0x00FF0000) >> 2);  		b [3] = (byte)((num & 0xFF000000) >> 3);  		b [0] = (byte)((num & 0x000000FF) >> 0);  		b [1] = (byte)((num & 0x0000FF00) >> 8);  		b [2] = (byte)((num & 0x00FF0000) >> 16);  		b [3] = (byte)((num & 0xFF000000) >> 24);  		key.SetValue (valueName' b' RegistryValueKind.Binary);  	} else if (kind == RegistryValueKind.String) {  		key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  	}  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.DWord) {  	key.SetValue (valueName' value' RegistryValueKind.DWord);  } else if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: if (kind == RegistryValueKind.Binary) {  	uint num = (uint)value;  	byte[] b = new byte[4];  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 1);  	b [2] = (byte)((num & 0x00FF0000) >> 2);  	b [3] = (byte)((num & 0xFF000000) >> 3);  	b [0] = (byte)((num & 0x000000FF) >> 0);  	b [1] = (byte)((num & 0x0000FF00) >> 8);  	b [2] = (byte)((num & 0x00FF0000) >> 16);  	b [3] = (byte)((num & 0xFF000000) >> 24);  	key.SetValue (valueName' b' RegistryValueKind.Binary);  } else if (kind == RegistryValueKind.String) {  	key.SetValue (valueName' "x" + ((uint)value).ToString ("X8"));  }  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [2] = (byte)((num & 0x00FF0000) >> 2);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [2] = (byte)((num & 0x00FF0000) >> 2);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [3] = (byte)((num & 0xFF000000) >> 3);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [3] = (byte)((num & 0xFF000000) >> 3);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [1] = (byte)((num & 0x0000FF00) >> 8);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [2] = (byte)((num & 0x00FF0000) >> 16);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [2] = (byte)((num & 0x00FF0000) >> 16);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [3] = (byte)((num & 0xFF000000) >> 24);  
Magic Number,BrendanGrant.Helpers.FileAssociation,RegistryWrapper,D:\newReposJune17\aBothe_D-IDE\D-IDE2\Misc\FileAssociation\RegistryWrapper.cs,Write,The following statement contains a magic number: b [3] = (byte)((num & 0xFF000000) >> 24);  
