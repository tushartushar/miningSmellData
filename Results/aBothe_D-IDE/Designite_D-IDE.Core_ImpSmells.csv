Implementation smell,Namespace,Class,File,Method,Description
Long Method,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has 200 lines of code.
Long Method,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Save,The method has 115 lines of code.
Long Method,D_IDE.Core,EditorDocument,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,Init,The method has 64 lines of code.
Long Method,D_IDE.Core,Project,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,ReloadProject,The method has 80 lines of code.
Complex Method,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,Cyclomatic complexity of the method is 114
Complex Method,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Save,Cyclomatic complexity of the method is 7
Complex Method,D_IDE,CommonEditorSettings,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,LoadFromXml,Cyclomatic complexity of the method is 16
Complex Method,D_IDE.Core,EditorDocument,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,RefreshDebugHighlightings,Cyclomatic complexity of the method is 8
Complex Method,D_IDE.Core,AbstractLanguageBinding,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\AbstractLanguageBinding.cs,CanHandleProject,Cyclomatic complexity of the method is 7
Complex Method,D_IDE.Core,Project,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,LoadProjectFromFile,Cyclomatic complexity of the method is 11
Complex Method,D_IDE.Core,Project,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,ReloadProject,Cyclomatic complexity of the method is 40
Complex Method,Aga.Controls.Tree,TreeListItem,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\TreeListItem.cs,OnKeyDown,Cyclomatic complexity of the method is 23
Complex Method,Aga.Controls.Tree,TreeNode,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\TreeNode.cs,ChildrenChanged,Cyclomatic complexity of the method is 15
Complex Method,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,Cyclomatic complexity of the method is 15
Complex Method,D_IDE.Core.Controls.Editor,TextMarker,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,CalculateWordOffset,Cyclomatic complexity of the method is 10
Long Parameter List,D_IDE.Core,FileExecution,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\FileExecution.cs,ExecuteSilentlyAsync,The method has 6 parameters.
Long Parameter List,D_IDE.Core,FileExecution,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\FileExecution.cs,ExecuteAsync,The method has 4 parameters.
Long Parameter List,D_IDE.Core,AbstractBuildSupport,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\AbstractBuildSupport.cs,BuildModule,The method has 5 parameters.
Long Parameter List,D_IDE.Core,AbstractBuildSupport,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\AbstractBuildSupport.cs,BuildModuleAsync,The method has 5 parameters.
Long Parameter List,D_IDE.Core,BuildError,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,BuildError,The method has 4 parameters.
Long Parameter List,D_IDE.Core,GDIToImageSrcConverter,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,Convert,The method has 4 parameters.
Long Parameter List,D_IDE.Core,GDIToImageSrcConverter,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,D_IDE.Core,Win32,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,SHGetFileInfo,The method has 5 parameters.
Long Parameter List,Aga.Controls.Tree,LevelToIndentConverter,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\Converters.cs,Convert,The method has 4 parameters.
Long Parameter List,Aga.Controls.Tree,LevelToIndentConverter,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\Converters.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Aga.Controls.Tree,CanExpandConverter,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\Converters.cs,Convert,The method has 4 parameters.
Long Parameter List,Aga.Controls.Tree,CanExpandConverter,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\Converters.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Aga.Controls.Tree,TreeList,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\TreeList.cs,InsertNewNode,The method has 4 parameters.
Long Parameter List,ICSharpCode.AvalonEdit.AddIn,BracketSearchResult,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\BracketSearchResult.cs,BracketSearchResult,The method has 4 parameters.
Long Parameter List,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,CreatePoints,The method has 4 parameters.
Long Statement,D_IDE.Core,EditorDocument,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,DoOutsideModificationCheck,The length of the statement  "		var mbr = MessageBox.Show (CoreManager.Instance.MainWindow as Window' "Reload file?"' "File has been modified"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.Yes); " is 184.
Long Statement,D_IDE.Core,EditorDocument,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,Init,The length of the statement  "	Editor.TextArea.MouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler (TextArea_MouseRightButtonDown); " is 121.
Long Statement,D_IDE.Core,EditorDocument,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,RefreshDebugHighlightings,The length of the statement  "					var m = new CoreManager.DebugManagement.DebugStackFrameMarker (MarkerStrategy' stack' Editor.Document.GetOffset ((int)ln' 0)); " is 126.
Long Statement,D_IDE.Core,FileExecution,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\FileExecution.cs,ExecuteAsync,The length of the statement  "			ErrorLogger.Log (Executable + " not found!\r\n\r\nArguments:\t" + Arguments + "\r\nStart Directory:\t" + StartDirectory' ErrorType.Error' ErrorOrigin.Build); " is 157.
Long Statement,D_IDE.Core,Project,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,LoadProjectFromFile,The length of the statement  "		ErrorLogger.Log (new FileNotFoundException ("Couldn't load project because the file \"" + FileName + "\" was not found"' FileName)); " is 132.
Long Statement,D_IDE.Core,Util,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,ShowFileExistsDialog,The length of the statement  "	return System.Windows.MessageBox.Show ("\"" + Path.GetFileName (file) + "\" already exists. Continue with overwriting?"' "File already exists"' System.Windows.MessageBoxButton.YesNoCancel' System.Windows.MessageBoxImage.Question' System.Windows.MessageBoxResult.No); " is 266.
Long Statement,D_IDE.Core,Util,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,ShowDeleteFileDialog,The length of the statement  "	return System.Windows.MessageBox.Show ("Continue with deleting \"" + Path.GetFileName (file) + "\""' "Delete file/directory"' System.Windows.MessageBoxButton.YesNo' System.Windows.MessageBoxImage.Question' System.Windows.MessageBoxResult.Yes) == System.Windows.MessageBoxResult.Yes; " is 282.
Long Statement,D_IDE.Core,Win32,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,GetIcon,The length of the statement  "		hImgSmall = SHGetFileInfo (Path.GetFileName (FilePath)' 0' ref shinfo' (uint)Marshal.SizeOf (shinfo)' SHGFI_ICON | SHGFI_SMALLICON | SHGFI_USEFILEATTRIBUTES); " is 158.
Long Statement,D_IDE.Core,Win32,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,GetIcon,The length of the statement  "		hImgLarge = SHGetFileInfo (Path.GetFileName (FilePath)' 0' ref shinfo' (uint)Marshal.SizeOf (shinfo)' SHGFI_ICON | SHGFI_LARGEICON | SHGFI_USEFILEATTRIBUTES); " is 158.
Long Statement,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Create,The length of the statement  "		throw new ArgumentOutOfRangeException ("length"' length' "length must not be negative and startOffset+length must not be after the end of the document"); " is 153.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,CommonEditorSettings,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,LoadFromXml,The method has an empty catch block.
Empty Catch Block,D_IDE,CommonEditorSettings,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,LoadFromXml,The method has an empty catch block.
Empty Catch Block,D_IDE,CommonEditorSettings,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,LoadFromXml,The method has an empty catch block.
Empty Catch Block,D_IDE.Core,EditorDocument,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,UpdateSyntaxHighlighter,The method has an empty catch block.
Empty Catch Block,D_IDE.Core,Solution,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Solution.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE.Core,ErrorLogger,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Util.cs,OnLog,The method has an empty catch block.
Magic Number,D_IDE,CommonEditorSettings,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,RestoreDefaults,The following statement contains a magic number: FontSize = 13;  
Magic Number,D_IDE.Core,ProjectVersion,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: if (p.Length > 3) {  	Major = Convert.ToInt32 (p [0]);  	Minor = Convert.ToInt32 (p [1]);  	Build = Convert.ToInt32 (p [2]);  	Revision = Convert.ToInt32 (p [3]);  }  
Magic Number,D_IDE.Core,ProjectVersion,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: if (p.Length > 3) {  	Major = Convert.ToInt32 (p [0]);  	Minor = Convert.ToInt32 (p [1]);  	Build = Convert.ToInt32 (p [2]);  	Revision = Convert.ToInt32 (p [3]);  }  
Magic Number,D_IDE.Core,ProjectVersion,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: if (p.Length > 3) {  	Major = Convert.ToInt32 (p [0]);  	Minor = Convert.ToInt32 (p [1]);  	Build = Convert.ToInt32 (p [2]);  	Revision = Convert.ToInt32 (p [3]);  }  
Magic Number,D_IDE.Core,ProjectVersion,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: Build = Convert.ToInt32 (p [2]);  
Magic Number,D_IDE.Core,ProjectVersion,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: Revision = Convert.ToInt32 (p [3]);  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments (viewStart' viewEnd - viewStart)) {  	if (marker.BackgroundColor != null) {  		BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder ();  		geoBuilder.AlignToWholePixels = true;  		geoBuilder.CornerRadius = 3;  		geoBuilder.AddSegment (textView' marker);  		Geometry geometry = geoBuilder.CreateGeometry ();  		if (geometry != null) {  			Color color = marker.BackgroundColor.Value;  			SolidColorBrush brush = new SolidColorBrush (color);  			brush.Freeze ();  			drawingContext.DrawGeometry (brush' null' geometry);  		}  	}  	if (marker.MarkerType != TextMarkerType.None) {  		foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment (textView' marker)) {  			Point startPoint = r.BottomLeft;  			Point endPoint = r.BottomRight;  			Pen usedPen = new Pen (new SolidColorBrush (marker.MarkerColor)' 1);  			usedPen.Freeze ();  			switch (marker.MarkerType) {  			case TextMarkerType.Underlined:  				double offset = 2.5;  				int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  				StreamGeometry geometry = new StreamGeometry ();  				using (StreamGeometryContext ctx = geometry.Open ()) {  					ctx.BeginFigure (startPoint' false' false);  					ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  				}  				geometry.Freeze ();  				drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  				break;  			}  		}  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments (viewStart' viewEnd - viewStart)) {  	if (marker.BackgroundColor != null) {  		BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder ();  		geoBuilder.AlignToWholePixels = true;  		geoBuilder.CornerRadius = 3;  		geoBuilder.AddSegment (textView' marker);  		Geometry geometry = geoBuilder.CreateGeometry ();  		if (geometry != null) {  			Color color = marker.BackgroundColor.Value;  			SolidColorBrush brush = new SolidColorBrush (color);  			brush.Freeze ();  			drawingContext.DrawGeometry (brush' null' geometry);  		}  	}  	if (marker.MarkerType != TextMarkerType.None) {  		foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment (textView' marker)) {  			Point startPoint = r.BottomLeft;  			Point endPoint = r.BottomRight;  			Pen usedPen = new Pen (new SolidColorBrush (marker.MarkerColor)' 1);  			usedPen.Freeze ();  			switch (marker.MarkerType) {  			case TextMarkerType.Underlined:  				double offset = 2.5;  				int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  				StreamGeometry geometry = new StreamGeometry ();  				using (StreamGeometryContext ctx = geometry.Open ()) {  					ctx.BeginFigure (startPoint' false' false);  					ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  				}  				geometry.Freeze ();  				drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  				break;  			}  		}  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments (viewStart' viewEnd - viewStart)) {  	if (marker.BackgroundColor != null) {  		BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder ();  		geoBuilder.AlignToWholePixels = true;  		geoBuilder.CornerRadius = 3;  		geoBuilder.AddSegment (textView' marker);  		Geometry geometry = geoBuilder.CreateGeometry ();  		if (geometry != null) {  			Color color = marker.BackgroundColor.Value;  			SolidColorBrush brush = new SolidColorBrush (color);  			brush.Freeze ();  			drawingContext.DrawGeometry (brush' null' geometry);  		}  	}  	if (marker.MarkerType != TextMarkerType.None) {  		foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment (textView' marker)) {  			Point startPoint = r.BottomLeft;  			Point endPoint = r.BottomRight;  			Pen usedPen = new Pen (new SolidColorBrush (marker.MarkerColor)' 1);  			usedPen.Freeze ();  			switch (marker.MarkerType) {  			case TextMarkerType.Underlined:  				double offset = 2.5;  				int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  				StreamGeometry geometry = new StreamGeometry ();  				using (StreamGeometryContext ctx = geometry.Open ()) {  					ctx.BeginFigure (startPoint' false' false);  					ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  				}  				geometry.Freeze ();  				drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  				break;  			}  		}  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: if (marker.BackgroundColor != null) {  	BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder ();  	geoBuilder.AlignToWholePixels = true;  	geoBuilder.CornerRadius = 3;  	geoBuilder.AddSegment (textView' marker);  	Geometry geometry = geoBuilder.CreateGeometry ();  	if (geometry != null) {  		Color color = marker.BackgroundColor.Value;  		SolidColorBrush brush = new SolidColorBrush (color);  		brush.Freeze ();  		drawingContext.DrawGeometry (brush' null' geometry);  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: geoBuilder.CornerRadius = 3;  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: if (marker.MarkerType != TextMarkerType.None) {  	foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment (textView' marker)) {  		Point startPoint = r.BottomLeft;  		Point endPoint = r.BottomRight;  		Pen usedPen = new Pen (new SolidColorBrush (marker.MarkerColor)' 1);  		usedPen.Freeze ();  		switch (marker.MarkerType) {  		case TextMarkerType.Underlined:  			double offset = 2.5;  			int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  			StreamGeometry geometry = new StreamGeometry ();  			using (StreamGeometryContext ctx = geometry.Open ()) {  				ctx.BeginFigure (startPoint' false' false);  				ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  			}  			geometry.Freeze ();  			drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  			break;  		}  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: if (marker.MarkerType != TextMarkerType.None) {  	foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment (textView' marker)) {  		Point startPoint = r.BottomLeft;  		Point endPoint = r.BottomRight;  		Pen usedPen = new Pen (new SolidColorBrush (marker.MarkerColor)' 1);  		usedPen.Freeze ();  		switch (marker.MarkerType) {  		case TextMarkerType.Underlined:  			double offset = 2.5;  			int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  			StreamGeometry geometry = new StreamGeometry ();  			using (StreamGeometryContext ctx = geometry.Open ()) {  				ctx.BeginFigure (startPoint' false' false);  				ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  			}  			geometry.Freeze ();  			drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  			break;  		}  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment (textView' marker)) {  	Point startPoint = r.BottomLeft;  	Point endPoint = r.BottomRight;  	Pen usedPen = new Pen (new SolidColorBrush (marker.MarkerColor)' 1);  	usedPen.Freeze ();  	switch (marker.MarkerType) {  	case TextMarkerType.Underlined:  		double offset = 2.5;  		int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  		StreamGeometry geometry = new StreamGeometry ();  		using (StreamGeometryContext ctx = geometry.Open ()) {  			ctx.BeginFigure (startPoint' false' false);  			ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  		}  		geometry.Freeze ();  		drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  		break;  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment (textView' marker)) {  	Point startPoint = r.BottomLeft;  	Point endPoint = r.BottomRight;  	Pen usedPen = new Pen (new SolidColorBrush (marker.MarkerColor)' 1);  	usedPen.Freeze ();  	switch (marker.MarkerType) {  	case TextMarkerType.Underlined:  		double offset = 2.5;  		int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  		StreamGeometry geometry = new StreamGeometry ();  		using (StreamGeometryContext ctx = geometry.Open ()) {  			ctx.BeginFigure (startPoint' false' false);  			ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  		}  		geometry.Freeze ();  		drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  		break;  	}  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: switch (marker.MarkerType) {  case TextMarkerType.Underlined:  	double offset = 2.5;  	int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  	StreamGeometry geometry = new StreamGeometry ();  	using (StreamGeometryContext ctx = geometry.Open ()) {  		ctx.BeginFigure (startPoint' false' false);  		ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  	}  	geometry.Freeze ();  	drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  	break;  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: switch (marker.MarkerType) {  case TextMarkerType.Underlined:  	double offset = 2.5;  	int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  	StreamGeometry geometry = new StreamGeometry ();  	using (StreamGeometryContext ctx = geometry.Open ()) {  		ctx.BeginFigure (startPoint' false' false);  		ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  	}  	geometry.Freeze ();  	drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  	break;  }  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,CreatePoints,The following statement contains a magic number: for (int i = 0; i < count; i++)  	yield return new Point (start.X + i * offset' start.Y - ((i + 1) % 2 == 0 ? offset : 0));  
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,CreatePoints,The following statement contains a magic number: yield return new Point (start.X + i * offset' start.Y - ((i + 1) % 2 == 0 ? offset : 0));  
Missing Default,D_IDE.Core,Solution,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Solution.cs,Load,The following switch statement is missing a default case: switch (x.LocalName) {  case "name":  	Name = x.ReadString ();  	break;  case "project":  	var f = x.ReadString ();  	_ProjectFiles.Add (f);  	if (x.HasAttributes && x.GetAttribute ("isStartProject") != "false")  		_StartPrjFile = f;  	break;  }  
Missing Default,Aga.Controls.Tree,TreeListItem,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\TreeListItem.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.Right:  	e.Handled = true;  	if (!Node.IsExpanded) {  		Node.IsExpanded = true;  		ChangeFocus (Node);  	} else if (Node.Children.Count > 0)  		ChangeFocus (Node.Children [0]);  	break;  case Key.Left:  	e.Handled = true;  	if (Node.IsExpanded && Node.IsExpandable) {  		Node.IsExpanded = false;  		ChangeFocus (Node);  	} else  		ChangeFocus (Node.Parent);  	break;  case Key.Subtract:  	e.Handled = true;  	Node.IsExpanded = false;  	ChangeFocus (Node);  	break;  case Key.Add:  	e.Handled = true;  	Node.IsExpanded = true;  	ChangeFocus (Node);  	break;  }  
Missing Default,Aga.Controls.Tree,TreeNode,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\TreeNode.cs,ChildrenChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	if (e.NewItems != null) {  		int index = e.NewStartingIndex;  		int rowIndex = Tree.Rows.IndexOf (this);  		foreach (object obj in e.NewItems) {  			Tree.InsertNewNode (this' obj' rowIndex' index);  			index++;  		}  	}  	break;  case NotifyCollectionChangedAction.Remove:  	if (Children.Count > e.OldStartingIndex)  		RemoveChildAt (e.OldStartingIndex);  	break;  case NotifyCollectionChangedAction.Move:  case NotifyCollectionChangedAction.Replace:  case NotifyCollectionChangedAction.Reset:  	while (Children.Count > 0)  		RemoveChildAt (0);  	Tree.CreateChildrenNodes (this);  	break;  }  
Missing Default,D_IDE.Core.Controls.Editor,TextMarkerService,D:\newReposJune17\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following switch statement is missing a default case: switch (marker.MarkerType) {  case TextMarkerType.Underlined:  	double offset = 2.5;  	int count = Math.Max ((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  	StreamGeometry geometry = new StreamGeometry ();  	using (StreamGeometryContext ctx = geometry.Open ()) {  		ctx.BeginFigure (startPoint' false' false);  		ctx.PolyLineTo (CreatePoints (startPoint' endPoint' offset' count).ToArray ()' true' false);  	}  	geometry.Freeze ();  	drawingContext.DrawGeometry (Brushes.Transparent' usedPen' geometry);  	break;  }  
