Implementation smell,Namespace,Class,File,Method,Description
Long Method,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has 217 lines of code.
Long Method,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Save,The method has 116 lines of code.
Complex Method,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,D_IDE.Core,EditorDocument,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,RefreshDebugHighlightings,Cyclomatic complexity of the method is 8
Complex Method,D_IDE.Core,Project,C:\repos\aBothe_D-IDE\D-IDE.Core\Project.cs,LoadProjectFromFile,Cyclomatic complexity of the method is 8
Complex Method,D_IDE.Core.Controls.Editor,TextMarkerService,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,Cyclomatic complexity of the method is 11
Long Parameter List,D_IDE.Core,FileExecution,C:\repos\aBothe_D-IDE\D-IDE.Core\FileExecution.cs,ExecuteSilentlyAsync,The method has 6 parameters. Parameters: Executable' Arguments' StartDirectory' OnOutput' OnError' OnExit
Long Parameter List,D_IDE.Core,AbstractBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.Core\AbstractBuildSupport.cs,BuildModule,The method has 5 parameters. Parameters: Module' OutputDirectory' ExecDirectory' DebugCompile' LinkToStandAlone
Long Parameter List,D_IDE.Core,AbstractBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.Core\AbstractBuildSupport.cs,BuildModuleAsync,The method has 5 parameters. Parameters: Module' OutputDirectory' ExecDirectory' Debug' LinkToStandAlone
Long Parameter List,D_IDE.Core,Win32,C:\repos\aBothe_D-IDE\D-IDE.Core\Util.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbSizeFileInfo' uFlags
Long Statement,D_IDE.Core,EditorDocument,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,DoOutsideModificationCheck,The length of the statement  "				var mbr = MessageBox.Show(CoreManager.Instance.MainWindow as Window'"Reload file?"' "File has been modified"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.Yes); " is 182.
Long Statement,D_IDE.Core,EditorDocument,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,Init,The length of the statement  "			Editor.TextArea.MouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(TextArea_MouseRightButtonDown); " is 120.
Long Statement,D_IDE.Core,EditorDocument,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,RefreshDebugHighlightings,The length of the statement  "							var m = new CoreManager.DebugManagement.DebugStackFrameMarker(MarkerStrategy' stack' Editor.Document.GetOffset((int)ln'0)); " is 123.
Long Statement,D_IDE.Core,FileExecution,C:\repos\aBothe_D-IDE\D-IDE.Core\FileExecution.cs,ExecuteAsync,The length of the statement  "					ErrorLogger.Log(Executable+" not found!\r\n\r\nArguments:\t"+Arguments+"\r\nStart Directory:\t"+StartDirectory' ErrorType.Error' ErrorOrigin.Build); " is 148.
Long Statement,D_IDE.Core,Project,C:\repos\aBothe_D-IDE\D-IDE.Core\Project.cs,LoadProjectFromFile,The length of the statement  "				ErrorLogger.Log(new FileNotFoundException("Couldn't load project because the file \"" + FileName + "\" was not found"' FileName)); " is 130.
Long Statement,Aga.Controls.Tree,RowExpander,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\RowExpander.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/d-ide.core;component/controls/aga.controls/tree/rowexpander.xaml"' System.UriKind.Relative); " is 138.
Long Statement,D_IDE.Core.Controls,ListSelectionDialog,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\ListSelectionDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/d-ide.core;component/controls/listselectiondialog.xaml"' System.UriKind.Relative); " is 128.
Long Statement,D_IDE.Core.Controls,ListSelectionDialog,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\ListSelectionDialog.xaml.cs,Connect,The length of the statement  "            this.SelectionList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.SelectionList_MouseDoubleClick); " is 125.
Long Statement,ICSharpCode.AvalonEdit.AddIn,BracketHighlightRenderer,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\BracketHighlighter.cs,Draw,The length of the statement  "			builder.AddSegment(textView' new TextSegment() { StartOffset = result.OpeningBracketOffset' Length = result.OpeningBracketLength }); " is 132.
Long Statement,ICSharpCode.AvalonEdit.AddIn,BracketHighlightRenderer,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\BracketHighlighter.cs,Draw,The length of the statement  "			builder.AddSegment(textView' new TextSegment() { StartOffset = result.ClosingBracketOffset' Length = result.ClosingBracketLength }); " is 132.
Long Statement,D_IDE.Core.Controls.Editor,TextMarkerService,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Create,The length of the statement  "				throw new ArgumentOutOfRangeException("length"' length' "length must not be negative and startOffset+length must not be after the end of the document"); " is 152.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\aBothe_D-IDE\D-IDE.Core\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,GlobalProperties,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE,CommonEditorSettings,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,LoadFromXml,The method has an empty catch block.
Empty Catch Block,D_IDE,CommonEditorSettings,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,LoadFromXml,The method has an empty catch block.
Empty Catch Block,D_IDE,CommonEditorSettings,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,LoadFromXml,The method has an empty catch block.
Empty Catch Block,D_IDE.Core,EditorDocument,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\EditorDocument.cs,UpdateSyntaxHighlighter,The method has an empty catch block.
Empty Catch Block,D_IDE.Core,Solution,C:\repos\aBothe_D-IDE\D-IDE.Core\Solution.cs,Load,The method has an empty catch block.
Empty Catch Block,D_IDE.Core,ErrorLogger,C:\repos\aBothe_D-IDE\D-IDE.Core\Util.cs,OnLog,The method has an empty catch block.
Magic Number,D_IDE,CommonEditorSettings,C:\repos\aBothe_D-IDE\D-IDE.Core\GlobalProperties.cs,RestoreDefaults,The following statement contains a magic number: FontSize = 13;
Magic Number,D_IDE.Core,ProjectVersion,C:\repos\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: if (p.Length > 3)  			{  				Major = Convert.ToInt32(p[0]);  				Minor = Convert.ToInt32(p[1]);  				Build = Convert.ToInt32(p[2]);  				Revision = Convert.ToInt32(p[3]);  			}
Magic Number,D_IDE.Core,ProjectVersion,C:\repos\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: if (p.Length > 3)  			{  				Major = Convert.ToInt32(p[0]);  				Minor = Convert.ToInt32(p[1]);  				Build = Convert.ToInt32(p[2]);  				Revision = Convert.ToInt32(p[3]);  			}
Magic Number,D_IDE.Core,ProjectVersion,C:\repos\aBothe_D-IDE\D-IDE.Core\Project.cs,Parse,The following statement contains a magic number: if (p.Length > 3)  			{  				Major = Convert.ToInt32(p[0]);  				Minor = Convert.ToInt32(p[1]);  				Build = Convert.ToInt32(p[2]);  				Revision = Convert.ToInt32(p[3]);  			}
Magic Number,D_IDE.Core,Util,C:\repos\aBothe_D-IDE\D-IDE.Core\Util.cs,DateFromUnixTime,The following statement contains a magic number: var ret = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,D_IDE.Core,Util,C:\repos\aBothe_D-IDE\D-IDE.Core\Util.cs,UnixTimeFromDate,The following statement contains a magic number: var ret = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,D_IDE.Core.Controls,ListSelectionDialog,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\ListSelectionDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.button2 = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\Controls\ListSelectionDialog.xaml"              this.button2.Click += new System.Windows.RoutedEventHandler(this.button2_Click);                            #line default              #line hidden              return;              case 3:              this.SelectionList = ((System.Windows.Controls.ListBox)(target));                            #line 11 "..\..\..\Controls\ListSelectionDialog.xaml"              this.SelectionList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.SelectionList_MouseDoubleClick);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.Core.Controls,ListSelectionDialog,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\ListSelectionDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.button2 = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\Controls\ListSelectionDialog.xaml"              this.button2.Click += new System.Windows.RoutedEventHandler(this.button2_Click);                            #line default              #line hidden              return;              case 3:              this.SelectionList = ((System.Windows.Controls.ListBox)(target));                            #line 11 "..\..\..\Controls\ListSelectionDialog.xaml"              this.SelectionList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.SelectionList_MouseDoubleClick);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments(viewStart' viewEnd - viewStart)) {  				if (marker.BackgroundColor != null) {  					BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder();  					geoBuilder.AlignToWholePixels = true;  					geoBuilder.CornerRadius = 3;  					geoBuilder.AddSegment(textView' marker);  					Geometry geometry = geoBuilder.CreateGeometry();  					if (geometry != null) {  						Color color = marker.BackgroundColor.Value;  						SolidColorBrush brush = new SolidColorBrush(color);  						brush.Freeze();  						drawingContext.DrawGeometry(brush' null' geometry);  					}  				}  				if (marker.MarkerType != TextMarkerType.None) {  					foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment(textView' marker)) {  						Point startPoint = r.BottomLeft;  						Point endPoint = r.BottomRight;  						  						Pen usedPen = new Pen(new SolidColorBrush(marker.MarkerColor)' 1);  						usedPen.Freeze();  						switch (marker.MarkerType) {  							case TextMarkerType.Underlined:  								double offset = 2.5;  								  								int count = Math.Max((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  								  								StreamGeometry geometry = new StreamGeometry();  								  								using (StreamGeometryContext ctx = geometry.Open()) {  									ctx.BeginFigure(startPoint' false' false);  									ctx.PolyLineTo(CreatePoints(startPoint' endPoint' offset' count).ToArray()' true' false);  								}  								  								geometry.Freeze();  								  								drawingContext.DrawGeometry(Brushes.Transparent' usedPen' geometry);  								break;  						}  					}  				}  			}
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments(viewStart' viewEnd - viewStart)) {  				if (marker.BackgroundColor != null) {  					BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder();  					geoBuilder.AlignToWholePixels = true;  					geoBuilder.CornerRadius = 3;  					geoBuilder.AddSegment(textView' marker);  					Geometry geometry = geoBuilder.CreateGeometry();  					if (geometry != null) {  						Color color = marker.BackgroundColor.Value;  						SolidColorBrush brush = new SolidColorBrush(color);  						brush.Freeze();  						drawingContext.DrawGeometry(brush' null' geometry);  					}  				}  				if (marker.MarkerType != TextMarkerType.None) {  					foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment(textView' marker)) {  						Point startPoint = r.BottomLeft;  						Point endPoint = r.BottomRight;  						  						Pen usedPen = new Pen(new SolidColorBrush(marker.MarkerColor)' 1);  						usedPen.Freeze();  						switch (marker.MarkerType) {  							case TextMarkerType.Underlined:  								double offset = 2.5;  								  								int count = Math.Max((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  								  								StreamGeometry geometry = new StreamGeometry();  								  								using (StreamGeometryContext ctx = geometry.Open()) {  									ctx.BeginFigure(startPoint' false' false);  									ctx.PolyLineTo(CreatePoints(startPoint' endPoint' offset' count).ToArray()' true' false);  								}  								  								geometry.Freeze();  								  								drawingContext.DrawGeometry(Brushes.Transparent' usedPen' geometry);  								break;  						}  					}  				}  			}
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments(viewStart' viewEnd - viewStart)) {  				if (marker.BackgroundColor != null) {  					BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder();  					geoBuilder.AlignToWholePixels = true;  					geoBuilder.CornerRadius = 3;  					geoBuilder.AddSegment(textView' marker);  					Geometry geometry = geoBuilder.CreateGeometry();  					if (geometry != null) {  						Color color = marker.BackgroundColor.Value;  						SolidColorBrush brush = new SolidColorBrush(color);  						brush.Freeze();  						drawingContext.DrawGeometry(brush' null' geometry);  					}  				}  				if (marker.MarkerType != TextMarkerType.None) {  					foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment(textView' marker)) {  						Point startPoint = r.BottomLeft;  						Point endPoint = r.BottomRight;  						  						Pen usedPen = new Pen(new SolidColorBrush(marker.MarkerColor)' 1);  						usedPen.Freeze();  						switch (marker.MarkerType) {  							case TextMarkerType.Underlined:  								double offset = 2.5;  								  								int count = Math.Max((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  								  								StreamGeometry geometry = new StreamGeometry();  								  								using (StreamGeometryContext ctx = geometry.Open()) {  									ctx.BeginFigure(startPoint' false' false);  									ctx.PolyLineTo(CreatePoints(startPoint' endPoint' offset' count).ToArray()' true' false);  								}  								  								geometry.Freeze();  								  								drawingContext.DrawGeometry(Brushes.Transparent' usedPen' geometry);  								break;  						}  					}  				}  			}
Magic Number,D_IDE.Core.Controls.Editor,TextMarkerService,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,CreatePoints,The following statement contains a magic number: for (int i = 0; i < count; i++)  				yield return new Point(start.X + i * offset' start.Y - ((i + 1) % 2 == 0 ? offset : 0));
Missing Default,D_IDE.Core,Solution,C:\repos\aBothe_D-IDE\D-IDE.Core\Solution.cs,Load,The following switch statement is missing a default case: switch (x.LocalName)  					{  						case "name":  							Name = x.ReadString();  							break;  						case "project":  							var f = x.ReadString();  							_ProjectFiles.Add(f);  							if (x.HasAttributes && x.GetAttribute("isStartProject") !="false")  								_StartPrjFile = f;  							break;  					}
Missing Default,Aga.Controls.Tree,TreeListItem,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\TreeListItem.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)  				{  					case Key.Right:  						e.Handled = true;  						if (!Node.IsExpanded)  						{  							Node.IsExpanded = true;  							ChangeFocus(Node);  						}  						else if (Node.Children.Count > 0)  							ChangeFocus(Node.Children[0]);  						break;    					case Key.Left:    						e.Handled = true;  						if (Node.IsExpanded && Node.IsExpandable)  						{  							Node.IsExpanded = false;  							ChangeFocus(Node);  						}  						else  							ChangeFocus(Node.Parent);  						break;    					case Key.Subtract:  						e.Handled = true;  						Node.IsExpanded = false;  						ChangeFocus(Node);  						break;    					case Key.Add:  						e.Handled = true;  						Node.IsExpanded = true;  						ChangeFocus(Node);  						break;  				}
Missing Default,Aga.Controls.Tree,TreeNode,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\Aga.Controls\Tree\TreeNode.cs,ChildrenChanged,The following switch statement is missing a default case: switch (e.Action)  			{  				case NotifyCollectionChangedAction.Add:  					if (e.NewItems != null)  					{  						int index = e.NewStartingIndex;  						int rowIndex = Tree.Rows.IndexOf(this);  						foreach (object obj in e.NewItems)  						{  							Tree.InsertNewNode(this' obj' rowIndex' index);  							index++;  						}  					}  					break;    				case NotifyCollectionChangedAction.Remove:  					if (Children.Count > e.OldStartingIndex)  						RemoveChildAt(e.OldStartingIndex);  					break;    				case NotifyCollectionChangedAction.Move:  				case NotifyCollectionChangedAction.Replace:  				case NotifyCollectionChangedAction.Reset:  					while (Children.Count > 0)  						RemoveChildAt(0);  					Tree.CreateChildrenNodes(this);  					break;  			}
Missing Default,D_IDE.Core.Controls,ListSelectionDialog,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\ListSelectionDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.button2 = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\Controls\ListSelectionDialog.xaml"              this.button2.Click += new System.Windows.RoutedEventHandler(this.button2_Click);                            #line default              #line hidden              return;              case 3:              this.SelectionList = ((System.Windows.Controls.ListBox)(target));                            #line 11 "..\..\..\Controls\ListSelectionDialog.xaml"              this.SelectionList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.SelectionList_MouseDoubleClick);                            #line default              #line hidden              return;              }
Missing Default,D_IDE.Core.Controls.Editor,TextMarkerService,C:\repos\aBothe_D-IDE\D-IDE.Core\Controls\TextEditor\TextMarkerService.cs,Draw,The following switch statement is missing a default case: switch (marker.MarkerType) {  							case TextMarkerType.Underlined:  								double offset = 2.5;  								  								int count = Math.Max((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  								  								StreamGeometry geometry = new StreamGeometry();  								  								using (StreamGeometryContext ctx = geometry.Open()) {  									ctx.BeginFigure(startPoint' false' false);  									ctx.PolyLineTo(CreatePoints(startPoint' endPoint' offset' count).ToArray()' true' false);  								}  								  								geometry.Freeze();  								  								drawingContext.DrawGeometry(Brushes.Transparent' usedPen' geometry);  								break;  						}
