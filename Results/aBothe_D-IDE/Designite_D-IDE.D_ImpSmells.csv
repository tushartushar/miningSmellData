Implementation smell,Namespace,Class,File,Method,Description
Long Method,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,_updateTypeLookupDataTh,The method has 106 lines of code.
Long Method,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DDebugSymbolWrapper,The method has 101 lines of code.
Complex Method,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,updateFoldingsInternal,Cyclomatic complexity of the method is 8
Complex Method,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,_updateTypeLookupDataTh,Cyclomatic complexity of the method is 13
Complex Method,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildProject,Cyclomatic complexity of the method is 12
Complex Method,D_IDE.D,DDebugSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,GetChildren,Cyclomatic complexity of the method is 11
Complex Method,D_IDE.D,DMDConfig,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,Save,Cyclomatic complexity of the method is 10
Complex Method,D_IDE.D.DEditor,DBracketSearcher,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DBracketSearcher.cs,SearchBrackets,Cyclomatic complexity of the method is 13
Long Parameter List,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,CompileSource,The method has 5 parameters. Parameters: Module' dmd' DebugCompile' objFile' execDirectory
Long Parameter List,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,LinkFiles,The method has 7 parameters. Parameters: dmd' linkerExe' linkerArgs' startDirectory' targetFile' CreatePDB' files
Long Parameter List,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildModule,The method has 5 parameters. Parameters: Module' OutputDirectory' ExecDir' DebugCompile' Link
Long Parameter List,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildDLinkerArgumentString,The method has 5 parameters. Parameters: input' baseDirectory' targetFile' ImportPaths' Objects
Long Parameter List,D_IDE.ResourceFiles,ResScriptBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\ResourceFiles\ResFileBuildSupport.cs,BuildModule,The method has 5 parameters. Parameters: Module' OutputDirectory' ExecDirectory' DebugCompile' LinkToStandAlone
Long Identifier,D_IDE.D,DSettings,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,,The length of the parameter EnableMatchingBracketHighlighting is 33.
Long Statement,D_IDE.D,DCodeCompletionSupport,C:\repos\aBothe_D-IDE\D-IDE.D\CodeCompletion\DCodeCompletionSupport.cs,BuildCompletionData,The length of the statement  "			D_Parser.Completion.CodeCompletion.GenerateCompletionData(EditorDocument'new IDECompletionDataGenerator(l)' string.IsNullOrEmpty(EnteredText) ? '\0' : EnteredText[0]); " is 167.
Long Statement,D_IDE.D,DCodeCompletionSupport,C:\repos\aBothe_D-IDE\D-IDE.D\CodeCompletion\DCodeCompletionSupport.cs,ConvertWFToWPFBitmap,The length of the statement  "			return System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(bmp.GetHbitmap()' IntPtr.Zero' Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions()); " is 154.
Long Statement,D_IDE.D,IDECompletionDataGenerator,C:\repos\aBothe_D-IDE\D-IDE.D\CodeCompletion\DCodeCompletionSupport.cs,AddModule,The length of the statement  "			CompletionList.Add(new NamespaceCompletionData(nameOverride ?? module.ModuleName' module) { ExplicitModulePath=module.ModuleName }); " is 132.
Long Statement,D_IDE.D,ToolTipContentHelper,C:\repos\aBothe_D-IDE\D-IDE.D\CodeCompletion\DCodeCompletionSupport.cs,CreateToolTipContent,The length of the statement  "			var nodeLabel = new TextBlock() { Text = Head' Foreground=Brushes.Black' FontWeight = FontWeights.DemiBold' Padding = new Thickness(0) }; " is 137.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Init,The length of the statement  "			var lookupItemTemplate = lookup_Members.ItemTemplate = lookup_Types.ItemTemplate = new DataTemplate { DataType = typeof(DCompletionData) }; " is 139.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Init,The length of the statement  "			var cmi = new MenuItem() { Header = "Add import directive"' ToolTip = "Add an import directive to the document if type cannot be resolved currently" }; " is 151.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Init,The length of the statement  "			cmi = new MenuItem() { Header = "Go to definition"' ToolTip = "Go to the definition that defined the currently hovered item" }; " is 127.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,lookup_Types_SelectionChanged,The length of the statement  "			Editor.TextArea.Caret.Position = new TextViewPosition(completionData.Node.Location.Line' completionData.Node.Location.Column); " is 126.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ContextMenu_GotoDefinition_Click,The length of the statement  "						l.Add("(" + (++j).ToString() + ") " + i.ToString()); // Bug: To make items unique (which is needed for the listbox to run properly)' it's needed to add some kind of an identifier to the beginning of the string " is 209.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ContextMenu_AddImportStatement_Click,The length of the statement  "					//ImportGen_CustomImplementation.CreateImportDirectiveForHighlightedSymbol(this' new ImportGen_CustomImplementation(this)); " is 123.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ShowCodeCompletionWindow,The length of the statement  "				if (showCompletionWindowOperation != null &&showCompletionWindowOperation.Status != DispatcherOperationStatus.Completed) " is 120.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ShowCodeCompletionWindow,The length of the statement  "					// Prevent hiding all items that are not named as 'selectedString' .. after having selected our item' reset the filter property " is 127.
Long Statement,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ShowInsightWindow,The length of the statement  "					var visPos = Editor.TextArea.TextView.GetVisualPosition(new TextViewPosition(loc.Line' loc.Column)' ICSharpCode.AvalonEdit.Rendering.VisualYPosition.LineBottom); " is 161.
Long Statement,D_IDE.D,DIndentationStrategy,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DIndentationStrategy.cs,IndentLine,The length of the statement  "			var newIndent = D_Parser.Formatting.Indent.IndentEngineWrapper.CalculateIndent(tr' line.LineNumber' dEditor.Editor.Options.ConvertTabsToSpaces' dEditor.Editor.Options.IndentationSize); " is 184.
Long Statement,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,button_Defaults_Click,The length of the statement  "			if (MessageBox.Show("All custom settings will be lost. Continue?"' "Reset build arguments"' MessageBoxButton.YesNo' MessageBoxImage.Warning' MessageBoxResult.Yes) == MessageBoxResult.Yes) " is 187.
Long Statement,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/D-IDE.D;component/settingspages/buildargumentform.xaml"' System.UriKind.Relative); " is 128.
Long Statement,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildProject,The length of the statement  "			dprj.LastBuildResult = LinkFiles(CurrentDMDConfig'linkerExe' linkerArgs' dprj.BaseDirectory' dprj.OutputFile' !dprj.IsRelease' objs.ToArray()); " is 143.
Long Statement,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,CompileSource,The length of the statement  "			ErrorLogger.Log("Compile " + (Module.Project!=null?Module.Project.ToRelativeFileName( Module.FileName):Module.FileName)'ErrorType.Information'ErrorOrigin.Build); " is 161.
Long Statement,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,CompileSource,The length of the statement  "					BuildDSourceCompileArgumentString(dmd.BuildArguments(DebugCompile).SoureCompiler' Module.AbsoluteFileName' obj'dmd.ImportDirectories)' // Compile our program always in debug mode " is 178.
Long Statement,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,LinkFiles,The length of the statement  "					linkerExe'	BuildDLinkerArgumentString(linkerArgs' startDirectory'targetFile'dmd.ImportDirectories'files)' startDirectory' " is 121.
Long Statement,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildModule,The length of the statement  "			var outputDir = Path.IsPathRooted(OutputDirectory) ? OutputDirectory : Path.Combine(Path.GetDirectoryName(src)' OutputDirectory); " is 129.
Long Statement,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildModule,The length of the statement  "				var br_ = LinkFiles(dmd'dmd.ExeLinker' dmd.BuildArguments(DebugCompile).ExeLinker' Path.GetDirectoryName(obj)' exe' DebugCompile' obj); " is 135.
Long Statement,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,CreatePDBFromExe,The length of the statement  "				br.BuildErrors.Add(new GenericError(){Message="Debug information database creation failed - "+Executable+" does not exist"}); " is 125.
Long Statement,D_IDE.D,DLanguageBinding,C:\repos\aBothe_D-IDE\D-IDE.D\DLanguageBinding.cs,LoadSettings,The length of the statement  "			// Provide first-time-start support by finding existing D installations and insert them + their libraries into the configuration " is 128.
Long Statement,D_IDE.D,DPrjSettingsPage,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\DPrjSettingsPage.xaml.cs,button_ReparseProjSources_Click,The length of the statement  "			GlobalParseCache.BeginAddOrUpdatePaths(new[] { ManagedProject.BaseDirectory }' false' (ParsingFinishedEventArgs ea) => button_ReparsePrjDirectory.IsEnabled = true); " is 164.
Long Statement,D_IDE.ResourceFiles,ResScriptBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\ResourceFiles\ResFileBuildSupport.cs,BuildModule,The length of the statement  "			var outputDir = Path.IsPathRooted(OutputDirectory) ? OutputDirectory : Path.Combine(Path.GetDirectoryName(src)' OutputDirectory); " is 129.
Long Statement,D_IDE.ResourceFiles,ResScriptBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\ResourceFiles\ResFileBuildSupport.cs,BuildModule,The length of the statement  "				Module.LastBuildResult = new BuildResult() { SourceFile = src' TargetFile = res' Successful = true' NoBuildNeeded = true }; " is 123.
Long Statement,D_IDE.ResourceFiles,ResScriptBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\ResourceFiles\ResFileBuildSupport.cs,BuildModule,The length of the statement  "			ErrorLogger.Log("Compile " + (Module.Project != null ? Module.Project.ToRelativeFileName(Module.FileName) : Module.FileName)' ErrorType.Information' ErrorOrigin.Build); " is 168.
Complex Conditional,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,_updateTypeLookupDataTh,The conditional expression  "watchedParent != null && !(watchedParent is DClassLike || watchedParent is DEnum || watchedParent is DModule)"  is complex.
Complex Conditional,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,_updateTypeLookupDataTh,The conditional expression  "selectedItem == null && cData.Node != null && caret >= cData.Node.Location && caret < cData.Node.EndLocation"  is complex.
Complex Conditional,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ShowCodeCompletionWindow,The conditional expression  "(EnteredText != null && EnteredText.Length > 0 && !(  					EnteredText == "@" ||  					EnteredText == "(" ||  					EnteredText == " " ||  					EnteredText == "_" ||  					char.IsLetter(EnteredText[0]) ||  					EnteredText[0] == '.')) ||  					!DCodeCompletionSupport.CanShowCompletionWindow(this) ||  					Editor.IsReadOnly"  is complex.
Complex Conditional,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ShowInsightWindow,The conditional expression  "!DSettings.Instance.UseMethodInsight ||  				(EnteredText == "'" && insightWindow != null && insightWindow.IsVisible)"  is complex.
Complex Conditional,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildProject,The conditional expression  "lang == null || _u || !lang.CanBuild || !lang.BuildSupport.CanBuildFile(f.FileName)"  is complex.
Complex Conditional,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,LinkFiles,The conditional expression  "br.Successful && CreatePDB && (targetFile.EndsWith(".exe") || targetFile.EndsWith(".dll"))"  is complex.
Complex Conditional,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildModule,The conditional expression  "GlobalProperties.Instance.EnableIncrementalBuild &&  !Link && !Module.Modified && File.Exists(obj)"  is complex.
Empty Catch Block,D_IDE.D,DCodeCompletionSupport,C:\repos\aBothe_D-IDE\D-IDE.D\CodeCompletion\DCodeCompletionSupport.cs,BuildToolTip,The method has an empty catch block.
Empty Catch Block,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ContextMenu_GotoDefinition_Click,The method has an empty catch block.
Empty Catch Block,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ContextMenu_AddImportStatement_Click,The method has an empty catch block.
Empty Catch Block,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,_updateTypeLookupDataTh,The method has an empty catch block.
Empty Catch Block,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,_updateTypeLookupDataTh,The method has an empty catch block.
Empty Catch Block,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Editor_MouseHover,The method has an empty catch block.
Empty Catch Block,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DDebugSymbolWrapper,The method has an empty catch block.
Empty Catch Block,D_IDE.D,DProject,C:\repos\aBothe_D-IDE\D-IDE.D\DProject.cs,LoadLanguageSpecificSettings,The method has an empty catch block.
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Init,The following statement contains a magic number: var stk = new Grid()  			{  				HorizontalAlignment = HorizontalAlignment.Stretch'  				Height = 24'  				VerticalAlignment = VerticalAlignment.Top  			};
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Init,The following statement contains a magic number: stk.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(0.5' GridUnitType.Star) });
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Init,The following statement contains a magic number: stk.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(0.5' GridUnitType.Star) });
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Init,The following statement contains a magic number: iTemplate_Img.SetValue(Image.MarginProperty' new Thickness(1' 1' 4' 1));
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,CommentBlock,The following statement contains a magic number: if (false)  			{  				/*  				int cOff = Editor.CaretOffset;  				Editor.Text = Commenting.comment(Editor.Text' Editor.SelectionStart' Editor.SelectionStart + Editor.SelectionLength);  				Editor.CaretOffset = cOff;  				var loc = Editor.Document.GetLocation(cOff);  				Editor.ScrollTo(loc.Line' loc.Column);*/  			}  			else  			{  				if (Editor.SelectionLength < 1)  				{  					Editor.Document.Insert(Editor.Document.GetOffset(Editor.TextArea.Caret.Line' 0)' "//");  				}  				else  				{  					Editor.Document.UndoStack.StartUndoGroup();    					Editor.Document.Insert(Editor.SelectionStart + Editor.SelectionLength' "+/");  					Editor.Document.Insert(Editor.SelectionStart' "/+");    					Editor.SelectionLength -= 2;    					Editor.Document.UndoStack.EndUndoGroup();  				}  			}
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,Parse,The following statement contains a magic number: postParseOperation = Dispatcher.BeginInvoke(new Action(() =>  			{  				try  				{  					if (GlobalProperties.Instance.ShowSpeedInfo)  						CoreManager.Instance.MainWindow.SecondLeftStatusText =  							Math.Round((decimal)ParseTime' 3).ToString() + "ms (Parsing duration)";    					UpdateFoldings();  					CoreManager.ErrorManagement.RefreshErrorList();  					RefreshErrorHighlightings();  				}  				catch (Exception ex) { ErrorLogger.Log(ex' ErrorType.Warning' ErrorOrigin.System); }  			})' DispatcherPriority.ApplicationIdle);
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ParserLoop,The following statement contains a magic number: while (true)  			{  				var cc = CompilerConfiguration;    				// While no keys were typed' do nothing  				while (!parseSignal.WaitOne(100))  				{  					if (HasBeenUpdatingParseCache && cc.InitialParsingDone)  					{  						UpdateSemanticHighlightings(true); // Perhaps new errors were detected  						HasBeenUpdatingParseCache = false;  					}  					else if (!cc.InitialParsingDone)  						HasBeenUpdatingParseCache = true;  				}    				// If a key is typed in the next 500ms' go wait again for no further keys to be typed.  				while (parseSignal.WaitOne(250));    				Parse();  			}
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,ParserLoop,The following statement contains a magic number: while (true)  			{  				var cc = CompilerConfiguration;    				// While no keys were typed' do nothing  				while (!parseSignal.WaitOne(100))  				{  					if (HasBeenUpdatingParseCache && cc.InitialParsingDone)  					{  						UpdateSemanticHighlightings(true); // Perhaps new errors were detected  						HasBeenUpdatingParseCache = false;  					}  					else if (!cc.InitialParsingDone)  						HasBeenUpdatingParseCache = true;  				}    				// If a key is typed in the next 500ms' go wait again for no further keys to be typed.  				while (parseSignal.WaitOne(250));    				Parse();  			}
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,UpdateSemanticHighlighting,The following statement contains a magic number: try  			{  				Dispatcher.Invoke(new Action<Dictionary<int' List<ISyntaxRegion>>' Stopwatch>  					((Dictionary<int' List<ISyntaxRegion>> results' Stopwatch highPrecTimer) =>  			{  				// Clear old markers  				foreach (var marker in MarkerStrategy.TextMarkers.ToArray())  					if (marker is CodeSymbolMarker)  						marker.Delete();    				int len' off;  				/*TODO  				foreach (var kv in res)  				{  					foreach (var sr in kv.Value)  					{  						if (sr is INode)  						{  							var n = sr as INode;  							off = this.Editor.Document.GetOffset(n.NameLocation.Line' n.NameLocation.Column);  							len = n.Name.Length;  						}  						else  						{  							var sr_ = sr;  							CodeSymbolMarker.GetIdentifier(ref sr_);  							off = this.Editor.Document.GetOffset(sr_.Location.Line' sr_.Location.Column);  							len = sr_.EndLocation.Column - sr_.Location.Column;  						}      						var m = new CodeSymbolMarker(this' sr' off' len);  						MarkerStrategy.Add(m);    						m.Redraw();  					}  				}*/    				SemanticErrors.Clear();  				/*  				if (results.UnresolvedIdentifiers.Count != 0 && DSettings.Instance.UseSemanticErrorHighlighting)  					foreach (var id in results.UnresolvedIdentifiers)  						if (id.Location.Line > 0)  						{  							SemanticErrors.Add(new DSemanticError  							{  								FileName=AbsoluteFilePath'  								IsSemantic = true'  								Message = id.ToString() + " couldn't get resolved"'  								Location = DeepASTVisitor.ExtractIdLocation(id' out len)'  								MarkerColor=Colors.Blue'  								Length = len  							});  						}  				*/  				if (RefreshErrorList)  					CoreManager.ErrorManagement.RefreshErrorList();    				if (GlobalProperties.Instance.ShowSpeedInfo)  					CoreManager.Instance.MainWindow.LeftStatusText =  						Math.Round((decimal)highPrecTimer.ElapsedMilliseconds' 2).ToString() +  						"ms (Semantic Highlighting)";  			})' DispatcherPriority.Background' res' sw);  			}  			catch (Exception ex)  			{  				ErrorLogger.Log(ex' ErrorType.Warning' ErrorOrigin.System);  			}
Magic Number,D_IDE.D,DEditorDocument,C:\repos\aBothe_D-IDE\D-IDE.D\DEditor\DEditorDocument.cs,_updateTypeLookupDataTh,The following statement contains a magic number: while (true)  			{  				typeLookupUpdateSignal.WaitOne();  				while (typeLookupUpdateSignal.WaitOne(100));    				var ed = (IEditorData)p;  				// SyntaxTree' curBlock' CaretLocation  				var ast = ed.SyntaxTree;  				var caret = ed.CaretLocation;  				var curBlock = lastSelectedBlock;  				try  				{  					#region Update the type & member selectors  					isUpdatingLookupDropdowns = true; // Temporarily disable SelectionChanged event handling    					// First fill the Types-Dropdown  					var types = new List<DCompletionData>();  					ICompletionData selectedItem = null;  					var l1 = new List<INode> { ast };  					var l2 = new List<INode>();    					while (l1.Count > 0)  					{  						foreach (var n in l1)  						{  							// Show all type declarations of the current module  							if (n is DClassLike || n is DEnum)  							{  								var completionData = new DCompletionData(n);  								if (caret >= n.Location && caret <= n.EndLocation)  								{  									selectedItem = completionData;  									curBlock = n as IBlockNode;  								}  								types.Add(completionData);  							}    							if (n is IBlockNode)  							{  								var ch = ((IBlockNode)n).Children;  								if (ch.Count != 0)  									l2.AddRange(ch);  							}  						}    						l1.Clear();  						l1.AddRange(l2);  						l2.Clear();  					}    					if (selectedItem == null && ast != null)  						curBlock = ast;    					// For better usability' pre-sort items  					try  					{  						types.Sort();  					}  					catch { }    					Dispatcher.Invoke(new Action(() =>  					{  						lookup_Types.ItemsSource = types;  						lookup_Types.SelectedItem = selectedItem;  					}));    					if (curBlock is IBlockNode)  					{  						selectedItem = null;  						// Fill the Members-Dropdown  						var members = new List<DCompletionData>();    						// Search a parent class to show all this one's members and to select that member where the caret currently is located  						var watchedParent = curBlock as IBlockNode;    						while (watchedParent != null && !(watchedParent is DClassLike || watchedParent is DEnum || watchedParent is DModule))  							watchedParent = watchedParent.Parent as IBlockNode;    						if (watchedParent != null)  							lock (watchedParent)  								foreach (var n in watchedParent)  								{  									if (n == null)  										continue;    									var cData = new DCompletionData(n);  									if (selectedItem == null && cData.Node != null && caret >= cData.Node.Location && caret < cData.Node.EndLocation)  										selectedItem = cData;  									members.Add(cData);  								}    						try  						{  							members.Sort();  						}  						catch { }    						Dispatcher.Invoke(new Action(() =>  						{  							lookup_Members.ItemsSource = members;  							lookup_Members.SelectedItem = selectedItem;  						}));  					}  					else  					{  						Dispatcher.Invoke(new Action(() =>  						{  							lookup_Members.ItemsSource = null;  							lookup_Members.SelectedItem = null;  						}));  					}  					#endregion  				}  				catch (Exception ex)   				{   					ErrorLogger.Log(ex' ErrorType.Error' ErrorOrigin.Parser);   				}  				isUpdatingLookupDropdowns = false;   			}
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Magic Number,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,CreatePDBFromExe,The following statement contains a magic number: try  			{  				var prc = FileExecution.ExecuteSilentlyAsync(cv2pdb' "\"" + Executable + "\""' Path.GetDirectoryName(Executable)'  				OnOutput' delegate(string s){  					br.BuildErrors.Add(new GenericError(){Message=s});	  				}' delegate()  				{  					if (File.Exists(pdb))  					{  						if(GlobalProperties.Instance.VerboseBuildOutput)  							ErrorLogger.Log("Debug information database created successfully"'ErrorType.Information'ErrorOrigin.Build);  						br.Successful = true;  					}  					else  						br.BuildErrors.Add(new GenericError()  						{  							Message = "Debug information database creation failed"'  							Type = GenericError.ErrorType.Warning  						});  				});    				if (prc != null && !prc.HasExited)  					prc.WaitForExit(10000); // A time out of 10 seconds should be enough  			}  			catch (Exception ex) { ErrorLogger.Log(ex); }
Magic Number,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,ParseErrorMessage,The following statement contains a magic number: if (to>0)  			{  				to += 2;  				string FileName = s.Substring(0' to).TrimStart();  				to += 1;  				int to2 = s.IndexOf("):"' to);  				if (to2 > 0)  				{  					int lineNumber = Convert.ToInt32(s.Substring(to' to2 - to));  					string errmsg = s.Substring(to2 + 2).Trim();    					return new BuildError(errmsg' FileName' 0' lineNumber);  				}  			}
Magic Number,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,ParseErrorMessage,The following statement contains a magic number: if (to>0)  			{  				to += 2;  				string FileName = s.Substring(0' to).TrimStart();  				to += 1;  				int to2 = s.IndexOf("):"' to);  				if (to2 > 0)  				{  					int lineNumber = Convert.ToInt32(s.Substring(to' to2 - to));  					string errmsg = s.Substring(to2 + 2).Trim();    					return new BuildError(errmsg' FileName' 0' lineNumber);  				}  			}
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: size = 4;
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DDebugSymbolWrapper,C:\repos\aBothe_D-IDE\D-IDE.D\DDebugSupport.cs,DetermineArrayType,The following statement contains a magic number: switch (Token)              {                  default:                      break;                  case DTokens.Char:                      IsString = true;                      t = typeof(byte);                      size = 1;                      break;                  case DTokens.Wchar:                      IsString = true;                      t = typeof(ushort);                      size = 2;                      break;                  case DTokens.Dchar:                      IsString = true;                      t = typeof(uint);                      size = 4;                      break;                    case DTokens.Ubyte:                      t = typeof(byte); size = 1;                      break;                  case DTokens.Ushort:                      t = typeof(ushort); size = 2;                      break;                  case DTokens.Uint:                      t = typeof(uint); size = 4;                      break;                  case DTokens.Int:                      t = typeof(int); size = 4;                      break;                  case DTokens.Short:                      t = typeof(short); size = 2;                      break;                  case DTokens.Byte:                      t = typeof(sbyte); size = 1;                      break;                  case DTokens.Float:                      t = typeof(float); size = 4;                      break;                  case DTokens.Double:                      t = typeof(double); size = 8;                      break;                  case DTokens.Ulong:                      t = typeof(ulong); size = 8;                      break;                  case DTokens.Long:                      t = typeof(long); size = 8;                      break;              }
Magic Number,D_IDE.D,DLanguageBinding,C:\repos\aBothe_D-IDE\D-IDE.D\DLanguageBinding.cs,CreateEmptyProject,The following statement contains a magic number: switch (_ProjectTypes.IndexOf(FileType))  			{  				case 0: // Console app  					prj.OutputType = OutputTypes.Executable;    					var mainFile = prj.BaseDirectory+ "\\main.d";    					File.WriteAllText(mainFile'	DResources.helloWorldConsoleApp);    					prj.Add(mainFile);  					prj.Save();    					break;  				case 1: // Win32 app  					prj.OutputType = OutputTypes.CommandWindowLessExecutable;    					// Create main file  					var mainFile2 = prj.BaseDirectory + "\\main.d";    					File.WriteAllText(mainFile2' DResources.winsamp_d);  					prj.Add(mainFile2);    					// Add library references  					prj.LinkedLibraries.AddRange(new[]{"kernel32.lib"'"gdi32.lib"});    					// Create Resources-directory  					var resDir = prj.BaseDirectory + "\\Resources";  					Util.CreateDirectoryRecursively(resDir);  					prj.SubDirectories.Add(resDir);    					// Create manifest & resource file  					var manifest=resDir+"\\Win32.manifest";  					  					File.WriteAllText(manifest'DResources.Win32Manifest);  					var manifestModule=prj.Add(manifest);    					// Prevent compilation of the manifest file  					manifestModule.Action = SourceModule.BuildAction.None;    					var rc = resDir + "\\Resources.rc";    					File.WriteAllText(rc' DResources.defResource);  					prj.Add(rc);    					// Finally save changes to the project  					prj.Save();    					break;  				case 2: // DLL  					prj.OutputType = OutputTypes.DynamicLibary;    					// We have explicitly reference to phobos library when linking to a .dll  					prj.LinkedLibraries.Add("phobos.lib");    					break;  				case 3:// Lib  					prj.OutputType = OutputTypes.StaticLibrary;    					var libmainFile = prj.BaseDirectory + Path.DirectorySeparatorChar + prj.Name.Replace(' '''_')+".d";    					File.WriteAllText(libmainFile' DResources.libExample);    					prj.Add(libmainFile);  					prj.Save();  					break;  				default:  					return null;  			}
Magic Number,D_IDE.D,DLanguageBinding,C:\repos\aBothe_D-IDE\D-IDE.D\DLanguageBinding.cs,CreateEmptyProject,The following statement contains a magic number: switch (_ProjectTypes.IndexOf(FileType))  			{  				case 0: // Console app  					prj.OutputType = OutputTypes.Executable;    					var mainFile = prj.BaseDirectory+ "\\main.d";    					File.WriteAllText(mainFile'	DResources.helloWorldConsoleApp);    					prj.Add(mainFile);  					prj.Save();    					break;  				case 1: // Win32 app  					prj.OutputType = OutputTypes.CommandWindowLessExecutable;    					// Create main file  					var mainFile2 = prj.BaseDirectory + "\\main.d";    					File.WriteAllText(mainFile2' DResources.winsamp_d);  					prj.Add(mainFile2);    					// Add library references  					prj.LinkedLibraries.AddRange(new[]{"kernel32.lib"'"gdi32.lib"});    					// Create Resources-directory  					var resDir = prj.BaseDirectory + "\\Resources";  					Util.CreateDirectoryRecursively(resDir);  					prj.SubDirectories.Add(resDir);    					// Create manifest & resource file  					var manifest=resDir+"\\Win32.manifest";  					  					File.WriteAllText(manifest'DResources.Win32Manifest);  					var manifestModule=prj.Add(manifest);    					// Prevent compilation of the manifest file  					manifestModule.Action = SourceModule.BuildAction.None;    					var rc = resDir + "\\Resources.rc";    					File.WriteAllText(rc' DResources.defResource);  					prj.Add(rc);    					// Finally save changes to the project  					prj.Save();    					break;  				case 2: // DLL  					prj.OutputType = OutputTypes.DynamicLibary;    					// We have explicitly reference to phobos library when linking to a .dll  					prj.LinkedLibraries.Add("phobos.lib");    					break;  				case 3:// Lib  					prj.OutputType = OutputTypes.StaticLibrary;    					var libmainFile = prj.BaseDirectory + Path.DirectorySeparatorChar + prj.Name.Replace(' '''_')+".d";    					File.WriteAllText(libmainFile' DResources.libExample);    					prj.Add(libmainFile);  					prj.Save();  					break;  				default:  					return null;  			}
Magic Number,D_IDE.D,DMDConfig,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,parsedSources,The following statement contains a magic number: if (pfd != null)  				ErrorLogger.Log("Parsed " + pfd.FileAmount + " files in [" +  						string.Join("'"'tempImports) + "] in " +  						Math.Round(pfd.ParseDuration/1000.0' 2).ToString() + "s (~" +  						Math.Round(pfd.FileParseDuration' 3).ToString() + "ms per file)"'  						ErrorType.Information' ErrorOrigin.Parser);
Magic Number,D_IDE.D,DMDConfig,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,parsedSources,The following statement contains a magic number: if (pfd != null)  				ErrorLogger.Log("Parsed " + pfd.FileAmount + " files in [" +  						string.Join("'"'tempImports) + "] in " +  						Math.Round(pfd.ParseDuration/1000.0' 2).ToString() + "s (~" +  						Math.Round(pfd.FileParseDuration' 3).ToString() + "ms per file)"'  						ErrorType.Information' ErrorOrigin.Parser);
Magic Number,D_IDE.D,DMDConfig,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,parsedSources,The following statement contains a magic number: if (pfd != null)  				ErrorLogger.Log("Parsed " + pfd.FileAmount + " files in [" +  						string.Join("'"'tempImports) + "] in " +  						Math.Round(pfd.ParseDuration/1000.0' 2).ToString() + "s (~" +  						Math.Round(pfd.FileParseDuration' 3).ToString() + "ms per file)"'  						ErrorType.Information' ErrorOrigin.Parser);
Magic Number,D_IDE.ResourceFiles,ResScriptBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\ResourceFiles\ResFileBuildSupport.cs,ParseErrorMessage,The following statement contains a magic number: if (to >= 0)  			{  				to += 3;  				string FileName = s.Substring(0' to);  				to += 1;  				int to2 = s.IndexOf(") :"' to);  				if (to2 > 0)  				{  					int lineNumber = Convert.ToInt32(s.Substring(to' to2 - to));  					string errmsg = s.Substring(to2 + 2).Trim();    					return new BuildError(errmsg' FileName' 0' lineNumber);  				}  			}
Magic Number,D_IDE.ResourceFiles,ResScriptBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\ResourceFiles\ResFileBuildSupport.cs,ParseErrorMessage,The following statement contains a magic number: if (to >= 0)  			{  				to += 3;  				string FileName = s.Substring(0' to);  				to += 1;  				int to2 = s.IndexOf(") :"' to);  				if (to2 > 0)  				{  					int lineNumber = Convert.ToInt32(s.Substring(to' to2 - to));  					string errmsg = s.Substring(to2 + 2).Trim();    					return new BuildError(errmsg' FileName' 0' lineNumber);  				}  			}
Missing Default,D_IDE.D,BuildArgumentForm,C:\repos\aBothe_D-IDE\D-IDE.D\SettingsPages\BuildArgumentForm.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Text_SrcCompiler = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Label_SrcCmp = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.Text_Win32Linker = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.Text_ConsoleExe = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.Text_DllLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.Text_StaticLibLinker = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 11:              this.button1 = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.Button_OK = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.Button_OK.Click += new System.Windows.RoutedEventHandler(this.Button_OK_Click);                            #line default              #line hidden              return;              case 13:              this.button_Defaults = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\SettingsPages\BuildArgumentForm.xaml"              this.button_Defaults.Click += new System.Windows.RoutedEventHandler(this.button_Defaults_Click);                            #line default              #line hidden              return;              }
Missing Default,D_IDE.D,DBuildSupport,C:\repos\aBothe_D-IDE\D-IDE.D\DBuildSupport.cs,BuildProject,The following switch statement is missing a default case: switch (dprj.OutputType)  			{  				case OutputTypes.CommandWindowLessExecutable:  					linkerExe = CurrentDMDConfig.Win32ExeLinker;  					linkerArgs = args.Win32ExeLinker;  					break;  				case OutputTypes.DynamicLibary:  					linkerExe = CurrentDMDConfig.DllLinker;  					linkerArgs = args.DllLinker;  					break;  				case OutputTypes.StaticLibrary:  					linkerExe = CurrentDMDConfig.LibLinker;  					linkerArgs = args.LibLinker;  					break;  			}
Missing Default,D_IDE.D,DSettings,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,Load,The following switch statement is missing a default case: switch (x.LocalName)  				{  					case "BracketHightlighting":  						if (x.MoveToAttribute("value"))  							EnableMatchingBracketHighlighting = x.ReadContentAsBoolean();  						break;    					case "UseMethodInsight":  						if (x.MoveToAttribute("value"))  							UseMethodInsight = x.ReadContentAsBoolean();  						break;    					case "UseCodeCompletion":  						if (x.MoveToAttribute("value"))  							UseCodeCompletion = x.ReadContentAsBoolean();  						break;    					case "ForceCodeCompetionPopupCommit":  						if (x.MoveToAttribute("value"))  							ForceCodeCompetionPopupCommit = x.ReadContentAsBoolean();  						break;    					case "UseSemanticErrorHighlighting":  						if (x.MoveToAttribute("value"))  							UseSemanticErrorHighlighting = x.ReadContentAsBoolean();  						break;    					case "UseSemanticHighlighting":  						if (x.MoveToAttribute("value"))  							UseSemanticHighlighting = x.ReadContentAsBoolean();  						break;    					case "SmartIndentation":  						if (x.MoveToAttribute("value"))  							EnableSmartIndentation = x.ReadContentAsBoolean();  						break;    					case "CompletionOptions":  						CompletionOptions.Instance.Load(x.ReadSubtree());  						break;    					case "cv2pdb":  						cv2pdb_exe = x.ReadString();  						break;    					case "dmd":  						var config = new DMDConfig();  						config.Load(x);    						if (config.Version == DVersion.D1)  							dmd1 = config;  						else  							dmd2 = config;  						break;  				}
Missing Default,D_IDE.D,DMDConfig,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,Load,The following switch statement is missing a default case: switch (x2.LocalName)  				{  					case "basedirectory":  						baseDir = x2.ReadString();  						break;  					case "sourcecompiler":  						SoureCompiler = x2.ReadString();  						break;  					case "exelinker":  						ExeLinker = x2.ReadString();  						break;  					case "win32linker":  						Win32ExeLinker = x2.ReadString();  						break;  					case "dlllinker":  						DllLinker = x2.ReadString();  						break;  					case "liblinker":  						LibLinker = x2.ReadString();  						break;    					case "buildarguments":  						var args = new DBuildArguments();  						args.Load(x2);  						if (args.IsDebug)  							DebugArgs = args;  						else   							ReleaseArgs = args;  						break;    					case "parsedDirectories":  						if (x2.IsEmptyElement)  							break;    						var st = x2.ReadSubtree();  						if(st!=null)  							while (st.Read())  							{  								if (st.LocalName == "dir")  								{  									var dir = st.ReadString();  									if(!string.IsNullOrWhiteSpace(dir) && !ImportDirectories.Contains(dir))  										ImportDirectories.Add(dir);  								}  							}  						break;    					case "DefaultLibs":  						var xr2 = x2.ReadSubtree();  						while (xr2.Read())  						{  							if (xr2.LocalName == "lib")  							{  								var libF = xr2.ReadString();  								if(!DefaultLinkedLibraries.Contains(libF))  									DefaultLinkedLibraries.Add(libF);  							}  						}  						break;  				}
Missing Default,D_IDE.D,DBuildArguments,C:\repos\aBothe_D-IDE\D-IDE.D\DSettings.cs,Load,The following switch statement is missing a default case: switch (x2.LocalName)  					{  						case "sourcecompiler":  							SoureCompiler = x2.ReadString();  							break;  						case "win32linker":  							Win32ExeLinker = x2.ReadString();  							break;  						case "exelinker":  							ExeLinker = x2.ReadString();  							break;  						case "dlllinker":  							DllLinker = x2.ReadString();  							break;  						case "liblinker":  							LibLinker = x2.ReadString();  							break;  					}
Missing Default,D_IDE.ResourceFiles,ResConfig,C:\repos\aBothe_D-IDE\D-IDE.D\ResourceFiles\ResConfig.cs,Load,The following switch statement is missing a default case: switch (x.LocalName)  				{  						/*  					case "BracketHightlighting":  						if (x.MoveToAttribute("value"))  							EnableMatchingBracketHighlighting = x.ReadContentAsBoolean();  						break;*/    					case "CompilerArguments":  						ResourceCompilerArguments = x.ReadString();  						break;    					case "CompilerPath":  						ResourceCompilerPath = x.ReadString();  						break;  				}
