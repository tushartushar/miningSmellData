Implementation smell,Namespace,Class,File,Method,Description
Long Method,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The method has 77 lines of code.
Long Method,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The method has 79 lines of code.
Long Method,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The method has 74 lines of code.
Complex Method,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,Cyclomatic complexity of the method is 17
Complex Method,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,PreloadFromHtmlList,Cyclomatic complexity of the method is 10
Complex Method,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,Cyclomatic complexity of the method is 24
Complex Method,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,AddPath,Cyclomatic complexity of the method is 7
Complex Method,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,Cyclomatic complexity of the method is 23
Long Statement,DIDE.Installer,CompilerInstallInfo,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\CompilerInstallInfo.cs,GetVersion,The length of the statement  "		DirectoryInfo dir = executableFile.Directory.Parent.Parent' druntime = new DirectoryInfo (dir.FullName + @"\src\druntime\import"); " is 130.
Long Statement,DIDE.Installer,CompilerInstallInfo,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\CompilerInstallInfo.cs,ToString,The length of the statement  "	sb.Append (this.ExecutableFile.ToString ()).Append ("\t").Append (this.CompilerString).Append ("\t").Append (this.VersionString); " is 129.
Long Statement,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The length of the statement  "						if (searchResult [j].InnerText != null && searchResult [j].InnerText.Equals (val' StringComparison.CurrentCultureIgnoreCase)) { " is 127.
Long Statement,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The length of the statement  "							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip" is 166.
Long Statement,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,FixDmdInstallPath,The length of the statement  "		if (d.Name.Equals ("dmd"' StringComparison.CurrentCultureIgnoreCase) || d.Name.Equals ("dmd1"' StringComparison.CurrentCultureIgnoreCase) || d.Name.Equals ("dmd2"' StringComparison.CurrentCultureIgnoreCase)) " is 207.
Long Statement,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,GetLocalDMD1Path,The length of the statement  "	return (LocalCompiler.DMD1Info != null) ? LocalCompiler.DMD1Info.ExecutableFile.Directory.Parent.Parent.FullName : @"C:\d\dmd1"; " is 128.
Long Statement,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,GetLocalDMD2Path,The length of the statement  "	return (LocalCompiler.DMD2Info != null && LocalCompiler.DMD2Info.ExecutableFile.Exists) ? LocalCompiler.DMD2Info.ExecutableFile.Directory.Parent.Parent.FullName : @"C:\d\dmd2"; " is 176.
Long Statement,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The length of the statement  "			string reg1 = ReadRegKey (BASE_REG_KEY' DMD1_PATH_REG_KEY)' reg2 = ReadRegKey (BASE_REG_KEY' DMD2_PATH_REG_KEY)' reg3 = ReadRegKey (D_BASE_REG_KEY' D_INSTALL_PATH_REG_KEY); " is 172.
Long Statement,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The length of the statement  "			//File.WriteAllText(@"C:\Users\Justin\Desktop\LocalInit_" + DateTime.Now.Ticks + ".txt"' DateTime.Now.ToLongDateString()); " is 122.
Empty Catch Block,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,Preload,The method has an empty catch block.
Empty Catch Block,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,Preload,The method has an empty catch block.
Empty Catch Block,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,IsConfigurationValid,The method has an empty catch block.
Magic Number,DIDE.Installer,CompilerInstallInfo,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\CompilerInstallInfo.cs,FromString,The following statement contains a magic number: if (items.Length == 3) {  	ExecutableFile = new FileInfo (items [0]);  	CompilerString = items [1];  	VersionInfo = new Version (items [2]);  	VersionString = items [2];  	return true;  }  
Magic Number,DIDE.Installer,CompilerInstallInfo,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\CompilerInstallInfo.cs,FromString,The following statement contains a magic number: if (items.Length == 3) {  	ExecutableFile = new FileInfo (items [0]);  	CompilerString = items [1];  	VersionInfo = new Version (items [2]);  	VersionString = items [2];  	return true;  }  
Magic Number,DIDE.Installer,CompilerInstallInfo,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\CompilerInstallInfo.cs,FromString,The following statement contains a magic number: if (items.Length == 3) {  	ExecutableFile = new FileInfo (items [0]);  	CompilerString = items [1];  	VersionInfo = new Version (items [2]);  	VersionString = items [2];  	return true;  }  
Magic Number,DIDE.Installer,CompilerInstallInfo,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\CompilerInstallInfo.cs,FromString,The following statement contains a magic number: VersionInfo = new Version (items [2]);  
Magic Number,DIDE.Installer,CompilerInstallInfo,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\CompilerInstallInfo.cs,FromString,The following statement contains a magic number: VersionString = items [2];  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: foreach (string nodePath in nodeHash.Keys) {  	string[] nodeNames = nodePath.Split (new char[] {  		'/'  	}' StringSplitOptions.RemoveEmptyEntries);  	XmlNode xmlParent = xmlDoc;  	XmlNodeList searchResult = null;  	string[] values = nodeHash [nodePath];  	string xpath = "//";  	for (int i = 0; i < nodeNames.Length; i++) {  		XmlElement childNode = null;  		bool lastNode = (nodeNames.Length == (i + 1));  		string nodeName = nodeNames [i];  		xpath += nodeName;  		searchResult = xmlDoc.SelectNodes (xpath);  		if (searchResult.Count == 1) {  			childNode = searchResult [0] as XmlElement;  		} else if ((searchResult.Count > 1) && (i == nodeNames.Length - 1)) {  			foreach (string val in values) {  				for (int j = searchResult.Count - 1; j >= 0; j--) {  					if (searchResult [j].InnerText != null && searchResult [j].InnerText.Equals (val' StringComparison.CurrentCultureIgnoreCase)) {  						searchResult [j].ParentNode.RemoveChild (searchResult [j]);  					}  				}  			}  		}  		string[] pieces = nodeName.Split (new char[] {  			'[''  			']''  			'=''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		if (childNode == null) {  			if (pieces.Length >= 3) {  				childNode = xmlDoc.CreateElement (pieces [0].Trim ());  				for (int j = 2; j < pieces.Length; j += 2) {  					XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  					attr.Value = pieces [j].Trim ().Trim ('\''' '"');  					childNode.Attributes.Append (attr);  				}  			} else {  				childNode = xmlDoc.CreateElement (nodeName);  			}  		}  		if (lastNode) {  			if (values.Length > 1) {  				foreach (string value in values) {  					XmlElement clone = childNode.Clone () as XmlElement;  					clone.InnerText = value;  					xmlParent.AppendChild (clone);  				}  			} else {  				if (values.Length == 1)  					childNode.InnerText = values [0];  				xmlParent.AppendChild (childNode);  			}  		} else {  			xmlParent.AppendChild (childNode);  		}  		xmlParent = childNode;  		xpath += "/";  	}  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: foreach (string nodePath in nodeHash.Keys) {  	string[] nodeNames = nodePath.Split (new char[] {  		'/'  	}' StringSplitOptions.RemoveEmptyEntries);  	XmlNode xmlParent = xmlDoc;  	XmlNodeList searchResult = null;  	string[] values = nodeHash [nodePath];  	string xpath = "//";  	for (int i = 0; i < nodeNames.Length; i++) {  		XmlElement childNode = null;  		bool lastNode = (nodeNames.Length == (i + 1));  		string nodeName = nodeNames [i];  		xpath += nodeName;  		searchResult = xmlDoc.SelectNodes (xpath);  		if (searchResult.Count == 1) {  			childNode = searchResult [0] as XmlElement;  		} else if ((searchResult.Count > 1) && (i == nodeNames.Length - 1)) {  			foreach (string val in values) {  				for (int j = searchResult.Count - 1; j >= 0; j--) {  					if (searchResult [j].InnerText != null && searchResult [j].InnerText.Equals (val' StringComparison.CurrentCultureIgnoreCase)) {  						searchResult [j].ParentNode.RemoveChild (searchResult [j]);  					}  				}  			}  		}  		string[] pieces = nodeName.Split (new char[] {  			'[''  			']''  			'=''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		if (childNode == null) {  			if (pieces.Length >= 3) {  				childNode = xmlDoc.CreateElement (pieces [0].Trim ());  				for (int j = 2; j < pieces.Length; j += 2) {  					XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  					attr.Value = pieces [j].Trim ().Trim ('\''' '"');  					childNode.Attributes.Append (attr);  				}  			} else {  				childNode = xmlDoc.CreateElement (nodeName);  			}  		}  		if (lastNode) {  			if (values.Length > 1) {  				foreach (string value in values) {  					XmlElement clone = childNode.Clone () as XmlElement;  					clone.InnerText = value;  					xmlParent.AppendChild (clone);  				}  			} else {  				if (values.Length == 1)  					childNode.InnerText = values [0];  				xmlParent.AppendChild (childNode);  			}  		} else {  			xmlParent.AppendChild (childNode);  		}  		xmlParent = childNode;  		xpath += "/";  	}  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: foreach (string nodePath in nodeHash.Keys) {  	string[] nodeNames = nodePath.Split (new char[] {  		'/'  	}' StringSplitOptions.RemoveEmptyEntries);  	XmlNode xmlParent = xmlDoc;  	XmlNodeList searchResult = null;  	string[] values = nodeHash [nodePath];  	string xpath = "//";  	for (int i = 0; i < nodeNames.Length; i++) {  		XmlElement childNode = null;  		bool lastNode = (nodeNames.Length == (i + 1));  		string nodeName = nodeNames [i];  		xpath += nodeName;  		searchResult = xmlDoc.SelectNodes (xpath);  		if (searchResult.Count == 1) {  			childNode = searchResult [0] as XmlElement;  		} else if ((searchResult.Count > 1) && (i == nodeNames.Length - 1)) {  			foreach (string val in values) {  				for (int j = searchResult.Count - 1; j >= 0; j--) {  					if (searchResult [j].InnerText != null && searchResult [j].InnerText.Equals (val' StringComparison.CurrentCultureIgnoreCase)) {  						searchResult [j].ParentNode.RemoveChild (searchResult [j]);  					}  				}  			}  		}  		string[] pieces = nodeName.Split (new char[] {  			'[''  			']''  			'=''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		if (childNode == null) {  			if (pieces.Length >= 3) {  				childNode = xmlDoc.CreateElement (pieces [0].Trim ());  				for (int j = 2; j < pieces.Length; j += 2) {  					XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  					attr.Value = pieces [j].Trim ().Trim ('\''' '"');  					childNode.Attributes.Append (attr);  				}  			} else {  				childNode = xmlDoc.CreateElement (nodeName);  			}  		}  		if (lastNode) {  			if (values.Length > 1) {  				foreach (string value in values) {  					XmlElement clone = childNode.Clone () as XmlElement;  					clone.InnerText = value;  					xmlParent.AppendChild (clone);  				}  			} else {  				if (values.Length == 1)  					childNode.InnerText = values [0];  				xmlParent.AppendChild (childNode);  			}  		} else {  			xmlParent.AppendChild (childNode);  		}  		xmlParent = childNode;  		xpath += "/";  	}  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: for (int i = 0; i < nodeNames.Length; i++) {  	XmlElement childNode = null;  	bool lastNode = (nodeNames.Length == (i + 1));  	string nodeName = nodeNames [i];  	xpath += nodeName;  	searchResult = xmlDoc.SelectNodes (xpath);  	if (searchResult.Count == 1) {  		childNode = searchResult [0] as XmlElement;  	} else if ((searchResult.Count > 1) && (i == nodeNames.Length - 1)) {  		foreach (string val in values) {  			for (int j = searchResult.Count - 1; j >= 0; j--) {  				if (searchResult [j].InnerText != null && searchResult [j].InnerText.Equals (val' StringComparison.CurrentCultureIgnoreCase)) {  					searchResult [j].ParentNode.RemoveChild (searchResult [j]);  				}  			}  		}  	}  	string[] pieces = nodeName.Split (new char[] {  		'[''  		']''  		'=''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	if (childNode == null) {  		if (pieces.Length >= 3) {  			childNode = xmlDoc.CreateElement (pieces [0].Trim ());  			for (int j = 2; j < pieces.Length; j += 2) {  				XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  				attr.Value = pieces [j].Trim ().Trim ('\''' '"');  				childNode.Attributes.Append (attr);  			}  		} else {  			childNode = xmlDoc.CreateElement (nodeName);  		}  	}  	if (lastNode) {  		if (values.Length > 1) {  			foreach (string value in values) {  				XmlElement clone = childNode.Clone () as XmlElement;  				clone.InnerText = value;  				xmlParent.AppendChild (clone);  			}  		} else {  			if (values.Length == 1)  				childNode.InnerText = values [0];  			xmlParent.AppendChild (childNode);  		}  	} else {  		xmlParent.AppendChild (childNode);  	}  	xmlParent = childNode;  	xpath += "/";  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: for (int i = 0; i < nodeNames.Length; i++) {  	XmlElement childNode = null;  	bool lastNode = (nodeNames.Length == (i + 1));  	string nodeName = nodeNames [i];  	xpath += nodeName;  	searchResult = xmlDoc.SelectNodes (xpath);  	if (searchResult.Count == 1) {  		childNode = searchResult [0] as XmlElement;  	} else if ((searchResult.Count > 1) && (i == nodeNames.Length - 1)) {  		foreach (string val in values) {  			for (int j = searchResult.Count - 1; j >= 0; j--) {  				if (searchResult [j].InnerText != null && searchResult [j].InnerText.Equals (val' StringComparison.CurrentCultureIgnoreCase)) {  					searchResult [j].ParentNode.RemoveChild (searchResult [j]);  				}  			}  		}  	}  	string[] pieces = nodeName.Split (new char[] {  		'[''  		']''  		'=''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	if (childNode == null) {  		if (pieces.Length >= 3) {  			childNode = xmlDoc.CreateElement (pieces [0].Trim ());  			for (int j = 2; j < pieces.Length; j += 2) {  				XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  				attr.Value = pieces [j].Trim ().Trim ('\''' '"');  				childNode.Attributes.Append (attr);  			}  		} else {  			childNode = xmlDoc.CreateElement (nodeName);  		}  	}  	if (lastNode) {  		if (values.Length > 1) {  			foreach (string value in values) {  				XmlElement clone = childNode.Clone () as XmlElement;  				clone.InnerText = value;  				xmlParent.AppendChild (clone);  			}  		} else {  			if (values.Length == 1)  				childNode.InnerText = values [0];  			xmlParent.AppendChild (childNode);  		}  	} else {  		xmlParent.AppendChild (childNode);  	}  	xmlParent = childNode;  	xpath += "/";  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: for (int i = 0; i < nodeNames.Length; i++) {  	XmlElement childNode = null;  	bool lastNode = (nodeNames.Length == (i + 1));  	string nodeName = nodeNames [i];  	xpath += nodeName;  	searchResult = xmlDoc.SelectNodes (xpath);  	if (searchResult.Count == 1) {  		childNode = searchResult [0] as XmlElement;  	} else if ((searchResult.Count > 1) && (i == nodeNames.Length - 1)) {  		foreach (string val in values) {  			for (int j = searchResult.Count - 1; j >= 0; j--) {  				if (searchResult [j].InnerText != null && searchResult [j].InnerText.Equals (val' StringComparison.CurrentCultureIgnoreCase)) {  					searchResult [j].ParentNode.RemoveChild (searchResult [j]);  				}  			}  		}  	}  	string[] pieces = nodeName.Split (new char[] {  		'[''  		']''  		'=''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	if (childNode == null) {  		if (pieces.Length >= 3) {  			childNode = xmlDoc.CreateElement (pieces [0].Trim ());  			for (int j = 2; j < pieces.Length; j += 2) {  				XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  				attr.Value = pieces [j].Trim ().Trim ('\''' '"');  				childNode.Attributes.Append (attr);  			}  		} else {  			childNode = xmlDoc.CreateElement (nodeName);  		}  	}  	if (lastNode) {  		if (values.Length > 1) {  			foreach (string value in values) {  				XmlElement clone = childNode.Clone () as XmlElement;  				clone.InnerText = value;  				xmlParent.AppendChild (clone);  			}  		} else {  			if (values.Length == 1)  				childNode.InnerText = values [0];  			xmlParent.AppendChild (childNode);  		}  	} else {  		xmlParent.AppendChild (childNode);  	}  	xmlParent = childNode;  	xpath += "/";  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: if (childNode == null) {  	if (pieces.Length >= 3) {  		childNode = xmlDoc.CreateElement (pieces [0].Trim ());  		for (int j = 2; j < pieces.Length; j += 2) {  			XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  			attr.Value = pieces [j].Trim ().Trim ('\''' '"');  			childNode.Attributes.Append (attr);  		}  	} else {  		childNode = xmlDoc.CreateElement (nodeName);  	}  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: if (childNode == null) {  	if (pieces.Length >= 3) {  		childNode = xmlDoc.CreateElement (pieces [0].Trim ());  		for (int j = 2; j < pieces.Length; j += 2) {  			XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  			attr.Value = pieces [j].Trim ().Trim ('\''' '"');  			childNode.Attributes.Append (attr);  		}  	} else {  		childNode = xmlDoc.CreateElement (nodeName);  	}  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: if (childNode == null) {  	if (pieces.Length >= 3) {  		childNode = xmlDoc.CreateElement (pieces [0].Trim ());  		for (int j = 2; j < pieces.Length; j += 2) {  			XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  			attr.Value = pieces [j].Trim ().Trim ('\''' '"');  			childNode.Attributes.Append (attr);  		}  	} else {  		childNode = xmlDoc.CreateElement (nodeName);  	}  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: if (pieces.Length >= 3) {  	childNode = xmlDoc.CreateElement (pieces [0].Trim ());  	for (int j = 2; j < pieces.Length; j += 2) {  		XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  		attr.Value = pieces [j].Trim ().Trim ('\''' '"');  		childNode.Attributes.Append (attr);  	}  } else {  	childNode = xmlDoc.CreateElement (nodeName);  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: if (pieces.Length >= 3) {  	childNode = xmlDoc.CreateElement (pieces [0].Trim ());  	for (int j = 2; j < pieces.Length; j += 2) {  		XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  		attr.Value = pieces [j].Trim ().Trim ('\''' '"');  		childNode.Attributes.Append (attr);  	}  } else {  	childNode = xmlDoc.CreateElement (nodeName);  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: if (pieces.Length >= 3) {  	childNode = xmlDoc.CreateElement (pieces [0].Trim ());  	for (int j = 2; j < pieces.Length; j += 2) {  		XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  		attr.Value = pieces [j].Trim ().Trim ('\''' '"');  		childNode.Attributes.Append (attr);  	}  } else {  	childNode = xmlDoc.CreateElement (nodeName);  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: for (int j = 2; j < pieces.Length; j += 2) {  	XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  	attr.Value = pieces [j].Trim ().Trim ('\''' '"');  	childNode.Attributes.Append (attr);  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: for (int j = 2; j < pieces.Length; j += 2) {  	XmlAttribute attr = xmlDoc.CreateAttribute (pieces [j - 1].TrimStart ('@').Trim ());  	attr.Value = pieces [j].Trim ().Trim ('\''' '"');  	childNode.Attributes.Append (attr);  }  
Magic Number,DIDE.Installer,Configuration,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\Configuration.cs,CreateConfigurationFile,The following statement contains a magic number: j += 2
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetLatestDMDInfo,The following statement contains a magic number: subVersion = (version == 1) ? versions [1].SubVersion : versions [2].SubVersion;  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetLatestDMDInfo,The following statement contains a magic number: return (version == 1) ? versions [1].Url : versions [2].Url;  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,PreloadFromHtmlList,The following statement contains a magic number: if (versions.Count == 0) {  	if (File.Exists (filename)) {  		string[] lines = File.ReadAllLines (filename);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			int idx1 = lines [i].IndexOf ("dmd.1.");  			int idx2 = lines [i].IndexOf ("dmd.2.");  			if (idx1 > 0 || idx2 > 0) {  				ver = new CompilerVersion ();  				if (ver.FromHtml (lines [i])) {  					if (!versions.ContainsKey (ver.Version) || versions [ver.Version].SubVersion < ver.SubVersion) {  						versions [ver.Version] = ver;  					}  				}  			}  		}  		if (!DataFile.Exists && versions.Count == 2) {  			StringBuilder sb = new StringBuilder ();  			foreach (CompilerVersion v in versions.Values)  				sb.Append (v.ToString ()).Append ("\r\n");  			File.WriteAllText (DataFile.FullName' sb.ToString ());  			DataFile.Refresh ();  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,PreloadFromHtmlList,The following statement contains a magic number: if (File.Exists (filename)) {  	string[] lines = File.ReadAllLines (filename);  	CompilerVersion ver;  	for (int i = 0; i < lines.Length; i++) {  		int idx1 = lines [i].IndexOf ("dmd.1.");  		int idx2 = lines [i].IndexOf ("dmd.2.");  		if (idx1 > 0 || idx2 > 0) {  			ver = new CompilerVersion ();  			if (ver.FromHtml (lines [i])) {  				if (!versions.ContainsKey (ver.Version) || versions [ver.Version].SubVersion < ver.SubVersion) {  					versions [ver.Version] = ver;  				}  			}  		}  	}  	if (!DataFile.Exists && versions.Count == 2) {  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion v in versions.Values)  			sb.Append (v.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  		DataFile.Refresh ();  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,PreloadFromHtmlList,The following statement contains a magic number: if (!DataFile.Exists && versions.Count == 2) {  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion v in versions.Values)  		sb.Append (v.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  	DataFile.Refresh ();  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (versions.Count == 0) {  	bool hasError = false;  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerVersion ver;  		for (int i = 0; i < lines.Length; i++) {  			ver = new CompilerVersion ();  			if (ver.FromString (lines [i]))  				versions [ver.Version] = ver;  			else  				hasError = true;  			if (ver.HasError)  				hasError = true;  		}  		if (hasError) {  			DataFile.CopyTo (DataFile.FullName + "." + DateTime.Now.ToBinary () + ".log");  			DataFile.Delete ();  			DataFile.Refresh ();  		}  	}  	if (!DataFile.Exists) {  		CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  		int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  		string url1 = ""' url2 = "";  		ver1.Version = 1;  		ver2.Version = 2;  		try {  			FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  			request.Method = WebRequestMethods.Ftp.ListDirectory;  			using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  				/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  				using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  					while (!reader.EndOfStream) {  						string line = reader.ReadLine ();  						if (line.StartsWith ("dmd.1.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer1;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer1 < subVersion) {  									latestVer1 = subVersion;  									url1 = DIGITAL_MARS_HTTP + line;  								}  							}  						} else if (line.StartsWith ("dmd.2.")) {  							string[] tokens = line.Split ('.');  							if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  								subVersion = latestVer2;  							if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  								if (latestVer2 < subVersion) {  									latestVer2 = subVersion;  									url2 = DIGITAL_MARS_HTTP + line;  								}  							}  						}  					}  				}  				response.Close ();  			}  			ver1.SubVersion = latestVer1;  			ver1.Url = url1;  			ver2.SubVersion = latestVer2;  			ver2.Url = url2;  		} catch (Exception ex) {  			ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  			ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		}  		versions [1] = ver1;  		versions [2] = ver2;  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerVersion ver in versions.Values)  			sb.Append (ver.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (!DataFile.Exists) {  	CompilerVersion ver1 = new CompilerVersion ()' ver2 = new CompilerVersion ();  	int latestVer1 = 56' latestVer2 = 41' subVersion = 0;  	string url1 = ""' url2 = "";  	ver1.Version = 1;  	ver2.Version = 2;  	try {  		FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  		request.Method = WebRequestMethods.Ftp.ListDirectory;  		using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  			/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  			using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  				while (!reader.EndOfStream) {  					string line = reader.ReadLine ();  					if (line.StartsWith ("dmd.1.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer1;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer1 < subVersion) {  								latestVer1 = subVersion;  								url1 = DIGITAL_MARS_HTTP + line;  							}  						}  					} else if (line.StartsWith ("dmd.2.")) {  						string[] tokens = line.Split ('.');  						if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  							subVersion = latestVer2;  						if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  							if (latestVer2 < subVersion) {  								latestVer2 = subVersion;  								url2 = DIGITAL_MARS_HTTP + line;  							}  						}  					}  				}  			}  			response.Close ();  		}  		ver1.SubVersion = latestVer1;  		ver1.Url = url1;  		ver2.SubVersion = latestVer2;  		ver2.Url = url2;  	} catch (Exception ex) {  		ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  		ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	}  	versions [1] = ver1;  	versions [2] = ver2;  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerVersion ver in versions.Values)  		sb.Append (ver.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: ver2.Version = 2;  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: try {  	FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  	request.Method = WebRequestMethods.Ftp.ListDirectory;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  		using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  			while (!reader.EndOfStream) {  				string line = reader.ReadLine ();  				if (line.StartsWith ("dmd.1.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer1;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer1 < subVersion) {  							latestVer1 = subVersion;  							url1 = DIGITAL_MARS_HTTP + line;  						}  					}  				} else if (line.StartsWith ("dmd.2.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer2;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer2 < subVersion) {  							latestVer2 = subVersion;  							url2 = DIGITAL_MARS_HTTP + line;  						}  					}  				}  			}  		}  		response.Close ();  	}  	ver1.SubVersion = latestVer1;  	ver1.Url = url1;  	ver2.SubVersion = latestVer2;  	ver2.Url = url2;  } catch (Exception ex) {  	ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: try {  	FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  	request.Method = WebRequestMethods.Ftp.ListDirectory;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  		using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  			while (!reader.EndOfStream) {  				string line = reader.ReadLine ();  				if (line.StartsWith ("dmd.1.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer1;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer1 < subVersion) {  							latestVer1 = subVersion;  							url1 = DIGITAL_MARS_HTTP + line;  						}  					}  				} else if (line.StartsWith ("dmd.2.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer2;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer2 < subVersion) {  							latestVer2 = subVersion;  							url2 = DIGITAL_MARS_HTTP + line;  						}  					}  				}  			}  		}  		response.Close ();  	}  	ver1.SubVersion = latestVer1;  	ver1.Url = url1;  	ver2.SubVersion = latestVer2;  	ver2.Url = url2;  } catch (Exception ex) {  	ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: try {  	FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  	request.Method = WebRequestMethods.Ftp.ListDirectory;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  		using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  			while (!reader.EndOfStream) {  				string line = reader.ReadLine ();  				if (line.StartsWith ("dmd.1.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer1;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer1 < subVersion) {  							latestVer1 = subVersion;  							url1 = DIGITAL_MARS_HTTP + line;  						}  					}  				} else if (line.StartsWith ("dmd.2.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer2;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer2 < subVersion) {  							latestVer2 = subVersion;  							url2 = DIGITAL_MARS_HTTP + line;  						}  					}  				}  			}  		}  		response.Close ();  	}  	ver1.SubVersion = latestVer1;  	ver1.Url = url1;  	ver2.SubVersion = latestVer2;  	ver2.Url = url2;  } catch (Exception ex) {  	ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: try {  	FtpWebRequest request = WebRequest.Create (DIGITAL_MARS_FTP) as FtpWebRequest;  	request.Method = WebRequestMethods.Ftp.ListDirectory;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  		using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  			while (!reader.EndOfStream) {  				string line = reader.ReadLine ();  				if (line.StartsWith ("dmd.1.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer1;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer1 < subVersion) {  							latestVer1 = subVersion;  							url1 = DIGITAL_MARS_HTTP + line;  						}  					}  				} else if (line.StartsWith ("dmd.2.")) {  					string[] tokens = line.Split ('.');  					if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  						subVersion = latestVer2;  					if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  						if (latestVer2 < subVersion) {  							latestVer2 = subVersion;  							url2 = DIGITAL_MARS_HTTP + line;  						}  					}  				}  			}  		}  		response.Close ();  	}  	ver1.SubVersion = latestVer1;  	ver1.Url = url1;  	ver2.SubVersion = latestVer2;  	ver2.Url = url2;  } catch (Exception ex) {  	ver1.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  	ver2.Error = ERROR_PREFIX + ex.Message + Environment.NewLine + ex.StackTrace;  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  	/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  	using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  		while (!reader.EndOfStream) {  			string line = reader.ReadLine ();  			if (line.StartsWith ("dmd.1.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer1;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer1 < subVersion) {  						latestVer1 = subVersion;  						url1 = DIGITAL_MARS_HTTP + line;  					}  				}  			} else if (line.StartsWith ("dmd.2.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer2;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer2 < subVersion) {  						latestVer2 = subVersion;  						url2 = DIGITAL_MARS_HTTP + line;  					}  				}  			}  		}  	}  	response.Close ();  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  	/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  	using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  		while (!reader.EndOfStream) {  			string line = reader.ReadLine ();  			if (line.StartsWith ("dmd.1.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer1;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer1 < subVersion) {  						latestVer1 = subVersion;  						url1 = DIGITAL_MARS_HTTP + line;  					}  				}  			} else if (line.StartsWith ("dmd.2.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer2;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer2 < subVersion) {  						latestVer2 = subVersion;  						url2 = DIGITAL_MARS_HTTP + line;  					}  				}  			}  		}  	}  	response.Close ();  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  	/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  	using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  		while (!reader.EndOfStream) {  			string line = reader.ReadLine ();  			if (line.StartsWith ("dmd.1.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer1;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer1 < subVersion) {  						latestVer1 = subVersion;  						url1 = DIGITAL_MARS_HTTP + line;  					}  				}  			} else if (line.StartsWith ("dmd.2.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer2;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer2 < subVersion) {  						latestVer2 = subVersion;  						url2 = DIGITAL_MARS_HTTP + line;  					}  				}  			}  		}  	}  	response.Close ();  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  	/* 							 * Enum all files in the ftp root. While scan through all of them' extract the version number' get the highest version number' and finally download the appropriate zip 							 */Console.WriteLine (response.StatusDescription);  	using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  		while (!reader.EndOfStream) {  			string line = reader.ReadLine ();  			if (line.StartsWith ("dmd.1.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer1;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer1 < subVersion) {  						latestVer1 = subVersion;  						url1 = DIGITAL_MARS_HTTP + line;  					}  				}  			} else if (line.StartsWith ("dmd.2.")) {  				string[] tokens = line.Split ('.');  				if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  					subVersion = latestVer2;  				if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  					if (latestVer2 < subVersion) {  						latestVer2 = subVersion;  						url2 = DIGITAL_MARS_HTTP + line;  					}  				}  			}  		}  	}  	response.Close ();  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  	while (!reader.EndOfStream) {  		string line = reader.ReadLine ();  		if (line.StartsWith ("dmd.1.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer1;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer1 < subVersion) {  					latestVer1 = subVersion;  					url1 = DIGITAL_MARS_HTTP + line;  				}  			}  		} else if (line.StartsWith ("dmd.2.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer2;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer2 < subVersion) {  					latestVer2 = subVersion;  					url2 = DIGITAL_MARS_HTTP + line;  				}  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  	while (!reader.EndOfStream) {  		string line = reader.ReadLine ();  		if (line.StartsWith ("dmd.1.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer1;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer1 < subVersion) {  					latestVer1 = subVersion;  					url1 = DIGITAL_MARS_HTTP + line;  				}  			}  		} else if (line.StartsWith ("dmd.2.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer2;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer2 < subVersion) {  					latestVer2 = subVersion;  					url2 = DIGITAL_MARS_HTTP + line;  				}  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  	while (!reader.EndOfStream) {  		string line = reader.ReadLine ();  		if (line.StartsWith ("dmd.1.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer1;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer1 < subVersion) {  					latestVer1 = subVersion;  					url1 = DIGITAL_MARS_HTTP + line;  				}  			}  		} else if (line.StartsWith ("dmd.2.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer2;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer2 < subVersion) {  					latestVer2 = subVersion;  					url2 = DIGITAL_MARS_HTTP + line;  				}  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {  	while (!reader.EndOfStream) {  		string line = reader.ReadLine ();  		if (line.StartsWith ("dmd.1.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer1;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer1 < subVersion) {  					latestVer1 = subVersion;  					url1 = DIGITAL_MARS_HTTP + line;  				}  			}  		} else if (line.StartsWith ("dmd.2.")) {  			string[] tokens = line.Split ('.');  			if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  				subVersion = latestVer2;  			if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  				if (latestVer2 < subVersion) {  					latestVer2 = subVersion;  					url2 = DIGITAL_MARS_HTTP + line;  				}  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: while (!reader.EndOfStream) {  	string line = reader.ReadLine ();  	if (line.StartsWith ("dmd.1.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer1;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer1 < subVersion) {  				latestVer1 = subVersion;  				url1 = DIGITAL_MARS_HTTP + line;  			}  		}  	} else if (line.StartsWith ("dmd.2.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer2;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer2 < subVersion) {  				latestVer2 = subVersion;  				url2 = DIGITAL_MARS_HTTP + line;  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: while (!reader.EndOfStream) {  	string line = reader.ReadLine ();  	if (line.StartsWith ("dmd.1.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer1;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer1 < subVersion) {  				latestVer1 = subVersion;  				url1 = DIGITAL_MARS_HTTP + line;  			}  		}  	} else if (line.StartsWith ("dmd.2.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer2;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer2 < subVersion) {  				latestVer2 = subVersion;  				url2 = DIGITAL_MARS_HTTP + line;  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: while (!reader.EndOfStream) {  	string line = reader.ReadLine ();  	if (line.StartsWith ("dmd.1.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer1;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer1 < subVersion) {  				latestVer1 = subVersion;  				url1 = DIGITAL_MARS_HTTP + line;  			}  		}  	} else if (line.StartsWith ("dmd.2.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer2;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer2 < subVersion) {  				latestVer2 = subVersion;  				url2 = DIGITAL_MARS_HTTP + line;  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: while (!reader.EndOfStream) {  	string line = reader.ReadLine ();  	if (line.StartsWith ("dmd.1.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer1;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer1 < subVersion) {  				latestVer1 = subVersion;  				url1 = DIGITAL_MARS_HTTP + line;  			}  		}  	} else if (line.StartsWith ("dmd.2.")) {  		string[] tokens = line.Split ('.');  		if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  			subVersion = latestVer2;  		if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  			if (latestVer2 < subVersion) {  				latestVer2 = subVersion;  				url2 = DIGITAL_MARS_HTTP + line;  			}  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (line.StartsWith ("dmd.1.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer1;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer1 < subVersion) {  			latestVer1 = subVersion;  			url1 = DIGITAL_MARS_HTTP + line;  		}  	}  } else if (line.StartsWith ("dmd.2.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer2;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer2 < subVersion) {  			latestVer2 = subVersion;  			url2 = DIGITAL_MARS_HTTP + line;  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (line.StartsWith ("dmd.1.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer1;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer1 < subVersion) {  			latestVer1 = subVersion;  			url1 = DIGITAL_MARS_HTTP + line;  		}  	}  } else if (line.StartsWith ("dmd.2.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer2;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer2 < subVersion) {  			latestVer2 = subVersion;  			url2 = DIGITAL_MARS_HTTP + line;  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (line.StartsWith ("dmd.1.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer1;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer1 < subVersion) {  			latestVer1 = subVersion;  			url1 = DIGITAL_MARS_HTTP + line;  		}  	}  } else if (line.StartsWith ("dmd.2.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer2;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer2 < subVersion) {  			latestVer2 = subVersion;  			url2 = DIGITAL_MARS_HTTP + line;  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (line.StartsWith ("dmd.1.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer1;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer1 < subVersion) {  			latestVer1 = subVersion;  			url1 = DIGITAL_MARS_HTTP + line;  		}  	}  } else if (line.StartsWith ("dmd.2.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer2;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer2 < subVersion) {  			latestVer2 = subVersion;  			url2 = DIGITAL_MARS_HTTP + line;  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  	subVersion = latestVer1;  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  	subVersion = latestVer1;  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (line.StartsWith ("dmd.2.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer2;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer2 < subVersion) {  			latestVer2 = subVersion;  			url2 = DIGITAL_MARS_HTTP + line;  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (line.StartsWith ("dmd.2.")) {  	string[] tokens = line.Split ('.');  	if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  		subVersion = latestVer2;  	if (tokens [tokens.Length - 1].Equals ("zip"' StringComparison.CurrentCultureIgnoreCase)) {  		if (latestVer2 < subVersion) {  			latestVer2 = subVersion;  			url2 = DIGITAL_MARS_HTTP + line;  		}  	}  }  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  	subVersion = latestVer2;  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: if (tokens.Length > 2 && !int.TryParse (tokens [2]' out subVersion))  	subVersion = latestVer2;  
Magic Number,DIDE.Installer,DigitalMars,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\DigitalMars.cs,GetDMDInfo,The following statement contains a magic number: versions [2] = ver2;  
Magic Number,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,FixDmdInstallPath,The following statement contains a magic number: try {  	DirectoryInfo d = new DirectoryInfo (s);  	if (d.Name.Equals ("dmd"' StringComparison.CurrentCultureIgnoreCase) || d.Name.Equals ("dmd1"' StringComparison.CurrentCultureIgnoreCase) || d.Name.Equals ("dmd2"' StringComparison.CurrentCultureIgnoreCase))  		return d.Parent.FullName;  	else  		return d.FullName;  } catch {  	s = s.TrimEnd ('\\');  	if (s.IndexOf ("dmd") >= s.Length - 5) {  		int i = s.LastIndexOf ("\\");  		if (i > 0)  			s = s.Substring (i);  	}  	return s;  }  
Magic Number,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,FixDmdInstallPath,The following statement contains a magic number: if (s.IndexOf ("dmd") >= s.Length - 5) {  	int i = s.LastIndexOf ("\\");  	if (i > 0)  		s = s.Substring (i);  }  
Magic Number,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,CheckThread,The following statement contains a magic number: if (t != null) {  	if (t.ThreadState == ThreadState.Running)  		t.Join (30);  	t = null;  }  
Magic Number,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,CheckThread,The following statement contains a magic number: if (t.ThreadState == ThreadState.Running)  	t.Join (30);  
Magic Number,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,CheckThread,The following statement contains a magic number: t.Join (30);  
Magic Number,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,GetLatestDMD2Url,The following statement contains a magic number: return DigitalMars.GetLatestDMDInfo (2' out ver);  
Magic Number,DIDE.Installer,InstallerHelper,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\InstallerHelper.cs,GetLatestDMD2Version,The following statement contains a magic number: DigitalMars.GetLatestDMDInfo (2' out ver);  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,AddPath,The following statement contains a magic number: if (!string.IsNullOrEmpty (path)) {  	FileInfo fi = new FileInfo (path);  	if (fi.Exists)  		path = fi.Directory.FullName;  	if (path.IndexOf (':') == 1)  		path = path.Substring (2);  	if (path.EndsWith (".exe"))  		path = path.Substring (0' path.LastIndexOf ('\\'));  	path = path.TrimEnd ('\\');  	if (!paths.Contains (path))  		paths.Add (path.TrimEnd ('\\'));  	cinf = GetLocalDMDInstallation (path);  	if (cinf != null) {  		localDMDInstallations = null;  		GetLocalDMDInstallations ();  	}  }  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,AddPath,The following statement contains a magic number: if (path.IndexOf (':') == 1)  	path = path.Substring (2);  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,AddPath,The following statement contains a magic number: path = path.Substring (2);  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The following statement contains a magic number: if (localDMDInstallations == null) {  	paths = new List<string> (POSSIBLE_LOCATIONS);  	localDMDInstallations = new List<CompilerInstallInfo> ();  	if (DataFile.Exists) {  		string[] lines = File.ReadAllLines (DataFile.FullName);  		CompilerInstallInfo cii;  		for (int i = 0; i < lines.Length; i++) {  			cii = new CompilerInstallInfo ();  			if (cii.FromString (lines [i])) {  				if ((cii.VersionInfo.Major == 1) && (latest1x == null || latest1x.VersionInfo < cii.VersionInfo))  					latest1x = cii;  				else if ((cii.VersionInfo.Major == 2) && (latest2x == null || latest2x.VersionInfo < cii.VersionInfo))  					latest2x = cii;  				localDMDInstallations.Add (cii);  			}  		}  	} else {  		Version v1 = null' v2 = null;  		foreach (string folder in DmdFoldersFromSystemPath) {  			string path = folder + COMPILER_EXE;  			if (File.Exists (path)) {  				CompilerInstallInfo inf = GetLocalDMDInstallation (path' ref v1' ref v2);  				if (inf != null) {  					localDMDInstallations.Add (inf);  				}  			}  		}  		string reg1 = ReadRegKey (BASE_REG_KEY' DMD1_PATH_REG_KEY)' reg2 = ReadRegKey (BASE_REG_KEY' DMD2_PATH_REG_KEY)' reg3 = ReadRegKey (D_BASE_REG_KEY' D_INSTALL_PATH_REG_KEY);  		if (reg1 != null)  			paths.Add (reg1);  		if (reg2 != null)  			paths.Add (reg2);  		if (reg3 != null)  			paths.Add (reg3);  		string[] dirs = new string[] {  			Environment.GetEnvironmentVariable ("PROGRAMFILES")'  			Environment.GetEnvironmentVariable ("PROGRAMFILES(X86)")'  			Environment.GetEnvironmentVariable ("APPDATA")'  			Environment.GetEnvironmentVariable ("USERPROFILE")  		};  		DriveInfo[] drives = DriveInfo.GetDrives ();  		foreach (DriveInfo drive in drives) {  			if (drive.DriveType == DriveType.Fixed || drive.DriveType == DriveType.Removable) {  				foreach (string possibleLocation in paths) {  					string path = possibleLocation + RELATIVE_COMPILER_PATH + COMPILER_EXE;  					if (path [1] != ':' && path [0] != '%')  						path = drive.Name.TrimEnd ('\\') + path;  					if (possibleLocation.IndexOf ("%ENV%") >= 0) {  						foreach (string dir in dirs) {  							string envPath = path.Replace ("%ENV%"' dir);  							CompilerInstallInfo inf = GetLocalDMDInstallation (envPath' ref v1' ref v2);  							if (inf != null) {  								localDMDInstallations.Add (inf);  							}  						}  					} else {  						GetLocalDMDInstallation (path' ref v1' ref v2);  						CompilerInstallInfo inf = GetLocalDMDInstallation (path' ref v1' ref v2);  						if (inf != null) {  							localDMDInstallations.Add (inf);  						}  					}  				}  			}  		}  		StringBuilder sb = new StringBuilder ();  		foreach (CompilerInstallInfo cii in localDMDInstallations)  			sb.Append (cii.ToString ()).Append ("\r\n");  		File.WriteAllText (DataFile.FullName' sb.ToString ());  		//File.WriteAllText(@"C:\Users\Justin\Desktop\LocalInit_" + DateTime.Now.Ticks + ".txt"' DateTime.Now.ToLongDateString());  	}  }  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The following statement contains a magic number: if (DataFile.Exists) {  	string[] lines = File.ReadAllLines (DataFile.FullName);  	CompilerInstallInfo cii;  	for (int i = 0; i < lines.Length; i++) {  		cii = new CompilerInstallInfo ();  		if (cii.FromString (lines [i])) {  			if ((cii.VersionInfo.Major == 1) && (latest1x == null || latest1x.VersionInfo < cii.VersionInfo))  				latest1x = cii;  			else if ((cii.VersionInfo.Major == 2) && (latest2x == null || latest2x.VersionInfo < cii.VersionInfo))  				latest2x = cii;  			localDMDInstallations.Add (cii);  		}  	}  } else {  	Version v1 = null' v2 = null;  	foreach (string folder in DmdFoldersFromSystemPath) {  		string path = folder + COMPILER_EXE;  		if (File.Exists (path)) {  			CompilerInstallInfo inf = GetLocalDMDInstallation (path' ref v1' ref v2);  			if (inf != null) {  				localDMDInstallations.Add (inf);  			}  		}  	}  	string reg1 = ReadRegKey (BASE_REG_KEY' DMD1_PATH_REG_KEY)' reg2 = ReadRegKey (BASE_REG_KEY' DMD2_PATH_REG_KEY)' reg3 = ReadRegKey (D_BASE_REG_KEY' D_INSTALL_PATH_REG_KEY);  	if (reg1 != null)  		paths.Add (reg1);  	if (reg2 != null)  		paths.Add (reg2);  	if (reg3 != null)  		paths.Add (reg3);  	string[] dirs = new string[] {  		Environment.GetEnvironmentVariable ("PROGRAMFILES")'  		Environment.GetEnvironmentVariable ("PROGRAMFILES(X86)")'  		Environment.GetEnvironmentVariable ("APPDATA")'  		Environment.GetEnvironmentVariable ("USERPROFILE")  	};  	DriveInfo[] drives = DriveInfo.GetDrives ();  	foreach (DriveInfo drive in drives) {  		if (drive.DriveType == DriveType.Fixed || drive.DriveType == DriveType.Removable) {  			foreach (string possibleLocation in paths) {  				string path = possibleLocation + RELATIVE_COMPILER_PATH + COMPILER_EXE;  				if (path [1] != ':' && path [0] != '%')  					path = drive.Name.TrimEnd ('\\') + path;  				if (possibleLocation.IndexOf ("%ENV%") >= 0) {  					foreach (string dir in dirs) {  						string envPath = path.Replace ("%ENV%"' dir);  						CompilerInstallInfo inf = GetLocalDMDInstallation (envPath' ref v1' ref v2);  						if (inf != null) {  							localDMDInstallations.Add (inf);  						}  					}  				} else {  					GetLocalDMDInstallation (path' ref v1' ref v2);  					CompilerInstallInfo inf = GetLocalDMDInstallation (path' ref v1' ref v2);  					if (inf != null) {  						localDMDInstallations.Add (inf);  					}  				}  			}  		}  	}  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerInstallInfo cii in localDMDInstallations)  		sb.Append (cii.ToString ()).Append ("\r\n");  	File.WriteAllText (DataFile.FullName' sb.ToString ());  	//File.WriteAllText(@"C:\Users\Justin\Desktop\LocalInit_" + DateTime.Now.Ticks + ".txt"' DateTime.Now.ToLongDateString());  }  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++) {  	cii = new CompilerInstallInfo ();  	if (cii.FromString (lines [i])) {  		if ((cii.VersionInfo.Major == 1) && (latest1x == null || latest1x.VersionInfo < cii.VersionInfo))  			latest1x = cii;  		else if ((cii.VersionInfo.Major == 2) && (latest2x == null || latest2x.VersionInfo < cii.VersionInfo))  			latest2x = cii;  		localDMDInstallations.Add (cii);  	}  }  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The following statement contains a magic number: if (cii.FromString (lines [i])) {  	if ((cii.VersionInfo.Major == 1) && (latest1x == null || latest1x.VersionInfo < cii.VersionInfo))  		latest1x = cii;  	else if ((cii.VersionInfo.Major == 2) && (latest2x == null || latest2x.VersionInfo < cii.VersionInfo))  		latest2x = cii;  	localDMDInstallations.Add (cii);  }  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The following statement contains a magic number: if ((cii.VersionInfo.Major == 1) && (latest1x == null || latest1x.VersionInfo < cii.VersionInfo))  	latest1x = cii;  else if ((cii.VersionInfo.Major == 2) && (latest2x == null || latest2x.VersionInfo < cii.VersionInfo))  	latest2x = cii;  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallations,The following statement contains a magic number: if ((cii.VersionInfo.Major == 2) && (latest2x == null || latest2x.VersionInfo < cii.VersionInfo))  	latest2x = cii;  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallation,The following statement contains a magic number: if (File.Exists (path)) {  	cii = new CompilerInstallInfo (new FileInfo (path));  	if ((cii.VersionInfo.Major == 1) && ((v1 == null) || (v1 > cii.VersionInfo))) {  		v1 = cii.VersionInfo;  		latest1x = cii;  	}  	if ((cii.VersionInfo.Major == 2) && ((v2 == null) || (v2 > cii.VersionInfo))) {  		v2 = cii.VersionInfo;  		latest2x = cii;  	}  }  
Magic Number,DIDE.Installer,LocalCompiler,D:\newReposJune17\aBothe_D-IDE\Installer\InstallerHelper\LocalCompiler.cs,GetLocalDMDInstallation,The following statement contains a magic number: if ((cii.VersionInfo.Major == 2) && ((v2 == null) || (v2 > cii.VersionInfo))) {  	v2 = cii.VersionInfo;  	latest2x = cii;  }  
