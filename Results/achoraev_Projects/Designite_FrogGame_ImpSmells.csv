Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,Cyclomatic complexity of the method is 13
Complex Method,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,AnimateTitle,Cyclomatic complexity of the method is 8
Complex Method,FrogGame,Frog,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Frog.cs,Move,Cyclomatic complexity of the method is 16
Complex Method,FrogGame,Frog,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Frog.cs,Redraw,Cyclomatic complexity of the method is 8
Complex Method,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,Cyclomatic complexity of the method is 14
Long Statement,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,ConsoleDraw,The length of the statement  "		Text = new String (line.Skip (trimLeft).Take (Math.Min (Console.WindowWidth - col' line.Length - trimLeft)).ToArray ())' " is 120.
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.hasMoved) {  	if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  		// Delete from the old position  		if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  			Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  			Console.Write ("  ");  		}  		if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  			Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  			Console.Write ("      ");  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  			Console.SetCursorPosition (this.col + 2' this.row + 0);  			Console.Write ("==");  		}  		if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  			Console.SetCursorPosition (this.col + 0' this.row + 1);  			Console.Write ("=o==o=");  		}  	}  	else {  		// Delete from the old position  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  					Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  					Console.Write (' ');  				}  			}  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  					Console.SetCursorPosition (this.col + col' this.row + row);  					Console.Write (this.parts [row' col]);  				}  			}  		}  	}  	Console.ResetColor ();  	// Remember the new position  	this.RowOld = this.row;  	this.ColOld = this.col;  	this.hasMoved = false;  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.hasMoved) {  	if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  		// Delete from the old position  		if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  			Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  			Console.Write ("  ");  		}  		if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  			Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  			Console.Write ("      ");  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  			Console.SetCursorPosition (this.col + 2' this.row + 0);  			Console.Write ("==");  		}  		if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  			Console.SetCursorPosition (this.col + 0' this.row + 1);  			Console.Write ("=o==o=");  		}  	}  	else {  		// Delete from the old position  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  					Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  					Console.Write (' ');  				}  			}  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  					Console.SetCursorPosition (this.col + col' this.row + row);  					Console.Write (this.parts [row' col]);  				}  			}  		}  	}  	Console.ResetColor ();  	// Remember the new position  	this.RowOld = this.row;  	this.ColOld = this.col;  	this.hasMoved = false;  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.hasMoved) {  	if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  		// Delete from the old position  		if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  			Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  			Console.Write ("  ");  		}  		if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  			Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  			Console.Write ("      ");  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  			Console.SetCursorPosition (this.col + 2' this.row + 0);  			Console.Write ("==");  		}  		if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  			Console.SetCursorPosition (this.col + 0' this.row + 1);  			Console.Write ("=o==o=");  		}  	}  	else {  		// Delete from the old position  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  					Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  					Console.Write (' ');  				}  			}  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  					Console.SetCursorPosition (this.col + col' this.row + row);  					Console.Write (this.parts [row' col]);  				}  			}  		}  	}  	Console.ResetColor ();  	// Remember the new position  	this.RowOld = this.row;  	this.ColOld = this.col;  	this.hasMoved = false;  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.hasMoved) {  	if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  		// Delete from the old position  		if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  			Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  			Console.Write ("  ");  		}  		if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  			Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  			Console.Write ("      ");  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  			Console.SetCursorPosition (this.col + 2' this.row + 0);  			Console.Write ("==");  		}  		if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  			Console.SetCursorPosition (this.col + 0' this.row + 1);  			Console.Write ("=o==o=");  		}  	}  	else {  		// Delete from the old position  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  					Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  					Console.Write (' ');  				}  			}  		}  		// Draw on the new postion  		Console.ForegroundColor = this.color;  		for (int row = 0; row < parts.GetLength (0); row++) {  			for (int col = 0; col < parts.GetLength (1); col++) {  				if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  					Console.SetCursorPosition (this.col + col' this.row + row);  					Console.Write (this.parts [row' col]);  				}  			}  		}  	}  	Console.ResetColor ();  	// Remember the new position  	this.RowOld = this.row;  	this.ColOld = this.col;  	this.hasMoved = false;  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  	// Delete from the old position  	if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  		Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  		Console.Write ("  ");  	}  	if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  		Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  		Console.Write ("      ");  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  		Console.SetCursorPosition (this.col + 2' this.row + 0);  		Console.Write ("==");  	}  	if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  		Console.SetCursorPosition (this.col + 0' this.row + 1);  		Console.Write ("=o==o=");  	}  }  else {  	// Delete from the old position  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  				Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  				Console.Write (' ');  			}  		}  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  				Console.SetCursorPosition (this.col + col' this.row + row);  				Console.Write (this.parts [row' col]);  			}  		}  	}  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  	// Delete from the old position  	if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  		Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  		Console.Write ("  ");  	}  	if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  		Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  		Console.Write ("      ");  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  		Console.SetCursorPosition (this.col + 2' this.row + 0);  		Console.Write ("==");  	}  	if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  		Console.SetCursorPosition (this.col + 0' this.row + 1);  		Console.Write ("=o==o=");  	}  }  else {  	// Delete from the old position  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  				Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  				Console.Write (' ');  			}  		}  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  				Console.SetCursorPosition (this.col + col' this.row + row);  				Console.Write (this.parts [row' col]);  			}  		}  	}  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  	// Delete from the old position  	if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  		Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  		Console.Write ("  ");  	}  	if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  		Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  		Console.Write ("      ");  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  		Console.SetCursorPosition (this.col + 2' this.row + 0);  		Console.Write ("==");  	}  	if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  		Console.SetCursorPosition (this.col + 0' this.row + 1);  		Console.Write ("=o==o=");  	}  }  else {  	// Delete from the old position  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  				Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  				Console.Write (' ');  			}  		}  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  				Console.SetCursorPosition (this.col + col' this.row + row);  				Console.Write (this.parts [row' col]);  			}  		}  	}  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (this.col > CarSize && this.col < FrogMain.RoadCols - CarSize) {  	// Delete from the old position  	if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  		Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  		Console.Write ("  ");  	}  	if (FrogMain.ValidateCursorPosition (this.ColOld + 0' this.RowOld + 1)) {  		Console.SetCursorPosition (this.ColOld + 0' this.RowOld + 1);  		Console.Write ("      ");  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  		Console.SetCursorPosition (this.col + 2' this.row + 0);  		Console.Write ("==");  	}  	if (FrogMain.ValidateCursorPosition (this.col + 0' this.row + 1)) {  		Console.SetCursorPosition (this.col + 0' this.row + 1);  		Console.Write ("=o==o=");  	}  }  else {  	// Delete from the old position  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.ColOld + col' this.RowOld + row)) {  				Console.SetCursorPosition (this.ColOld + col' this.RowOld + row);  				Console.Write (' ');  			}  		}  	}  	// Draw on the new postion  	Console.ForegroundColor = this.color;  	for (int row = 0; row < parts.GetLength (0); row++) {  		for (int col = 0; col < parts.GetLength (1); col++) {  			if (FrogMain.ValidateCursorPosition (this.col + col' this.row + row)) {  				Console.SetCursorPosition (this.col + col' this.row + row);  				Console.Write (this.parts [row' col]);  			}  		}  	}  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  	Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  	Console.Write ("  ");  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (FrogMain.ValidateCursorPosition (this.ColOld + 2' this.RowOld + 0)) {  	Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  	Console.Write ("  ");  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: Console.SetCursorPosition (this.ColOld + 2' this.RowOld + 0);  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  	Console.SetCursorPosition (this.col + 2' this.row + 0);  	Console.Write ("==");  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: if (FrogMain.ValidateCursorPosition (this.col + 2' this.row + 0)) {  	Console.SetCursorPosition (this.col + 2' this.row + 0);  	Console.Write ("==");  }  
Magic Number,FrogGame,Car,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Car.cs,Redraw,The following statement contains a magic number: Console.SetCursorPosition (this.col + 2' this.row + 0);  
Magic Number,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,AnimateTitle,The following statement contains a magic number: try {  	Console.CursorVisible = false;  	Console.Clear ();  	string[] titleLines = ReadFileLines (@"...\...\FrogTitle.txt");  	var maxLength = titleLines.Aggregate (0' (max' line) => Math.Max (max' line.Length));  	var col = Console.BufferWidth / 2 - maxLength / 2;  	int startRow = -titleLines.Length;  	int endRow = (Console.WindowHeight - titleLines.Length) / 2;  	Console.ForegroundColor = ConsoleColor.Green;  	for (int row = startRow; row < endRow; row++) {  		if (Console.KeyAvailable)  			break;  		ConsoleDraw (titleLines' col' row);  		Thread.Sleep (50);  	}  	Console.ReadKey (true);  	Console.ResetColor ();  	Console.Clear ();  }  catch (FileNotFoundException) {  	Console.WriteLine ("File not found!");  }  catch (DirectoryNotFoundException) {  	Console.WriteLine ("Directory not found!");  }  catch (SecurityException) {  	Console.WriteLine ("Security error detected!");  }  catch (IOException e) {  	Console.WriteLine (e.Message);  }  catch (UnauthorizedAccessException e) {  	Console.WriteLine (e.Message);  }  
Magic Number,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,AnimateTitle,The following statement contains a magic number: try {  	Console.CursorVisible = false;  	Console.Clear ();  	string[] titleLines = ReadFileLines (@"...\...\FrogTitle.txt");  	var maxLength = titleLines.Aggregate (0' (max' line) => Math.Max (max' line.Length));  	var col = Console.BufferWidth / 2 - maxLength / 2;  	int startRow = -titleLines.Length;  	int endRow = (Console.WindowHeight - titleLines.Length) / 2;  	Console.ForegroundColor = ConsoleColor.Green;  	for (int row = startRow; row < endRow; row++) {  		if (Console.KeyAvailable)  			break;  		ConsoleDraw (titleLines' col' row);  		Thread.Sleep (50);  	}  	Console.ReadKey (true);  	Console.ResetColor ();  	Console.Clear ();  }  catch (FileNotFoundException) {  	Console.WriteLine ("File not found!");  }  catch (DirectoryNotFoundException) {  	Console.WriteLine ("Directory not found!");  }  catch (SecurityException) {  	Console.WriteLine ("Security error detected!");  }  catch (IOException e) {  	Console.WriteLine (e.Message);  }  catch (UnauthorizedAccessException e) {  	Console.WriteLine (e.Message);  }  
Magic Number,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,AnimateTitle,The following statement contains a magic number: try {  	Console.CursorVisible = false;  	Console.Clear ();  	string[] titleLines = ReadFileLines (@"...\...\FrogTitle.txt");  	var maxLength = titleLines.Aggregate (0' (max' line) => Math.Max (max' line.Length));  	var col = Console.BufferWidth / 2 - maxLength / 2;  	int startRow = -titleLines.Length;  	int endRow = (Console.WindowHeight - titleLines.Length) / 2;  	Console.ForegroundColor = ConsoleColor.Green;  	for (int row = startRow; row < endRow; row++) {  		if (Console.KeyAvailable)  			break;  		ConsoleDraw (titleLines' col' row);  		Thread.Sleep (50);  	}  	Console.ReadKey (true);  	Console.ResetColor ();  	Console.Clear ();  }  catch (FileNotFoundException) {  	Console.WriteLine ("File not found!");  }  catch (DirectoryNotFoundException) {  	Console.WriteLine ("Directory not found!");  }  catch (SecurityException) {  	Console.WriteLine ("Security error detected!");  }  catch (IOException e) {  	Console.WriteLine (e.Message);  }  catch (UnauthorizedAccessException e) {  	Console.WriteLine (e.Message);  }  
Magic Number,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,AnimateTitle,The following statement contains a magic number: try {  	Console.CursorVisible = false;  	Console.Clear ();  	string[] titleLines = ReadFileLines (@"...\...\FrogTitle.txt");  	var maxLength = titleLines.Aggregate (0' (max' line) => Math.Max (max' line.Length));  	var col = Console.BufferWidth / 2 - maxLength / 2;  	int startRow = -titleLines.Length;  	int endRow = (Console.WindowHeight - titleLines.Length) / 2;  	Console.ForegroundColor = ConsoleColor.Green;  	for (int row = startRow; row < endRow; row++) {  		if (Console.KeyAvailable)  			break;  		ConsoleDraw (titleLines' col' row);  		Thread.Sleep (50);  	}  	Console.ReadKey (true);  	Console.ResetColor ();  	Console.Clear ();  }  catch (FileNotFoundException) {  	Console.WriteLine ("File not found!");  }  catch (DirectoryNotFoundException) {  	Console.WriteLine ("Directory not found!");  }  catch (SecurityException) {  	Console.WriteLine ("Security error detected!");  }  catch (IOException e) {  	Console.WriteLine (e.Message);  }  catch (UnauthorizedAccessException e) {  	Console.WriteLine (e.Message);  }  
Magic Number,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,AnimateTitle,The following statement contains a magic number: for (int row = startRow; row < endRow; row++) {  	if (Console.KeyAvailable)  		break;  	ConsoleDraw (titleLines' col' row);  	Thread.Sleep (50);  }  
Magic Number,FrogGame,ConsoleAnimations,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\ConsoleAnimations.cs,AnimateTitle,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,FrogGame,Frog,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Frog.cs,Frog,The following statement contains a magic number: this.Col = FrogMain.RoadCols / 2 - this.Width / 2;  
Magic Number,FrogGame,Frog,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Frog.cs,Frog,The following statement contains a magic number: this.Col = FrogMain.RoadCols / 2 - this.Width / 2;  
Magic Number,FrogGame,Frog,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Frog.cs,DrawRoadKill,The following statement contains a magic number: this.parts [0' 4] = 'X';  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: while (true) {  	gameTime = gameClock.ElapsedMilliseconds;  	//Move player  	if (lanesPopulated) {  		if (Console.KeyAvailable) {  			frog.Move (Console.ReadKey (true).Key);  		}  	}  	else if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  		// At least one car from the fastest lane has crossed the middile of the gamefield  		lanesPopulated = true;  		while (Console.KeyAvailable)  			Console.ReadKey (true);  		// Flush the console buffer  	}  	// Generate new cars  	foreach (var lane in allLanes) {  		if (gameTime - lane.lastCarGenTime > lane.genCarInterval) {  			lane.lastCarGenTime = gameTime;  			lane.genCarInterval = rand.Next (lane.lowInterval' lane.highInterval);  			lane.GenerateCar ();  		}  	}  	// Move cars  	foreach (var lane in allLanes) {  		if (gameTime - lane.lastCarMove > lane.speedInterval) {  			lane.lastCarMove = gameTime;  			lane.UpdateCarPositions ();  		}  	}  	// Refresh console  	if (gameTime - lastRefresh > RefreshInterval) {  		lastRefresh = gameTime;  		RefreshConsole ();  		// Exit the game here and only after refresh  		if (gameState == GameState.RoadKill) {  			RoadKill ();  		}  		if (frog.Row == 0) {  			Sucess ();  		}  	}  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: while (true) {  	gameTime = gameClock.ElapsedMilliseconds;  	//Move player  	if (lanesPopulated) {  		if (Console.KeyAvailable) {  			frog.Move (Console.ReadKey (true).Key);  		}  	}  	else if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  		// At least one car from the fastest lane has crossed the middile of the gamefield  		lanesPopulated = true;  		while (Console.KeyAvailable)  			Console.ReadKey (true);  		// Flush the console buffer  	}  	// Generate new cars  	foreach (var lane in allLanes) {  		if (gameTime - lane.lastCarGenTime > lane.genCarInterval) {  			lane.lastCarGenTime = gameTime;  			lane.genCarInterval = rand.Next (lane.lowInterval' lane.highInterval);  			lane.GenerateCar ();  		}  	}  	// Move cars  	foreach (var lane in allLanes) {  		if (gameTime - lane.lastCarMove > lane.speedInterval) {  			lane.lastCarMove = gameTime;  			lane.UpdateCarPositions ();  		}  	}  	// Refresh console  	if (gameTime - lastRefresh > RefreshInterval) {  		lastRefresh = gameTime;  		RefreshConsole ();  		// Exit the game here and only after refresh  		if (gameState == GameState.RoadKill) {  			RoadKill ();  		}  		if (frog.Row == 0) {  			Sucess ();  		}  	}  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: while (true) {  	gameTime = gameClock.ElapsedMilliseconds;  	//Move player  	if (lanesPopulated) {  		if (Console.KeyAvailable) {  			frog.Move (Console.ReadKey (true).Key);  		}  	}  	else if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  		// At least one car from the fastest lane has crossed the middile of the gamefield  		lanesPopulated = true;  		while (Console.KeyAvailable)  			Console.ReadKey (true);  		// Flush the console buffer  	}  	// Generate new cars  	foreach (var lane in allLanes) {  		if (gameTime - lane.lastCarGenTime > lane.genCarInterval) {  			lane.lastCarGenTime = gameTime;  			lane.genCarInterval = rand.Next (lane.lowInterval' lane.highInterval);  			lane.GenerateCar ();  		}  	}  	// Move cars  	foreach (var lane in allLanes) {  		if (gameTime - lane.lastCarMove > lane.speedInterval) {  			lane.lastCarMove = gameTime;  			lane.UpdateCarPositions ();  		}  	}  	// Refresh console  	if (gameTime - lastRefresh > RefreshInterval) {  		lastRefresh = gameTime;  		RefreshConsole ();  		// Exit the game here and only after refresh  		if (gameState == GameState.RoadKill) {  			RoadKill ();  		}  		if (frog.Row == 0) {  			Sucess ();  		}  	}  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: if (lanesPopulated) {  	if (Console.KeyAvailable) {  		frog.Move (Console.ReadKey (true).Key);  	}  }  else if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  	// At least one car from the fastest lane has crossed the middile of the gamefield  	lanesPopulated = true;  	while (Console.KeyAvailable)  		Console.ReadKey (true);  	// Flush the console buffer  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: if (lanesPopulated) {  	if (Console.KeyAvailable) {  		frog.Move (Console.ReadKey (true).Key);  	}  }  else if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  	// At least one car from the fastest lane has crossed the middile of the gamefield  	lanesPopulated = true;  	while (Console.KeyAvailable)  		Console.ReadKey (true);  	// Flush the console buffer  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: if (lanesPopulated) {  	if (Console.KeyAvailable) {  		frog.Move (Console.ReadKey (true).Key);  	}  }  else if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  	// At least one car from the fastest lane has crossed the middile of the gamefield  	lanesPopulated = true;  	while (Console.KeyAvailable)  		Console.ReadKey (true);  	// Flush the console buffer  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  	// At least one car from the fastest lane has crossed the middile of the gamefield  	lanesPopulated = true;  	while (Console.KeyAvailable)  		Console.ReadKey (true);  	// Flush the console buffer  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  	// At least one car from the fastest lane has crossed the middile of the gamefield  	lanesPopulated = true;  	while (Console.KeyAvailable)  		Console.ReadKey (true);  	// Flush the console buffer  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,Main,The following statement contains a magic number: if (allLanes [3].cars.Count > 0 && allLanes [3].cars [0].col > RoadCols / 2) {  	// At least one car from the fastest lane has crossed the middile of the gamefield  	lanesPopulated = true;  	while (Console.KeyAvailable)  		Console.ReadKey (true);  	// Flush the console buffer  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,CreateLanes,The following statement contains a magic number: allLanes = new Lane[6];  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,CreateLanes,The following statement contains a magic number: for (; i < allLanes.Length / 2; i++' row += rowInterval' speed -= speedInterval) {  	allLanes [i] = new Lane (row' Direction.Left' speed);  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,PrintMessage,The following statement contains a magic number: if (ValidateCursorPosition (0' Console.WindowHeight - 2)) {  	// Delete the line  	Console.SetCursorPosition (0' Console.WindowHeight - 2);  	Console.WriteLine (new String (' '' Console.WindowWidth - 1));  	// Print the message  	Console.SetCursorPosition (0' Console.WindowHeight - 2);  	Console.WriteLine (message);  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,PrintMessage,The following statement contains a magic number: if (ValidateCursorPosition (0' Console.WindowHeight - 2)) {  	// Delete the line  	Console.SetCursorPosition (0' Console.WindowHeight - 2);  	Console.WriteLine (new String (' '' Console.WindowWidth - 1));  	// Print the message  	Console.SetCursorPosition (0' Console.WindowHeight - 2);  	Console.WriteLine (message);  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,PrintMessage,The following statement contains a magic number: if (ValidateCursorPosition (0' Console.WindowHeight - 2)) {  	// Delete the line  	Console.SetCursorPosition (0' Console.WindowHeight - 2);  	Console.WriteLine (new String (' '' Console.WindowWidth - 1));  	// Print the message  	Console.SetCursorPosition (0' Console.WindowHeight - 2);  	Console.WriteLine (message);  }  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,PrintMessage,The following statement contains a magic number: Console.SetCursorPosition (0' Console.WindowHeight - 2);  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,PrintMessage,The following statement contains a magic number: Console.SetCursorPosition (0' Console.WindowHeight - 2);  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,StartNewGame,The following statement contains a magic number: Console.SetCursorPosition (0' 15);  
Magic Number,FrogGame,FrogMain,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\FrogMain.cs,StartNewGame,The following statement contains a magic number: Console.SetCursorPosition (0' 18);  
Magic Number,FrogGame,Lane,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Lane.cs,Lane,The following statement contains a magic number: this.genCarInterval = (int)this.speedInterval * 50;  
Magic Number,FrogGame,Lane,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Lane.cs,Lane,The following statement contains a magic number: this.lowInterval = (int)(this.genCarInterval * 0.8);  
Magic Number,FrogGame,Lane,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Lane.cs,Lane,The following statement contains a magic number: this.highInterval = (int)(this.genCarInterval * 1.2);  
Missing Default,FrogGame,Frog,C:\repos\achoraev_Projects\TeamWorkC#2\FrogSolution\FrogGame\Frog.cs,Move,The following switch statement is missing a default case: switch (pressedKey) {  case ConsoleKey.UpArrow:  	if (this.Row >= JumpStep)  		this.Row -= JumpStep;  	break;  case ConsoleKey.DownArrow:  	if (this.Row < FrogMain.RoadRows - JumpStep)  		this.Row += JumpStep;  	break;  case ConsoleKey.LeftArrow:  	if (this.Col > 0)  		this.Col--;  	break;  case ConsoleKey.RightArrow:  	if (this.Col <= FrogMain.RoadCols - this.Width)  		this.Col++;  	break;  }  
