Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,CompilerCommandLine,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\CompilerCommandLine.cs,Process,The method has 164 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ConstructorExpression,The method has 151 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,ImportedMethod,The method has 276 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateExpression,The method has 431 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateStatement,The method has 273 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,Program,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Program.cs,Main,The method has 164 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitMemberwiseClone,The method has 136 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitConstructObjectAndInstanceMethods,The method has 107 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitEquals,The method has 131 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,CustomAttributeExpression,The method has 115 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,CollectMembers,The method has 112 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,PrefixName,The method has 102 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,IsImported,The method has 112 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendFinalImport,The method has 164 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendImport,The method has 304 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendFinalExport,The method has 126 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendExport,The method has 104 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MakeTypeRepresentation,The method has 384 lines of code.
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,EmitTypeBindings,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,EmitEntryPoint,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,EmitAssemblyBindings,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,CompileTypes,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,SetupTypes,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,Emit,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,InlinedMethodCache,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InlinedMethodCache.cs,PrimIsInlinable,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,CompilerCommandLine,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\CompilerCommandLine.cs,Process,Cyclomatic complexity of the method is 51
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,RuntimeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\RuntimeCompiler.cs,Emit,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,DefaultResolveType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimMethodCallExpression,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimVirtualMethodCallExpression,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,InitializerExpression,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ConstructorExpression,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ImportExpressionForType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ExportExpressionForType,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,AppendInvokeImportingConstructor,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,AppendCallExportedMethod,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,ImportedMethod,Cyclomatic complexity of the method is 41
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateCellReadWrite,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateCellAsPointer,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateExpression,Cyclomatic complexity of the method is 72
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateStatement,Cyclomatic complexity of the method is 48
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,NormalMethod,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,Emit,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,TypeHasAttribute,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,MethodHasAttribute,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromMethod,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,Program,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Program.cs,Main,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,Trace,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Traces.cs,Load,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitVirtualAndInterfaceMethodRedirectors,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitSetupType,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitMemberwiseClone,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitDefaultValue,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,ConstructObjectFunction,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitConstructObjectAndInstanceMethods,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitEquals,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitHash,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,TypeImporterFunction,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,TypeExporterFunction,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,CustomAttributeExpression,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,MemberInfoExpression,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompilerEnvironment.cs,BindUsage,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,CollectMembers,Cyclomatic complexity of the method is 24
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,EmitMethods,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,TypeMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,AddNames,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,ImplementableMemberDef,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,PrefixName,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,DefaultImportingConstructor,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MatchingImportingConstructor,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,IsImported,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendFinalImport,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendImport,Cyclomatic complexity of the method is 35
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendFinalExport,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendExport,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MakeTypeRepresentation,Cyclomatic complexity of the method is 58
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimMethodCallExpression,The method has 5 parameters. Parameters: resolver' nameSupply' calleeMethEnv' isFactory' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,DefaultMethodCallExpression,The method has 5 parameters. Parameters: resolver' nameSupply' methodRef' isFactory' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ConstructGenericEnumeratorAtDynamicType,The method has 5 parameters. Parameters: resolver' nameSupply' optBody' fallback' obj
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ConstructGenericEnumeratorAtStaticType,The method has 6 parameters. Parameters: resolver' nameSupply' optBody' fallback' elemType' obj
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimVirtualMethodCallExpression,The method has 5 parameters. Parameters: resolver' nameSupply' optBody' calleeMethEnv' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,DefaultVirtualMethodCallExpression,The method has 5 parameters. Parameters: resolver' nameSupply' optBody' methodRef' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ConstructorExpression,The method has 6 parameters. Parameters: resolver' nameSupply' optBody' optLvalue' methodRef' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,AppendInvokeImportingConstructor,The method has 5 parameters. Parameters: resolver' nameSupply' parameters' body' unmanagedObjId
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,AppendCallExportedMethod,The method has 7 parameters. Parameters: resolver' nameSupply' assemblyDef' typeDef' methodDef' body' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateCellReadWrite,The method has 5 parameters. Parameters: methCompEnv' optBody' ignoreResult' cell' mkRexp
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateCall,The method has 5 parameters. Parameters: methCompEnv' optBody' callFlavor' methodRef' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateExpression,The method has 5 parameters. Parameters: methCompEnv' optBody' optLvalue' ignoreResult' expr
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,TypeHasAttribute,The method has 5 parameters. Parameters: assemblyDef' typeDef' attrType' inheritLexically' inheritSupertypes
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,FieldHasAttribute,The method has 6 parameters. Parameters: assemblyDef' typeDef' fieldDef' attrType' inheritLexically' inheritSupertypes
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,PropertyHasAttribute,The method has 6 parameters. Parameters: assemblyDef' typeDef' propDef' attrType' inheritLexically' inheritSupertypes
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,EventHasAttribute,The method has 6 parameters. Parameters: assemblyDef' typeDef' eventDef' attrType' inheritLexically' inheritSupertypes
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,MethodHasAttribute,The method has 6 parameters. Parameters: assemblyDef' typeDef' methodDef' attrType' inheritLexically' inheritSupertypes
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ParameterHasAttribute,The method has 7 parameters. Parameters: assemblyDef' typeDef' methodDef' idx' attrType' inheritLexically' inheritSupertypes
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ResultHasAttribute,The method has 6 parameters. Parameters: assemblyDef' typeDef' methodDef' attrType' inheritLexically' inheritSupertypes
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValue,The method has 5 parameters. Parameters: ctxt' attr' attrType' property' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValue,The method has 5 parameters. Parameters: ctxt' attrs' attrType' property' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromAssembly,The method has 6 parameters. Parameters: assemblyDef' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromType,The method has 7 parameters. Parameters: assemblyDef' typeDef' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromField,The method has 8 parameters. Parameters: assemblyDef' typeDef' fieldDef' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromProperty,The method has 8 parameters. Parameters: assemblyDef' typeDef' propDef' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromEvent,The method has 8 parameters. Parameters: assemblyDef' typeDef' eventDef' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromMethod,The method has 8 parameters. Parameters: assemblyDef' typeDef' methodDef' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromParameter,The method has 9 parameters. Parameters: assemblyDef' typeDef' methodDef' idx' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,GetValueFromResult,The method has 8 parameters. Parameters: assemblyDef' typeDef' methodDef' attrType' property' inheritLexically' inheritSupertypes' value
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompilerEnvironment.cs,MethodCompilerEnvironment,The method has 19 parameters. Parameters: global' skolemDefs' assembly' type' typeBoundArguments' method' methodBoundArguments' variables' valueParameterIds' localIds' env' nameSupply' rootId' assemblyId' typeDefinitionId' methodId' typeBoundTypeParameterIds' methodBoundTypeParameterIds' typeTrace
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompilerEnvironment.cs,EnterUntranslatedMethod,The method has 8 parameters. Parameters: env' outerNameSupply' nameSupply' rootId' assemblyId' typeDefinitonId' methEnv' typeTrace
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompilerEnvironment.cs,EnterMethod,The method has 8 parameters. Parameters: env' outerNameSupply' nameSupply' rootId' assemblyId' typeDefinitonId' compEnv' typeTrace
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompilerEnvironment.cs,BindMap,The method has 5 parameters. Parameters: statements' usageMap' boundMap' mkName' mkExpression
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompilerEnvironment.cs,TypeCompilerEnvironment,The method has 12 parameters. Parameters: global' skolemDefs' assembly' type' typeBoundArguments' env' nameSupply' rootId' assemblyId' typeId' typeBoundTypeParameterIds' typeTrace
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompilerEnvironment.cs,EnterType,The method has 7 parameters. Parameters: env' nameSupply' rootId' assemblyId' typeId' typeEnv' typeTrace
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,EmitMethods,The method has 5 parameters. Parameters: body' lhs' outerNameSupply' target' isStatic
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,TypeMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,AddNames,The method has 7 parameters. Parameters: env' assemblyDef' typeDef' methodSlots' fieldSlots' eventSlots' propSlots
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,ImplementableInstruction,The method has 5 parameters. Parameters: ctxt' assemblyDef' typeDef' methodDef' instruction
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,TypeRepresentation,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,TypeRepresentation,The method has 6 parameters. Parameters: state' numExportsBoundToInstance' numStepsToRootType' keyField' typeClassifier' undefininedIsNotNull
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,GetterSetterAdderRemoverNameFromMethod,The method has 5 parameters. Parameters: assemblyDef' typeDef' methodDef' prefix' script
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,GetterSetterAdderRemoverNameFromPropertyEvent,The method has 5 parameters. Parameters: assemblyDef' typeDef' methodDef' prefix' script
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,PrefixName,The method has 5 parameters. Parameters: assemblyDef' typeDef' methodDef' script' isExport
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendFinalImport,The method has 8 parameters. Parameters: nameSupply' rootId' assemblyDef' typeDef' methodDef' script' body' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendImport,The method has 7 parameters. Parameters: nameSupply' rootId' assemblyDef' typeDef' methodDef' body' arguments
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendFinalExport,The method has 9 parameters. Parameters: nameSupply' rootId' assemblyDef' typeDef' methodDef' script' instance' body' appendCallExported
Long Parameter List,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,AppendExport,The method has 8 parameters. Parameters: nameSupply' rootId' assemblyDef' typeDef' methodDef' instance' body' appendCallExported
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter GenericEnumeratorTypeConstructorName is 36.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootAssertNonNullInvalidOperation is 33.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootBindInterfaceMethodToNonVirtual is 35.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootBindInterfaceMethodToVirtual is 32.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootIEnumerableTypeConstructor is 30.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootInheritPrototypeProperties is 30.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootCollectingBindMethodBuilder is 31.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootBindFKToHKMethodRedirectors is 31.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootNewStrictPointerToArrayElem is 31.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootNewPointerToMultiDimArrayElem is 33.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootManagedAndJavaScriptImporter is 32.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter RootManagedAndJavaScriptExporter is 32.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Constants.cs,,The length of the parameter TypeReflectionCustomAttributes is 30.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,,The length of the parameter TheRemoveAccessorPrefixProperty is 31.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,,The length of the parameter TheRemoveAccessorUnderscoreProperty is 35.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,,The length of the parameter ThePassInstanceAsArgumentProperty is 33.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,,The length of the parameter TheSimulateMulticastEventsProperty is 34.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS,CompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\CompilerEnvironment.cs,,The length of the parameter GenericEnumeratorTypeConstructorRef is 35.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MakeTypeRepresentation,The length of the parameter numInstanceFieldsAllSupertypes is 30.
Long Identifier,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MakeTypeRepresentation,The length of the parameter numExportsBoundToInstanceNonRuntime is 35.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,Emit,The length of the statement  "                var assmFunc = new JST.FunctionExpression(new Seq<JST.Identifier> { rootId' assemblyId }' new JST.Statements(assmBody)); " is 120.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,ConstructGenericEnumeratorAtDynamicType,The length of the statement  "            var ctorRef = new CST.PolymorphicMethodRef(env.GenericEnumeratorTypeConstructorRef' ".ctor"' false' 0' new Seq<CST.TypeRef> { selfGenericEnumeratorRef' selfArrayRef }' null); " is 174.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,BoxExpressionForType,The length of the statement  "                return JST.Expression.DotCall(resolver.RootId.ToE()' Constants.RootNewPointerToValue' obj' resolver.ResolveType(typeRef' TypePhase.Id)); " is 136.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,StringIsTrue,The length of the statement  "            return new JST.BinaryExpression(e' JST.BinaryOp.LogicalOR' new JST.BinaryExpression(e' JST.BinaryOp.StrictEquals' new JST.StringLiteral(""))); " is 142.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateStatement,The length of the statement  "                        var els = ites.Else == null ? default(JST.Statements) : new JST.Statements(TranslateStatements(methCompEnv' ites.Else)); " is 120.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,Emit,The length of the statement  "                env.AttributeHelper.MethodHasAttribute(methEnv.Assembly' methEnv.Type' methEnv.Method' env.AttributeHelper.BreakAttributeRef' false' false)) " is 140.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ParseScript,The length of the statement  "                env.Log(new InvalidInteropMessage(new MessageContext(ctxt' e.Loc' null)' "syntax error in " + e.Context + ": " + e.Details)); " is 125.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,Program,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Program.cs,Main,The length of the statement  "                if (env.CompilationMode == CompilationMode.Traced && env.TraceFileNames.Count == 0 && string.IsNullOrEmpty(env.FinalTraceName)) " is 127.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,Program,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Program.cs,Main,The length of the statement  "                    env.Log(new UsageMessage("'-mode traced' must be accompanied by at least on of '-trace' or '-finalTraceName' options.")); " is 121.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitVirtualAndInterfaceMethodRedirectors,The length of the statement  "                    var virtSlotName = Env.GlobalMapping.ResolveMethodDefToSlot(virtPolyMethEnv.Assembly' virtPolyMethEnv.Type' virtPolyMethEnv.Method); " is 132.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitVirtualAndInterfaceMethodRedirectors,The length of the statement  "                    var implSlotName = Env.GlobalMapping.ResolveMethodDefToSlot(implPolyMethEnv.Assembly' implPolyMethEnv.Type' implPolyMethEnv.Method); " is 132.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitConstructObjectAndInstanceMethods,The length of the statement  "            else if (s is CST.InterfaceTypeStyle || s is CST.VoidTypeStyle || (TypeCompEnv.Type.IsAbstract && TypeCompEnv.Type.IsSealed)) " is 125.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitIsValidJavaScriptType,The length of the statement  "            if (s is CST.StringTypeStyle || s is CST.NumberTypeStyle || s is CST.EnumTypeStyle || TypeCompEnv.TypeRef.Equals(Env.Global.DecimalRef)) " is 136.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,Identity,The length of the statement  "            return new JST.FunctionExpression(new Seq<JST.Identifier> { id }' new JST.Statements(new JST.ReturnStatement(id.ToE()))); " is 121.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,CustomAttributeExpression,The length of the statement  "                                            setMethodDef.Arity == 2 && !Env.InlinedMethods.IsInlinable(innerTypeCompEnv.Assembly' innerTypeCompEnv.Type' setMethodDef)) " is 123.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,PropertyInfoFromProperty,The length of the statement  "                 propDef.Get == null || !sharedMethodInfos.ContainsKey(propDef.Get) ? (JST.Expression)new JST.NullExpression() : sharedMethodInfos[propDef.Get].ToE()' " is 149.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,PropertyInfoFromProperty,The length of the statement  "                 propDef.Set == null || !sharedMethodInfos.ContainsKey(propDef.Set) ? (JST.Expression)new JST.NullExpression() : sharedMethodInfos[propDef.Set].ToE()); " is 150.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompilerEnvironment.cs,BindBaseTypes,The length of the statement  "                        boundTypes.Add(baseTypeEnv.TypeConstructorRef' new ExpressionAndPhase(JST.Expression.Dot(baseType' Constants.TypeApplicand)' TypePhase.Slots)); " is 143.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompilerEnvironment.cs,BindSpecial,The length of the statement  "                    (TypeConstructorRef' new ExpressionAndPhase(JST.Expression.Dot(typeId.ToE()' Constants.TypeApplicand)' TypePhase.Constructed)); " is 127.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompilerEnvironment.cs,BindSpecial,The length of the statement  "                boundTypes.Add(TypeBoundArguments[i]' new ExpressionAndPhase(TypeBoundTypeParameterIds[i].ToE()' TypePhase.Constructed)); " is 121.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,CollectMembers,The length of the statement  "                    else if (!Env.Validity.IsMustHaveADefinition(methodDef.QualifiedMemberName(Env.Global' TyconEnv.Assembly' TyconEnv.Type)) && " is 124.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,Emit,The length of the statement  "                Env.AttributeHelper.TypeHasAttribute(TyconEnv.Assembly' TyconEnv.Type' Env.AttributeHelper.BreakAttributeRef' false' false)) " is 124.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,FieldAlwaysUsed,The length of the statement  "            if (env.AttributeHelper.FieldHasAttribute(assemblyDef' typeDef' fieldDef' env.Global.CompilerGeneratedAttributeRef' false)) " is 123.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,FieldAlwaysUsed,The length of the statement  "            if (env.AttributeHelper.FieldHasAttribute(assemblyDef' typeDef' fieldDef' env.AttributeHelper.IgnoreAttributeRef' true' true)) " is 126.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,FieldAlwaysUsed,The length of the statement  "            env.AttributeHelper.GetValueFromField(assemblyDef' typeDef' fieldDef' env.AttributeHelper.UsedAttributeRef' env.AttributeHelper.TheIsUsedProperty' true' false' ref isUsed); " is 172.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,MethodAlwaysUsed,The length of the statement  "            if (env.AttributeHelper.MethodHasAttribute(assemblyDef' typeDef' methodDef' env.Global.CompilerGeneratedAttributeRef' false)) " is 125.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,IgnoreMethodDefBody,The length of the statement  "            return env.AttributeHelper.MethodHasAttribute(assemblyDef' typeDef' methodDef' env.AttributeHelper.InteropGeneratedAttributeRef' false' false); " is 143.
Long Statement,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MakeTypeRepresentation,The length of the statement  "                              "a type with state 'JavaScriptOnly' type cannot contain managed instance fields' either directly or inherited from supertypes")); " is 129.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimMethodCallExpression,The conditional expression  "s is CST.ObjectTypeStyle && !calleeMethEnv.Method.IsStatic &&                  calleeMethEnv.Method.Name.Equals(".ctor"' StringComparison.Ordinal) && calleeMethEnv.Method.Arity == 1"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimMethodCallExpression,The conditional expression  "s is CST.NullableTypeStyle && !calleeMethEnv.Method.IsStatic &&                       calleeMethEnv.Method.Name.Equals(".ctor"' StringComparison.Ordinal) &&                       calleeMethEnv.Method.Arity == 2"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimVirtualMethodCallExpression,The conditional expression  "calleeMethEnv.TypeRef.Equals(env.Global.ArrayRef) &&                       calleeMethEnv.Method.Name.Equals("GetEnumerator"' StringComparison.Ordinal) &&                       calleeMethEnv.Method.Arity == 1 && calleeMethEnv.Method.TypeArity == 0"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimVirtualMethodCallExpression,The conditional expression  "calleeMethEnv.TypeRef.Equals(env.Global.IEnumerableRef) &&                       calleeMethEnv.Method.Name.Equals("GetEnumerator"' StringComparison.Ordinal) &&                       calleeMethEnv.Method.Arity == 1 && calleeMethEnv.Method.TypeArity == 0"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PrimVirtualMethodCallExpression,The conditional expression  "calleeMethEnv.TypeConstructorRef.Equals(env.Global.IEnumerableTypeConstructorRef) &&                       calleeMethEnv.Method.Name.Equals("GetEnumerator"' StringComparison.Ordinal) &&                       calleeMethEnv.Method.Arity == 1 && calleeMethEnv.Method.TypeArity == 0"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,TranslateConditionalExpression,The conditional expression  "s is CST.ObjectTypeStyle || s is CST.StringTypeStyle || s is CST.ParameterTypeStyle || s is CST.NullTypeStyle"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitConstructObjectAndInstanceMethods,The conditional expression  "s is CST.InterfaceTypeStyle || s is CST.VoidTypeStyle || (TypeCompEnv.Type.IsAbstract && TypeCompEnv.Type.IsSealed)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitIsValidJavaScriptType,The conditional expression  "s is CST.StringTypeStyle || s is CST.NumberTypeStyle || s is CST.EnumTypeStyle || TypeCompEnv.TypeRef.Equals(Env.Global.DecimalRef)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,CustomAttributeExpression,The conditional expression  "setMethodDef != null && setMethodDef.Invalid == null && setMethodDef.IsUsed &&                                              setMethodDef.Arity == 2 && !Env.InlinedMethods.IsInlinable(innerTypeCompEnv.Assembly' innerTypeCompEnv.Type' setMethodDef)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,CollectMembers,The conditional expression  "state != InstanceState.JavaScriptOnly && state != InstanceState.ManagedAndJavaScript &&                               !methodDef.IsStatic && methodDef.IsConstructor && methodDef.Arity > 1 &&                               methodDef.ValueParameters[1].Equals(Env.JSContextRef)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,CollectMembers,The conditional expression  "!methodDef.IsStatic && methodDef.IsConstructor && methodDef.Arity == 1 &&                                   !Env.InteropManager.IsFactory(TyconEnv.Assembly' TyconEnv.Type' methodDef)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS,ValidityContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Validity.cs,PropogateExtraUsedFromMember,The conditional expression  "!methodDef.IsStatic && methodDef.IsConstructor &&                      env.InteropManager.IsImported(assemblyDef' typeDef' methodDef) &&                      !env.InteropManager.IsFactory(assemblyDef' typeDef' methodDef)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,PrefixName,The conditional expression  "script == null && !methodDef.IsStatic && methodDef.IsConstructor && qual == Qualification.None"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,PrefixName,The conditional expression  "isExport && !isNonInstance && !isProto && qual != Qualification.None"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,PrefixName,The conditional expression  "isExport && !isNonInstance && isProto && qual == Qualification.None"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,IsExported,The conditional expression  "!methodDef.IsStatic && methodDef.IsConstructor && methodDef.Arity > 1 &&                  methodDef.ValueParameters[1].Type.Equals(env.JSContextRef)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MakeTypeRepresentation,The conditional expression  "s is CST.PointerTypeStyle || s is CST.CodePointerTypeStyle || s is CST.NullableTypeStyle ||                  s is CST.ArrayTypeStyle || s is CST.ValueTypeStyle || s is CST.DelegateTypeStyle ||                  s is CST.InterfaceTypeStyle"  is complex.
Virtual Method Call from Constructor,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,AssemblyMapping,The constructor "AssemblyMapping" calls a virtual method "EffectiveName".
Empty Catch Block,Microsoft.LiveLabs.JavaScript.IL2JS,Program,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\Program.cs,Main,The method has an empty catch block.
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,EmitTypeBindings,The following statement contains a magic number: switch (Env.CompilationMode)              {                  case CompilationMode.Plain:                  case CompilationMode.Collecting:                  {                      if (Env.DebugMode)                          body.Add(new JST.CommentStatement("Type builders"));                      var args = new Seq<JST.Expression>();                      args.Add(assemblyId.ToE());                      args.Add(new JST.NullExpression());                      foreach (var typeDef in typeDefs)                      {                          var slotName = Env.GlobalMapping.ResolveTypeDefToSlot(assmEnv.Assembly' typeDef);                          var typeName = CST.CSTWriter.WithAppend                              (Env.Global' CST.WriterStyle.Uniform' typeDef.EffectiveName(Env.Global).Append);                          args.Add(new JST.StringLiteral(slotName));                          args.Add(new JST.StringLiteral(typeName));                      }                      if (args.Count > 2)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindTypeBuilders' args));                      break;                  }              case CompilationMode.Traced:                  {                      // Types in the initial trace' this trace' or remainder trace are bound via builder with                      // null trace name. All other types are bound via builder with their containing trace name.                      var traceToArgs = new Map<string' Seq<JST.Expression>>();                      var remainingArgs = new Seq<JST.Expression>();                      remainingArgs.Add(assemblyId.ToE());                      remainingArgs.Add(new JST.NullExpression());                      foreach (var typeDef in typeDefs)                      {                          var typeName = CST.CSTWriter.WithAppend                              (Env.Global' CST.WriterStyle.Uniform' typeDef.EffectiveName(Env.Global).Append);                          var slotName = Env.GlobalMapping.ResolveTypeDefToSlot(assmEnv.Assembly' typeDef);                          var defTrace = Env.Traces.TypeToTrace[typeDef.QualifiedTypeName(Env.Global' assmEnv.Assembly)];                          if (defTrace.Flavor == TraceFlavor.OnDemand && defTrace != assemblyTrace.Parent)                          {                              var args = default(Seq<JST.Expression>);                              if (!traceToArgs.TryGetValue(defTrace.Name' out args))                              {                                  args = new Seq<JST.Expression>();                                  args.Add(assemblyId.ToE());                                  args.Add(new JST.StringLiteral(defTrace.Name));                                  traceToArgs.Add(defTrace.Name' args);                              }                              args.Add(new JST.StringLiteral(slotName));                              args.Add(new JST.StringLiteral(typeName));                          }                          else                          {                              remainingArgs.Add(new JST.StringLiteral(slotName));                              remainingArgs.Add(new JST.StringLiteral(typeName));                          }                      }                      foreach (var kv in traceToArgs)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindTypeBuilders' kv.Value));                      if (remainingArgs.Count > 2)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindTypeBuilders' remainingArgs));                      break;                  }              default:                  throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,EmitTypeBindings,The following statement contains a magic number: switch (Env.CompilationMode)              {                  case CompilationMode.Plain:                  case CompilationMode.Collecting:                  {                      if (Env.DebugMode)                          body.Add(new JST.CommentStatement("Type builders"));                      var args = new Seq<JST.Expression>();                      args.Add(assemblyId.ToE());                      args.Add(new JST.NullExpression());                      foreach (var typeDef in typeDefs)                      {                          var slotName = Env.GlobalMapping.ResolveTypeDefToSlot(assmEnv.Assembly' typeDef);                          var typeName = CST.CSTWriter.WithAppend                              (Env.Global' CST.WriterStyle.Uniform' typeDef.EffectiveName(Env.Global).Append);                          args.Add(new JST.StringLiteral(slotName));                          args.Add(new JST.StringLiteral(typeName));                      }                      if (args.Count > 2)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindTypeBuilders' args));                      break;                  }              case CompilationMode.Traced:                  {                      // Types in the initial trace' this trace' or remainder trace are bound via builder with                      // null trace name. All other types are bound via builder with their containing trace name.                      var traceToArgs = new Map<string' Seq<JST.Expression>>();                      var remainingArgs = new Seq<JST.Expression>();                      remainingArgs.Add(assemblyId.ToE());                      remainingArgs.Add(new JST.NullExpression());                      foreach (var typeDef in typeDefs)                      {                          var typeName = CST.CSTWriter.WithAppend                              (Env.Global' CST.WriterStyle.Uniform' typeDef.EffectiveName(Env.Global).Append);                          var slotName = Env.GlobalMapping.ResolveTypeDefToSlot(assmEnv.Assembly' typeDef);                          var defTrace = Env.Traces.TypeToTrace[typeDef.QualifiedTypeName(Env.Global' assmEnv.Assembly)];                          if (defTrace.Flavor == TraceFlavor.OnDemand && defTrace != assemblyTrace.Parent)                          {                              var args = default(Seq<JST.Expression>);                              if (!traceToArgs.TryGetValue(defTrace.Name' out args))                              {                                  args = new Seq<JST.Expression>();                                  args.Add(assemblyId.ToE());                                  args.Add(new JST.StringLiteral(defTrace.Name));                                  traceToArgs.Add(defTrace.Name' args);                              }                              args.Add(new JST.StringLiteral(slotName));                              args.Add(new JST.StringLiteral(typeName));                          }                          else                          {                              remainingArgs.Add(new JST.StringLiteral(slotName));                              remainingArgs.Add(new JST.StringLiteral(typeName));                          }                      }                      foreach (var kv in traceToArgs)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindTypeBuilders' kv.Value));                      if (remainingArgs.Count > 2)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindTypeBuilders' remainingArgs));                      break;                  }              default:                  throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,EmitAssemblyBindings,The following statement contains a magic number: switch (Env.CompilationMode)              {              case CompilationMode.Plain:              case CompilationMode.Collecting:                  {                      if (Env.DebugMode)                          body.Add(new JST.CommentStatement("Referenced assemblies"));                      var args = new Seq<JST.Expression>();                      args.Add(assemblyId.ToE());                      args.Add(new JST.NullExpression());                      foreach (var nm in assmEnv.AllAssembliesInLoadOrder())                      {                          if (!nm.Equals(Env.Global.MsCorLibName) && !nm.Equals(assmEnv.Assembly.Name))                          {                              var assmName = CST.CSTWriter.WithAppend(Env.Global' CST.WriterStyle.Uniform' nm.Append);                              var slotName = Env.GlobalMapping.ResolveAssemblyReferenceToSlot(assmEnv.Assembly' nm);                              args.Add(new JST.StringLiteral(slotName));                              args.Add(new JST.StringLiteral(assmName));                          }                          // else: don't need ref to mscorlib or self                      }                      if (args.Count > 2)                          body.Add                              (JST.Statement.DotCall(rootId.ToE()' Constants.RootBindAssemblyBuilders' args));                      break;                  }              case CompilationMode.Traced:                  {                      // Assemblies in the initial trace' this trace' or the remainder trace are bound via a builder                      // which is given the null trace name. All other assemblies are bound by a builder given their                      // containing trace name.                      var traceToArgs = new Map<string' Seq<JST.Expression>>();                      var remainingArgs = new Seq<JST.Expression>();                      remainingArgs.Add(assemblyId.ToE());                      remainingArgs.Add(new JST.NullExpression());                      foreach (var nm in assmEnv.AllAssembliesInLoadOrder())                      {                          if (!nm.Equals(Env.Global.MsCorLibName) && !nm.Equals(assmEnv.Assembly.Name))                          {                              var assmName = CST.CSTWriter.WithAppend(Env.Global' CST.WriterStyle.Uniform' nm.Append);                              var slotName = Env.GlobalMapping.ResolveAssemblyReferenceToSlot(assmEnv.Assembly' nm);                              var defTrace = Env.Traces.AssemblyToTrace[nm];                              if (defTrace.Flavor == TraceFlavor.OnDemand && defTrace != assemblyTrace.Parent)                              {                                  var args = default(Seq<JST.Expression>);                                  if (!traceToArgs.TryGetValue(defTrace.Name' out args))                                  {                                      args = new Seq<JST.Expression>();                                      args.Add(assemblyId.ToE());                                      args.Add(new JST.StringLiteral(defTrace.Name));                                      traceToArgs.Add(defTrace.Name' args);                                  }                                  args.Add(new JST.StringLiteral(slotName));                                  args.Add(new JST.StringLiteral(assmName));                              }                              else                              {                                  remainingArgs.Add(new JST.StringLiteral(slotName));                                  remainingArgs.Add(new JST.StringLiteral(assmName));                              }                          }                          // else: don't need ref to mscorlib or self                      }                      foreach (var kv in traceToArgs)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindAssemblyBuilders' kv.Value));                      if (remainingArgs.Count > 2)                          body.Add                              (JST.Statement.DotCall(rootId.ToE()' Constants.RootBindAssemblyBuilders' remainingArgs));                      break;                  }              default:                  throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AssemblyCompiler.cs,EmitAssemblyBindings,The following statement contains a magic number: switch (Env.CompilationMode)              {              case CompilationMode.Plain:              case CompilationMode.Collecting:                  {                      if (Env.DebugMode)                          body.Add(new JST.CommentStatement("Referenced assemblies"));                      var args = new Seq<JST.Expression>();                      args.Add(assemblyId.ToE());                      args.Add(new JST.NullExpression());                      foreach (var nm in assmEnv.AllAssembliesInLoadOrder())                      {                          if (!nm.Equals(Env.Global.MsCorLibName) && !nm.Equals(assmEnv.Assembly.Name))                          {                              var assmName = CST.CSTWriter.WithAppend(Env.Global' CST.WriterStyle.Uniform' nm.Append);                              var slotName = Env.GlobalMapping.ResolveAssemblyReferenceToSlot(assmEnv.Assembly' nm);                              args.Add(new JST.StringLiteral(slotName));                              args.Add(new JST.StringLiteral(assmName));                          }                          // else: don't need ref to mscorlib or self                      }                      if (args.Count > 2)                          body.Add                              (JST.Statement.DotCall(rootId.ToE()' Constants.RootBindAssemblyBuilders' args));                      break;                  }              case CompilationMode.Traced:                  {                      // Assemblies in the initial trace' this trace' or the remainder trace are bound via a builder                      // which is given the null trace name. All other assemblies are bound by a builder given their                      // containing trace name.                      var traceToArgs = new Map<string' Seq<JST.Expression>>();                      var remainingArgs = new Seq<JST.Expression>();                      remainingArgs.Add(assemblyId.ToE());                      remainingArgs.Add(new JST.NullExpression());                      foreach (var nm in assmEnv.AllAssembliesInLoadOrder())                      {                          if (!nm.Equals(Env.Global.MsCorLibName) && !nm.Equals(assmEnv.Assembly.Name))                          {                              var assmName = CST.CSTWriter.WithAppend(Env.Global' CST.WriterStyle.Uniform' nm.Append);                              var slotName = Env.GlobalMapping.ResolveAssemblyReferenceToSlot(assmEnv.Assembly' nm);                              var defTrace = Env.Traces.AssemblyToTrace[nm];                              if (defTrace.Flavor == TraceFlavor.OnDemand && defTrace != assemblyTrace.Parent)                              {                                  var args = default(Seq<JST.Expression>);                                  if (!traceToArgs.TryGetValue(defTrace.Name' out args))                                  {                                      args = new Seq<JST.Expression>();                                      args.Add(assemblyId.ToE());                                      args.Add(new JST.StringLiteral(defTrace.Name));                                      traceToArgs.Add(defTrace.Name' args);                                  }                                  args.Add(new JST.StringLiteral(slotName));                                  args.Add(new JST.StringLiteral(assmName));                              }                              else                              {                                  remainingArgs.Add(new JST.StringLiteral(slotName));                                  remainingArgs.Add(new JST.StringLiteral(assmName));                              }                          }                          // else: don't need ref to mscorlib or self                      }                      foreach (var kv in traceToArgs)                          body.Add(JST.Statement.DotCall(rootId.ToE()' Constants.RootBindAssemblyBuilders' kv.Value));                      if (remainingArgs.Count > 2)                          body.Add                              (JST.Statement.DotCall(rootId.ToE()' Constants.RootBindAssemblyBuilders' remainingArgs));                      break;                  }              default:                  throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PhaseExpression,The following statement contains a magic number: switch (phase)              {                  case TypePhase.Id:                      return new JST.NumericLiteral(1);                  case TypePhase.Slots:                      return new JST.NumericLiteral(2);                  case TypePhase.Constructed:                      return new JST.NumericLiteral(3);                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,JSTHelpers,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\JSTHelpers.cs,PhaseExpression,The following statement contains a magic number: switch (phase)              {                  case TypePhase.Id:                      return new JST.NumericLiteral(1);                  case TypePhase.Slots:                      return new JST.NumericLiteral(2);                  case TypePhase.Constructed:                      return new JST.NumericLiteral(3);                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,MethodCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\MethodCompiler.cs,HandlerLiteral,The following statement contains a magic number: switch (handler.Flavor)              {                  case CST.HandlerFlavor.Catch:                  {                      var catchh = (CST.CatchTryPseudoStatementHandler)handler;                      var exid = nameSupply.GenSym();                      var type = methCompEnv.ResolveType(catchh.ExceptionType);                      var match = JST.Expression.IsNotNull                          (JST.Expression.DotCall(rootId.ToE()' Constants.RootIsInst' exid.ToE()' type));                      var pred = new JST.FunctionExpression                          (new Seq<JST.Identifier> { exid }'                           new JST.Statements                               (new JST.IfStatement                                    (match'                                     new JST.Statements                                         (JST.Statement.Assignment(catchh.ExceptionId.ToE()' exid.ToE())'                                          new JST.ReturnStatement(new JST.BooleanLiteral(true)))'                                     new JST.Statements(new JST.ReturnStatement(new JST.BooleanLiteral(false))))));                      return new JST.ObjectLiteral                          (new OrdMap<JST.Identifier' JST.Expression>                           {                               { Constants.HandlerStyle' new JST.NumericLiteral(0) }'                               { Constants.HandlerTarget' new JST.NumericLiteral(catchh.HandlerId) }'                               { Constants.HandlerPred' pred }                           });                  }                  case CST.HandlerFlavor.Fault:                      return new JST.ObjectLiteral                          (new OrdMap<JST.Identifier' JST.Expression>                           {                               { Constants.HandlerStyle' new JST.NumericLiteral(1) }'                               { Constants.HandlerTarget' new JST.NumericLiteral(handler.HandlerId) }                           });                  case CST.HandlerFlavor.Finally:                      return new JST.ObjectLiteral                          (new OrdMap<JST.Identifier' JST.Expression>                           {                               { Constants.HandlerStyle' new JST.NumericLiteral(2) }'                               { Constants.HandlerTarget' new JST.NumericLiteral(handler.HandlerId) }                           });                  case CST.HandlerFlavor.Filter:                      throw new InvalidOperationException("filter blocks not supported");                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ParseCreation,The following statement contains a magic number: oi == null || oi.Value < 0 || oi.Value > 2
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ParseQualification,The following statement contains a magic number: oi == null || oi.Value < 0 || oi.Value > 4
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ParseCasing,The following statement contains a magic number: oi == null || oi.Value < 0 || oi.Value > 2
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ParseInstanceState,The following statement contains a magic number: oi == null || oi.Value < 0 || oi.Value > 3
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AttributeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\AttributeHelper.cs,ParseReflectionLevel,The following statement contains a magic number: oi == null || oi.Value < 0 || oi.Value > 2
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitVirtualAndInterfaceMethodRedirectors,The following statement contains a magic number: defaultArgs.Count > 2
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitFKToHKMethodRedirectors,The following statement contains a magic number: args.Count > 2
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,EmitMemberwiseClone,The following statement contains a magic number: trivFields.Count < 3
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeCompiler.cs,CustomAttributeExpression,The following statement contains a magic number: switch (memberDef.Flavor)                      {                          case CST.MemberDefFlavor.Field:                              {                                  var fieldDef = (CST.FieldDef)memberDef;                                  if (fieldDef.Invalid == null && fieldDef.IsUsed)                                  {                                      var t = attrTypeEnv.SubstituteType(fieldDef.FieldType);                                      var o = kv.Value;                                      var e = Env.JSTHelpers.InitializerExpression(innerTypeCompEnv' ctxt' o' t);                                      var slot = Env.GlobalMapping.ResolveFieldDefToSlot                                          (attrTypeEnv.Assembly' attrTypeEnv.Type' fieldDef);                                      stmnt = JST.Statement.DotAssignment                                          (id.ToE()' new JST.Identifier(Constants.ObjectInstanceFieldSlot(slot))' e);                                  }                                  break;                              }                          case CST.MemberDefFlavor.Property:                              {                                  var propDef = (CST.PropertyDef)memberDef;                                  if (propDef.Invalid == null)                                  {                                      var t = attrTypeEnv.SubstituteType(propDef.FieldType);                                      var o = kv.Value;                                      var e = Env.JSTHelpers.InitializerExpression(innerTypeCompEnv' ctxt' o' t);                                      if (propDef.Set != null)                                      {                                          var setMethodDef = attrTypeEnv.Type.ResolveMethod(propDef.Set);                                          if (setMethodDef != null && setMethodDef.Invalid == null && setMethodDef.IsUsed &&                                              setMethodDef.Arity == 2 && !Env.InlinedMethods.IsInlinable(innerTypeCompEnv.Assembly' innerTypeCompEnv.Type' setMethodDef))                                          {                                              var setMethodRef = new CST.MethodRef                                                  (attr.Type' setMethodDef.MethodSignature' null);                                              stmnt = new JST.ExpressionStatement                                                  (innerTypeCompEnv.MethodCallExpression                                                       (setMethodRef'                                                        innerTypeCompEnv.NameSupply'                                                        false'                                                        new Seq<JST.Expression>(id.ToE()' e)));                                          }                                      }                                  }                                  break;                              }                          case CST.MemberDefFlavor.Method:                          case CST.MemberDefFlavor.Event:                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeDefinitionCompiler,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\TypeDefinitionCompiler.cs,EmitMethods,The following statement contains a magic number: switch (Env.CompilationMode)              {                  case CompilationMode.Plain:                  {                      // Method definitions are bound directly into target                      foreach (var methodDef in Methods.Where(m => m.Invalid == null))                      {                          if (Env.InteropManager.IsStatic(TyconEnv.Assembly' TyconEnv.Type' methodDef) == isStatic)                          {                              var compiler = new MethodCompiler(this' outerNameSupply' methodDef' MethodCompilationMode.DirectBind);                              compiler.Emit(body' target);                          }                      }                      break;                  }              case CompilationMode.Collecting:                  {                      // Method definitions are bound into MethodCache' redirectors are bound into target                      foreach (var methodDef in Methods.Where(m => m.Invalid == null))                      {                          if (Env.InteropManager.IsStatic(TyconEnv.Assembly' TyconEnv.Type' methodDef) == isStatic)                          {                              var slot = Env.GlobalMapping.ResolveMethodDefToSlot(TyconEnv.Assembly' TyconEnv.Type' methodDef);                              var methodName = CST.CSTWriter.WithAppend                                  (Env.Global' CST.WriterStyle.Uniform' methodDef.MethodSignature.Append);                              body.Add                                  (JST.Statement.DotCall                                       (RootId.ToE()'                                        Constants.RootCollectingBindMethodBuilder'                                        lhs'                                        new JST.BooleanLiteral(isStatic)'                                        new JST.StringLiteral(slot)'                                        new JST.StringLiteral(methodName)));                              var compiler = new MethodCompiler(this' outerNameSupply' methodDef' MethodCompilationMode.DirectBind);                              compiler.Emit(body' JST.Expression.Dot(target' Constants.TypeMethodCache));                          }                      }                      break;                  }              case CompilationMode.Traced:                  {                      // Methods in the initial trace or this trace will be bound directly.                      // Methods in a trace other than above are bound via builder which is given trace name.                      // Remaining methods are built via builder with null trace name.                      var traceToArgs = new Map<string' Seq<JST.Expression>>();                      var remainingArgs = new Seq<JST.Expression>();                      remainingArgs.Add(TypeDefinitionId.ToE());                      remainingArgs.Add(new JST.BooleanLiteral(isStatic));                      remainingArgs.Add(new JST.NullExpression());                      foreach (var methodDef in Methods.Where(m => m.Invalid == null))                      {                          if (Env.InteropManager.IsStatic(TyconEnv.Assembly' TyconEnv.Type' methodDef) == isStatic)                          {                              var slot = Env.GlobalMapping.ResolveMethodDefToSlot(TyconEnv.Assembly' TyconEnv.Type' methodDef);                              var defTrace = Env.Traces.MethodToTrace[methodDef.QualifiedMemberName(Env.Global' TyconEnv.Assembly' TyconEnv.Type)];                              if (defTrace.Flavor == TraceFlavor.OnDemand && defTrace != TypeTrace.Parent.Parent)                              {                                  // Method definition in in another trace' bind redirector for it.                                  var args = default(Seq<JST.Expression>);                                  if (!traceToArgs.TryGetValue(defTrace.Name' out args))                                  {                                      args = new Seq<JST.Expression>();                                      args.Add(lhs);                                      args.Add(new JST.BooleanLiteral(isStatic));                                      args.Add(new JST.StringLiteral(defTrace.Name));                                      traceToArgs.Add(defTrace.Name' args);                                  }                                  args.Add(new JST.StringLiteral(slot));                              }                              else if (defTrace.Flavor == TraceFlavor.Remainder)                                  // Method definition is in a stand-alone loader' bind redirector for it.                                  remainingArgs.Add(new JST.StringLiteral(slot));                              else                              {                                  // Method definition is bound directly                                  var compiler = new MethodCompiler(this' outerNameSupply' methodDef' MethodCompilationMode.DirectBind);                                  compiler.Emit(body' target);                              }                          }                      }                      foreach (var kv in traceToArgs)                          body.Add(JST.Statement.DotCall(RootId.ToE()' Constants.RootBindMethodBuilders' kv.Value));                      if (remainingArgs.Count > 3)                          body.Add(JST.Statement.DotCall(RootId.ToE()' Constants.RootBindMethodBuilders' remainingArgs));                      break;                  }              default:                  throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,CompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\CompilerEnvironment.cs,CompilerEnvironment,The following statement contains a magic number: ImportInlineThreshold = 15;
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,CompilerEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\CompilerEnvironment.cs,CompilerEnvironment,The following statement contains a magic number: InlineThreshold = 15;
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,FriendlyTypeName,The following statement contains a magic number: JST.Lexemes.AppendStringToFriendlyIdentifier(sb' types[types.Count - 1].ToLowerInvariant()' 15);
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,AssemblyMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,FriendlyAssemblyName,The following statement contains a magic number: JST.Lexemes.AppendStringToFriendlyIdentifier(sb' name.Name' 15);
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,FriendlyMemberName,The following statement contains a magic number: JST.Lexemes.AppendStringToFriendlyIdentifier(sb' types[types.Count - 1]' 15);
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,FriendlyMemberName,The following statement contains a magic number: JST.Lexemes.AppendStringToFriendlyIdentifier(sb' nm' 15);
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,TypeMapping,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\GlobalMapping.cs,FriendlyStringName,The following statement contains a magic number: JST.Lexemes.AppendStringToFriendlyIdentifier(sb' str' 15);
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,StringStats,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\StringStats.cs,GetEnumerator,The following statement contains a magic number: var inplaceSize = kv.Value*(kv.Key.Length + 2);
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,StringStats,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\StringStats.cs,GetEnumerator,The following statement contains a magic number: var typeSize = 9 + kv.Key.Length + kv.Value*5;
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS,StringStats,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\StringStats.cs,GetEnumerator,The following statement contains a magic number: var typeSize = 9 + kv.Key.Length + kv.Value*5;
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,DefaultImportingConstructor,The following statement contains a magic number: switch (state)                  {                  case InstanceState.ManagedOnly:                      if (currArity == 1)                          // .ctor(C this)                          thisRank = 1;                      break;                  case InstanceState.ManagedAndJavaScript:                  case InstanceState.JavaScriptOnly:                      if (currArity == 2 && currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                          // .ctor(C this' JSContext ctxt)                          thisRank = 2;                      break;                  case InstanceState.Merged:                      throw new InvalidOperationException                          ("'ManagedAndJavaScript' or 'JavaScriptOnly' type derived from a 'Merged' type");                  default:                      throw new ArgumentOutOfRangeException();                  }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,DefaultImportingConstructor,The following statement contains a magic number: switch (state)                  {                  case InstanceState.ManagedOnly:                      if (currArity == 1)                          // .ctor(C this)                          thisRank = 1;                      break;                  case InstanceState.ManagedAndJavaScript:                  case InstanceState.JavaScriptOnly:                      if (currArity == 2 && currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                          // .ctor(C this' JSContext ctxt)                          thisRank = 2;                      break;                  case InstanceState.Merged:                      throw new InvalidOperationException                          ("'ManagedAndJavaScript' or 'JavaScriptOnly' type derived from a 'Merged' type");                  default:                      throw new ArgumentOutOfRangeException();                  }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MatchingImportingConstructor,The following statement contains a magic number: switch (state)                  {                  case InstanceState.ManagedOnly:                      if (currArity == 1)                          // .ctor(C this)                          currRank = 1;                      break;                  case InstanceState.ManagedAndJavaScript:                  case InstanceState.JavaScriptOnly:                      if (currArity == 2 && currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                          // .ctor(C this' JSContext ctxt)                          currRank = 1;                      else if (currArity == polyMethEnv.Method.Arity + 1 &&                               currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                      {                          // .ctor(C this' JSContext ctxt' T t' U u)                          currRank = 2;                          for (var i = 2; i < currArity; i++)                          {                              if (                                  !currCtor.ValueParameters[i].Type.IsEquivalentTo                                       (polyMethEnv' polyMethEnv.Method.ValueParameters[i - 1].Type))                              {                                  currRank = 0;                                  break;                              }                          }                      }                      break;                  case InstanceState.Merged:                      throw new InvalidOperationException                          ("'ManagedAndJavaScript' or 'JavaScriptOnly' type derived from a 'Merged' type");                  default:                      throw new ArgumentOutOfRangeException();                  }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MatchingImportingConstructor,The following statement contains a magic number: switch (state)                  {                  case InstanceState.ManagedOnly:                      if (currArity == 1)                          // .ctor(C this)                          currRank = 1;                      break;                  case InstanceState.ManagedAndJavaScript:                  case InstanceState.JavaScriptOnly:                      if (currArity == 2 && currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                          // .ctor(C this' JSContext ctxt)                          currRank = 1;                      else if (currArity == polyMethEnv.Method.Arity + 1 &&                               currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                      {                          // .ctor(C this' JSContext ctxt' T t' U u)                          currRank = 2;                          for (var i = 2; i < currArity; i++)                          {                              if (                                  !currCtor.ValueParameters[i].Type.IsEquivalentTo                                       (polyMethEnv' polyMethEnv.Method.ValueParameters[i - 1].Type))                              {                                  currRank = 0;                                  break;                              }                          }                      }                      break;                  case InstanceState.Merged:                      throw new InvalidOperationException                          ("'ManagedAndJavaScript' or 'JavaScriptOnly' type derived from a 'Merged' type");                  default:                      throw new ArgumentOutOfRangeException();                  }
Magic Number,Microsoft.LiveLabs.JavaScript.IL2JS.Interop,InteropManager,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\Compiler\InteropManager.cs,MatchingImportingConstructor,The following statement contains a magic number: switch (state)                  {                  case InstanceState.ManagedOnly:                      if (currArity == 1)                          // .ctor(C this)                          currRank = 1;                      break;                  case InstanceState.ManagedAndJavaScript:                  case InstanceState.JavaScriptOnly:                      if (currArity == 2 && currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                          // .ctor(C this' JSContext ctxt)                          currRank = 1;                      else if (currArity == polyMethEnv.Method.Arity + 1 &&                               currCtor.ValueParameters[1].Type.Equals(env.JSContextRef))                      {                          // .ctor(C this' JSContext ctxt' T t' U u)                          currRank = 2;                          for (var i = 2; i < currArity; i++)                          {                              if (                                  !currCtor.ValueParameters[i].Type.IsEquivalentTo                                       (polyMethEnv' polyMethEnv.Method.ValueParameters[i - 1].Type))                              {                                  currRank = 0;                                  break;                              }                          }                      }                      break;                  case InstanceState.Merged:                      throw new InvalidOperationException                          ("'ManagedAndJavaScript' or 'JavaScriptOnly' type derived from a 'Merged' type");                  default:                      throw new ArgumentOutOfRangeException();                  }
