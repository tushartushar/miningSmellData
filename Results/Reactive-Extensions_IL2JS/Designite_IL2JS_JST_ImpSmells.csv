Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The method has 102 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,InputElement,C:\repos\Reactive-Extensions_IL2JS\JST\InputElement.cs,ToString,The method has 130 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,Lexer,The method has 439 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,PrimaryExpression,The method has 126 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,Statement,The method has 285 lines of code.
Complex Method,Microsoft.LiveLabs.JavaScript.JST,BinaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\BinaryOperator.cs,OpIsAssignment,Cyclomatic complexity of the method is 38
Complex Method,Microsoft.LiveLabs.JavaScript.JST,BinaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\BinaryOperator.cs,OpIsDivide,Cyclomatic complexity of the method is 38
Complex Method,Microsoft.LiveLabs.JavaScript.JST,BinaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\BinaryOperator.cs,OpPrec,Cyclomatic complexity of the method is 38
Complex Method,Microsoft.LiveLabs.JavaScript.JST,BinaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\BinaryOperator.cs,OpAssoc,Cyclomatic complexity of the method is 38
Complex Method,Microsoft.LiveLabs.JavaScript.JST,BinaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\BinaryOperator.cs,OpName,Cyclomatic complexity of the method is 38
Complex Method,Microsoft.LiveLabs.JavaScript.JST,BinaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\BinaryOperator.cs,OpHasBooleanResult,Cyclomatic complexity of the method is 38
Complex Method,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AccumEffects,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,Cyclomatic complexity of the method is 26
Complex Method,Microsoft.LiveLabs.JavaScript.JST,IdentifierExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AccumEffects,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.LiveLabs.JavaScript.JST,ForLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubExpressions,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.JST,UnaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\UnaryOperator.cs,OpName,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.JST,UnaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\UnaryOperator.cs,OpHasBooleanResult,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.JST,UnaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\UnaryOperator.cs,OpIsMutating,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.JST,UnaryOperator,C:\repos\Reactive-Extensions_IL2JS\JST\UnaryOperator.cs,OpIsPostfix,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendStringToJavaScript,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToString,Cyclomatic complexity of the method is 45
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToRegexp,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.JST,InputElement,C:\repos\Reactive-Extensions_IL2JS\JST\InputElement.cs,ToString,Cyclomatic complexity of the method is 116
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,PopClosePunctuator,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,CheckNoOpenPunctuators,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,IdentifierOrKeyword,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,Punctuator,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,Exponent,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,NumericLiteral,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,Cyclomatic complexity of the method is 24
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,RegularExpressionLiteral,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,InputElement,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,IsExpression,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,PrimaryExpression,Cyclomatic complexity of the method is 33
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,PostfixExpression,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,UnaryExpression,Cyclomatic complexity of the method is 40
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,BinaryExpression,Cyclomatic complexity of the method is 78
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,AssignmentExpression,Cyclomatic complexity of the method is 37
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,LoopClause,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,Statement,Cyclomatic complexity of the method is 59
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendArguments,The method has 12 parameters.
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,FunctionExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The method has 9 parameters.
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,ObjectLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The method has 5 parameters.
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,UnaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The method has 6 parameters.
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,ForVarLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,ForVarLoopClause,The method has 5 parameters.
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,FunctionDeclaration,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Append,The method has 6 parameters.
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,SimplifierContext,The method has 7 parameters.
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,DelimitedList,The method has 5 parameters.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Effects,C:\repos\Reactive-Extensions_IL2JS\JST\Domain.cs,CommutableWith,The length of the statement  "	return Vars.CommutableWith (other.Vars) && Heap.CommutableWith (other.Heap) && MayThrow.CommutableWith (other.MayThrow); " is 120.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Effects,C:\repos\Reactive-Extensions_IL2JS\JST\Domain.cs,Read,The length of the statement  "	return new Effects (new DroppedDomain<VariableEffects> (VariableEffects.Read (id))' ReadWriteDomain.Bottom' BooleanDomain.Bottom); " is 130.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Effects,C:\repos\Reactive-Extensions_IL2JS\JST\Domain.cs,Write,The length of the statement  "	return new Effects (new DroppedDomain<VariableEffects> (VariableEffects.Write (id))' ReadWriteDomain.Bottom' BooleanDomain.Bottom); " is 131.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The length of the statement  "	if (lb.HasValue && ((!lb.Value && Operator.Op == BinaryOp.LogicalAND) || lb.Value && Operator.Op == BinaryOp.LogicalOR)) " is 120.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The length of the statement  "	else if (rb.HasValue && ((rb.Value && Operator.Op == BinaryOp.LogicalAND) || (!rb.Value && Operator.Op == BinaryOp.LogicalOR))) " is 127.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The length of the statement  "	else if (lb.HasValue && ((lb.Value && Operator.Op == BinaryOp.LogicalAND) || !lb.Value && Operator.Op == BinaryOp.LogicalOR)) " is 125.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,ObjectLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The length of the statement  "	var simpBindings = Bindings.Select (kv => new KeyValuePair<PropertyName' Expression> (kv.Key' kv.Value.Simplify (ctxt' evalTimes))).ToOrdMap (); " is 144.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,ObjectLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,GetHashCode,The length of the statement  "	return (int)Bindings.Aggregate (0x23893e81u' (h' kv) => Constants.Rot7 (h) ^ Constants.Rot17 ((uint)kv.Key.GetHashCode ()) ^ (uint)kv.Value.GetHashCode ()); " is 156.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The length of the statement  "	if (str == null || str.Length < 2 || (str [0] != '"' || str [str.Length - 1] != '"') && (str [0] != '\'' || str [str.Length - 1] != '\'')) " is 138.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,NameSupply,C:\repos\Reactive-Extensions_IL2JS\JST\NameSupply.cs,GenSym,The length of the statement  "	while (Lexemes.IsJavaScriptReservedName (nm) || globals.Contains (nm) || BoundInThisOrOuterScope (nm) || boundInChildScope.Contains (nm)); " is 138.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Statement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Var,The length of the statement  "	return new VariableStatement (new VariableDeclaration (identifier1' initializer1)' new VariableDeclaration (identifier2' initializer2)); " is 136.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,IfStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Simplify,The length of the statement  "			ctxt.Add (new IfStatement (Loc' simpCondition' new Statements (thenCtxt.Statements)' new Statements (elseCtxt.Statements))); " is 124.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,IfStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,ToReturnResult,The length of the statement  "	acc.Add (new IfStatement (Loc' Condition' new Statements (thenAcc)' elseAcc == null ? null : new Statements (elseAcc))); " is 120.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,InFreshStatements,The length of the statement  "	return new SimplifierContext (InGlobalScope' KeepFunctionNames' NameSupply' subst' new Seq<Statement> ()' Effects.Bottom' isValue); " is 131.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,InFreshScope,The length of the statement  "	return new SimplifierContext (false' KeepFunctionNames' NameSupply.Fork ()' subst.ToMap ()' new Seq<Statement> ()' Effects.Bottom' isValue); " is 140.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,InLocalEffects,The length of the statement  "	return new SimplifierContext (InGlobalScope' KeepFunctionNames' NameSupply' subst' statements' Effects.Bottom' isValue); " is 120.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,InPass1SubContext,The length of the statement  "	return new SimplifierContext (InGlobalScope' KeepFunctionNames' NameSupply.Fork ()' subst.ToMap ()' new Seq<Statement> ()' Effects.Bottom' isValue); " is 148.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,InPass2SubContext,The length of the statement  "	return new SimplifierContext (InGlobalScope' KeepFunctionNames' NameSupply' new Map<Identifier' Expression> ()' new Seq<Statement> ()' Effects.Bottom' isValue); " is 160.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,IsFirstIdentifierChar,The length of the statement  "		return cat == UnicodeCategory.UppercaseLetter || cat == UnicodeCategory.LowercaseLetter || cat == UnicodeCategory.TitlecaseLetter || cat == UnicodeCategory.ModifierLetter || cat == UnicodeCategory.OtherLetter || cat == UnicodeCategory.LetterNumber; " is 248.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,IsIdentifierChar,The length of the statement  "		return cat == UnicodeCategory.UppercaseLetter || cat == UnicodeCategory.LowercaseLetter || cat == UnicodeCategory.TitlecaseLetter || cat == UnicodeCategory.ModifierLetter || cat == UnicodeCategory.OtherLetter || cat == UnicodeCategory.LetterNumber || cat == UnicodeCategory.NonSpacingMark || cat == UnicodeCategory.SpacingCombiningMark || cat == UnicodeCategory.DecimalDigitNumber || cat == UnicodeCategory.ConnectorPunctuation; " is 428.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,PopClosePunctuator,The length of the statement  "		if (closeElem.Tag == InputElementTag.RParen && openElem.Tag == InputElementTag.LParen || closeElem.Tag == InputElementTag.RBrace && openElem.Tag == InputElementTag.LBrace || closeElem.Tag == InputElementTag.RSquare && openElem.Tag == InputElementTag.LSquare) " is 258.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,PopClosePunctuator,The length of the statement  "		throw MsgError ("punctuator"' String.Format ("closing '{0}' does not match opening '{1}' at ({2}' {3})"' closeElem.Value' openElem.Value' openElem.Loc.StartLine' openElem.Loc.StartColumn)); " is 189.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,CheckNoOpenPunctuators,The length of the statement  "	throw MsgError ("eof"' String.Format ("no closing '{0}' to match opening '{1}' at ({2}' {3})"' closeStr' openElem.Value' openElem.Loc.StartLine' openElem.Loc.StartColumn)); " is 172.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,MakeInputElement,The length of the statement  "	var res = new InputElement (new Location (fileName' startPos' startLine' startColumn' currentPos' currentLine' currentColumn)' tag' sb.ToString ()); " is 148.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,IdentifierOrKeyword,The length of the statement  "				throw MsgError ("identifier"' String.Format ("character '{0}' encoded by unicode escape is not a legal identifier character"' EscapedChar)); " is 140.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,RegularExpressionLiteral,The length of the statement  "				throw MsgError ("regular expression literal flags"' String.Format ("character '{0}' encoded by unicode escape is not a legal regular expression flag"' EscapedChar)); " is 165.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,LeftHandSideFollow,The length of the statement  "		var loc = DelimitedList ("call expression arguments"' "')' or '''"' InputElementTag.Comma' InputElementTag.RParen' () => arguments.Add (AssignmentExpression (false))); " is 167.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,Reduce,The length of the statement  "		stack.Peek ().Exp = new BinaryExpression (stack.Peek ().Exp.Loc.Union (top.Exp.Loc)' stack.Peek ().Exp' top.Op' top.Exp); " is 121.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,CaseClause,The length of the statement  "	while (Current.Tag != InputElementTag.Case && Current.Tag != InputElementTag.Default && Current.Tag != InputElementTag.RBrace) " is 126.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,Statement,The length of the statement  "				while (Current.Tag != InputElementTag.Case && Current.Tag != InputElementTag.Default && Current.Tag != InputElementTag.RBrace) " is 126.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,Statement,The length of the statement  "				while (Current.Tag != InputElementTag.Case && Current.Tag != InputElementTag.Default && Current.Tag != InputElementTag.RBrace) " is 126.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The conditional expression  "lb.HasValue && ((!lb.Value && Operator.Op == BinaryOp.LogicalAND) || lb.Value && Operator.Op == BinaryOp.LogicalOR)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The conditional expression  "rb.HasValue && ((rb.Value && Operator.Op == BinaryOp.LogicalAND) || (!rb.Value && Operator.Op == BinaryOp.LogicalOR))"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The conditional expression  "lb.HasValue && ((lb.Value && Operator.Op == BinaryOp.LogicalAND) || !lb.Value && Operator.Op == BinaryOp.LogicalOR)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The conditional expression  "str == null || str.Length < 2 || (str [0] != '"' || str [str.Length - 1] != '"') && (str [0] != '\'' || str [str.Length - 1] != '\'')"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,StatementsPseudoExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The conditional expression  "Value == null && subExpressions.Count != 0 || Value != null && subExpressions.Count != 1"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,NameSupply,C:\repos\Reactive-Extensions_IL2JS\JST\NameSupply.cs,GenSym,The conditional expression  "Lexemes.IsJavaScriptReservedName (nm) || globals.Contains (nm) || BoundInThisOrOuterScope (nm) || boundInChildScope.Contains (nm)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,IsFirstIdentifierChar,The conditional expression  "c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '$' || c == '_'"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,IsIdentifierChar,The conditional expression  "c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c == '$' || c == '_'"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The conditional expression  "(i == 0 && IsFirstIdentifierChar (c)) || (i > 0 && IsIdentifierChar (c))"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendStringToIdentifier,The conditional expression  "c != '$' && ((i == 0 && IsFirstIdentifierChar (c)) || (i > 0 && IsIdentifierChar (c)))"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendStringToJavaScript,The conditional expression  "c >= ' ' && c <= '~' && c != '"' && c != '\'' && c != '\\'"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The conditional expression  "i == str.Length || i == str.Length - 1 && (str [i] == 'l' || str [i] == 'L')"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,PopClosePunctuator,The conditional expression  "closeElem.Tag == InputElementTag.RParen && openElem.Tag == InputElementTag.LParen || closeElem.Tag == InputElementTag.RBrace && openElem.Tag == InputElementTag.LBrace || closeElem.Tag == InputElementTag.RSquare && openElem.Tag == InputElementTag.LSquare"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,IdentifierOrKeyword,The conditional expression  "first && !IsFirstIdentifierChar || !first && !IsIdentifierChar"  is complex.
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot1,The following statement contains a magic number: return hash << 1 | hash >> 31;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot5,The following statement contains a magic number: return hash << 5 | hash >> 27;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot5,The following statement contains a magic number: return hash << 5 | hash >> 27;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot7,The following statement contains a magic number: return hash << 7 | hash >> 25;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot7,The following statement contains a magic number: return hash << 7 | hash >> 25;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot17,The following statement contains a magic number: return hash << 17 | hash >> 15;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot17,The following statement contains a magic number: return hash << 17 | hash >> 15;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Expression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Nary,The following statement contains a magic number: if (expressions.Length == 0)  	throw new InvalidOperationException ("binary expressions have no zero");  else if (expressions.Length == 1)  	return expressions [0];  else {  	var res = expressions [expressions.Length - 1];  	for (var i = expressions.Length - 2; i >= 0; i--)  		res = new BinaryExpression (expressions [i]' binaryOperator' res);  	return res;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Expression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Nary,The following statement contains a magic number: if (expressions.Length == 1)  	return expressions [0];  else {  	var res = expressions [expressions.Length - 1];  	for (var i = expressions.Length - 2; i >= 0; i--)  		res = new BinaryExpression (expressions [i]' binaryOperator' res);  	return res;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Expression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Nary,The following statement contains a magic number: for (var i = expressions.Length - 2; i >= 0; i--)  	res = new BinaryExpression (expressions [i]' binaryOperator' res);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ArrayLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The following statement contains a magic number: if (Elements.Count > 4) {  	writer.EndLine ();  	writer.Append ('[');  	writer.Indented (w =>  {  		var first = true;  		foreach (var e in Elements) {  			if (first)  				first = false;  			else  				writer.Append (''');  			writer.EndLine ();  			PrintOrSkip (w' e);  		}  	});  	writer.EndLine ();  	writer.Append (']');  	writer.EndLine ();  }  else {  	writer.Append ('[');  	var first = true;  	foreach (var e in Elements) {  		if (first)  			first = false;  		else {  			writer.Append (''');  			writer.Space ();  		}  		PrintOrSkip (writer' e);  	}  	writer.Append (']');  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 2)  	throw new InvalidOperationException ("mismatched sub-expressions arity");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendArguments,The following statement contains a magic number: if (Arguments.Count > 5) {  	writer.Indented (w => w.List (Arguments' w2 =>  {  		w2.Append ('(');  		w2.EndLine ();  	}' (w2' e) => e.Append (w2' Precedence.Assignment)' w2 =>  {  		w2.Append (''');  		w2.EndLine ();  	}' w2 => w2.Append (')')));  }  else {  	writer.List (Arguments' w => w.Append ('(')' (w' e) => e.Append (w' Precedence.Assignment)' w =>  {  		w.Append (''');  		w.Space ();  	}' w => w.Append (')'));  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendComment,The following statement contains a magic number: if (writer.PrettyPrint) {  	if (Comment != null) {  		writer.HardSpace ();  		writer.Append ("/* ");  		var s = 0;  		var i = 0;  		while (i < Comment.Length) {  			if (Comment [i] == '\r' && i < Comment.Length - 1 && Comment [i + 1] == '\n') {  				writer.Append (Comment.Substring (s' i - s));  				writer.EndLine ();  				i += 2;  				s = i;  			}  			else if (Comment [i] == '\n' || Comment [i] == '\r') {  				writer.Append (Comment.Substring (s' i - s));  				writer.EndLine ();  				i++;  				s = i;  			}  			else  				i++;  		}  		writer.Append (Comment.Substring (s' i - s));  		writer.Append (" */");  		writer.HardSpace ();  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendComment,The following statement contains a magic number: if (Comment != null) {  	writer.HardSpace ();  	writer.Append ("/* ");  	var s = 0;  	var i = 0;  	while (i < Comment.Length) {  		if (Comment [i] == '\r' && i < Comment.Length - 1 && Comment [i + 1] == '\n') {  			writer.Append (Comment.Substring (s' i - s));  			writer.EndLine ();  			i += 2;  			s = i;  		}  		else if (Comment [i] == '\n' || Comment [i] == '\r') {  			writer.Append (Comment.Substring (s' i - s));  			writer.EndLine ();  			i++;  			s = i;  		}  		else  			i++;  	}  	writer.Append (Comment.Substring (s' i - s));  	writer.Append (" */");  	writer.HardSpace ();  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendComment,The following statement contains a magic number: while (i < Comment.Length) {  	if (Comment [i] == '\r' && i < Comment.Length - 1 && Comment [i + 1] == '\n') {  		writer.Append (Comment.Substring (s' i - s));  		writer.EndLine ();  		i += 2;  		s = i;  	}  	else if (Comment [i] == '\n' || Comment [i] == '\r') {  		writer.Append (Comment.Substring (s' i - s));  		writer.EndLine ();  		i++;  		s = i;  	}  	else  		i++;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendComment,The following statement contains a magic number: if (Comment [i] == '\r' && i < Comment.Length - 1 && Comment [i + 1] == '\n') {  	writer.Append (Comment.Substring (s' i - s));  	writer.EndLine ();  	i += 2;  	s = i;  }  else if (Comment [i] == '\n' || Comment [i] == '\r') {  	writer.Append (Comment.Substring (s' i - s));  	writer.EndLine ();  	i++;  	s = i;  }  else  	i++;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendComment,The following statement contains a magic number: i += 2;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ConditionalExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 3)  	throw new InvalidOperationException ("mismatched sub-expressions arity");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ConditionalExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: return new ConditionalExpression (Loc' subExpressions [0]' subExpressions [1]' subExpressions [2]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,IndexExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 2)  	throw new InvalidOperationException ("mismatched sub-expressions arity");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ObjectLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The following statement contains a magic number: if (Bindings.Count == 0)  	writer.Append ("{}");  else if (Bindings.Count < 4) {  	writer.Append ('{');  	writer.Space ();  	var first = true;  	foreach (var kv in Bindings) {  		if (first)  			first = false;  		else {  			writer.Append (''');  			writer.Space ();  		}  		kv.Key.Append (writer);  		writer.Append (':');  		writer.Space ();  		kv.Value.Append (writer' Precedence.Assignment);  	}  	writer.Space ();  	writer.Append ('}');  }  else  	writer.Indented (w =>  {  		w.Append ('{');  		w.EndLine ();  	}' w =>  {  		var first = true;  		foreach (var kv in Bindings) {  			if (first)  				first = false;  			else {  				w.Append (''');  				w.EndLine ();  			}  			kv.Key.Append (w);  			w.Append (':');  			w.Space ();  			kv.Value.Append (w' Precedence.Assignment);  		}  	}' w =>  {  		w.EndLine ();  		w.Append ('}');  	});  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ObjectLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The following statement contains a magic number: if (Bindings.Count < 4) {  	writer.Append ('{');  	writer.Space ();  	var first = true;  	foreach (var kv in Bindings) {  		if (first)  			first = false;  		else {  			writer.Append (''');  			writer.Space ();  		}  		kv.Key.Append (writer);  		writer.Append (':');  		writer.Space ();  		kv.Value.Append (writer' Precedence.Assignment);  	}  	writer.Space ();  	writer.Append ('}');  }  else  	writer.Indented (w =>  {  		w.Append ('{');  		w.EndLine ();  	}' w =>  {  		var first = true;  		foreach (var kv in Bindings) {  			if (first)  				first = false;  			else {  				w.Append (''');  				w.EndLine ();  			}  			kv.Key.Append (w);  			w.Append (':');  			w.Space ();  			kv.Value.Append (w' Precedence.Assignment);  		}  	}' w =>  {  		w.EndLine ();  		w.Append ('}');  	});  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The following statement contains a magic number: if (str == null || str.Length < 2 || (str [0] != '"' || str [str.Length - 1] != '"') && (str [0] != '\'' || str [str.Length - 1] != '\''))  	throw new ArgumentException ("unrecognized JavaScript string literal");  else  	return new StringLiteral (Lexemes.JavaScriptToString (str.Substring (1' str.Length - 2)' strict));  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The following statement contains a magic number: if (str == null || str.Length < 2 || (str [0] != '"' || str [str.Length - 1] != '"') && (str [0] != '\'' || str [str.Length - 1] != '\''))  	throw new ArgumentException ("unrecognized JavaScript string literal");  else  	return new StringLiteral (Lexemes.JavaScriptToString (str.Substring (1' str.Length - 2)' strict));  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The following statement contains a magic number: return new StringLiteral (Lexemes.JavaScriptToString (str.Substring (1' str.Length - 2)' strict));  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Program,C:\repos\Reactive-Extensions_IL2JS\JST\Program.cs,ToFile,The following statement contains a magic number: if (Path.GetFullPath (fileName).Length >= 260)  	throw new ArgumentException ("path is too long");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Append,The following statement contains a magic number: if (writer.PrettyPrint && Comment != null) {  	writer.Append ("// ");  	var s = 0;  	var i = 0;  	while (i < Comment.Length) {  		if (Comment [i] == '\r' && i < Comment.Length - 1 && Comment [i + 1] == '\n') {  			writer.Append (Comment.Substring (s' i - s));  			writer.EndLine ();  			i += 2;  			s = i;  			if (i < Comment.Length)  				writer.Append ("// ");  		}  		else if (Comment [i] == '\n' || Comment [i] == '\r') {  			writer.Append (Comment.Substring (s' i - s));  			writer.EndLine ();  			i++;  			s = i;  			if (i < Comment.Length)  				writer.Append ("// ");  		}  		else  			i++;  	}  	writer.Append (Comment.Substring (s' i - s));  	writer.EndLine ();  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Append,The following statement contains a magic number: while (i < Comment.Length) {  	if (Comment [i] == '\r' && i < Comment.Length - 1 && Comment [i + 1] == '\n') {  		writer.Append (Comment.Substring (s' i - s));  		writer.EndLine ();  		i += 2;  		s = i;  		if (i < Comment.Length)  			writer.Append ("// ");  	}  	else if (Comment [i] == '\n' || Comment [i] == '\r') {  		writer.Append (Comment.Substring (s' i - s));  		writer.EndLine ();  		i++;  		s = i;  		if (i < Comment.Length)  			writer.Append ("// ");  	}  	else  		i++;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Append,The following statement contains a magic number: if (Comment [i] == '\r' && i < Comment.Length - 1 && Comment [i + 1] == '\n') {  	writer.Append (Comment.Substring (s' i - s));  	writer.EndLine ();  	i += 2;  	s = i;  	if (i < Comment.Length)  		writer.Append ("// ");  }  else if (Comment [i] == '\n' || Comment [i] == '\r') {  	writer.Append (Comment.Substring (s' i - s));  	writer.EndLine ();  	i++;  	s = i;  	if (i < Comment.Length)  		writer.Append ("// ");  }  else  	i++;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Append,The following statement contains a magic number: i += 2;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ForEachLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 2)  	throw new InvalidOperationException ("mismatched sub-expressions arity");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,IfStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubStatementss,The following statement contains a magic number: if (subStatementss.Count < 1 || subStatementss.Count > 2)  	throw new InvalidOperationException ("mismatched sub-statements arity");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,IfStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubStatementss,The following statement contains a magic number: return new IfStatement (Loc' Condition' subStatementss [0]' subStatementss.Count == 2 ? subStatementss [1] : null);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base16,The following statement contains a magic number: return "0123456789abcdef" [(int)(d % 16)];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base26,The following statement contains a magic number: return "abcdefghijklmnopqrstuvwxyz" [(int)(d % 26)];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base36,The following statement contains a magic number: return "0123456789abcdefghijklmnopqrstuvwxyz" [(int)(d % 36)];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base52,The following statement contains a magic number: return "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" [(int)(d % 52)];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base62,The following statement contains a magic number: return "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" [(int)(d % 62)];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase16,The following statement contains a magic number: while (n > 0 || mask > 0) {  	rsb.Append (Base16 (n));  	n /= 16;  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase16,The following statement contains a magic number: while (n > 0 || mask > 0) {  	rsb.Append (Base16 (n));  	n /= 16;  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase16,The following statement contains a magic number: n /= 16;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase16,The following statement contains a magic number: mask /= 16;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase36,The following statement contains a magic number: while (n > 0 || mask > 0) {  	rsb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase36,The following statement contains a magic number: while (n > 0 || mask > 0) {  	rsb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase36,The following statement contains a magic number: n /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase36,The following statement contains a magic number: mask /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0) {  	if (i >= str.Length)  		throw new SyntaxException (null' "hexadecimal number"' "too few digits");  	else {  		var c = str [i++];  		if (c >= '0' && c <= '9')  			n = n * 16 + (uint)(c - '0');  		else if (c >= 'a' && c <= 'f')  			n = n * 16 + 10 + (uint)(c - 'a');  		else if (c >= 'A' && c <= 'F')  			n = n * 16 + 10 + (uint)(c - 'A');  		else  			throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  		mask /= 16;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0) {  	if (i >= str.Length)  		throw new SyntaxException (null' "hexadecimal number"' "too few digits");  	else {  		var c = str [i++];  		if (c >= '0' && c <= '9')  			n = n * 16 + (uint)(c - '0');  		else if (c >= 'a' && c <= 'f')  			n = n * 16 + 10 + (uint)(c - 'a');  		else if (c >= 'A' && c <= 'F')  			n = n * 16 + 10 + (uint)(c - 'A');  		else  			throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  		mask /= 16;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0) {  	if (i >= str.Length)  		throw new SyntaxException (null' "hexadecimal number"' "too few digits");  	else {  		var c = str [i++];  		if (c >= '0' && c <= '9')  			n = n * 16 + (uint)(c - '0');  		else if (c >= 'a' && c <= 'f')  			n = n * 16 + 10 + (uint)(c - 'a');  		else if (c >= 'A' && c <= 'F')  			n = n * 16 + 10 + (uint)(c - 'A');  		else  			throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  		mask /= 16;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0) {  	if (i >= str.Length)  		throw new SyntaxException (null' "hexadecimal number"' "too few digits");  	else {  		var c = str [i++];  		if (c >= '0' && c <= '9')  			n = n * 16 + (uint)(c - '0');  		else if (c >= 'a' && c <= 'f')  			n = n * 16 + 10 + (uint)(c - 'a');  		else if (c >= 'A' && c <= 'F')  			n = n * 16 + 10 + (uint)(c - 'A');  		else  			throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  		mask /= 16;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0) {  	if (i >= str.Length)  		throw new SyntaxException (null' "hexadecimal number"' "too few digits");  	else {  		var c = str [i++];  		if (c >= '0' && c <= '9')  			n = n * 16 + (uint)(c - '0');  		else if (c >= 'a' && c <= 'f')  			n = n * 16 + 10 + (uint)(c - 'a');  		else if (c >= 'A' && c <= 'F')  			n = n * 16 + 10 + (uint)(c - 'A');  		else  			throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  		mask /= 16;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0) {  	if (i >= str.Length)  		throw new SyntaxException (null' "hexadecimal number"' "too few digits");  	else {  		var c = str [i++];  		if (c >= '0' && c <= '9')  			n = n * 16 + (uint)(c - '0');  		else if (c >= 'a' && c <= 'f')  			n = n * 16 + 10 + (uint)(c - 'a');  		else if (c >= 'A' && c <= 'F')  			n = n * 16 + 10 + (uint)(c - 'A');  		else  			throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  		mask /= 16;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (i >= str.Length)  	throw new SyntaxException (null' "hexadecimal number"' "too few digits");  else {  	var c = str [i++];  	if (c >= '0' && c <= '9')  		n = n * 16 + (uint)(c - '0');  	else if (c >= 'a' && c <= 'f')  		n = n * 16 + 10 + (uint)(c - 'a');  	else if (c >= 'A' && c <= 'F')  		n = n * 16 + 10 + (uint)(c - 'A');  	else  		throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (i >= str.Length)  	throw new SyntaxException (null' "hexadecimal number"' "too few digits");  else {  	var c = str [i++];  	if (c >= '0' && c <= '9')  		n = n * 16 + (uint)(c - '0');  	else if (c >= 'a' && c <= 'f')  		n = n * 16 + 10 + (uint)(c - 'a');  	else if (c >= 'A' && c <= 'F')  		n = n * 16 + 10 + (uint)(c - 'A');  	else  		throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (i >= str.Length)  	throw new SyntaxException (null' "hexadecimal number"' "too few digits");  else {  	var c = str [i++];  	if (c >= '0' && c <= '9')  		n = n * 16 + (uint)(c - '0');  	else if (c >= 'a' && c <= 'f')  		n = n * 16 + 10 + (uint)(c - 'a');  	else if (c >= 'A' && c <= 'F')  		n = n * 16 + 10 + (uint)(c - 'A');  	else  		throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (i >= str.Length)  	throw new SyntaxException (null' "hexadecimal number"' "too few digits");  else {  	var c = str [i++];  	if (c >= '0' && c <= '9')  		n = n * 16 + (uint)(c - '0');  	else if (c >= 'a' && c <= 'f')  		n = n * 16 + 10 + (uint)(c - 'a');  	else if (c >= 'A' && c <= 'F')  		n = n * 16 + 10 + (uint)(c - 'A');  	else  		throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (i >= str.Length)  	throw new SyntaxException (null' "hexadecimal number"' "too few digits");  else {  	var c = str [i++];  	if (c >= '0' && c <= '9')  		n = n * 16 + (uint)(c - '0');  	else if (c >= 'a' && c <= 'f')  		n = n * 16 + 10 + (uint)(c - 'a');  	else if (c >= 'A' && c <= 'F')  		n = n * 16 + 10 + (uint)(c - 'A');  	else  		throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (i >= str.Length)  	throw new SyntaxException (null' "hexadecimal number"' "too few digits");  else {  	var c = str [i++];  	if (c >= '0' && c <= '9')  		n = n * 16 + (uint)(c - '0');  	else if (c >= 'a' && c <= 'f')  		n = n * 16 + 10 + (uint)(c - 'a');  	else if (c >= 'A' && c <= 'F')  		n = n * 16 + 10 + (uint)(c - 'A');  	else  		throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  	mask /= 16;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + (uint)(c - '0');  else if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + (uint)(c - '0');  else if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + (uint)(c - '0');  else if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + (uint)(c - '0');  else if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + (uint)(c - '0');  else if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: n = n * 16 + (uint)(c - '0');  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + 10 + (uint)(c - 'a');  else if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: n = n * 16 + 10 + (uint)(c - 'a');  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: n = n * 16 + 10 + (uint)(c - 'a');  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	n = n * 16 + 10 + (uint)(c - 'A');  else  	throw new SyntaxException (null' "hexadecimal number"' "invalid hex digit");  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: n = n * 16 + 10 + (uint)(c - 'A');  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: n = n * 16 + 10 + (uint)(c - 'A');  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: mask /= 16;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase8Variable,The following statement contains a magic number: while (i < str.Length) {  	var c = str [i];  	var d = default(int);  	if (c >= '0' && c <= '7')  		d = (int)(c - '0');  	else  		break;  	n *= 8;  	n += d;  	i++;  	any = true;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase8Variable,The following statement contains a magic number: n *= 8;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase10Variable,The following statement contains a magic number: while (i < str.Length) {  	var c = str [i];  	var d = default(int);  	if (c >= '0' && c <= '9')  		d = (int)(c - '0');  	else  		break;  	n *= 10;  	n += d;  	i++;  	any = true;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase10Variable,The following statement contains a magic number: n *= 10;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: while (i < str.Length) {  	var c = str [i];  	var d = default(int);  	if (c >= '0' && c <= '9')  		d = (int)(c - '0');  	else if (c >= 'a' && c <= 'f')  		d = (int)(c - 'a' + 10);  	else if (c >= 'A' && c <= 'F')  		d = (int)(c - 'A' + 10);  	else  		break;  	n *= 16;  	n += d;  	i++;  	any = true;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: while (i < str.Length) {  	var c = str [i];  	var d = default(int);  	if (c >= '0' && c <= '9')  		d = (int)(c - '0');  	else if (c >= 'a' && c <= 'f')  		d = (int)(c - 'a' + 10);  	else if (c >= 'A' && c <= 'F')  		d = (int)(c - 'A' + 10);  	else  		break;  	n *= 16;  	n += d;  	i++;  	any = true;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: while (i < str.Length) {  	var c = str [i];  	var d = default(int);  	if (c >= '0' && c <= '9')  		d = (int)(c - '0');  	else if (c >= 'a' && c <= 'f')  		d = (int)(c - 'a' + 10);  	else if (c >= 'A' && c <= 'F')  		d = (int)(c - 'A' + 10);  	else  		break;  	n *= 16;  	n += d;  	i++;  	any = true;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: if (c >= '0' && c <= '9')  	d = (int)(c - '0');  else if (c >= 'a' && c <= 'f')  	d = (int)(c - 'a' + 10);  else if (c >= 'A' && c <= 'F')  	d = (int)(c - 'A' + 10);  else  	break;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: if (c >= '0' && c <= '9')  	d = (int)(c - '0');  else if (c >= 'a' && c <= 'f')  	d = (int)(c - 'a' + 10);  else if (c >= 'A' && c <= 'F')  	d = (int)(c - 'A' + 10);  else  	break;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	d = (int)(c - 'a' + 10);  else if (c >= 'A' && c <= 'F')  	d = (int)(c - 'A' + 10);  else  	break;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	d = (int)(c - 'a' + 10);  else if (c >= 'A' && c <= 'F')  	d = (int)(c - 'A' + 10);  else  	break;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: d = (int)(c - 'a' + 10);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	d = (int)(c - 'A' + 10);  else  	break;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: d = (int)(c - 'A' + 10);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: n *= 16;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: n /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: mask /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: while (n > 36 || mask > 0) {  	sb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: while (n > 36 || mask > 0) {  	sb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: while (n > 36 || mask > 0) {  	sb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: n /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: mask /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: if (IsIdentifier (str))  	sb.Append (str);  else {  	var i = 0;  	while (i < str.Length) {  		var c = default(char);  		if (str [i] == '\\' && i + 5 < str.Length && str [i + 1] == 'u') {  			i += 2;  			c = (char)ScanBase16Fixed (str' ref i' 0xffff);  		}  		else  			c = str [i++];  		if ((i == 0 && IsFirstIdentifierChar (c)) || (i > 0 && IsIdentifierChar (c)))  			sb.Append (c);  		else  			throw new SyntaxException (null' "identifier"' "illegal identifier character");  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: if (IsIdentifier (str))  	sb.Append (str);  else {  	var i = 0;  	while (i < str.Length) {  		var c = default(char);  		if (str [i] == '\\' && i + 5 < str.Length && str [i + 1] == 'u') {  			i += 2;  			c = (char)ScanBase16Fixed (str' ref i' 0xffff);  		}  		else  			c = str [i++];  		if ((i == 0 && IsFirstIdentifierChar (c)) || (i > 0 && IsIdentifierChar (c)))  			sb.Append (c);  		else  			throw new SyntaxException (null' "identifier"' "illegal identifier character");  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: while (i < str.Length) {  	var c = default(char);  	if (str [i] == '\\' && i + 5 < str.Length && str [i + 1] == 'u') {  		i += 2;  		c = (char)ScanBase16Fixed (str' ref i' 0xffff);  	}  	else  		c = str [i++];  	if ((i == 0 && IsFirstIdentifierChar (c)) || (i > 0 && IsIdentifierChar (c)))  		sb.Append (c);  	else  		throw new SyntaxException (null' "identifier"' "illegal identifier character");  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: while (i < str.Length) {  	var c = default(char);  	if (str [i] == '\\' && i + 5 < str.Length && str [i + 1] == 'u') {  		i += 2;  		c = (char)ScanBase16Fixed (str' ref i' 0xffff);  	}  	else  		c = str [i++];  	if ((i == 0 && IsFirstIdentifierChar (c)) || (i > 0 && IsIdentifierChar (c)))  		sb.Append (c);  	else  		throw new SyntaxException (null' "identifier"' "illegal identifier character");  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: if (str [i] == '\\' && i + 5 < str.Length && str [i + 1] == 'u') {  	i += 2;  	c = (char)ScanBase16Fixed (str' ref i' 0xffff);  }  else  	c = str [i++];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: if (str [i] == '\\' && i + 5 < str.Length && str [i + 1] == 'u') {  	i += 2;  	c = (char)ScanBase16Fixed (str' ref i' 0xffff);  }  else  	c = str [i++];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: i += 2;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: n /= 52;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: mask /= 52;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: while (n > 62 || mask > 0) {  	sb.Append (Base62 (n));  	n /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: while (n > 62 || mask > 0) {  	sb.Append (Base62 (n));  	n /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: while (n > 62 || mask > 0) {  	sb.Append (Base62 (n));  	n /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: n /= 62;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: mask /= 62;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: n /= 26;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: mask /= 26;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: while (n > 36 || mask > 0) {  	sb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: while (n > 36 || mask > 0) {  	sb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: while (n > 36 || mask > 0) {  	sb.Append (Base36 (n));  	n /= 36;  	mask /= 36;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: n /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: mask /= 36;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL1,The following statement contains a magic number: return v << 1 | v >> 31;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL5,The following statement contains a magic number: return v << 5 | v >> 27;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL5,The following statement contains a magic number: return v << 5 | v >> 27;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL30,The following statement contains a magic number: return v << 30 | v >> 2;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL30,The following statement contains a magic number: return v << 30 | v >> 2;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h [2] = 0x98BADCFEu;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h [3] = 0x10325476u;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h [4] = 0xC3D2E1F0u;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length) {  	for (var i = 0; i < 16; i++) {  		w [i] = 0u;  		for (var j = 0; j < 4; j++)  			w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  	}  	for (var i = 16; i < 80; i++)  		w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  	var a = h [0];  	var b = h [1];  	var c = h [2];  	var d = h [3];  	var e = h [4];  	for (var i = 0; i < 20; i++) {  		var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 20; i < 40; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 40; i < 60; i++) {  		var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	for (var i = 60; i < 80; i++) {  		var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  		e = d;  		d = c;  		c = RotL30 (b);  		b = a;  		a = t;  	}  	h [0] += a;  	h [1] += b;  	h [2] += c;  	h [3] += d;  	h [4] += e;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 0; i < 16; i++) {  	w [i] = 0u;  	for (var j = 0; j < 4; j++)  		w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 0; i < 16; i++) {  	w [i] = 0u;  	for (var j = 0; j < 4; j++)  		w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 0; i < 16; i++) {  	w [i] = 0u;  	for (var j = 0; j < 4; j++)  		w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var j = 0; j < 4; j++)  	w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var j = 0; j < 4; j++)  	w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: w [i] = (w [i] << 8) | (start < str.Length ? (uint)str [start++] : 0u);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 16; i < 80; i++)  	w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 16; i < 80; i++)  	w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 16; i < 80; i++)  	w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 16; i < 80; i++)  	w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 16; i < 80; i++)  	w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 16; i < 80; i++)  	w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: w [i] = RotL1 (w [i - 3] ^ w [i - 8] ^ w [i - 14] ^ w [i - 16]);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 0; i < 20; i++) {  	var t = RotL5 (a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w [i];  	e = d;  	d = c;  	c = RotL30 (b);  	b = a;  	a = t;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 20; i < 40; i++) {  	var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  	e = d;  	d = c;  	c = RotL30 (b);  	b = a;  	a = t;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 20; i < 40; i++) {  	var t = RotL5 (a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w [i];  	e = d;  	d = c;  	c = RotL30 (b);  	b = a;  	a = t;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 40; i < 60; i++) {  	var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  	e = d;  	d = c;  	c = RotL30 (b);  	b = a;  	a = t;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 40; i < 60; i++) {  	var t = RotL5 (a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w [i];  	e = d;  	d = c;  	c = RotL30 (b);  	b = a;  	a = t;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 60; i < 80; i++) {  	var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  	e = d;  	d = c;  	c = RotL30 (b);  	b = a;  	a = t;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: for (var i = 60; i < 80; i++) {  	var t = RotL5 (a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w [i];  	e = d;  	d = c;  	c = RotL30 (b);  	b = a;  	a = t;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h [2] += c;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h [3] += d;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h [4] += e;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true) {  	if (word < h.Length && mask < k32) {  		acc = acc << 32 | h [word++];  		mask = mask << 32 | k32;  	}  	if (mask == 0ul)  		break;  	if (first) {  		sb.Append (Base52 ((uint)(acc % 52)));  		acc /= 52;  		mask /= 52;  		first = false;  	}  	else {  		sb.Append (Base62 ((uint)(acc % 62)));  		acc /= 62;  		mask /= 62;  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (word < h.Length && mask < k32) {  	acc = acc << 32 | h [word++];  	mask = mask << 32 | k32;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (word < h.Length && mask < k32) {  	acc = acc << 32 | h [word++];  	mask = mask << 32 | k32;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: acc = acc << 32 | h [word++];  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: mask = mask << 32 | k32;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (first) {  	sb.Append (Base52 ((uint)(acc % 52)));  	acc /= 52;  	mask /= 52;  	first = false;  }  else {  	sb.Append (Base62 ((uint)(acc % 62)));  	acc /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (first) {  	sb.Append (Base52 ((uint)(acc % 52)));  	acc /= 52;  	mask /= 52;  	first = false;  }  else {  	sb.Append (Base62 ((uint)(acc % 62)));  	acc /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (first) {  	sb.Append (Base52 ((uint)(acc % 52)));  	acc /= 52;  	mask /= 52;  	first = false;  }  else {  	sb.Append (Base62 ((uint)(acc % 62)));  	acc /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (first) {  	sb.Append (Base52 ((uint)(acc % 52)));  	acc /= 52;  	mask /= 52;  	first = false;  }  else {  	sb.Append (Base62 ((uint)(acc % 62)));  	acc /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (first) {  	sb.Append (Base52 ((uint)(acc % 52)));  	acc /= 52;  	mask /= 52;  	first = false;  }  else {  	sb.Append (Base62 ((uint)(acc % 62)));  	acc /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: if (first) {  	sb.Append (Base52 ((uint)(acc % 52)));  	acc /= 52;  	mask /= 52;  	first = false;  }  else {  	sb.Append (Base62 ((uint)(acc % 62)));  	acc /= 62;  	mask /= 62;  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: sb.Append (Base52 ((uint)(acc % 52)));  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: acc /= 52;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: mask /= 52;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: sb.Append (Base62 ((uint)(acc % 62)));  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: acc /= 62;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: mask /= 62;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The following statement contains a magic number: if (String.IsNullOrEmpty (str))  	throw new SyntaxException (null' "number literal"' "empty number");  else {  	var d = default(double);  	if (Double.TryParse (str' out d))  		return d;  	else {  		if (str.Length == 1 && str [0] == '0')  			return 0.0;  		else {  			var n = default(double);  			var i = default(int);  			if (str [0] == '0' && (str [1] == 'x' || str [1] == 'X')) {  				i = 2;  				n = ScanBase16Variable (str' ref i);  			}  			else if (str [0] == '0') {  				i = 1;  				n = ScanBase8Variable (str' ref i);  			}  			else {  				i = 0;  				n = ScanBase10Variable (str' ref i);  			}  			if (i == str.Length || i == str.Length - 1 && (str [i] == 'l' || str [i] == 'L'))  				return (double)n;  			else  				throw new SyntaxException (null' "number literal"' "invalid digit");  		}  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The following statement contains a magic number: if (Double.TryParse (str' out d))  	return d;  else {  	if (str.Length == 1 && str [0] == '0')  		return 0.0;  	else {  		var n = default(double);  		var i = default(int);  		if (str [0] == '0' && (str [1] == 'x' || str [1] == 'X')) {  			i = 2;  			n = ScanBase16Variable (str' ref i);  		}  		else if (str [0] == '0') {  			i = 1;  			n = ScanBase8Variable (str' ref i);  		}  		else {  			i = 0;  			n = ScanBase10Variable (str' ref i);  		}  		if (i == str.Length || i == str.Length - 1 && (str [i] == 'l' || str [i] == 'L'))  			return (double)n;  		else  			throw new SyntaxException (null' "number literal"' "invalid digit");  	}  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The following statement contains a magic number: if (str.Length == 1 && str [0] == '0')  	return 0.0;  else {  	var n = default(double);  	var i = default(int);  	if (str [0] == '0' && (str [1] == 'x' || str [1] == 'X')) {  		i = 2;  		n = ScanBase16Variable (str' ref i);  	}  	else if (str [0] == '0') {  		i = 1;  		n = ScanBase8Variable (str' ref i);  	}  	else {  		i = 0;  		n = ScanBase10Variable (str' ref i);  	}  	if (i == str.Length || i == str.Length - 1 && (str [i] == 'l' || str [i] == 'L'))  		return (double)n;  	else  		throw new SyntaxException (null' "number literal"' "invalid digit");  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The following statement contains a magic number: if (str [0] == '0' && (str [1] == 'x' || str [1] == 'X')) {  	i = 2;  	n = ScanBase16Variable (str' ref i);  }  else if (str [0] == '0') {  	i = 1;  	n = ScanBase8Variable (str' ref i);  }  else {  	i = 0;  	n = ScanBase10Variable (str' ref i);  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The following statement contains a magic number: i = 2;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + c - '0';  else if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + c - '0';  else if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + c - '0';  else if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + c - '0';  else if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')  	n = n * 16 + c - '0';  else if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: n = n * 16 + c - '0';  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	n = n * 16 + c - 'a' + 10;  else if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: n = n * 16 + c - 'a' + 10;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: n = n * 16 + c - 'a' + 10;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	n = n * 16 + c - 'A' + 10;  else  	throw CharError (context);  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: n = n * 16 + c - 'A' + 10;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: n = n * 16 + c - 'A' + 10;  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,ReplaceUnicodeEscapeSequenceWithChar,The following statement contains a magic number: for (var i = 0; i < 4; i++) {  	DiscardNext ();  	HexChar (ref n' "unicode escape sequence within identifier");  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: while (true) {  	if (Eof)  		throw EOFError ("string literal");  	if (IsLineTerminator)  		throw EOLError ("string literal");  	if (c == closeQuote) {  		Discard ();  		return MakeInputElement (InputElementTag.String);  	}  	if (c == '\\') {  		DiscardNext ();  		if (Eof)  			throw EOFError ("character escape within string literal");  		if (IsLineTerminator) {  			if (strict)  				throw EOLError ("character escape within string literal");  			else {  				NextLine ();  				// \r\n is a single line terminator  				if (c == '\r') {  					DiscardNext ();  					if (!Eof && c == '\n')  						DiscardNext ();  				}  				else  					DiscardNext ();  			}  		}  		else if (c == '0') {  			DiscardNext ();  			if (Eof)  				throw EOFError ("string literal");  			if (IsDecimalDigit)  				throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  			sb.Append ('\0');  			// leave next alone  		}  		else if (c == 'x') {  			DiscardNext ();  			var n = 0;  			for (var i = 0; i < 2; i++) {  				HexChar (ref n' "hex escape in string literal");  				DiscardNext ();  			}  			sb.Append ((char)n);  		}  		else if (c == 'u') {  			DiscardNext ();  			var n = 0;  			for (var i = 0; i < 4; i++) {  				HexChar (ref n' "unicode escape in string literal");  				DiscardNext ();  			}  			sb.Append ((char)n);  		}  		else if (c == 'b') {  			DiscardNext ();  			sb.Append ('\b');  		}  		else if (c == 'f') {  			DiscardNext ();  			sb.Append ('\f');  		}  		else if (c == 'n') {  			DiscardNext ();  			sb.Append ('\n');  		}  		else if (c == 'r') {  			DiscardNext ();  			sb.Append ('\r');  		}  		else if (c == 't') {  			DiscardNext ();  			sb.Append ('\t');  		}  		else if (c == 'v') {  			DiscardNext ();  			sb.Append ('\v');  		}  		else  			ConsumeNext ();  	}  	else  		ConsumeNext ();  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: while (true) {  	if (Eof)  		throw EOFError ("string literal");  	if (IsLineTerminator)  		throw EOLError ("string literal");  	if (c == closeQuote) {  		Discard ();  		return MakeInputElement (InputElementTag.String);  	}  	if (c == '\\') {  		DiscardNext ();  		if (Eof)  			throw EOFError ("character escape within string literal");  		if (IsLineTerminator) {  			if (strict)  				throw EOLError ("character escape within string literal");  			else {  				NextLine ();  				// \r\n is a single line terminator  				if (c == '\r') {  					DiscardNext ();  					if (!Eof && c == '\n')  						DiscardNext ();  				}  				else  					DiscardNext ();  			}  		}  		else if (c == '0') {  			DiscardNext ();  			if (Eof)  				throw EOFError ("string literal");  			if (IsDecimalDigit)  				throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  			sb.Append ('\0');  			// leave next alone  		}  		else if (c == 'x') {  			DiscardNext ();  			var n = 0;  			for (var i = 0; i < 2; i++) {  				HexChar (ref n' "hex escape in string literal");  				DiscardNext ();  			}  			sb.Append ((char)n);  		}  		else if (c == 'u') {  			DiscardNext ();  			var n = 0;  			for (var i = 0; i < 4; i++) {  				HexChar (ref n' "unicode escape in string literal");  				DiscardNext ();  			}  			sb.Append ((char)n);  		}  		else if (c == 'b') {  			DiscardNext ();  			sb.Append ('\b');  		}  		else if (c == 'f') {  			DiscardNext ();  			sb.Append ('\f');  		}  		else if (c == 'n') {  			DiscardNext ();  			sb.Append ('\n');  		}  		else if (c == 'r') {  			DiscardNext ();  			sb.Append ('\r');  		}  		else if (c == 't') {  			DiscardNext ();  			sb.Append ('\t');  		}  		else if (c == 'v') {  			DiscardNext ();  			sb.Append ('\v');  		}  		else  			ConsumeNext ();  	}  	else  		ConsumeNext ();  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (c == '\\') {  	DiscardNext ();  	if (Eof)  		throw EOFError ("character escape within string literal");  	if (IsLineTerminator) {  		if (strict)  			throw EOLError ("character escape within string literal");  		else {  			NextLine ();  			// \r\n is a single line terminator  			if (c == '\r') {  				DiscardNext ();  				if (!Eof && c == '\n')  					DiscardNext ();  			}  			else  				DiscardNext ();  		}  	}  	else if (c == '0') {  		DiscardNext ();  		if (Eof)  			throw EOFError ("string literal");  		if (IsDecimalDigit)  			throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  		sb.Append ('\0');  		// leave next alone  	}  	else if (c == 'x') {  		DiscardNext ();  		var n = 0;  		for (var i = 0; i < 2; i++) {  			HexChar (ref n' "hex escape in string literal");  			DiscardNext ();  		}  		sb.Append ((char)n);  	}  	else if (c == 'u') {  		DiscardNext ();  		var n = 0;  		for (var i = 0; i < 4; i++) {  			HexChar (ref n' "unicode escape in string literal");  			DiscardNext ();  		}  		sb.Append ((char)n);  	}  	else if (c == 'b') {  		DiscardNext ();  		sb.Append ('\b');  	}  	else if (c == 'f') {  		DiscardNext ();  		sb.Append ('\f');  	}  	else if (c == 'n') {  		DiscardNext ();  		sb.Append ('\n');  	}  	else if (c == 'r') {  		DiscardNext ();  		sb.Append ('\r');  	}  	else if (c == 't') {  		DiscardNext ();  		sb.Append ('\t');  	}  	else if (c == 'v') {  		DiscardNext ();  		sb.Append ('\v');  	}  	else  		ConsumeNext ();  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (c == '\\') {  	DiscardNext ();  	if (Eof)  		throw EOFError ("character escape within string literal");  	if (IsLineTerminator) {  		if (strict)  			throw EOLError ("character escape within string literal");  		else {  			NextLine ();  			// \r\n is a single line terminator  			if (c == '\r') {  				DiscardNext ();  				if (!Eof && c == '\n')  					DiscardNext ();  			}  			else  				DiscardNext ();  		}  	}  	else if (c == '0') {  		DiscardNext ();  		if (Eof)  			throw EOFError ("string literal");  		if (IsDecimalDigit)  			throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  		sb.Append ('\0');  		// leave next alone  	}  	else if (c == 'x') {  		DiscardNext ();  		var n = 0;  		for (var i = 0; i < 2; i++) {  			HexChar (ref n' "hex escape in string literal");  			DiscardNext ();  		}  		sb.Append ((char)n);  	}  	else if (c == 'u') {  		DiscardNext ();  		var n = 0;  		for (var i = 0; i < 4; i++) {  			HexChar (ref n' "unicode escape in string literal");  			DiscardNext ();  		}  		sb.Append ((char)n);  	}  	else if (c == 'b') {  		DiscardNext ();  		sb.Append ('\b');  	}  	else if (c == 'f') {  		DiscardNext ();  		sb.Append ('\f');  	}  	else if (c == 'n') {  		DiscardNext ();  		sb.Append ('\n');  	}  	else if (c == 'r') {  		DiscardNext ();  		sb.Append ('\r');  	}  	else if (c == 't') {  		DiscardNext ();  		sb.Append ('\t');  	}  	else if (c == 'v') {  		DiscardNext ();  		sb.Append ('\v');  	}  	else  		ConsumeNext ();  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (IsLineTerminator) {  	if (strict)  		throw EOLError ("character escape within string literal");  	else {  		NextLine ();  		// \r\n is a single line terminator  		if (c == '\r') {  			DiscardNext ();  			if (!Eof && c == '\n')  				DiscardNext ();  		}  		else  			DiscardNext ();  	}  }  else if (c == '0') {  	DiscardNext ();  	if (Eof)  		throw EOFError ("string literal");  	if (IsDecimalDigit)  		throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  	sb.Append ('\0');  	// leave next alone  }  else if (c == 'x') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 2; i++) {  		HexChar (ref n' "hex escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'u') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 4; i++) {  		HexChar (ref n' "unicode escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'b') {  	DiscardNext ();  	sb.Append ('\b');  }  else if (c == 'f') {  	DiscardNext ();  	sb.Append ('\f');  }  else if (c == 'n') {  	DiscardNext ();  	sb.Append ('\n');  }  else if (c == 'r') {  	DiscardNext ();  	sb.Append ('\r');  }  else if (c == 't') {  	DiscardNext ();  	sb.Append ('\t');  }  else if (c == 'v') {  	DiscardNext ();  	sb.Append ('\v');  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (IsLineTerminator) {  	if (strict)  		throw EOLError ("character escape within string literal");  	else {  		NextLine ();  		// \r\n is a single line terminator  		if (c == '\r') {  			DiscardNext ();  			if (!Eof && c == '\n')  				DiscardNext ();  		}  		else  			DiscardNext ();  	}  }  else if (c == '0') {  	DiscardNext ();  	if (Eof)  		throw EOFError ("string literal");  	if (IsDecimalDigit)  		throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  	sb.Append ('\0');  	// leave next alone  }  else if (c == 'x') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 2; i++) {  		HexChar (ref n' "hex escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'u') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 4; i++) {  		HexChar (ref n' "unicode escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'b') {  	DiscardNext ();  	sb.Append ('\b');  }  else if (c == 'f') {  	DiscardNext ();  	sb.Append ('\f');  }  else if (c == 'n') {  	DiscardNext ();  	sb.Append ('\n');  }  else if (c == 'r') {  	DiscardNext ();  	sb.Append ('\r');  }  else if (c == 't') {  	DiscardNext ();  	sb.Append ('\t');  }  else if (c == 'v') {  	DiscardNext ();  	sb.Append ('\v');  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (c == '0') {  	DiscardNext ();  	if (Eof)  		throw EOFError ("string literal");  	if (IsDecimalDigit)  		throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  	sb.Append ('\0');  	// leave next alone  }  else if (c == 'x') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 2; i++) {  		HexChar (ref n' "hex escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'u') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 4; i++) {  		HexChar (ref n' "unicode escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'b') {  	DiscardNext ();  	sb.Append ('\b');  }  else if (c == 'f') {  	DiscardNext ();  	sb.Append ('\f');  }  else if (c == 'n') {  	DiscardNext ();  	sb.Append ('\n');  }  else if (c == 'r') {  	DiscardNext ();  	sb.Append ('\r');  }  else if (c == 't') {  	DiscardNext ();  	sb.Append ('\t');  }  else if (c == 'v') {  	DiscardNext ();  	sb.Append ('\v');  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (c == '0') {  	DiscardNext ();  	if (Eof)  		throw EOFError ("string literal");  	if (IsDecimalDigit)  		throw MsgError ("zero character escape within string literal"' "unrecognized escape sequence");  	sb.Append ('\0');  	// leave next alone  }  else if (c == 'x') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 2; i++) {  		HexChar (ref n' "hex escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'u') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 4; i++) {  		HexChar (ref n' "unicode escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'b') {  	DiscardNext ();  	sb.Append ('\b');  }  else if (c == 'f') {  	DiscardNext ();  	sb.Append ('\f');  }  else if (c == 'n') {  	DiscardNext ();  	sb.Append ('\n');  }  else if (c == 'r') {  	DiscardNext ();  	sb.Append ('\r');  }  else if (c == 't') {  	DiscardNext ();  	sb.Append ('\t');  }  else if (c == 'v') {  	DiscardNext ();  	sb.Append ('\v');  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (c == 'x') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 2; i++) {  		HexChar (ref n' "hex escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'u') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 4; i++) {  		HexChar (ref n' "unicode escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'b') {  	DiscardNext ();  	sb.Append ('\b');  }  else if (c == 'f') {  	DiscardNext ();  	sb.Append ('\f');  }  else if (c == 'n') {  	DiscardNext ();  	sb.Append ('\n');  }  else if (c == 'r') {  	DiscardNext ();  	sb.Append ('\r');  }  else if (c == 't') {  	DiscardNext ();  	sb.Append ('\t');  }  else if (c == 'v') {  	DiscardNext ();  	sb.Append ('\v');  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (c == 'x') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 2; i++) {  		HexChar (ref n' "hex escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'u') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 4; i++) {  		HexChar (ref n' "unicode escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'b') {  	DiscardNext ();  	sb.Append ('\b');  }  else if (c == 'f') {  	DiscardNext ();  	sb.Append ('\f');  }  else if (c == 'n') {  	DiscardNext ();  	sb.Append ('\n');  }  else if (c == 'r') {  	DiscardNext ();  	sb.Append ('\r');  }  else if (c == 't') {  	DiscardNext ();  	sb.Append ('\t');  }  else if (c == 'v') {  	DiscardNext ();  	sb.Append ('\v');  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: for (var i = 0; i < 2; i++) {  	HexChar (ref n' "hex escape in string literal");  	DiscardNext ();  }  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: if (c == 'u') {  	DiscardNext ();  	var n = 0;  	for (var i = 0; i < 4; i++) {  		HexChar (ref n' "unicode escape in string literal");  		DiscardNext ();  	}  	sb.Append ((char)n);  }  else if (c == 'b') {  	DiscardNext ();  	sb.Append ('\b');  }  else if (c == 'f') {  	DiscardNext ();  	sb.Append ('\f');  }  else if (c == 'n') {  	DiscardNext ();  	sb.Append ('\n');  }  else if (c == 'r') {  	DiscardNext ();  	sb.Append ('\r');  }  else if (c == 't') {  	DiscardNext ();  	sb.Append ('\t');  }  else if (c == 'v') {  	DiscardNext ();  	sb.Append ('\v');  }  else  	ConsumeNext ();  
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: for (var i = 0; i < 4; i++) {  	HexChar (ref n' "unicode escape in string literal");  	DiscardNext ();  }  
