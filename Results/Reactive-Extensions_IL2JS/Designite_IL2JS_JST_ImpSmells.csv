Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The method has 112 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,InputElement,C:\repos\Reactive-Extensions_IL2JS\JST\InputElement.cs,ToString,The method has 131 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,Lexer,The method has 121 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The method has 110 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,InputElement,The method has 112 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,PrimaryExpression,The method has 157 lines of code.
Long Method,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,Statement,The method has 329 lines of code.
Complex Method,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.LiveLabs.JavaScript.JST,IdentifierExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AccumEffects,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.LiveLabs.JavaScript.JST,ForLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubExpressions,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.JST,ForLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CompareBody,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,ForVarLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CompareBody,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,IdentifierOrKeyword,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,Exponent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,RegularExpressionLiteral,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,InputElement,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,ForVarLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,ForVarLoopClause,The method has 5 parameters. Parameters: loc' id' initializer' condition' increment
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,SimplifierContext,The method has 7 parameters. Parameters: inGlobalScope' keepFunctionNames' nameSupply' subst' statements' contextEffects' isValue
Long Parameter List,Microsoft.LiveLabs.JavaScript.JST,Parser,C:\repos\Reactive-Extensions_IL2JS\JST\Parser.cs,DelimitedList,The method has 5 parameters. Parameters: context' expected' delim' close' consumeElem
Long Statement,Microsoft.LiveLabs.JavaScript.JST,ObjectLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,GetHashCode,The length of the statement  "            return (int)Bindings.Aggregate(0x23893e81u' (h' kv) => Constants.Rot7(h) ^ Constants.Rot17((uint)kv.Key.GetHashCode()) ^ (uint)kv.Value.GetHashCode()); " is 151.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,SimplifierContext,C:\repos\Reactive-Extensions_IL2JS\JST\SimplifierContext.cs,InFreshScope,The length of the statement  "            return new SimplifierContext(false' KeepFunctionNames' NameSupply.Fork()' subst.ToMap()' new Seq<Statement>()' Effects.Bottom' isValue); " is 136.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,PopClosePunctuator,The length of the statement  "                    ("punctuator"' String.Format("closing '{0}' does not match opening '{1}' at ({2}' {3})"' closeElem.Value' openElem.Value' openElem.Loc.StartLine' openElem.Loc.StartColumn)); " is 173.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,CheckNoOpenPunctuators,The length of the statement  "            throw MsgError("eof"' String.Format("no closing '{0}' to match opening '{1}' at ({2}' {3})"' closeStr' openElem.Value' openElem.Loc.StartLine' openElem.Loc.StartColumn)); " is 170.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,IdentifierOrKeyword,The length of the statement  "                        throw MsgError("identifier"' String.Format("character '{0}' encoded by unicode escape is not a legal identifier character"' EscapedChar)); " is 138.
Long Statement,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,RegularExpressionLiteral,The length of the statement  "                        throw MsgError("regular expression literal flags"' String.Format("character '{0}' encoded by unicode escape is not a legal regular expression flag"' EscapedChar)); " is 163.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The conditional expression  "lb.HasValue &&                  ((!lb.Value && Operator.Op == BinaryOp.LogicalAND) || lb.Value && Operator.Op == BinaryOp.LogicalOR)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The conditional expression  "rb.HasValue &&                       ((rb.Value && Operator.Op == BinaryOp.LogicalAND) ||                        (!rb.Value && Operator.Op == BinaryOp.LogicalOR))"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Simplify,The conditional expression  "lb.HasValue &&                       ((lb.Value && Operator.Op == BinaryOp.LogicalAND) ||                        !lb.Value && Operator.Op == BinaryOp.LogicalOR)"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The conditional expression  "str == null || str.Length < 2 ||                  (str[0] != '"' || str[str.Length - 1] != '"') && (str[0] != '\'' || str[str.Length - 1] != '\'')"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,StatementsPseudoExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The conditional expression  "Value == null && subExpressions.Count != 0 || Value != null && subExpressions.Count != 1"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,IsFirstIdentifierChar,The conditional expression  "c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '$' || c == '_'"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,IsIdentifierChar,The conditional expression  "c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c == '$' || c == '_'"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The conditional expression  "(i == 0 && IsFirstIdentifierChar(c)) || (i > 0 && IsIdentifierChar(c))"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendStringToIdentifier,The conditional expression  "c != '$' &&                          ((i == 0 && IsFirstIdentifierChar(c)) || (i > 0 && IsIdentifierChar(c)))"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendStringToJavaScript,The conditional expression  "c >= ' ' && c <= '~' && c != '"' && c != '\'' && c != '\\'"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The conditional expression  "i == str.Length || i == str.Length - 1 && (str[i] == 'l' || str[i] == 'L')"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,PopClosePunctuator,The conditional expression  "closeElem.Tag == InputElementTag.RParen && openElem.Tag == InputElementTag.LParen ||                      closeElem.Tag == InputElementTag.RBrace && openElem.Tag == InputElementTag.LBrace ||                      closeElem.Tag == InputElementTag.RSquare && openElem.Tag == InputElementTag.LSquare"  is complex.
Complex Conditional,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,IdentifierOrKeyword,The conditional expression  "first && !IsFirstIdentifierChar || !first && !IsIdentifierChar"  is complex.
Virtual Method Call from Constructor,Microsoft.LiveLabs.JavaScript.JST,CallContext,C:\repos\Reactive-Extensions_IL2JS\JST\CallContext.cs,CallContext,The constructor "CallContext" calls a virtual method "AccumEffects".
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot1,The following statement contains a magic number: return hash << 1 | hash >> 31;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot5,The following statement contains a magic number: return hash << 5 | hash >> 27;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot5,The following statement contains a magic number: return hash << 5 | hash >> 27;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot7,The following statement contains a magic number: return hash << 7 | hash >> 25;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot7,The following statement contains a magic number: return hash << 7 | hash >> 25;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot17,The following statement contains a magic number: return hash << 17 | hash >> 15;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Constants,C:\repos\Reactive-Extensions_IL2JS\JST\Constants.cs,Rot17,The following statement contains a magic number: return hash << 17 | hash >> 15;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Expression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Nary,The following statement contains a magic number: if (expressions.Length == 0)                  throw new InvalidOperationException("binary expressions have no zero");              else if (expressions.Length == 1)                  return expressions[0];              else              {                  var res = expressions[expressions.Length - 1];                  for (var i = expressions.Length - 2; i >= 0; i--)                      res = new BinaryExpression(expressions[i]' binaryOperator' res);                  return res;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ArrayLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The following statement contains a magic number: if (Elements.Count > 4)              {                  writer.EndLine();                  writer.Append('[');                  writer.Indented                      (w =>                           {                               var first = true;                               foreach (var e in Elements)                               {                                   if (first)                                       first = false;                                   else                                       writer.Append(''');                                   writer.EndLine();                                   PrintOrSkip(w' e);                               }                           });                  writer.EndLine();                  writer.Append(']');                  writer.EndLine();              }              else              {                  writer.Append('[');                  var first = true;                  foreach (var e in Elements)                  {                      if (first)                          first = false;                      else                      {                          writer.Append(''');                          writer.Space();                      }                      PrintOrSkip(writer' e);                  }                  writer.Append(']');              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,BinaryExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 2)                  throw new InvalidOperationException("mismatched sub-expressions arity");
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CallExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendArguments,The following statement contains a magic number: if (Arguments.Count > 5)              {                  writer.Indented                      (w => w.List                                (Arguments'                                 w2 =>                                 {                                     w2.Append('(');                                     w2.EndLine();                                 }'                                 (w2' e) => e.Append(w2' Precedence.Assignment)'                                 w2 =>                                 {                                     w2.Append(''');                                     w2.EndLine();                                 }'                                 w2 => w2.Append(')')));              }              else              {                  writer.List                      (Arguments'                       w => w.Append('(')'                       (w' e) => e.Append(w' Precedence.Assignment)'                       w =>                       {                           w.Append(''');                           w.Space();                       }'                       w => w.Append(')'));              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,AppendComment,The following statement contains a magic number: if (writer.PrettyPrint)              {                  if (Comment != null)                  {                      writer.HardSpace();                      writer.Append("/* ");                      var s = 0;                      var i = 0;                      while (i < Comment.Length)                      {                          if (Comment[i] == '\r' && i < Comment.Length - 1 && Comment[i + 1] == '\n')                          {                              writer.Append(Comment.Substring(s' i - s));                              writer.EndLine();                              i += 2;                              s = i;                          }                          else if (Comment[i] == '\n' || Comment[i] == '\r')                          {                              writer.Append(Comment.Substring(s' i - s));                              writer.EndLine();                              i++;                              s = i;                          }                          else                              i++;                      }                      writer.Append(Comment.Substring(s' i - s));                      writer.Append(" */");                      writer.HardSpace();                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ConditionalExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 3)                  throw new InvalidOperationException("mismatched sub-expressions arity");
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ConditionalExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: return new ConditionalExpression(Loc' subExpressions[0]' subExpressions[1]' subExpressions[2]);
Magic Number,Microsoft.LiveLabs.JavaScript.JST,IndexExpression,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 2)                  throw new InvalidOperationException("mismatched sub-expressions arity");
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ObjectLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,Append,The following statement contains a magic number: if (Bindings.Count == 0)                  writer.Append("{}");              else if (Bindings.Count < 4)              {                  writer.Append('{');                  writer.Space();                  var first = true;                  foreach (var kv in Bindings)                  {                      if (first)                          first = false;                      else                      {                          writer.Append(''');                          writer.Space();                      }                      kv.Key.Append(writer);                      writer.Append(':');                      writer.Space();                      kv.Value.Append(writer' Precedence.Assignment);                  }                  writer.Space();                  writer.Append('}');              }              else                  writer.Indented                      (w =>                           {                               w.Append('{');                               w.EndLine();                           }'                       w =>                       {                           var first = true;                           foreach (var kv in Bindings)                           {                               if (first)                                   first = false;                               else                               {                                   w.Append(''');                                   w.EndLine();                               }                               kv.Key.Append(w);                               w.Append(':');                               w.Space();                               kv.Value.Append(w' Precedence.Assignment);                           }                       }'                       w =>                       {                           w.EndLine();                           w.Append('}');                       });
Magic Number,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The following statement contains a magic number: if (str == null || str.Length < 2 ||                  (str[0] != '"' || str[str.Length - 1] != '"') && (str[0] != '\'' || str[str.Length - 1] != '\''))                  throw new ArgumentException("unrecognized JavaScript string literal");              else                  return new StringLiteral(Lexemes.JavaScriptToString(str.Substring(1' str.Length - 2)' strict));
Magic Number,Microsoft.LiveLabs.JavaScript.JST,StringLiteral,C:\repos\Reactive-Extensions_IL2JS\JST\Expression.cs,FromJavaScript,The following statement contains a magic number: if (str == null || str.Length < 2 ||                  (str[0] != '"' || str[str.Length - 1] != '"') && (str[0] != '\'' || str[str.Length - 1] != '\''))                  throw new ArgumentException("unrecognized JavaScript string literal");              else                  return new StringLiteral(Lexemes.JavaScriptToString(str.Substring(1' str.Length - 2)' strict));
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Program,C:\repos\Reactive-Extensions_IL2JS\JST\Program.cs,ToFile,The following statement contains a magic number: if (Path.GetFullPath(fileName).Length >= 260)                  throw new ArgumentException("path is too long");
Magic Number,Microsoft.LiveLabs.JavaScript.JST,CommentStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,Append,The following statement contains a magic number: if (writer.PrettyPrint && Comment != null)              {                  writer.Append("// ");                  var s = 0;                  var i = 0;                  while (i < Comment.Length)                  {                      if (Comment[i] == '\r' && i < Comment.Length - 1 && Comment[i + 1] == '\n')                      {                          writer.Append(Comment.Substring(s' i - s));                          writer.EndLine();                          i += 2;                          s = i;                          if (i < Comment.Length)                              writer.Append("// ");                      }                      else if (Comment[i] == '\n' || Comment[i] == '\r')                      {                          writer.Append(Comment.Substring(s' i - s));                          writer.EndLine();                          i++;                          s = i;                          if (i < Comment.Length)                              writer.Append("// ");                      }                      else                          i++;                  }                  writer.Append(Comment.Substring(s' i - s));                  writer.EndLine();              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,ForEachLoopClause,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubExpressions,The following statement contains a magic number: if (subExpressions.Count != 2)                  throw new InvalidOperationException("mismatched sub-expressions arity");
Magic Number,Microsoft.LiveLabs.JavaScript.JST,IfStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubStatementss,The following statement contains a magic number: if (subStatementss.Count < 1 || subStatementss.Count > 2)                  throw new InvalidOperationException("mismatched sub-statements arity");
Magic Number,Microsoft.LiveLabs.JavaScript.JST,IfStatement,C:\repos\Reactive-Extensions_IL2JS\JST\Statement.cs,CloneWithSubStatementss,The following statement contains a magic number: return new IfStatement(Loc' Condition' subStatementss[0]' subStatementss.Count == 2 ? subStatementss[1] : null);
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base16,The following statement contains a magic number: return "0123456789abcdef"[(int)(d % 16)];
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base26,The following statement contains a magic number: return "abcdefghijklmnopqrstuvwxyz"[(int)(d % 26)];
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base36,The following statement contains a magic number: return "0123456789abcdefghijklmnopqrstuvwxyz"[(int)(d % 36)];
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base52,The following statement contains a magic number: return "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[(int)(d % 52)];
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,Base62,The following statement contains a magic number: return "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[(int)(d % 62)];
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase16,The following statement contains a magic number: while (n > 0 || mask > 0)              {                  rsb.Append(Base16(n));                  n /= 16;                  mask /= 16;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase16,The following statement contains a magic number: while (n > 0 || mask > 0)              {                  rsb.Append(Base16(n));                  n /= 16;                  mask /= 16;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase36,The following statement contains a magic number: while (n > 0 || mask > 0)              {                  rsb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendBase36,The following statement contains a magic number: while (n > 0 || mask > 0)              {                  rsb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0)              {                  if (i >= str.Length)                      throw new SyntaxException(null' "hexadecimal number"' "too few digits");                  else                  {                      var c = str[i++];                      if (c >= '0' && c <= '9')                          n = n * 16 + (uint)(c - '0');                      else if (c >= 'a' && c <= 'f')                          n = n * 16 + 10 + (uint)(c - 'a');                      else if (c >= 'A' && c <= 'F')                          n = n * 16 + 10 + (uint)(c - 'A');                      else                          throw new SyntaxException(null' "hexadecimal number"' "invalid hex digit");                      mask /= 16;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0)              {                  if (i >= str.Length)                      throw new SyntaxException(null' "hexadecimal number"' "too few digits");                  else                  {                      var c = str[i++];                      if (c >= '0' && c <= '9')                          n = n * 16 + (uint)(c - '0');                      else if (c >= 'a' && c <= 'f')                          n = n * 16 + 10 + (uint)(c - 'a');                      else if (c >= 'A' && c <= 'F')                          n = n * 16 + 10 + (uint)(c - 'A');                      else                          throw new SyntaxException(null' "hexadecimal number"' "invalid hex digit");                      mask /= 16;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0)              {                  if (i >= str.Length)                      throw new SyntaxException(null' "hexadecimal number"' "too few digits");                  else                  {                      var c = str[i++];                      if (c >= '0' && c <= '9')                          n = n * 16 + (uint)(c - '0');                      else if (c >= 'a' && c <= 'f')                          n = n * 16 + 10 + (uint)(c - 'a');                      else if (c >= 'A' && c <= 'F')                          n = n * 16 + 10 + (uint)(c - 'A');                      else                          throw new SyntaxException(null' "hexadecimal number"' "invalid hex digit");                      mask /= 16;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0)              {                  if (i >= str.Length)                      throw new SyntaxException(null' "hexadecimal number"' "too few digits");                  else                  {                      var c = str[i++];                      if (c >= '0' && c <= '9')                          n = n * 16 + (uint)(c - '0');                      else if (c >= 'a' && c <= 'f')                          n = n * 16 + 10 + (uint)(c - 'a');                      else if (c >= 'A' && c <= 'F')                          n = n * 16 + 10 + (uint)(c - 'A');                      else                          throw new SyntaxException(null' "hexadecimal number"' "invalid hex digit");                      mask /= 16;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0)              {                  if (i >= str.Length)                      throw new SyntaxException(null' "hexadecimal number"' "too few digits");                  else                  {                      var c = str[i++];                      if (c >= '0' && c <= '9')                          n = n * 16 + (uint)(c - '0');                      else if (c >= 'a' && c <= 'f')                          n = n * 16 + 10 + (uint)(c - 'a');                      else if (c >= 'A' && c <= 'F')                          n = n * 16 + 10 + (uint)(c - 'A');                      else                          throw new SyntaxException(null' "hexadecimal number"' "invalid hex digit");                      mask /= 16;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Fixed,The following statement contains a magic number: while (mask > 0)              {                  if (i >= str.Length)                      throw new SyntaxException(null' "hexadecimal number"' "too few digits");                  else                  {                      var c = str[i++];                      if (c >= '0' && c <= '9')                          n = n * 16 + (uint)(c - '0');                      else if (c >= 'a' && c <= 'f')                          n = n * 16 + 10 + (uint)(c - 'a');                      else if (c >= 'A' && c <= 'F')                          n = n * 16 + 10 + (uint)(c - 'A');                      else                          throw new SyntaxException(null' "hexadecimal number"' "invalid hex digit");                      mask /= 16;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase8Variable,The following statement contains a magic number: while (i < str.Length)              {                  var c = str[i];                  var d = default(int);                  if (c >= '0' && c <= '7')                      d = (int)(c - '0');                  else                      break;                  n *= 8;                  n += d;                  i++;                  any = true;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase10Variable,The following statement contains a magic number: while (i < str.Length)              {                  var c = str[i];                  var d = default(int);                  if (c >= '0' && c <= '9')                      d = (int)(c - '0');                  else                      break;                  n *= 10;                  n += d;                  i++;                  any = true;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: while (i < str.Length)              {                  var c = str[i];                  var d = default(int);                  if (c >= '0' && c <= '9')                      d = (int)(c - '0');                  else if (c >= 'a' && c <= 'f')                      d = (int)(c - 'a' + 10);                  else if (c >= 'A' && c <= 'F')                      d = (int)(c - 'A' + 10);                  else                      break;                  n *= 16;                  n += d;                  i++;                  any = true;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: while (i < str.Length)              {                  var c = str[i];                  var d = default(int);                  if (c >= '0' && c <= '9')                      d = (int)(c - '0');                  else if (c >= 'a' && c <= 'f')                      d = (int)(c - 'a' + 10);                  else if (c >= 'A' && c <= 'F')                      d = (int)(c - 'A' + 10);                  else                      break;                  n *= 16;                  n += d;                  i++;                  any = true;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,ScanBase16Variable,The following statement contains a magic number: while (i < str.Length)              {                  var c = str[i];                  var d = default(int);                  if (c >= '0' && c <= '9')                      d = (int)(c - '0');                  else if (c >= 'a' && c <= 'f')                      d = (int)(c - 'a' + 10);                  else if (c >= 'A' && c <= 'F')                      d = (int)(c - 'A' + 10);                  else                      break;                  n *= 16;                  n += d;                  i++;                  any = true;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: n /= 36;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: mask /= 36;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: while (n > 36 || mask > 0)              {                  sb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: while (n > 36 || mask > 0)              {                  sb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToFileName,The following statement contains a magic number: while (n > 36 || mask > 0)              {                  sb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: if (IsIdentifier(str))                  sb.Append(str);              else              {                  var i = 0;                  while (i < str.Length)                  {                      var c = default(char);                      if (str[i] == '\\' && i + 5 < str.Length &&                          str[i + 1] == 'u')                      {                          i += 2;                          c = (char)ScanBase16Fixed(str' ref i' 0xffff);                      }                      else                          c = str[i++];                      if ((i == 0 && IsFirstIdentifierChar(c)) || (i > 0 && IsIdentifierChar(c)))                          sb.Append(c);                      else                          throw new SyntaxException(null' "identifier"' "illegal identifier character");                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendJavaScriptToIdentifier,The following statement contains a magic number: if (IsIdentifier(str))                  sb.Append(str);              else              {                  var i = 0;                  while (i < str.Length)                  {                      var c = default(char);                      if (str[i] == '\\' && i + 5 < str.Length &&                          str[i + 1] == 'u')                      {                          i += 2;                          c = (char)ScanBase16Fixed(str' ref i' 0xffff);                      }                      else                          c = str[i++];                      if ((i == 0 && IsFirstIdentifierChar(c)) || (i > 0 && IsIdentifierChar(c)))                          sb.Append(c);                      else                          throw new SyntaxException(null' "identifier"' "illegal identifier character");                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: n /= 52;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: mask /= 52;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: while (n > 62 || mask > 0)              {                  sb.Append(Base62(n));                  n /= 62;                  mask /= 62;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: while (n > 62 || mask > 0)              {                  sb.Append(Base62(n));                  n /= 62;                  mask /= 62;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToIdentifier,The following statement contains a magic number: while (n > 62 || mask > 0)              {                  sb.Append(Base62(n));                  n /= 62;                  mask /= 62;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: n /= 26;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: mask /= 26;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: while (n > 36 || mask > 0)              {                  sb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: while (n > 36 || mask > 0)              {                  sb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendUIntToLowercaseIdentifier,The following statement contains a magic number: while (n > 36 || mask > 0)              {                  sb.Append(Base36(n));                  n /= 36;                  mask /= 36;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL1,The following statement contains a magic number: return v << 1 | v >> 31;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL5,The following statement contains a magic number: return v << 5 | v >> 27;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL5,The following statement contains a magic number: return v << 5 | v >> 27;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL30,The following statement contains a magic number: return v << 30 | v >> 2;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,RotL30,The following statement contains a magic number: return v << 30 | v >> 2;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: var w = new uint[80];
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: var h = new uint[5];
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h[2] = 0x98BADCFEu;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h[3] = 0x10325476u;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: h[4] = 0xC3D2E1F0u;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (start < str.Length)              {                  for (var i = 0; i < 16; i++)                  {                      w[i] = 0u;                      for (var j = 0; j < 4; j++)                          w[i] = (w[i] << 8) | (start < str.Length ? (uint)str[start++] : 0u);                  }                  for (var i = 16; i < 80; i++)                      w[i] = RotL1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);                    var a = h[0];                  var b = h[1];                  var c = h[2];                  var d = h[3];                  var e = h[4];                    for (var i = 0; i < 20; i++)                  {                      var t = RotL5(a) + ((b & c) | ((~b) & d)) + e + 0x5A827999u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 20; i < 40; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0x6ED9EBA1u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 40; i < 60; i++)                  {                      var t = RotL5(a) + ((b & c) | (b & d) | (c & d)) + e + 0x8F1BBCDCu + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                  for (var i = 60; i < 80; i++)                  {                      var t = RotL5(a) + (b ^ c ^ d) + e + 0xCA62C1D6u + w[i];                      e = d;                      d = c;                      c = RotL30(b);                      b = a;                      a = t;                  }                    h[0] += a;                  h[1] += b;                  h[2] += c;                  h[3] += d;                  h[4] += e;              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: const ulong k32 = 1ul << 32;
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,AppendHashToIdentifier,The following statement contains a magic number: while (true)              {                  if (word < h.Length && mask < k32)                  {                      acc = acc << 32 | h[word++];                      mask = mask << 32 | k32;                  }                  if (mask == 0ul)                      break;                  if (first)                  {                      sb.Append(Base52((uint)(acc % 52)));                      acc /= 52;                      mask /= 52;                      first = false;                  }                  else                  {                      sb.Append(Base62((uint)(acc % 62)));                      acc /= 62;                      mask /= 62;                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexemes,C:\repos\Reactive-Extensions_IL2JS\JST\Lexemes.cs,JavaScriptToNumber,The following statement contains a magic number: if (String.IsNullOrEmpty(str))                  throw new SyntaxException(null' "number literal"' "empty number");              else              {                  var d = default(double);                  if (Double.TryParse(str' out d))                      return d;                  else                  {                      if (str.Length == 1 && str[0] == '0')                          return 0.0;                      else                      {                          var n = default(double);                          var i = default(int);                          if (str[0] == '0' && (str[1] == 'x' || str[1] == 'X'))                          {                              i = 2;                              n = ScanBase16Variable(str' ref i);                          }                          else if (str[0] == '0')                          {                              i = 1;                              n = ScanBase8Variable(str' ref i);                          }                          else                          {                              i = 0;                              n = ScanBase10Variable(str' ref i);                          }                          if (i == str.Length || i == str.Length - 1 && (str[i] == 'l' || str[i] == 'L'))                              return (double)n;                          else                              throw new SyntaxException(null' "number literal"' "invalid digit");                      }                  }              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')                  n = n * 16 + c - '0';              else if (c >= 'a' && c <= 'f')                  n = n * 16 + c - 'a' + 10;              else if (c >= 'A' && c <= 'F')                  n = n * 16 + c - 'A' + 10;              else                  throw CharError(context);
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')                  n = n * 16 + c - '0';              else if (c >= 'a' && c <= 'f')                  n = n * 16 + c - 'a' + 10;              else if (c >= 'A' && c <= 'F')                  n = n * 16 + c - 'A' + 10;              else                  throw CharError(context);
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')                  n = n * 16 + c - '0';              else if (c >= 'a' && c <= 'f')                  n = n * 16 + c - 'a' + 10;              else if (c >= 'A' && c <= 'F')                  n = n * 16 + c - 'A' + 10;              else                  throw CharError(context);
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')                  n = n * 16 + c - '0';              else if (c >= 'a' && c <= 'f')                  n = n * 16 + c - 'a' + 10;              else if (c >= 'A' && c <= 'F')                  n = n * 16 + c - 'A' + 10;              else                  throw CharError(context);
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,HexChar,The following statement contains a magic number: if (c >= '0' && c <= '9')                  n = n * 16 + c - '0';              else if (c >= 'a' && c <= 'f')                  n = n * 16 + c - 'a' + 10;              else if (c >= 'A' && c <= 'F')                  n = n * 16 + c - 'A' + 10;              else                  throw CharError(context);
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,ReplaceUnicodeEscapeSequenceWithChar,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  DiscardNext();                  HexChar(ref n' "unicode escape sequence within identifier");              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: while (true)              {                  if (Eof)                      throw EOFError("string literal");                  if (IsLineTerminator)                      throw EOLError("string literal");                  if (c == closeQuote)                  {                      Discard();                      return MakeInputElement(InputElementTag.String);                  }                  if (c == '\\')                  {                      DiscardNext();                      if (Eof)                          throw EOFError("character escape within string literal");                      if (IsLineTerminator)                      {                          if (strict)                              throw EOLError("character escape within string literal");                          else                          {                              NextLine();                              // \r\n is a single line terminator                              if (c == '\r')                              {                                  DiscardNext();                                  if (!Eof && c == '\n')                                      DiscardNext();                              }                              else                                  DiscardNext();                          }                      }                      else if (c == '0')                      {                          DiscardNext();                          if (Eof)                              throw EOFError("string literal");                          if (IsDecimalDigit)                              throw MsgError                                  ("zero character escape within string literal"' "unrecognized escape sequence");                          sb.Append('\0');                          // leave next alone                      }                      else if (c == 'x')                      {                          DiscardNext();                          var n = 0;                          for (var i = 0; i < 2; i++)                          {                              HexChar(ref n' "hex escape in string literal");                              DiscardNext();                          }                          sb.Append((char)n);                      }                      else if (c == 'u')                      {                          DiscardNext();                          var n = 0;                          for (var i = 0; i < 4; i++)                          {                              HexChar(ref n' "unicode escape in string literal");                              DiscardNext();                          }                          sb.Append((char)n);                      }                      else if (c == 'b')                      {                          DiscardNext();                          sb.Append('\b');                      }                      else if (c == 'f')                      {                          DiscardNext();                          sb.Append('\f');                      }                      else if (c == 'n')                      {                          DiscardNext();                          sb.Append('\n');                      }                      else if (c == 'r')                      {                          DiscardNext();                          sb.Append('\r');                      }                      else if (c == 't')                      {                          DiscardNext();                          sb.Append('\t');                      }                      else if (c == 'v')                      {                          DiscardNext();                          sb.Append('\v');                      }                      else                          ConsumeNext();                  }                  else                      ConsumeNext();              }
Magic Number,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,StringLiteral,The following statement contains a magic number: while (true)              {                  if (Eof)                      throw EOFError("string literal");                  if (IsLineTerminator)                      throw EOLError("string literal");                  if (c == closeQuote)                  {                      Discard();                      return MakeInputElement(InputElementTag.String);                  }                  if (c == '\\')                  {                      DiscardNext();                      if (Eof)                          throw EOFError("character escape within string literal");                      if (IsLineTerminator)                      {                          if (strict)                              throw EOLError("character escape within string literal");                          else                          {                              NextLine();                              // \r\n is a single line terminator                              if (c == '\r')                              {                                  DiscardNext();                                  if (!Eof && c == '\n')                                      DiscardNext();                              }                              else                                  DiscardNext();                          }                      }                      else if (c == '0')                      {                          DiscardNext();                          if (Eof)                              throw EOFError("string literal");                          if (IsDecimalDigit)                              throw MsgError                                  ("zero character escape within string literal"' "unrecognized escape sequence");                          sb.Append('\0');                          // leave next alone                      }                      else if (c == 'x')                      {                          DiscardNext();                          var n = 0;                          for (var i = 0; i < 2; i++)                          {                              HexChar(ref n' "hex escape in string literal");                              DiscardNext();                          }                          sb.Append((char)n);                      }                      else if (c == 'u')                      {                          DiscardNext();                          var n = 0;                          for (var i = 0; i < 4; i++)                          {                              HexChar(ref n' "unicode escape in string literal");                              DiscardNext();                          }                          sb.Append((char)n);                      }                      else if (c == 'b')                      {                          DiscardNext();                          sb.Append('\b');                      }                      else if (c == 'f')                      {                          DiscardNext();                          sb.Append('\f');                      }                      else if (c == 'n')                      {                          DiscardNext();                          sb.Append('\n');                      }                      else if (c == 'r')                      {                          DiscardNext();                          sb.Append('\r');                      }                      else if (c == 't')                      {                          DiscardNext();                          sb.Append('\t');                      }                      else if (c == 'v')                      {                          DiscardNext();                          sb.Append('\v');                      }                      else                          ConsumeNext();                  }                  else                      ConsumeNext();              }
Duplicate Code,Microsoft.LiveLabs.JavaScript.JST,Lexer,C:\repos\Reactive-Extensions_IL2JS\JST\Lexer.cs,NumericLiteral,The method contains a code clone-set at the following line numbers (starting from the method definition): ((39' 60)' (65' 86))
