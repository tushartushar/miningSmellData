Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Net.Browser,XmlHttpRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,Open,The method has 5 parameters. Parameters: method' url' async' user' password
Long Statement,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,EndGetResponse,The length of the statement  "                throw new ArgumentException("result"' "asyncResult was not returned by the current instance from a call to BeginGetResponse."); " is 127.
Long Statement,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The length of the statement  "                    //Console.WriteLine("{0} - Code:{1} Text:{2}"' this.RequestUri.GetComponents(UriComponents.Path' UriFormat.SafeUnescaped)' request.Status' request.StatusText); " is 159.
Long Statement,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The length of the statement  "                    var httpWebResponse = new ClientHttpWebResponse(this.Method' this.RequestUri' (HttpStatusCode)request.Status' sw.BaseStream); " is 125.
Long Statement,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The length of the statement  "                        resultGetResponse.SetAsCompleted(new WebException("Request failure code:" + request.Status' null' WebExceptionStatus.UnknownError' httpWebResponse)' false); " is 156.
Magic Number,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The following statement contains a magic number: switch (request.ReadyState)              {                  #region Debugging Information                  //case 0:                  //    Console.WriteLine("HttpWebRequest.State 0 - Initialized");                  //    break;                                        //case 1:                  //    Console.WriteLine("HttpWebRequest.State 1 - Opened");                  //    break;                    //case 2:                  //    Console.WriteLine("HttpWebRequest.State 2 - Send called");                  //    break;                  //case 3:                  //    Console.WriteLine("HttpWebRequest.State 3 - Receiving data");                  //    break;                  #endregion                  case 4:                      hasResponse = true;                        //Console.WriteLine("=========================================================");                      //Console.WriteLine("==================RESPONSE RECEIVED======================");                       //Console.WriteLine("{0} - Code:{1} Text:{2}"' this.RequestUri.GetComponents(UriComponents.Path' UriFormat.SafeUnescaped)' request.Status' request.StatusText);                      //Console.WriteLine("HEADERS: {0}"' request.GetAllResponseHeaders());                                          //Console.WriteLine("RESPONSE: {0}"' request.ResponseText);                                            StreamWriter sw = new StreamWriter((Stream)null);                      sw.Write(request.ResponseText);                                                               var httpWebResponse = new ClientHttpWebResponse(this.Method' this.RequestUri' (HttpStatusCode)request.Status' sw.BaseStream);                      string responseHeaders = request.GetAllResponseHeaders();                                            if (responseHeaders != null)                      {                          var lines = responseHeaders.Split(new char[] { '\r' }' StringSplitOptions.RemoveEmptyEntries);                          foreach (var headervalue in lines)                          {                                                            int splitter = headervalue.IndexOf(": ");                                // We expect the first character to be ASCII 10                              if ((int)headervalue[0] != 10 || splitter == -1)                              {                                  continue;                              }                              else                              {                                  string key = headervalue.Substring(1' splitter - 1);                                  string value = headervalue.Substring(splitter + 2);                                  httpWebResponse.Headers[key] = value;                                  //Console.WriteLine("Key>[{0}] Value>[{1}]"' key' value);                              }                                                      }                      }                        //Console.WriteLine("==================END-RESPONSE RECEIVED======================");                         if (this.request.Status >= 300) // Error or Warning Range                      {                          resultGetResponse.SetAsCompleted(new WebException("Request failure code:" + request.Status' null' WebExceptionStatus.UnknownError' httpWebResponse)' false);                      }                      else                      {                          resultGetResponse.SetAsCompleted(httpWebResponse' false);                      }                        break;              }
Magic Number,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The following statement contains a magic number: switch (request.ReadyState)              {                  #region Debugging Information                  //case 0:                  //    Console.WriteLine("HttpWebRequest.State 0 - Initialized");                  //    break;                                        //case 1:                  //    Console.WriteLine("HttpWebRequest.State 1 - Opened");                  //    break;                    //case 2:                  //    Console.WriteLine("HttpWebRequest.State 2 - Send called");                  //    break;                  //case 3:                  //    Console.WriteLine("HttpWebRequest.State 3 - Receiving data");                  //    break;                  #endregion                  case 4:                      hasResponse = true;                        //Console.WriteLine("=========================================================");                      //Console.WriteLine("==================RESPONSE RECEIVED======================");                       //Console.WriteLine("{0} - Code:{1} Text:{2}"' this.RequestUri.GetComponents(UriComponents.Path' UriFormat.SafeUnescaped)' request.Status' request.StatusText);                      //Console.WriteLine("HEADERS: {0}"' request.GetAllResponseHeaders());                                          //Console.WriteLine("RESPONSE: {0}"' request.ResponseText);                                            StreamWriter sw = new StreamWriter((Stream)null);                      sw.Write(request.ResponseText);                                                               var httpWebResponse = new ClientHttpWebResponse(this.Method' this.RequestUri' (HttpStatusCode)request.Status' sw.BaseStream);                      string responseHeaders = request.GetAllResponseHeaders();                                            if (responseHeaders != null)                      {                          var lines = responseHeaders.Split(new char[] { '\r' }' StringSplitOptions.RemoveEmptyEntries);                          foreach (var headervalue in lines)                          {                                                            int splitter = headervalue.IndexOf(": ");                                // We expect the first character to be ASCII 10                              if ((int)headervalue[0] != 10 || splitter == -1)                              {                                  continue;                              }                              else                              {                                  string key = headervalue.Substring(1' splitter - 1);                                  string value = headervalue.Substring(splitter + 2);                                  httpWebResponse.Headers[key] = value;                                  //Console.WriteLine("Key>[{0}] Value>[{1}]"' key' value);                              }                                                      }                      }                        //Console.WriteLine("==================END-RESPONSE RECEIVED======================");                         if (this.request.Status >= 300) // Error or Warning Range                      {                          resultGetResponse.SetAsCompleted(new WebException("Request failure code:" + request.Status' null' WebExceptionStatus.UnknownError' httpWebResponse)' false);                      }                      else                      {                          resultGetResponse.SetAsCompleted(httpWebResponse' false);                      }                        break;              }
Magic Number,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The following statement contains a magic number: switch (request.ReadyState)              {                  #region Debugging Information                  //case 0:                  //    Console.WriteLine("HttpWebRequest.State 0 - Initialized");                  //    break;                                        //case 1:                  //    Console.WriteLine("HttpWebRequest.State 1 - Opened");                  //    break;                    //case 2:                  //    Console.WriteLine("HttpWebRequest.State 2 - Send called");                  //    break;                  //case 3:                  //    Console.WriteLine("HttpWebRequest.State 3 - Receiving data");                  //    break;                  #endregion                  case 4:                      hasResponse = true;                        //Console.WriteLine("=========================================================");                      //Console.WriteLine("==================RESPONSE RECEIVED======================");                       //Console.WriteLine("{0} - Code:{1} Text:{2}"' this.RequestUri.GetComponents(UriComponents.Path' UriFormat.SafeUnescaped)' request.Status' request.StatusText);                      //Console.WriteLine("HEADERS: {0}"' request.GetAllResponseHeaders());                                          //Console.WriteLine("RESPONSE: {0}"' request.ResponseText);                                            StreamWriter sw = new StreamWriter((Stream)null);                      sw.Write(request.ResponseText);                                                               var httpWebResponse = new ClientHttpWebResponse(this.Method' this.RequestUri' (HttpStatusCode)request.Status' sw.BaseStream);                      string responseHeaders = request.GetAllResponseHeaders();                                            if (responseHeaders != null)                      {                          var lines = responseHeaders.Split(new char[] { '\r' }' StringSplitOptions.RemoveEmptyEntries);                          foreach (var headervalue in lines)                          {                                                            int splitter = headervalue.IndexOf(": ");                                // We expect the first character to be ASCII 10                              if ((int)headervalue[0] != 10 || splitter == -1)                              {                                  continue;                              }                              else                              {                                  string key = headervalue.Substring(1' splitter - 1);                                  string value = headervalue.Substring(splitter + 2);                                  httpWebResponse.Headers[key] = value;                                  //Console.WriteLine("Key>[{0}] Value>[{1}]"' key' value);                              }                                                      }                      }                        //Console.WriteLine("==================END-RESPONSE RECEIVED======================");                         if (this.request.Status >= 300) // Error or Warning Range                      {                          resultGetResponse.SetAsCompleted(new WebException("Request failure code:" + request.Status' null' WebExceptionStatus.UnknownError' httpWebResponse)' false);                      }                      else                      {                          resultGetResponse.SetAsCompleted(httpWebResponse' false);                      }                        break;              }
Magic Number,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The following statement contains a magic number: switch (request.ReadyState)              {                  #region Debugging Information                  //case 0:                  //    Console.WriteLine("HttpWebRequest.State 0 - Initialized");                  //    break;                                        //case 1:                  //    Console.WriteLine("HttpWebRequest.State 1 - Opened");                  //    break;                    //case 2:                  //    Console.WriteLine("HttpWebRequest.State 2 - Send called");                  //    break;                  //case 3:                  //    Console.WriteLine("HttpWebRequest.State 3 - Receiving data");                  //    break;                  #endregion                  case 4:                      hasResponse = true;                        //Console.WriteLine("=========================================================");                      //Console.WriteLine("==================RESPONSE RECEIVED======================");                       //Console.WriteLine("{0} - Code:{1} Text:{2}"' this.RequestUri.GetComponents(UriComponents.Path' UriFormat.SafeUnescaped)' request.Status' request.StatusText);                      //Console.WriteLine("HEADERS: {0}"' request.GetAllResponseHeaders());                                          //Console.WriteLine("RESPONSE: {0}"' request.ResponseText);                                            StreamWriter sw = new StreamWriter((Stream)null);                      sw.Write(request.ResponseText);                                                               var httpWebResponse = new ClientHttpWebResponse(this.Method' this.RequestUri' (HttpStatusCode)request.Status' sw.BaseStream);                      string responseHeaders = request.GetAllResponseHeaders();                                            if (responseHeaders != null)                      {                          var lines = responseHeaders.Split(new char[] { '\r' }' StringSplitOptions.RemoveEmptyEntries);                          foreach (var headervalue in lines)                          {                                                            int splitter = headervalue.IndexOf(": ");                                // We expect the first character to be ASCII 10                              if ((int)headervalue[0] != 10 || splitter == -1)                              {                                  continue;                              }                              else                              {                                  string key = headervalue.Substring(1' splitter - 1);                                  string value = headervalue.Substring(splitter + 2);                                  httpWebResponse.Headers[key] = value;                                  //Console.WriteLine("Key>[{0}] Value>[{1}]"' key' value);                              }                                                      }                      }                        //Console.WriteLine("==================END-RESPONSE RECEIVED======================");                         if (this.request.Status >= 300) // Error or Warning Range                      {                          resultGetResponse.SetAsCompleted(new WebException("Request failure code:" + request.Status' null' WebExceptionStatus.UnknownError' httpWebResponse)' false);                      }                      else                      {                          resultGetResponse.SetAsCompleted(httpWebResponse' false);                      }                        break;              }
Missing Default,System.Net.Browser,ClientHttpWebRequest,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\System.Windows\System\Net\Browser\ClientHttpWebRequest.cs,OnStateChanged,The following switch statement is missing a default case: switch (request.ReadyState)              {                  #region Debugging Information                  //case 0:                  //    Console.WriteLine("HttpWebRequest.State 0 - Initialized");                  //    break;                                        //case 1:                  //    Console.WriteLine("HttpWebRequest.State 1 - Opened");                  //    break;                    //case 2:                  //    Console.WriteLine("HttpWebRequest.State 2 - Send called");                  //    break;                  //case 3:                  //    Console.WriteLine("HttpWebRequest.State 3 - Receiving data");                  //    break;                  #endregion                  case 4:                      hasResponse = true;                        //Console.WriteLine("=========================================================");                      //Console.WriteLine("==================RESPONSE RECEIVED======================");                       //Console.WriteLine("{0} - Code:{1} Text:{2}"' this.RequestUri.GetComponents(UriComponents.Path' UriFormat.SafeUnescaped)' request.Status' request.StatusText);                      //Console.WriteLine("HEADERS: {0}"' request.GetAllResponseHeaders());                                          //Console.WriteLine("RESPONSE: {0}"' request.ResponseText);                                            StreamWriter sw = new StreamWriter((Stream)null);                      sw.Write(request.ResponseText);                                                               var httpWebResponse = new ClientHttpWebResponse(this.Method' this.RequestUri' (HttpStatusCode)request.Status' sw.BaseStream);                      string responseHeaders = request.GetAllResponseHeaders();                                            if (responseHeaders != null)                      {                          var lines = responseHeaders.Split(new char[] { '\r' }' StringSplitOptions.RemoveEmptyEntries);                          foreach (var headervalue in lines)                          {                                                            int splitter = headervalue.IndexOf(": ");                                // We expect the first character to be ASCII 10                              if ((int)headervalue[0] != 10 || splitter == -1)                              {                                  continue;                              }                              else                              {                                  string key = headervalue.Substring(1' splitter - 1);                                  string value = headervalue.Substring(splitter + 2);                                  httpWebResponse.Headers[key] = value;                                  //Console.WriteLine("Key>[{0}] Value>[{1}]"' key' value);                              }                                                      }                      }                        //Console.WriteLine("==================END-RESPONSE RECEIVED======================");                         if (this.request.Status >= 300) // Error or Warning Range                      {                          resultGetResponse.SetAsCompleted(new WebException("Request failure code:" + request.Status' null' WebExceptionStatus.UnknownError' httpWebResponse)' false);                      }                      else                      {                          resultGetResponse.SetAsCompleted(httpWebResponse' false);                      }                        break;              }
