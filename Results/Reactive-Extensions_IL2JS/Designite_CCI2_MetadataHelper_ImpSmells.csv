Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,TryNextPermutation,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetImplicitlyImplementedInterfaceMethods,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetImplicitlyOverriddenBaseClassMethod,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,IsVisibleOutsideAssembly,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendParameter,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,GetTypeFor,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeMember,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeMember,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,DispatchAsReference,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,ClrHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ClrOperandStackTypeFor,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,ClrHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ClrOperandStackTypeFor,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,EffectiveBaseClass,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,VisibilityIntersection,Cyclomatic complexity of the method is 43
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetField,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetMethod,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ParametersAreEquivalent,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,SizeOfType,Cyclomatic complexity of the method is 28
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypeAlignment,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,AppendArrayDimensions,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetTypeName,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetGenericTypeInstanceName,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSignatureInternId,The method has 6 parameters. Parameters: callingConvention' parameters' extraArgumentTypes' returnValueCustomModifiers' returnValueIsByRef' returnType
Long Parameter List,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetFunctionPointerTypeReferenceInternId,The method has 6 parameters. Parameters: callingConvention' parameters' extraArgumentTypes' returnValueCustomModifiers' returnValueIsByRef' returnType
Long Parameter List,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetFunctionPointerTypeReferenceInternedKey,The method has 6 parameters. Parameters: callingConvention' parameters' extraArgumentTypes' returnValueCustomModifiers' returnValueIsByRef' returnType
Long Parameter List,Microsoft.Cci,SignatureStore,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,SignatureStore,The method has 8 parameters. Parameters: callingConvention' requiredParameterListInteredId' extraParameterListInteredId' returnValueIsByRef' returnValueCustomModifiersListInteredId' returnTypeReferenceInteredId' genericParameterCount' internedId
Long Parameter List,Microsoft.Cci,GlobalAssemblyCache,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,CreateAssemblyEnum,The method has 5 parameters. Parameters: ppEnum' pAppCtx' pName' dwFlags' pvReserved
Long Parameter List,Microsoft.Cci,IAssemblyName,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,BindToObject,The method has 8 parameters. Parameters: refIID' pAsmBindSink' pApplicationContext' szCodeBase' llFlags' pvReserved' cbReserved' ppv
Long Parameter List,Microsoft.Cci,MethodReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,MethodReference,The method has 7 parameters. Parameters: host' containingType' callingConvention' returnType' name' genericParameterCount' parameterTypes
Long Parameter List,Microsoft.Cci,MethodReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,MethodReference,The method has 8 parameters. Parameters: host' containingType' callingConvention' returnType' name' genericParameterCount' parameters' extraParameterTypes
Long Parameter List,Microsoft.Cci,NamespaceTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,NamespaceTypeReference,The method has 7 parameters. Parameters: host' containingUnitNamespace' name' genericParameterCount' isEnum' isValueType' typeCode
Long Parameter List,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,CreateReference,The method has 5 parameters. Parameters: assemblyReference' isValueType' genericParameterCount' typeCode' names
Long Parameter List,Microsoft.Cci,FunctionPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,FunctionPointerType,The method has 7 parameters. Parameters: callingConvention' returnValueIsByRef' type' returnValueCustomModifiers' parameters' extraArgumentTypes' internFactory
Long Parameter List,Microsoft.Cci,Matrix,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,Matrix,The method has 5 parameters. Parameters: elementType' rank' lowerBounds' sizes' internFactory
Long Parameter List,Microsoft.Cci,Matrix,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetMatrix,The method has 5 parameters. Parameters: elementType' rank' lowerBounds' sizes' internFactory
Long Parameter List,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializedNestedTypeDefinition,The method has 5 parameters. Parameters: unspecializedVersion' partiallySpecializedVersion' containingTypeDefinition' containingGenericTypeInstance' internFactory
Long Parameter List,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,GetType,The method has 5 parameters. Parameters: nameTable' namespaceDefinition' typeName' genericParameterCount' offset
Long Parameter List,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,GetNamespaceType,The method has 5 parameters. Parameters: nameTable' namespaceDefinition' typeName' genericParameterCount' offset
Long Parameter List,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,GetNestedType,The method has 5 parameters. Parameters: nameTable' typeDefinition' typeName' genericParameterCount' offset
Long Parameter List,Microsoft.Cci,MemoryMappedFile,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnmanagedFileIO.cs,CreateFileMapping,The method has 6 parameters. Parameters: hFile' lpAttributes' flProtect' dwMaximumSizeHigh' dwMaximumSizeLow' lpName
Long Parameter List,Microsoft.Cci,MemoryMappedFile,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnmanagedFileIO.cs,MapViewOfFile,The method has 5 parameters. Parameters: hFileMappingObject' dwDesiredAccess' dwFileOffsetHigh' dwFileOffsetLow' dwNumberOfBytesToMap
Long Identifier,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter contractAssemblySymbolicIdentity is 32.
Long Identifier,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter systemCoreAssemblySymbolicIdentity is 34.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNamespaceTypeReferenceInternId,The length of the parameter containingUnitNamespaceInteredId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNestedTypeReferenceInternId,The length of the parameter containingTypeReferenceInteredId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetGenericMethodParameterReferenceInternId,The length of the parameter definingMethodReferenceInternId is 31.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSignatureInternId,The length of the parameter requiredParameterTypesInternedId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSignatureInternId,The length of the parameter returnValueCustomModifiersInternedId is 36.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the parameter containingTypeReferenceInternedId is 33.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the parameter requiredParameterTypesInternedId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the parameter returnValueCustomModifiersInternedId is 36.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCustomModifierListInternId,The length of the parameter currentCustomModifierInternedId is 31.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter CurrentCustomModifierInternValue is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter CurrentCustomModifierListInternValue is 36.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter CurrentParameterTypeInternValue is 31.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter CurrentParameterTypeListInternValue is 35.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter CurrentMethodReferenceInternValue is 33.
Long Identifier,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter GenericMethodTypeParameterHashTable is 35.
Long Identifier,Microsoft.Cci,SignatureStore,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,SignatureStore,The length of the parameter requiredParameterListInteredId is 30.
Long Identifier,Microsoft.Cci,SignatureStore,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,SignatureStore,The length of the parameter returnValueCustomModifiersListInteredId is 39.
Long Identifier,Microsoft.Cci,SignatureStore,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter RequiredParameterListInternedId is 31.
Long Identifier,Microsoft.Cci,SignatureStore,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,,The length of the parameter ReturnValueCustomModifiersListInteredId is 39.
Long Identifier,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,,The length of the parameter GenericMethodParameterEqualityComparer is 38.
Long Identifier,Microsoft.Cci,SpecializedEventDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,SpecializedFieldDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,SpecializedGenericMethodParameter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,SpecializedMethodDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,SpecializedPropertyDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemDiagnosticsContractsContract is 34.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemCollectionsGenericDictionary is 34.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemCollectionsGenericICollection is 35.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemCollectionsGenericIEnumerable is 35.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemCollectionsGenericIEnumerator is 35.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeCompilerServicesCallConvCdecl is 42.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeCompilerServicesCompilerGeneratedAttribute is 55.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeCompilerServicesExtensionAttribute is 47.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeCompilerServicesFriendAccessAllowedAttribute is 57.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeCompilerServicesIsConst is 36.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeCompilerServicesIsVolatile is 39.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeCompilerServicesReferenceAssemblyAttribute is 55.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemRuntimeInteropServicesDllImportAttribute is 46.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemSecurityPermissionsSecurityAction is 39.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemSecuritySecurityCriticalAttribute is 39.
Long Identifier,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,,The length of the parameter systemSecuritySecuritySafeCriticalAttribute is 43.
Long Identifier,Microsoft.Cci,Scope<MemberType>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,,The length of the parameter caseSensitiveMemberNameToMemberListMap is 38.
Long Identifier,Microsoft.Cci,Scope<MemberType>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,,The length of the parameter caseInsensitiveMemberNameToMemberListMap is 40.
Long Identifier,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the parameter operationExceptionInformations is 30.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,DispatchAsReference,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,BaseMetadataVisitor,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,BaseMetadataVisitor,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,UnitSetNamespace,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,,The length of the parameter nestedUnitNamespaceToNestedUnitSetNamespaceMap is 46.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "          //The loaded assemblies have an opinion on the identity of the core assembly. By default' we are going to respect that opinion. " is 127.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "            //However' they do not know where to find it. (This will only be non empty if one of the loaded assemblies itself is the core assembly.) " is 136.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "              //We don't know where to find the core assembly that the loaded assemblies want' but we do know where to find the core assembly " is 127.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "              //that we are running on. Perhaps it is the same assembly as the one we've identified. In that case we know where it can be found. " is 130.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "              var myCore = new AssemblyIdentity(this.NameTable.GetNameFor(coreAssemblyName.Name)' ""' coreAssemblyName.Version' coreAssemblyName.GetPublicKeyToken()' loc); " is 157.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "            //TODO: if the core assembly being referenced is not the same as the one running the host' probe in the standard places to find its location. " is 141.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "      //In this case' we have little option but to choose the identity of the core assembly of the platform we are running on. " is 120.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "      return new AssemblyIdentity(this.NameTable.GetNameFor(coreAssemblyName.Name)' ""' coreAssemblyName.Version' coreAssemblyName.GetPublicKeyToken()' loc); " is 151.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,ReportError,The length of the statement  "        Microsoft.Cci.ErrorEventArgs errorEventArguments = new Microsoft.Cci.ErrorEventArgs(error.ErrorReporter' error.Location' errors.AsReadOnly()); " is 142.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "        IBinaryDocumentMemoryBlock binDocMemoryBlock = MemoryMappedFile.CreateMemoryMappedFile(sourceDocument.Location' sourceDocument); " is 128.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "        IBinaryDocumentMemoryBlock binDocMemoryBlock = UnmanagedBinaryMemoryBlock.CreateUnmanagedBinaryMemoryBlock(sourceDocument.Location' sourceDocument); " is 148.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "        IBinaryDocumentMemoryBlock binDocMemoryBlock = MemoryMappedFile.CreateMemoryMappedFile(newBinaryDocument.Location' newBinaryDocument); " is 134.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "        IBinaryDocumentMemoryBlock binDocMemoryBlock = UnmanagedBinaryMemoryBlock.CreateUnmanagedBinaryMemoryBlock(newBinaryDocument.Location' newBinaryDocument); " is 154.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNestedNamespaceInternId,The length of the statement  "      uint value = this.NestedNamespaceHashtable.Find(parentNamespaceInternedId' (uint)nestedUnitNamespaceReference.Name.UniqueKey); " is 126.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetUnitNamespaceInternId,The length of the statement  "      INestedUnitNamespaceReference/*?*/ nestedUnitNamespaceReference = unitNamespaceReference as INestedUnitNamespaceReference; " is 122.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNamespaceTypeReferenceInternId,The length of the statement  "      NamespaceTypeStore nsTypeStore1 = new NamespaceTypeStore(containingUnitNamespaceInteredId' genericParameterCount' this.CurrentTypeInternValue++); " is 145.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNestedTypeReferenceInternId,The length of the statement  "      NestedTypeStore nstTypeStore1 = new NestedTypeStore(containingTypeReferenceInteredId' genericParameterCount' this.CurrentTypeInternValue++); " is 140.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMatrixTypeReferenceInternId,The length of the statement  "      MatrixTypeStore matrixTypeStore1 = new MatrixTypeStore(rank' new List<int>(lowerBounds).ToArray()' new List<ulong>(sizes).ToArray()' this.CurrentTypeInternValue++); " is 164.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetGenericTypeParameterReferenceInternId,The length of the statement  "      uint definingTypeReferenceInternId = this.GetTypeReferenceInternId(GetUninstantiatedGenericType(definingTypeReference)); " is 120.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetParameterTypeInternId,The length of the statement  "      ParameterTypeStore parameterTypeStore1 = new ParameterTypeStore(parameterTypeInformation.IsByReference' customModifiersInternId' this.CurrentParameterTypeInternValue++); " is 169.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSignatureInternId,The length of the statement  "      uint returnValueCustomModifiersInternedId = this.GetCustomModifierListInternId(returnValueCustomModifiers.GetEnumerator()); " is 123.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSignatureInternId,The length of the statement  "      SignatureStore signatureStore1 = new SignatureStore(callingConvention' requiredParameterTypesInternedId' extraArgumentTypesInteredId' returnValueIsByRef' returnValueCustomModifiersInternedId' returnTypeReferenceInternedId' 0' this.CurrentSignatureInternValue++); " is 262.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the statement  "        returnValueCustomModifiersInternedId = this.GetCustomModifierListInternId(methodReference.ReturnValueCustomModifiers.GetEnumerator()); " is 134.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the statement  "      SignatureStore signatureStore1 = new SignatureStore(methodReference.CallingConvention' requiredParameterTypesInternedId' " is 120.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the statement  "        0' methodReference.ReturnValueIsByRef' returnValueCustomModifiersInternedId' returnTypeReferenceInternedId' genericParameterCount' " is 130.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "      IGenericMethodParameterReference/*?*/ genericMethodParameterReference = typeReference as IGenericMethodParameterReference; " is 122.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "        return this.GetGenericMethodParameterReferenceInternId(genericMethodParameterReference.DefiningMethod' genericMethodParameterReference.Index); " is 142.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "      //^ assume false; //It is an informal requirement that all classes implementing ITypeReference should produce a non null result for one of the calls above. " is 155.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTypeReferenceInternId,The length of the statement  "        return this.GetModifiedTypeReferenceInternId(modifiedTypeReference.UnmodifiedType' modifiedTypeReference.CustomModifiers); " is 122.
Long Statement,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetFunctionPointerTypeReferenceInternedKey,The length of the statement  "        return this.GetFunctionPointerTypeReferenceInternId(callingConvention' parameters' extraArgumentTypes' returnValueCustomModifiers' returnValueIsByRef' returnType); " is 163.
Long Statement,Microsoft.Cci,NameTable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNameFor,The length of the statement  "          //^ assume result.Value == name; //Only this routine ever adds entries to the table and it only ever adds entries for which this is true. TODO: it would be nice to be able express this as an invariant. " is 201.
Long Statement,Microsoft.Cci,NameTable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNameFor,The length of the statement  "        //string lowerCaseName = name.ToLower(CultureInfo.InvariantCulture); //REVIEW: is it safer to use ToUpperInvariant' or does it make no difference? " is 146.
Long Statement,Microsoft.Cci,GlobalAssemblyCache,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,Contains,The length of the statement  "        var gacKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"\Software\Microsoft\.NETCompactFramework\Installer\Assemblies\Global"); " is 135.
Long Statement,Microsoft.Cci,GlobalAssemblyCache,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "        var gacKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"\Software\Microsoft\.NETCompactFramework\Installer\Assemblies\Global"); " is 135.
Long Statement,Microsoft.Cci,GlobalAssemblyCache,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "          if (assemblyIdentity.Equals(new AssemblyIdentity(metadataHost.NameTable.GetNameFor(cn.Name)' cn.Culture' cn.Version' cn.PublicKeyToken' ""))) { " is 143.
Long Statement,Microsoft.Cci,AssemblyName,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "      assemblyCache.QueryAssemblyInfo(ASSEMBLYINFO_FLAG.VALIDATE | ASSEMBLYINFO_FLAG.GETSIZE' this.StrongName' ref assemblyInfo); " is 123.
Long Statement,Microsoft.Cci,AssemblyName,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "      assemblyCache.QueryAssemblyInfo(ASSEMBLYINFO_FLAG.VALIDATE | ASSEMBLYINFO_FLAG.GETSIZE' this.StrongName' ref assemblyInfo); " is 123.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The length of the statement  "        List<IFieldDefinition> fields = new List<IFieldDefinition>(IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition>(members)); " is 145.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The length of the statement  "          if (f.Type.ResolvedType == item) continue; // in case we are calculating the offset of an anonymous type' skip the implicit field of that type " is 142.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetExplicitlyOverriddenMethods,The length of the statement  "      foreach (IMethodImplementation methodImplementation in overridingMethod.ContainingTypeDefinition.ExplicitImplementationOverrides) { " is 131.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,The length of the statement  "        List<IFieldDefinition> fields = new List<IFieldDefinition>(IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition>(members)); " is 145.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetImplicitlyImplementedInterfaceMethods,The length of the statement  "      foreach (IMethodImplementation methodImplementation in implementingMethod.ContainingTypeDefinition.ExplicitImplementationOverrides) { " is 133.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetImplicitlyImplementedInterfaceMethods,The length of the statement  "        foreach (ITypeDefinitionMember interfaceMember in interfaceReference.ResolvedType.GetMembersNamed(implementingMethod.Name' false)) { " is 132.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetImplicitlyOverriddenBaseClassMethod,The length of the statement  "        IMethodDefinition overriddenMethod = GetImplicitlyOverriddenBaseClassMethod(derivedClassMethod' baseClassReference.ResolvedType); " is 129.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetImplicitlyOverriddenBaseClassMethod,The length of the statement  "        IMethodDefinition overriddenMethod = GetImplicitlyOverriddenBaseClassMethod(derivedClassMethod' baseClassReference.ResolvedType); " is 129.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GenericMethodSignaturesAreEqual,The length of the statement  "      if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(method1.Type' method2.Type)) return false; " is 140.
Long Statement,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GenericMethodSignaturesAreEqual,The length of the statement  "      return IteratorHelper.EnumerablesAreEqual(method1.Parameters' method2.Parameters' GenericMethodParameterEqualityComparer); " is 122.
Long Statement,Microsoft.Cci,MethodReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,ToString,The length of the statement  "      return MemberHelper.GetMethodSignature(this' NameFormattingOptions.ReturnType|NameFormattingOptions.TypeParameters|NameFormattingOptions.Signature); " is 148.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetEventSignature,The length of the statement  "        sb.Append(this.typeNameFormatter.GetTypeName(eventDef.ContainingType' formattingOptions & ~NameFormattingOptions.DocumentationIdMemberKind)); " is 141.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetFieldSignature,The length of the statement  "        sb.Append(this.typeNameFormatter.GetTypeName(field.ContainingType' formattingOptions & ~NameFormattingOptions.DocumentationIdMemberKind)); " is 138.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetMemberSignature,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0) name = this.MapToDocumentationIdName(name); " is 126.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetMethodSignature,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 && method.ResolvedMethod.IsSpecialName && (method.Name.Value.Contains("op_Explicit") || method.Name.Value.Contains("op_Implicit"))) { " is 215.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetMethodSignature,The length of the statement  "        sb.Append(this.typeNameFormatter.GetTypeName(method.Type' formattingOptions & ~NameFormattingOptions.DocumentationIdMemberKind)); " is 129.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendMethodParameters,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.Signature) == 0 || ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 && !IteratorHelper.EnumerableIsNotEmpty<IParameterTypeInformation>(parameters))) return; " is 233.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendMethodName,The length of the statement  "        sb.Append(this.typeNameFormatter.GetTypeName(method.ContainingType' formattingOptions & ~NameFormattingOptions.DocumentationIdMemberKind)); " is 139.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendMethodName,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0) methodName = this.MapToDocumentationIdName(methodName); " is 138.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendParameter,The length of the statement  "      sb.Append(this.typeNameFormatter.GetTypeName(param.Type' formattingOptions & ~NameFormattingOptions.DocumentationIdMemberKind)); " is 128.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendPropertyName,The length of the statement  "        sb.Append(this.typeNameFormatter.GetTypeName(property.ContainingType' formattingOptions & ~NameFormattingOptions.DocumentationIdMemberKind)); " is 141.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendPropertyName,The length of the statement  "      //TODO: if property name appears in a default members attribute of the containing type and not PreserveSpecialNames' use "this" " is 127.
Long Statement,Microsoft.Cci,GenericMethodInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,ToString,The length of the statement  "        NameFormattingOptions.ReturnType|NameFormattingOptions.Signature|NameFormattingOptions.ParameterModifiers|NameFormattingOptions.ParameterName); " is 143.
Long Statement,Microsoft.Cci,GenericMethodInstanceReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,ToString,The length of the statement  "        NameFormattingOptions.ReturnType|NameFormattingOptions.Signature|NameFormattingOptions.ParameterModifiers|NameFormattingOptions.ParameterName); " is 143.
Long Statement,Microsoft.Cci,SpecializedEventDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the statement  "        partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference(partiallySpecializedTypeReference' specializedParent' this.ContainingGenericTypeInstance.InternFactory); " is 177.
Long Statement,Microsoft.Cci,SpecializedEventDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 194.
Long Statement,Microsoft.Cci,SpecializedFieldDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "        partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference(partiallySpecializedTypeReference' specializedParent' this.ContainingGenericTypeInstance.InternFactory); " is 177.
Long Statement,Microsoft.Cci,SpecializedFieldDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 194.
Long Statement,Microsoft.Cci,SpecializedGenericMethodParameter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(partiallySpecializedTypeReference' " is 127.
Long Statement,Microsoft.Cci,SpecializedGenericMethodParameter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedTypeReference' this.DefiningMethod.ContainingGenericTypeInstance' this.DefiningMethod.ContainingGenericTypeInstance.InternFactory); " is 224.
Long Statement,Microsoft.Cci,SpecializedMethodDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,ToString,The length of the statement  "      return MemberHelper.GetMethodSignature(this' NameFormattingOptions.ReturnType|NameFormattingOptions.Signature|NameFormattingOptions.TypeParameters); " is 148.
Long Statement,Microsoft.Cci,SpecializedMethodDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(partiallySpecializedTypeReference' this' this.ContainingGenericTypeInstance.InternFactory); " is 184.
Long Statement,Microsoft.Cci,SpecializedMethodDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 194.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "        //Note that partiallySpecializedType is obtained from genericMethodInstance.GenericMethod which will have been specialized with respect " is 135.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "        //to everything but the generic method parameters. Hence only the following call is necessary to specialize partiallySpecializedType. " is 133.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "        return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedType' genericMethodInstance' this.InternFactory); " is 142.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      //Since the containing signature is not a generic method instance' it must be a member of a type that has been specialized. " is 123.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      //The things that need to be specialized in partiallySpecializedType are defined by this containing type and/or its containing types. " is 133.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "        partiallySpecializedType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(partiallySpecializedType' specializedMethodDefinition' this.internFactory); " is 159.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "        return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedType' specializedMethodDefinition.ContainingGenericTypeInstance' this.InternFactory); " is 178.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      SpecializedNestedTypeDefinition snt = specializedPropertyDefinition.ContainingTypeDefinition as SpecializedNestedTypeDefinition; " is 128.
Long Statement,Microsoft.Cci,SpecializedParameterDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedType' specializedPropertyDefinition.ContainingGenericTypeInstance' this.InternFactory); " is 180.
Long Statement,Microsoft.Cci,SpecializedParameterTypeInformation,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedType' this.containingSignature' this.InternFactory); " is 145.
Long Statement,Microsoft.Cci,SpecializedPropertyDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      SpecializedNestedTypeDefinition specializedNestedParent = this.ContainingTypeDefinition as SpecializedNestedTypeDefinition; " is 123.
Long Statement,Microsoft.Cci,SpecializedPropertyDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "        partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference(partiallySpecializedTypeReference' specializedNestedParent' this.ContainingGenericTypeInstance.InternFactory); " is 183.
Long Statement,Microsoft.Cci,SpecializedPropertyDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 194.
Long Statement,Microsoft.Cci,NamespaceTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,GetResolvedType,The length of the statement  "      foreach (INamespaceMember nsMember in this.ContainingUnitNamespace.ResolvedUnitNamespace.GetMembersNamed(this.Name' false)) { " is 125.
Long Statement,Microsoft.Cci,PlatformType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\PlatformTypes.cs,CreateReference,The length of the statement  "      return new NamespaceTypeReference(this.host' ns' this.host.NameTable.GetNameFor(names[names.Length-1])' genericParameterCount' false' isValueType' typeCode); " is 157.
Long Statement,Microsoft.Cci,ArrayType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetMatchingMembersNamed,The length of the statement  "        if (name.UniqueKey != member.Name.UniqueKey || (ignoreCase && name.UniqueKeyIgnoringCase == member.Name.UniqueKeyIgnoringCase)) { " is 129.
Long Statement,Microsoft.Cci,ArrayType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetMembersNamed,The length of the statement  "        if (name.UniqueKey != member.Name.UniqueKey || (ignoreCase && name.UniqueKeyIgnoringCase == member.Name.UniqueKeyIgnoringCase)) { " is 129.
Long Statement,Microsoft.Cci,CustomModifier,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,CopyModifierToNewContainer,The length of the statement  "      ITypeReference copiedModifier = TypeDefinition.DeepCopyTypeReference(customModifier.Modifier' targetContainer' internFactory); " is 126.
Long Statement,Microsoft.Cci,CustomModifier,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference copiedModifier = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(customModifier.Modifier' containingMethodInstance' internFactory); " is 164.
Long Statement,Microsoft.Cci,CustomModifier,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference copiedModifier = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(customModifier.Modifier' containingTypeInstance' internFactory); " is 162.
Long Statement,Microsoft.Cci,CustomModifier,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableMethodTypeParameter,The length of the statement  "      ITypeReference copiedModifier = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(customModifier.Modifier' specializedMethodDefinition' internFactory); " is 158.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,InitializeIfNecessary,The length of the statement  "          //^ assume unspecializedMember is IEventDefinition || unspecializedMember is IFieldDefinition || unspecializedMember is IMethodDefinition || " is 140.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,InitializeIfNecessary,The length of the statement  "          //^   unspecializedMember is IPropertyDefinition || unspecializedMember is INestedTypeDefinition; //follows from informal post condition on Members property. " is 157.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      var copiedGenericType = TypeDefinition.DeepCopyTypeReference(genericTypeInstance.GenericType' targetContainer' internFactory); " is 126.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      var specializedGenericType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(genericTypeInstance.GenericType' containingMethodInstance' internFactory); " is 169.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        ITypeReference specializedArgType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(argType' containingMethodInstance' internFactory); " is 152.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "          if (specializedArguments == null) specializedArguments = new List<ITypeReference>(genericTypeInstance.GenericArguments); " is 120.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      var specializedGenericType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(genericTypeInstance.GenericType' containingTypeInstance' internFactory); " is 167.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        ITypeReference specializedArgType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(argType' containingTypeInstance' internFactory); " is 150.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "          if (specializedArguments == null) specializedArguments = new List<ITypeReference>(genericTypeInstance.GenericArguments); " is 120.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      var specializedGenericType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(genericTypeInstance.GenericType' specializedMethodDefinition' internFactory); " is 163.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "        ITypeReference specializedArgType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(argType' specializedMethodDefinition' internFactory); " is 146.
Long Statement,Microsoft.Cci,GenericTypeInstance,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "          if (specializedArguments == null) specializedArguments = new List<ITypeReference>(genericTypeInstance.GenericArguments); " is 120.
Long Statement,Microsoft.Cci,GenericParameter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (genericMethodParameter != null && genericMethodParameter.DefiningMethod.InternedKey == specializedMethodDefinition.PartiallySpecializedVersion.InternedKey) { " is 161.
Long Statement,Microsoft.Cci,ManagedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReference(targetType' targetContainer' internFactory); " is 120.
Long Statement,Microsoft.Cci,ManagedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(targetType' containingMethodInstance' internFactory); " is 158.
Long Statement,Microsoft.Cci,ManagedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(targetType' containingTypeInstance' internFactory); " is 156.
Long Statement,Microsoft.Cci,ManagedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(targetType' specializedMethodDefinition' internFactory); " is 152.
Long Statement,Microsoft.Cci,Matrix,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReference(elementType' targetContainer' internFactory); " is 122.
Long Statement,Microsoft.Cci,Matrix,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(elementType' containingMethodInstance' internFactory); " is 160.
Long Statement,Microsoft.Cci,Matrix,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(elementType' containingTypeInstance' internFactory); " is 158.
Long Statement,Microsoft.Cci,Matrix,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(elementType' specializedMethodDefinition' internFactory); " is 154.
Long Statement,Microsoft.Cci,PointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReference(targetType' targetContainer' internFactory); " is 120.
Long Statement,Microsoft.Cci,PointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(targetType' containingMethodInstance' internFactory); " is 158.
Long Statement,Microsoft.Cci,PointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(targetType' containingTypeInstance' internFactory); " is 156.
Long Statement,Microsoft.Cci,PointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceReplacingGenericMethodParamter,The length of the statement  "      ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(targetType' specializedMethodDefinition' internFactory); " is 152.
Long Statement,Microsoft.Cci,ModifiedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      var copiedTargetType = TypeDefinition.DeepCopyTypeReference(modifiedPointer.TargetType' targetContainer' internFactory); " is 120.
Long Statement,Microsoft.Cci,ModifiedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      var copiedTargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(modifiedPointer.TargetType' containingMethodInstance' internFactory); " is 158.
Long Statement,Microsoft.Cci,ModifiedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter(modifier' containingMethodInstance' internFactory); " is 138.
Long Statement,Microsoft.Cci,ModifiedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      var copiedTargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(modifiedPointer.TargetType' containingTypeInstance' internFactory); " is 156.
Long Statement,Microsoft.Cci,ModifiedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter(modifier' containingTypeInstance' internFactory); " is 136.
Long Statement,Microsoft.Cci,ModifiedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      var copiedTargetType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(modifiedPointer.TargetType' specializedMethodDefinition' internFactory); " is 152.
Long Statement,Microsoft.Cci,ModifiedPointerType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "        var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableMethodTypeParameter(modifier' specializedMethodDefinition' internFactory); " is 147.
Long Statement,Microsoft.Cci,ModifiedTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      ITypeReference copiedUnmodifiedType = TypeDefinition.DeepCopyTypeReference(modifiedTypeReference.UnmodifiedType' targetContainer' internFactory); " is 145.
Long Statement,Microsoft.Cci,ModifiedTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference copiedUnmodifiedType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(modifiedTypeReference.UnmodifiedType' containingMethodInstance' internFactory); " is 183.
Long Statement,Microsoft.Cci,ModifiedTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter(modifier' containingMethodInstance' internFactory); " is 138.
Long Statement,Microsoft.Cci,ModifiedTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference copiedUnmodifiedType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(modifiedTypeReference.UnmodifiedType' containingTypeInstance' internFactory); " is 181.
Long Statement,Microsoft.Cci,ModifiedTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter(modifier' containingTypeInstance' internFactory); " is 136.
Long Statement,Microsoft.Cci,ModifiedTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      ITypeReference copiedUnmodifiedType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(modifiedTypeReference.UnmodifiedType' specializedMethodDefinition' internFactory); " is 177.
Long Statement,Microsoft.Cci,ModifiedTypeReference,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "        var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableMethodTypeParameter(modifier' specializedMethodDefinition' internFactory); " is 147.
Long Statement,Microsoft.Cci,Scope<MemberType>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetMembersNamed,The length of the statement  "      Dictionary<int' List<MemberType>> nameToMemberListMap = ignoreCase ? this.caseInsensitiveMemberNameToMemberListMap : this.caseSensitiveMemberNameToMemberListMap; " is 161.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      var specializedParent = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(nestedType.ContainingType' specializedMethodDefinition' internFactory); " is 152.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      var specializedParent = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(nestedType.ContainingType' genericMethodInstance' internFactory); " is 155.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      var specializedParent = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(nestedType.ContainingType' containingTypeInstance' internFactory); " is 156.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,InitializeIfNecessary,The length of the statement  "          //^ assume unspecializedMember is IEventDefinition || unspecializedMember is IFieldDefinition || unspecializedMember is IMethodDefinition || " is 140.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,InitializeIfNecessary,The length of the statement  "          //^   unspecializedMember is IPropertyDefinition || unspecializedMember is INestedTypeDefinition; //follows from informal post condition on Members property. " is 157.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,CopyAndSpecialize,The length of the statement  "      partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference(partiallySpecializedTypeReference' this' this.InternFactory); " is 134.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,CopyAndSpecialize,The length of the statement  "      return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.InternFactory); " is 164.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeMember,The length of the statement  "        return new SpecializedPropertyDefinition(unspecializedPropertyDef' propertyDef' this' this.ContainingGenericTypeInstance); " is 122.
Long Statement,Microsoft.Cci,SpecializedNestedTypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeMember,The length of the statement  "      return new SpecializedNestedTypeDefinition(unspecializedTypeDef' nestedTypeDef' this' this.ContainingGenericTypeInstance' internFactory); " is 137.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      if (genericTypeInstance != null) return GenericTypeInstance.DeepCopyTypeReference(genericTypeInstance' targetContainer' internFactory); " is 135.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      if (managedPointerType != null) return ManagedPointerType.DeepCopyTypeReference(managedPointerType' targetContainer' internFactory); " is 132.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      if (modifiedPointer != null) return ModifiedPointerType.DeepCopyTypeReference(modifiedPointer' targetContainer' internFactory); " is 127.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      if (modifiedType != null) return ModifiedTypeReference.DeepCopyTypeReference(modifiedType' targetContainer' internFactory); " is 123.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      if (nestedType != null) return SpecializedNestedTypeDefinition.DeepCopyTypeReference(nestedType' targetContainer' internFactory); " is 129.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        if (arrayType.IsVector) return Vector.SpecializeIfConstructedFromApplicableTypeParameter(arrayType' containingMethodInstance' internFactory); " is 141.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (genericMethodParameter != null) return GenericParameter.SpecializeIfConstructedFromApplicableTypeParameter(genericMethodParameter' containingMethodInstance); " is 161.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (genericTypeInstance != null) return GenericTypeInstance.SpecializeIfConstructedFromApplicableTypeParameter(genericTypeInstance' containingMethodInstance' internFactory); " is 173.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (managedPointerType != null) return ManagedPointerType.SpecializeIfConstructedFromApplicableTypeParameter(managedPointerType' containingMethodInstance' internFactory); " is 170.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (modifiedPointer != null) return ModifiedPointerType.SpecializeIfConstructedFromApplicableTypeParameter(modifiedPointer' containingMethodInstance' internFactory); " is 165.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (modifiedType != null) return ModifiedTypeReference.SpecializeIfConstructedFromApplicableTypeParameter(modifiedType' containingMethodInstance' internFactory); " is 161.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (nestedType != null) return SpecializedNestedTypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(nestedType' containingMethodInstance' internFactory); " is 167.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (pointerType != null) return PointerType.SpecializeIfConstructedFromApplicableTypeParameter(pointerType' containingMethodInstance' internFactory); " is 149.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "        if (arrayType.IsVector) return Vector.SpecializeIfConstructedFromApplicableTypeParameter(arrayType' containingTypeInstance' internFactory); " is 139.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (genericTypeParameter != null) return GenericParameter.SpecializeIfConstructedFromApplicableTypeParameter(genericTypeParameter' containingTypeInstance); " is 155.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (genericTypeInstance != null) return GenericTypeInstance.SpecializeIfConstructedFromApplicableTypeParameter(genericTypeInstance' containingTypeInstance' internFactory); " is 171.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (managedPointerType != null) return ManagedPointerType.SpecializeIfConstructedFromApplicableTypeParameter(managedPointerType' containingTypeInstance' internFactory); " is 168.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (modifiedPointer != null) return ModifiedPointerType.SpecializeIfConstructedFromApplicableTypeParameter(modifiedPointer' containingTypeInstance' internFactory); " is 163.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (modifiedType != null) return ModifiedTypeReference.SpecializeIfConstructedFromApplicableTypeParameter(modifiedType' containingTypeInstance' internFactory); " is 159.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (nestedType != null) return SpecializedNestedTypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(nestedType' containingTypeInstance' internFactory); " is 165.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      if (pointerType != null) return PointerType.SpecializeIfConstructedFromApplicableTypeParameter(pointerType' containingTypeInstance' internFactory); " is 147.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "        if (arrayType.IsVector) return Vector.DeepCopyTypeReferenceWRTSpecializedMethod(arrayType' specializedMethodDefinition' internFactory); " is 135.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (genericParameter != null) return GenericParameter.DeepCopyTypeReferenceWRTSpecializedMethod(genericParameter' specializedMethodDefinition); " is 143.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (genericTypeInstance != null) return GenericTypeInstance.DeepCopyTypeReferenceWRTSpecializedMethod(genericTypeInstance' specializedMethodDefinition' internFactory); " is 167.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (managedPointerType != null) return ManagedPointerType.DeepCopyTypeReferenceWRTSpecializedMethod(managedPointerType' specializedMethodDefinition' internFactory); " is 164.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (modifiedPointer != null) return ModifiedPointerType.DeepCopyTypeReferenceWRTSpecializedMethod(modifiedPointer' specializedMethodDefinition' internFactory); " is 159.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (modifiedType != null) return ModifiedTypeReference.DeepCopyTypeReferenceWRTSpecializedMethod(modifiedType' specializedMethodDefinition' internFactory); " is 155.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (pointerType != null) return PointerType.DeepCopyTypeReferenceReplacingGenericMethodParamter(pointerType' specializedMethodDefinition' internFactory); " is 153.
Long Statement,Microsoft.Cci,TypeDefinition,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      if (nestedType != null) return SpecializedNestedTypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(nestedType' specializedMethodDefinition' internFactory); " is 161.
Long Statement,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetInterfaceList,The length of the statement  "      interfaces.Add(GenericTypeInstance.GetGenericTypeInstance(this.PlatformType.SystemCollectionsGenericIList' argTypes.AsReadOnly()' this.InternFactory)); " is 151.
Long Statement,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetInterfaceList,The length of the statement  "      interfaces.Add(GenericTypeInstance.GetGenericTypeInstance(this.PlatformType.SystemCollectionsGenericIEnumerable' argTypes.AsReadOnly()' this.InternFactory)); " is 157.
Long Statement,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetInterfaceList,The length of the statement  "      interfaces.Add(GenericTypeInstance.GetGenericTypeInstance(this.PlatformType.SystemCollectionsGenericICollection' argTypes.AsReadOnly()' this.InternFactory)); " is 157.
Long Statement,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReference(elementType' targetContainer' internFactory); " is 122.
Long Statement,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(elementType' method' internFactory); " is 142.
Long Statement,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(elementType' type' internFactory); " is 140.
Long Statement,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "      ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod(elementType' specializedMethodDefinition' internFactory); " is 154.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 136.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 136.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count.      this.path.Pop(); " is 160.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      IGenericMethodInstanceReference/*?*/ genericMethodInstanceReference = methodReference as IGenericMethodInstanceReference; " is 121.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "        //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "        this.Visit(typeMemberReference.Attributes); //In principle' refererences can have attributes that are distinct from the definitions they refer to. " is 146.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,DispatchAsReference,The length of the statement  "      IGenericMethodParameterReference/*?*/ genericMethodParameterReference = typeReference as IGenericMethodParameterReference; " is 122.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The length of the statement  "      //^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,VisitMethodReturnAttributes,The length of the statement  "      //^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,ClrHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ConversionPossible,The length of the statement  "          return toType == PrimitiveTypeCode.Int64 || toType == PrimitiveTypeCode.UInt64 || toType == PrimitiveTypeCode.IntPtr || toType == PrimitiveTypeCode.UIntPtr; " is 156.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,EffectiveBaseClass,The length of the statement  "          //^ assume bc != null; //Should be the case since both result and baseClass are classes and thus have System.Object in common " is 125.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypeVisibilityAsTypeMemberVisibility,The length of the statement  "      TypeMemberVisibility result = TypeMemberVisibility.Public; // supposedly the only thing that doesn't meet any of the below tests are type parameters and their "default" is public. " is 179.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypeVisibilityAsTypeMemberVisibility,The length of the statement  "            result = TypeHelper.GenericInstanceVisibilityAsTypeMemberVisibility(TypeVisibilityAsTypeMemberVisibility(genType.GenericType.ResolvedType)' genType.GenericArguments); " is 166.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetMethod,The length of the statement  "      IMethodDefinition result = TypeHelper.GetMethod(declaringType.GetMembersNamed(methodReference.Name' false)' methodReference); " is 125.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetInvokeMethod,The length of the statement  "      return Dummy.Method; //Should get here only when the delegate type is obtained from a malformed or malicious referenced assembly. " is 129.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TryGetFullyInstantiatedSpecializedTypeReference,The length of the statement  "        if (TryGetFullyInstantiatedSpecializedTypeReference(nestedType.ContainingTypeDefinition' out containingTypeReference)) { " is 120.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        || !TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(param1.Type' param2.Type) " is 122.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "          if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(customModifier1.Modifier' customModifier2.Modifier)) " is 150.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,ParameterListsAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        if (!TypeHelper.ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(parameter1' parameter2)) " is 127.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,SizeOfType,The length of the statement  "            List<IFieldDefinition> fields = new List<IFieldDefinition>(IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition>(members)); " is 145.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,FunctionPointerTypesAreEquivalent,The length of the statement  "      return TypeHelper.ParameterListsAreEquivalent(functionPointer1.ExtraArgumentTypes' functionPointer2.ExtraArgumentTypes); " is 120.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,FunctionPointerTypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "      if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(functionPointer1.Type' functionPointer2.Type)) " is 144.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,FunctionPointerTypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "      return TypeHelper.ParameterListsAreEquivalent(functionPointer1.ExtraArgumentTypes' functionPointer2.ExtraArgumentTypes); " is 120.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(inst1.GenericType' inst2.GenericType)) return false; " is 150.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        return IteratorHelper.EnumerablesAreEqual<ITypeReference>(inst1.GenericArguments' inst2.GenericArguments' RelaxedTypeEquivalenceComparer.instance); " is 147.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        return TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(array1.ElementType' array2.ElementType); " is 129.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        return TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(pointer1.TargetType' pointer2.TargetType); " is 131.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        return TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(mpointer1.TargetType' mpointer2.TargetType); " is 133.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "        return TypeHelper.FunctionPointerTypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(fpointer1' fpointer2); " is 137.
Long Statement,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,TypesAreAssignmentCompatible,The length of the statement  "      if (sourceType.IsInterface && TypeHelper.TypesAreEquivalent(targetType' targetType.PlatformType.SystemObject)) return true; " is 123.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,AddGenericParametersIfNeeded,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.TypeParameters) != 0 && (formattingOptions & NameFormattingOptions.FormattingForDocumentationId) == 0 && genericParameterCount > 0 && type.ResolvedType != Dummy.Type) { " is 215.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetGenericMethodParameterName,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0) return "``" + genericMethodParameter.Index; " is 126.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetGenericTypeParameterName,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0) return "`" + genericTypeParameter.Index; " is 123.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNamespaceTypeName,The length of the statement  "      string tname = this.AddGenericParametersIfNeeded(nsType' nsType.GenericParameterCount' formattingOptions' nsType.Name.Value); " is 125.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNamespaceTypeName,The length of the statement  "      if ((formattingOptions & NameFormattingOptions.OmitContainingNamespace) == 0 && !(nsType.ContainingUnitNamespace is IRootUnitNamespaceReference)) " is 145.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "        if (nestedUnitSetNamespace.ContainingNamespace.Name.Value.Length == 0 || (formattingOptions & NameFormattingOptions.OmitContainingNamespace) != 0) " is 146.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "          return this.GetNamespaceName(nestedUnitSetNamespace.ContainingUnitSetNamespace' formattingOptions) + "." + nestedUnitSetNamespace.Name.Value; " is 141.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "        if (nestedUnitNamespace.ContainingUnitNamespace is IRootUnitNamespaceReference || (formattingOptions & NameFormattingOptions.OmitContainingNamespace) != 0) " is 155.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "          return this.GetNamespaceName(nestedUnitNamespace.ContainingUnitNamespace' formattingOptions) + "." + nestedUnitNamespace.Name.Value; " is 132.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNestedTypeName,The length of the statement  "      string tname = this.AddGenericParametersIfNeeded(nestedType' nestedType.GenericParameterCount' formattingOptions' nestedType.Name.Value); " is 137.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetNestedTypeName,The length of the statement  "        tname = this.GetTypeName(nestedType.ContainingType' formattingOptions & ~NameFormattingOptions.MemberKind) + delim + tname; " is 123.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetTypeName,The length of the statement  "      if (type == Dummy.TypeReference || type == Dummy.Type || type.ResolvedType == Dummy.Type) return "Microsoft.Cci.DummyType"; " is 123.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetGenericTypeInstanceName,The length of the statement  "        StringBuilder sb = new StringBuilder(this.GetTypeName(genericType' formattingOptions & ~(NameFormattingOptions.TypeParameters | ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 ? NameFormattingOptions.UseGenericTypeNameSuffix : NameFormattingOptions.None)))); " is 289.
Long Statement,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,GetAssemblyIdentity,The length of the statement  "      string culture = assemblyName.CultureInfo == null || assemblyName.CultureInfo == System.Globalization.CultureInfo.InvariantCulture ? "neutral" : assemblyName.CultureInfo.ToString(); " is 181.
Long Statement,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,GetAssemblyIdentity,The length of the statement  "      return new AssemblyIdentity(metadataHost.NameTable.GetNameFor(name)' culture' version' token' assemblyName.CodeBase == null ? "" : assemblyName.CodeBase); " is 154.
Long Statement,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,GetAssemblyIdentity,The length of the statement  "        return new AssemblyIdentity(assembly.Name' assembly.Culture' assembly.Version' UnitHelper.ComputePublicKeyToken(pKey)' assembly.Location); " is 138.
Long Statement,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,StrongName,The length of the statement  "      sb.AppendFormat(CultureInfo.InvariantCulture' "' Version={0}.{1}.{2}.{3}"' assemblyReference.Version.Major' assemblyReference.Version.Minor' assemblyReference.Version.Build' assemblyReference.Version.Revision); " is 210.
Long Statement,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,FindType,The length of the statement  "      INamedTypeDefinition/*?*/ result = GetType(nameTable' unit.UnitNamespaceRoot' typeName' genericParameterCount' ref offset); " is 123.
Long Statement,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,UnitNamespacesAreEquivalent,The length of the statement  "          && UnitHelper.UnitNamespacesAreEquivalent(nstUnitNamespace1.ContainingUnitNamespace' nstUnitNamespace2.ContainingUnitNamespace); " is 128.
Long Statement,Microsoft.Cci,UnitSet,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,Contains,The length of the statement  "      //^ assume result == exists{IUnit u in this.Units; u == unit}; //TODO: Boogie: need a working postcodition on EnumerableContains " is 128.
Long Statement,Microsoft.Cci,MemoryMappedFile,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnmanagedFileIO.cs,OpenFileMemoryMap,The length of the statement  "        hmap = MemoryMappedFile.CreateFileMapping(safeHandle.DangerousGetHandle()' IntPtr.Zero' PageAccess.PAGE_READONLY' 0' length' null); " is 131.
Long Statement,Microsoft.Cci,ILLocation,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnmanagedFileIO.cs,ToString,The length of the statement  "      sb.AppendFormat(CultureInfo.InvariantCulture' "ILLocation({0}'0x{1})"' this.methodDefinition.ToString()' this.offset.ToString("X8"' CultureInfo.InvariantCulture)); " is 163.
Complex Conditional,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSignatureInternId,The conditional expression  "signatureStore.CallingConvention == callingConvention            && signatureStore.RequiredParameterListInternedId == requiredParameterTypesInternedId            && signatureStore.ExtraParameterListInternedId == extraArgumentTypesInteredId            && signatureStore.ReturnValueCustomModifiersListInteredId == returnValueCustomModifiersInternedId            && signatureStore.ReturnValueIsByRef == returnValueIsByRef            && signatureStore.ReturnTypeReferenceInternedId == returnTypeReferenceInternedId"  is complex.
Complex Conditional,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The conditional expression  "signatureStore.CallingConvention == methodReference.CallingConvention            && signatureStore.RequiredParameterListInternedId == requiredParameterTypesInternedId            && signatureStore.ReturnValueCustomModifiersListInteredId == returnValueCustomModifiersInternedId            && signatureStore.ReturnValueIsByRef == methodReference.ReturnValueIsByRef            && signatureStore.ReturnTypeReferenceInternedId == returnTypeReferenceInternedId            && signatureStore.GenericParameterCount == genericParameterCount"  is complex.
Complex Conditional,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetMethodSignature,The conditional expression  "(formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 && method.ResolvedMethod.IsSpecialName && (method.Name.Value.Contains("op_Explicit") || method.Name.Value.Contains("op_Implicit"))"  is complex.
Complex Conditional,Microsoft.Cci,BaseMetadataTraverser,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Visitors.cs,Visit,The conditional expression  "marshallingInformation.UnmanagedType == System.Runtime.InteropServices.UnmanagedType.SafeArray &&         (marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_DISPATCH ||        marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_UNKNOWN ||        marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_RECORD)"  is complex.
Complex Conditional,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,AddGenericParametersIfNeeded,The conditional expression  "(formattingOptions & NameFormattingOptions.TypeParameters) != 0 && (formattingOptions & NameFormattingOptions.FormattingForDocumentationId) == 0 && genericParameterCount > 0 && type.ResolvedType != Dummy.Type"  is complex.
Empty Catch Block,Microsoft.Cci,GlobalAssemblyCache,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,Contains,The method has an empty catch block.
Empty Catch Block,Microsoft.Cci,GlobalAssemblyCache,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\GlobalAssemblyCache.cs,Contains,The method has an empty catch block.
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSystemCoreAssemblySymbolicIdentity,The following statement contains a magic number: var version = new Version(3' 5' 0' 0);
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetSystemCoreAssemblySymbolicIdentity,The following statement contains a magic number: var version = new Version(3' 5' 0' 0);
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: return 4;
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: return 8;
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: return 4;
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: oldValue == 4
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: this.currentWildGuesses[key] = 4;
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The following statement contains a magic number: this.currentWildGuesses[rkey] = 4;
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The following statement contains a magic number: return 4;
Magic Number,Microsoft.Cci,InternFactory,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetGenericMethodParameterReferenceInternId,The following statement contains a magic number: return index+1000000;
Magic Number,Microsoft.Cci,NameTable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseInsensitiveCounter += 17;
Magic Number,Microsoft.Cci,NameTable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;
Magic Number,Microsoft.Cci,NameTable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseSensitiveCounter += 17;
Magic Number,Microsoft.Cci,NameTable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseSensitiveCounter = (caseSensitiveCounter - int.MinValue) + 1000000;
Magic Number,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment(fieldAsTypeDef.ResolvedType) * 8);
Magic Number,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;
Magic Number,Microsoft.Cci,MemberHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,The following statement contains a magic number: ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment(f.Type.ResolvedType)*8);
Magic Number,Microsoft.Cci,SignatureFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: sb.Append(methodName.Substring(4));
Magic Number,Microsoft.Cci,ArrayType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetInterfaceList,The following statement contains a magic number: List<ITypeReference> interfaces = new List<ITypeReference>(4);
Magic Number,Microsoft.Cci,Vector,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\Types.cs,GetInterfaceList,The following statement contains a magic number: List<ITypeReference> interfaces = new List<ITypeReference>(7);
Magic Number,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {          case PrimitiveTypeCode.Boolean:            return sizeof(Boolean);          case PrimitiveTypeCode.Char:            return sizeof(Char);          case PrimitiveTypeCode.Int16:            return sizeof(Int16);          case PrimitiveTypeCode.Int32:            return sizeof(Int32);          case PrimitiveTypeCode.Int8:            return sizeof(SByte);          case PrimitiveTypeCode.UInt16:            return sizeof(UInt16);          case PrimitiveTypeCode.UInt32:            return sizeof(UInt32);          case PrimitiveTypeCode.UInt8:            return sizeof(Byte);          case PrimitiveTypeCode.Int64:            return sizeof(Int64);          case PrimitiveTypeCode.UInt64:            return sizeof(UInt64);          case PrimitiveTypeCode.IntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.UIntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Float32:            return sizeof(Single);          case PrimitiveTypeCode.Float64:            return sizeof(Double);          case PrimitiveTypeCode.Pointer:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Invalid:            return 1;          default:            if (type.IsEnum) {              if (TypeHelper.TypesAreEquivalent(rootType' type.ResolvedType.UnderlyingType)) return 0;              return TypeHelper.SizeOfType(type.ResolvedType.UnderlyingType);            }            uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;            if (result > 0) return result;            IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;            if (type.ResolvedType.Layout == LayoutKind.Sequential) {              List<IFieldDefinition> fields = new List<IFieldDefinition>(IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition>(members));              fields.Sort(delegate(IFieldDefinition f1' IFieldDefinition f2) { return f1.SequenceNumber - f2.SequenceNumber; });              members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember>(fields);            }            //Sum up the bit sizes            result = 0;            uint bitOffset = 0;            ushort bitFieldAlignment = 0;            foreach (ITypeDefinitionMember member in members) {              IFieldDefinition/*?*/ field = member as IFieldDefinition;              if (field == null || field.IsStatic) continue;              ITypeDefinition fieldType = field.Type.ResolvedType;              ushort fieldAlignment;              if (rootType == fieldType || fieldType.IsReferenceType)                fieldAlignment = type.PlatformType.PointerSize;              else                fieldAlignment = (ushort)(TypeHelper.TypeAlignment(fieldType)*8);              uint fieldSize;              if (field.IsBitField) {                bitFieldAlignment = fieldAlignment;                fieldSize = field.BitLength;                if (bitOffset > 0 && bitOffset+fieldSize > fieldAlignment)                  bitOffset = 0;                if (bitOffset == 0 || fieldSize == 0) {                  result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                  bitOffset = 0;                }                bitOffset += fieldSize;              } else {                if (bitFieldAlignment > fieldAlignment) fieldAlignment = bitFieldAlignment;                bitFieldAlignment = 0; bitOffset = 0;                result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                fieldSize = TypeHelper.SizeOfType(field.Type)*8;              }              result += fieldSize;            }            //Convert bit size to bytes and pad to be a multiple of the type alignment.            result = (result+7)/8;            uint typeAlignment = TypeHelper.TypeAlignment(type);            return ((result+typeAlignment-1)/typeAlignment) * typeAlignment;        }
Magic Number,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {          case PrimitiveTypeCode.Boolean:            return sizeof(Boolean);          case PrimitiveTypeCode.Char:            return sizeof(Char);          case PrimitiveTypeCode.Int16:            return sizeof(Int16);          case PrimitiveTypeCode.Int32:            return sizeof(Int32);          case PrimitiveTypeCode.Int8:            return sizeof(SByte);          case PrimitiveTypeCode.UInt16:            return sizeof(UInt16);          case PrimitiveTypeCode.UInt32:            return sizeof(UInt32);          case PrimitiveTypeCode.UInt8:            return sizeof(Byte);          case PrimitiveTypeCode.Int64:            return sizeof(Int64);          case PrimitiveTypeCode.UInt64:            return sizeof(UInt64);          case PrimitiveTypeCode.IntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.UIntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Float32:            return sizeof(Single);          case PrimitiveTypeCode.Float64:            return sizeof(Double);          case PrimitiveTypeCode.Pointer:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Invalid:            return 1;          default:            if (type.IsEnum) {              if (TypeHelper.TypesAreEquivalent(rootType' type.ResolvedType.UnderlyingType)) return 0;              return TypeHelper.SizeOfType(type.ResolvedType.UnderlyingType);            }            uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;            if (result > 0) return result;            IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;            if (type.ResolvedType.Layout == LayoutKind.Sequential) {              List<IFieldDefinition> fields = new List<IFieldDefinition>(IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition>(members));              fields.Sort(delegate(IFieldDefinition f1' IFieldDefinition f2) { return f1.SequenceNumber - f2.SequenceNumber; });              members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember>(fields);            }            //Sum up the bit sizes            result = 0;            uint bitOffset = 0;            ushort bitFieldAlignment = 0;            foreach (ITypeDefinitionMember member in members) {              IFieldDefinition/*?*/ field = member as IFieldDefinition;              if (field == null || field.IsStatic) continue;              ITypeDefinition fieldType = field.Type.ResolvedType;              ushort fieldAlignment;              if (rootType == fieldType || fieldType.IsReferenceType)                fieldAlignment = type.PlatformType.PointerSize;              else                fieldAlignment = (ushort)(TypeHelper.TypeAlignment(fieldType)*8);              uint fieldSize;              if (field.IsBitField) {                bitFieldAlignment = fieldAlignment;                fieldSize = field.BitLength;                if (bitOffset > 0 && bitOffset+fieldSize > fieldAlignment)                  bitOffset = 0;                if (bitOffset == 0 || fieldSize == 0) {                  result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                  bitOffset = 0;                }                bitOffset += fieldSize;              } else {                if (bitFieldAlignment > fieldAlignment) fieldAlignment = bitFieldAlignment;                bitFieldAlignment = 0; bitOffset = 0;                result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                fieldSize = TypeHelper.SizeOfType(field.Type)*8;              }              result += fieldSize;            }            //Convert bit size to bytes and pad to be a multiple of the type alignment.            result = (result+7)/8;            uint typeAlignment = TypeHelper.TypeAlignment(type);            return ((result+typeAlignment-1)/typeAlignment) * typeAlignment;        }
Magic Number,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {          case PrimitiveTypeCode.Boolean:            return sizeof(Boolean);          case PrimitiveTypeCode.Char:            return sizeof(Char);          case PrimitiveTypeCode.Int16:            return sizeof(Int16);          case PrimitiveTypeCode.Int32:            return sizeof(Int32);          case PrimitiveTypeCode.Int8:            return sizeof(SByte);          case PrimitiveTypeCode.UInt16:            return sizeof(UInt16);          case PrimitiveTypeCode.UInt32:            return sizeof(UInt32);          case PrimitiveTypeCode.UInt8:            return sizeof(Byte);          case PrimitiveTypeCode.Int64:            return sizeof(Int64);          case PrimitiveTypeCode.UInt64:            return sizeof(UInt64);          case PrimitiveTypeCode.IntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.UIntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Float32:            return sizeof(Single);          case PrimitiveTypeCode.Float64:            return sizeof(Double);          case PrimitiveTypeCode.Pointer:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Invalid:            return 1;          default:            if (type.IsEnum) {              if (TypeHelper.TypesAreEquivalent(rootType' type.ResolvedType.UnderlyingType)) return 0;              return TypeHelper.SizeOfType(type.ResolvedType.UnderlyingType);            }            uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;            if (result > 0) return result;            IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;            if (type.ResolvedType.Layout == LayoutKind.Sequential) {              List<IFieldDefinition> fields = new List<IFieldDefinition>(IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition>(members));              fields.Sort(delegate(IFieldDefinition f1' IFieldDefinition f2) { return f1.SequenceNumber - f2.SequenceNumber; });              members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember>(fields);            }            //Sum up the bit sizes            result = 0;            uint bitOffset = 0;            ushort bitFieldAlignment = 0;            foreach (ITypeDefinitionMember member in members) {              IFieldDefinition/*?*/ field = member as IFieldDefinition;              if (field == null || field.IsStatic) continue;              ITypeDefinition fieldType = field.Type.ResolvedType;              ushort fieldAlignment;              if (rootType == fieldType || fieldType.IsReferenceType)                fieldAlignment = type.PlatformType.PointerSize;              else                fieldAlignment = (ushort)(TypeHelper.TypeAlignment(fieldType)*8);              uint fieldSize;              if (field.IsBitField) {                bitFieldAlignment = fieldAlignment;                fieldSize = field.BitLength;                if (bitOffset > 0 && bitOffset+fieldSize > fieldAlignment)                  bitOffset = 0;                if (bitOffset == 0 || fieldSize == 0) {                  result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                  bitOffset = 0;                }                bitOffset += fieldSize;              } else {                if (bitFieldAlignment > fieldAlignment) fieldAlignment = bitFieldAlignment;                bitFieldAlignment = 0; bitOffset = 0;                result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                fieldSize = TypeHelper.SizeOfType(field.Type)*8;              }              result += fieldSize;            }            //Convert bit size to bytes and pad to be a multiple of the type alignment.            result = (result+7)/8;            uint typeAlignment = TypeHelper.TypeAlignment(type);            return ((result+typeAlignment-1)/typeAlignment) * typeAlignment;        }
Magic Number,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {          case PrimitiveTypeCode.Boolean:            return sizeof(Boolean);          case PrimitiveTypeCode.Char:            return sizeof(Char);          case PrimitiveTypeCode.Int16:            return sizeof(Int16);          case PrimitiveTypeCode.Int32:            return sizeof(Int32);          case PrimitiveTypeCode.Int8:            return sizeof(SByte);          case PrimitiveTypeCode.UInt16:            return sizeof(UInt16);          case PrimitiveTypeCode.UInt32:            return sizeof(UInt32);          case PrimitiveTypeCode.UInt8:            return sizeof(Byte);          case PrimitiveTypeCode.Int64:            return sizeof(Int64);          case PrimitiveTypeCode.UInt64:            return sizeof(UInt64);          case PrimitiveTypeCode.IntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.UIntPtr:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Float32:            return sizeof(Single);          case PrimitiveTypeCode.Float64:            return sizeof(Double);          case PrimitiveTypeCode.Pointer:            return type.PlatformType.PointerSize;          case PrimitiveTypeCode.Invalid:            return 1;          default:            if (type.IsEnum) {              if (TypeHelper.TypesAreEquivalent(rootType' type.ResolvedType.UnderlyingType)) return 0;              return TypeHelper.SizeOfType(type.ResolvedType.UnderlyingType);            }            uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;            if (result > 0) return result;            IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;            if (type.ResolvedType.Layout == LayoutKind.Sequential) {              List<IFieldDefinition> fields = new List<IFieldDefinition>(IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition>(members));              fields.Sort(delegate(IFieldDefinition f1' IFieldDefinition f2) { return f1.SequenceNumber - f2.SequenceNumber; });              members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember>(fields);            }            //Sum up the bit sizes            result = 0;            uint bitOffset = 0;            ushort bitFieldAlignment = 0;            foreach (ITypeDefinitionMember member in members) {              IFieldDefinition/*?*/ field = member as IFieldDefinition;              if (field == null || field.IsStatic) continue;              ITypeDefinition fieldType = field.Type.ResolvedType;              ushort fieldAlignment;              if (rootType == fieldType || fieldType.IsReferenceType)                fieldAlignment = type.PlatformType.PointerSize;              else                fieldAlignment = (ushort)(TypeHelper.TypeAlignment(fieldType)*8);              uint fieldSize;              if (field.IsBitField) {                bitFieldAlignment = fieldAlignment;                fieldSize = field.BitLength;                if (bitOffset > 0 && bitOffset+fieldSize > fieldAlignment)                  bitOffset = 0;                if (bitOffset == 0 || fieldSize == 0) {                  result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                  bitOffset = 0;                }                bitOffset += fieldSize;              } else {                if (bitFieldAlignment > fieldAlignment) fieldAlignment = bitFieldAlignment;                bitFieldAlignment = 0; bitOffset = 0;                result = ((result+fieldAlignment-1)/fieldAlignment) * fieldAlignment;                fieldSize = TypeHelper.SizeOfType(field.Type)*8;              }              result += fieldSize;            }            //Convert bit size to bytes and pad to be a multiple of the type alignment.            result = (result+7)/8;            uint typeAlignment = TypeHelper.TypeAlignment(type);            return ((result+typeAlignment-1)/typeAlignment) * typeAlignment;        }
Magic Number,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,ComputePublicKeyToken,The following statement contains a magic number: byte[] publicKeyToken = new byte[8];
Magic Number,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,ComputePublicKeyToken,The following statement contains a magic number: int startIndex = hash.Length - 8;
Magic Number,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,ComputePublicKeyToken,The following statement contains a magic number: Array.Copy(hash' startIndex' publicKeyToken' 0' 8);
Magic Number,Microsoft.Cci,UnitHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnitHelper.cs,ComputePublicKeyToken,The following statement contains a magic number: Array.Reverse(publicKeyToken' 0' 8);
Magic Number,Microsoft.Cci,UnmanagedBinaryMemoryBlock,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UnmanagedFileIO.cs,CreateUnmanagedBinaryMemoryBlock,The following statement contains a magic number: int copyBufferLen = 8096;
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: uint c = 16777619;
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: a ^= (c >> 13);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: b ^= (a << 8);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: c ^= (b >> 13);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: a ^= (c >> 12);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: b ^= (a << 16);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: c ^= (b >> 5);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: a ^= (c >> 3);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: b ^= (a << 10);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: c ^= (b >> 15);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: hash += (hash << 3);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: hash ^= (hash >> 11);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: hash += (hash << 15);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: uint c = 16777619;
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: a ^= (c >> 13);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: b ^= (a << 8);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: c ^= (b >> 13);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: a ^= (c >> 12);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: b ^= (a << 16);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: c ^= (b >> 5);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: a ^= (c >> 3);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: b ^= (a << 10);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: c ^= (b >> 15);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash += (hash << 10);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash ^= (hash >> 6);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash += (hash << 3);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash ^= (hash >> 11);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash += (hash << 15);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,StartHash,The following statement contains a magic number: hash += (hash << 3);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,StartHash,The following statement contains a magic number: hash ^= (hash >> 11);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,StartHash,The following statement contains a magic number: hash += (hash << 15);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,ContinueHash,The following statement contains a magic number: hash += (hash << 10);
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,ContinueHash,The following statement contains a magic number: hash ^= (hash >> 6);
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint initialSize = 16;
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,MultiHashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,MultiHashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint initialSize = 16;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Hashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Hashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable<InternalT>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint initialSize = 16;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Hashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Hashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (uint)(expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (uint)(expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint initialSize = 16;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,DoubleHashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,DoubleHashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (uint)(expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint expectedSize = (uint)(expectedEntries * 10) / 6;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,SizeFromExpectedEntries,The following statement contains a magic number: uint initialSize = 16;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,DoubleHashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,DoubleHashtable,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.ResizeCount = this.Size * 6 / 10;
Missing Default,Microsoft.Cci,TypeHelper,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,IsVisibleOutsideAssembly,The following switch statement is missing a default case: switch (TypeHelper.TypeVisibilityAsTypeMemberVisibility(typeDefinition)) {          case TypeMemberVisibility.Public:          case TypeMemberVisibility.Family:          case TypeMemberVisibility.FamilyOrAssembly:            return true;        }
Missing Default,Microsoft.Cci,TypeNameFormatter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\CCI2\MetadataHelper\TypeHelper.cs,GetTypeName,The following switch statement is missing a default case: switch (type.TypeCode) {            case PrimitiveTypeCode.Boolean: return "bool";            case PrimitiveTypeCode.Char: return "char";            case PrimitiveTypeCode.Float32: return "float";            case PrimitiveTypeCode.Float64: return "double";            case PrimitiveTypeCode.Int16: return "short";            case PrimitiveTypeCode.Int32: return "int";            case PrimitiveTypeCode.Int64: return "long";            case PrimitiveTypeCode.Int8: return "sbyte";            case PrimitiveTypeCode.String: return "string";            case PrimitiveTypeCode.UInt16: return "ushort";            case PrimitiveTypeCode.UInt32: return "uint";            case PrimitiveTypeCode.UInt64: return "ulong";            case PrimitiveTypeCode.UInt8: return "byte";            case PrimitiveTypeCode.Void: return "void";            case PrimitiveTypeCode.NotPrimitive:              if (TypeHelper.TypesAreEquivalent(type' type.PlatformType.SystemDecimal)) return "decimal";              if (TypeHelper.TypesAreEquivalent(type' type.PlatformType.SystemObject)) return "object";              break;          }
