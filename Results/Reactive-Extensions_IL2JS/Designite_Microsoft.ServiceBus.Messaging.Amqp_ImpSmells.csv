Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.ServiceBus.Common,AsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\AsyncResult.cs,End,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.ServiceBus.Common,PooledBufferManager,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\InternalBufferManager.cs,TuneQuotas,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.ServiceBus.Common,IOThreadScheduler,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadScheduler.cs,CompletionCallback,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.ServiceBus.Messaging.Amqp,AmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpLink.cs,OnReceiveAttach,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.ServiceBus.Messaging.Amqp,SessionChannel,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,DisposeAndSettle,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Attach,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Attach.cs,OnDecode,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Begin,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Begin.cs,OnDecode,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Flow,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Flow.cs,OnDecode,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Open,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Open.cs,OnDecode,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Properties,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Properties.cs,OnDecode,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Source,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Source.cs,OnDecode,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Target,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Target.cs,OnDecode,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.ServiceBus.Messaging.Amqp.Framing,Transfer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Transfer.cs,OnDecode,Cyclomatic complexity of the method is 12
Long Parameter List,Microsoft.ServiceBus.Common.Interop,UnsafeNativeMethods,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\Interop\UnsafeNativeMethods.cs,SetWaitableTimer,The method has 6 parameters. Parameters: handle' dueTime' period' mustBeZero' mustBeZeroAlso' resume
Long Parameter List,Microsoft.ServiceBus.Common.Interop,UnsafeNativeMethods,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\Interop\UnsafeNativeMethods.cs,WSARecv,The method has 7 parameters. Parameters: handle' buffers' bufferCount' bytesTransferred' socketFlags' nativeOverlapped' completionRoutine
Long Parameter List,Microsoft.ServiceBus.Common.Interop,UnsafeNativeMethods,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\Interop\UnsafeNativeMethods.cs,WSAGetOverlappedResult,The method has 5 parameters. Parameters: socketHandle' overlapped' bytesTransferred' wait' flags
Long Parameter List,Microsoft.ServiceBus.Common.Interop,UnsafeNativeMethods,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\Interop\UnsafeNativeMethods.cs,EventWriteTransfer,The method has 6 parameters. Parameters: registrationHandle' eventDescriptor' activityId' relatedActivityId' userDataCount' userData
Long Parameter List,Microsoft.ServiceBus.Common.Interop,UnsafeNativeMethods,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\Interop\UnsafeNativeMethods.cs,ReportEvent,The method has 9 parameters. Parameters: hEventLog' type' category' eventID' userSID' numStrings' dataLen' strings' rawData
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,AmqpConnection,The method has 5 parameters. Parameters: transport' protocolHeader' isInitiator' amqpSettings' connectionSettings
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,OpenAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,OpenAsyncResult,The method has 6 parameters. Parameters: parent' address' listen' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,BufferedByteBuffer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ByteBuffer.cs,BufferedByteBuffer,The method has 6 parameters. Parameters: buffer' start' position' end' capacity' autoGrow
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,IConnectionFactory,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\IAmqpProvider.cs,CreateConnection,The method has 5 parameters. Parameters: transport' protocolHeader' isInitiator' amqpSettings' connectionSettings
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,INodeFactory,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\IAmqpProvider.cs,BeginCreateNode,The method has 5 parameters. Parameters: address' properties' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,ReceivingAmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ReceivingAmqpLink.cs,BeginDisposeMessage,The method has 6 parameters. Parameters: deliveryTag' outcome' batchable' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,DisposeAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ReceivingAmqpLink.cs,DisposeAsyncResult,The method has 7 parameters. Parameters: link' deliveryTag' outcome' batchable' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,SendingAmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\SendingAmqpLink.cs,BeginSendMessage,The method has 6 parameters. Parameters: message' deliveryTag' txnId' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,SendAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\SendingAmqpLink.cs,SendAsyncResult,The method has 5 parameters. Parameters: link' message' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,Utils,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Utils.cs,Trace,The method has 5 parameters. Parameters: level' format' param1' param2' param3
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,Utils,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Utils.cs,Trace,The method has 6 parameters. Parameters: level' format' param1' param2' param3' param4
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,Utils,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Utils.cs,Trace,The method has 7 parameters. Parameters: level' format' param1' param2' param3' param4' param5
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,AmqpStream,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,Write,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,OpenSenderAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,OpenSenderAsyncResult,The method has 5 parameters. Parameters: parent' address' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,OpenReceiverAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,OpenReceiverAsyncResult,The method has 5 parameters. Parameters: parent' address' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,Write,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,Listener,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,TryMatchLink,The method has 5 parameters. Parameters: node' fromClient' isReceiver' requestCreator' result
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp,Listener,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,CreateConnection,The method has 5 parameters. Parameters: transport' protocolHeader' isInitiator' amqpSettings' connectionSettings
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpEncoding.cs,ReadCount,The method has 5 parameters. Parameters: buffer' formatCode' formatCode8' formatCode32' count
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpEncoding.cs,ReadSizeAndCount,The method has 6 parameters. Parameters: buffer' formatCode' formatCode8' formatCode32' size' count
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,CreateDecimal,The method has 5 parameters. Parameters: low' middle' high' sign' exponent
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Framing,AmqpDescribed,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\AmqpDescribed.cs,AddFieldToString,The method has 5 parameters. Parameters: condition' sb' fieldName' value' count
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Transaction,Controller,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transaction\Controller.cs,BeginDischange,The method has 5 parameters. Parameters: txnId' fail' timeout' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Transport,TransportStream,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\TransportStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Transport,TransportStream,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\TransportStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Transport,ReadAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\TransportStream.cs,Begin,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.ServiceBus.Messaging.Amqp.Transport,WriteAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\TransportStream.cs,Begin,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Identifier,Microsoft.ServiceBus.Common,AsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\AsyncResult.cs,,The length of the parameter asyncCompletionWrapperCallback is 30.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter AptcaMethodsShouldOnlyCallAptcaMethods is 38.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter AssembliesShouldHaveValidStrongNames is 36.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter AttributeStringLiteralsShouldParseCorrectly is 43.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter AvoidCallingProblematicMethods is 30.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter AvoidTypesThatRequireJitCompilationInPrecompiledAssemblies is 58.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter AvoidUninstantiatedInternalClasses is 34.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter CollectionsShouldImplementGenericInterface is 42.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter ConfigurationPropertyAttributeRule is 34.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter ConfigurationValidatorAttributeRule is 35.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter ConsiderPassingBaseTypesAsParameters is 36.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DefineAccessorsForAttributeArguments is 36.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DisposableFieldsShouldBeDisposed is 32.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DoNotCallOverridableMethodsInConstructors is 41.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DoNotCatchGeneralExceptionTypes is 31.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DoNotDeclareReadOnlyMutableReferenceTypes is 41.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DoNotLockOnObjectsWithWeakIdentity is 34.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DoNotNestGenericTypesInMemberSignatures is 39.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DoNotIndirectlyExposeMethodsWithLinkDemands is 43.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter DoNotPassLiteralsAsLocalizedParameters is 38.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter GenericMethodsShouldProvideTypeParameter is 40.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter IdentifiersShouldBeSpelledCorrectly is 35.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter IdentifiersShouldHaveCorrectSuffix is 34.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter IdentifiersShouldNotMatchKeywords is 33.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter InitializeReferenceTypeStaticFieldsInline is 41.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter InstantiateArgumentExceptionsCorrectly is 38.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter InterfaceMethodsShouldBeCallableByChildTypes is 44.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter MarkBooleanPInvokeArgumentsWithMarshalAs is 40.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter MovePInvokesToNativeMethodsClass is 32.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter OverrideLinkDemandsShouldBeIdenticalToBase is 42.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter ReplaceRepetitiveArgumentsWithParamsArray is 41.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter ResourceStringsShouldBeSpelledCorrectly is 39.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter ReviewSuppressUnmanagedCodeSecurityUsage is 40.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter SpecifyMarshalingForPInvokeStringArguments is 42.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter SystemAndMicrosoftNamespacesRequireApproval is 43.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter TypesMustHaveXamlCallableConstructors is 37.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter TypesThatOwnDisposableFieldsShouldBeDisposable is 46.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter UseApprovedGenericsForPrecompiledAssemblies is 43.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter UseManagedEquivalentsOfWin32Api is 31.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter UriPropertiesShouldNotBeStrings is 31.
Long Identifier,Microsoft.ServiceBus.Common,Rule,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\FXCop.cs,,The length of the parameter VariableNamesShouldNotMatchFieldNames is 37.
Long Identifier,Microsoft.ServiceBus.Common,InputQueue<T>,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\InputQueue.cs,,The length of the parameter completeOutstandingReadersCallback is 34.
Long Identifier,Microsoft.ServiceBus.Common,IOThreadTimer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,IOThreadTimer,The length of the parameter isTypicallyCanceledShortlyAfterBeingSet is 39.
Long Identifier,Microsoft.ServiceBus.Common,IOThreadTimer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,IOThreadTimer,The length of the parameter isTypicallyCanceledShortlyAfterBeingSet is 39.
Long Identifier,Microsoft.ServiceBus.Common,Fx,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Common\Fx.cs,,The length of the parameter breakOnExceptionTypesRetrieved is 30.
Long Identifier,Microsoft.ServiceBus.Common,Fx,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Common\Fx.cs,,The length of the parameter asynchronousThreadExceptionHandler is 34.
Long Statement,Microsoft.ServiceBus.Common,AsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\AsyncResult.cs,Complete,The length of the statement  "                throw Fx.Exception.AsError(new InvalidOperationException(SRCore.AsyncResultCompletedTwice(this.GetType() + "\r\n First Complete Call Stack: \r\n" + this.completeStack + "\r\n"))); " is 179.
Long Statement,Microsoft.ServiceBus.Common,AsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\AsyncResult.cs,PrepareAsyncCompletion,The length of the statement  "                // It might be an old' leftover one' if an exception was thrown within the last using (PrepareTransactionalCall()) block. " is 121.
Long Statement,Microsoft.ServiceBus.Common,AsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\AsyncResult.cs,PrepareTransactionalCall,The length of the statement  "                ThrowInvalidAsyncResult("PrepareTransactionalCall should only be called as the object of non-nested using statements. If the Begin succeeds' Check/SyncContinue must be called before another PrepareTransactionalCall."); " is 218.
Long Statement,Microsoft.ServiceBus.Common,AsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\AsyncResult.cs,TryContinueHelper,The length of the statement  "                        // This is most likely to happen when result.CompletedSynchronously registers differently here and in the callback' which " is 121.
Long Statement,Microsoft.ServiceBus.Common,TransactionSignalScope,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\AsyncResult.cs,Dispose,The length of the statement  "                        AsyncResult.ThrowInvalidAsyncResult("PrepareTransactionalCall should only be called in a using. Dispose called multiple times."); " is 129.
Long Statement,Microsoft.ServiceBus.Common,CompletedAsyncResult<TResult;TParameter>,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\CompletedAsyncResult.cs,End,The length of the statement  "            CompletedAsyncResult<TResult' TParameter> completedResult = AsyncResult.End<CompletedAsyncResult<TResult' TParameter>>(result); " is 127.
Long Statement,Microsoft.ServiceBus.Common,IOThreadTimer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,SetAt,The length of the statement  "                throw Fx.Exception.ArgumentOutOfRange("newDueTime"' newDueTime' SRClient.ArgumentOutOfRange(0' TimeSpan.MaxValue.Ticks-1)); " is 123.
Long Statement,Microsoft.ServiceBus.Common,SRCore,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRCore.Designer.cs,MultipleTransportSettingConfigurationElement,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("MultipleTransportSettingConfigurationElement"' Culture)' param0); " is 122.
Long Statement,Microsoft.ServiceBus.Common.Interop,SafeEventLogWriteHandle,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\Interop\SafeEventLogWriteHandle.cs,RegisterEventSource,The length of the statement  "                Debug.Print("SafeEventLogWriteHandle::RegisterEventSource[" + uncServerName + "' " + sourceName + "] Failed. Last Error: " + " is 124.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnProtocolHeader,The length of the statement  "                    exception = new AmqpException(AmqpError.NotImplemented' SRClient.ProtocolVersionNotSupported(this.initialHeader.ToString()' header.ToString())); " is 144.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnProtocolHeader,The length of the statement  "                    exception = new AmqpException(AmqpError.NotImplemented' SRClient.ProtocolVersionNotSupported(this.initialHeader.ToString()' header.ToString())); " is 144.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnSessionClosed,The length of the statement  "            Utils.Trace(TraceLevel.Info' "{0}: {1} [{2}'{3}] closed and removed"' this' session' session.LocalChannel' session.RemoteChannel); " is 130.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpLink.cs,DisposeDelivery,The length of the statement  "            Utils.Trace(TraceLevel.Verbose' "{0}: Dispose delivery (id={1}' settle={2}' state={3})."' this' delivery.DeliveryId' settled' state); " is 133.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpLink.cs,ProcessTransfer,The length of the statement  "            Utils.Trace(TraceLevel.Verbose' "{0}: Receive a transfer(id:{1}' settled:{2})."' this' transfer.DeliveryId' transfer.Settled()); " is 128.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpLink.cs,ProcessTransfer,The length of the statement  "                    Utils.Trace(TraceLevel.Verbose' "{0}: The transfer {1} was rejected due to insufficient link credit."' this' transfer.DeliveryId.Value); " is 136.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpLink.cs,OnReceiveAttach,The length of the statement  "                    this.Session.Connection.AmqpSettings.RuntimeProvider.BeginOpenLink(this' this.DefaultOpenTimeout' this.OnProviderLinkOpened' null); " is 131.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpOutputStreamMessage,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpMessage.cs,OnInitialize,The length of the statement  "                reader.ReadMessage(emptyMessage' SectionFlag.Header | SectionFlag.DeliveryAnnotations | SectionFlag.MessageAnnotations); " is 120.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpMessageReader,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpMessage.cs,ReadListSection,The length of the statement  "                Fx.Assert(formatCode == FormatCode.List8 || formatCode == FormatCode.List0 || formatCode == FormatCode.List32' "Invalid list format code"); " is 139.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpObject,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,TryClose,The length of the statement  "                Utils.Trace(TraceLevel.Error' "{0}: Fault with exception: {1}"' this' exception != null ? exception.Message : string.Empty); " is 124.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,OpenAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,OnTransport,The length of the statement  "                IAsyncResult result = this.connection.BeginOpen(this.timeoutHelper.RemainingTime()' this.PrepareAsyncCompletion(onConnectionOpen)' this); " is 137.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpSession,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,AttachLink,The length of the statement  "            Utils.Trace(TraceLevel.Info' "{0}: Attach {1} '{2}' ({3})"' this' link' link.Name' link.IsReceiver ? "receiver" : "sender"); " is 124.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpSession,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,SendCommand,The length of the statement  "                Utils.Trace(TraceLevel.Verbose' "{0}: Dispose {1}-{2}' settled:{3}' outcome:{4}."' this' disposition.First.Value' disposition.Last' disposition.Settled' disposition.State.DescriptorName.Value); " is 193.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,IncomingSessionChannel,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,OnTransfer,The length of the statement  "                Utils.Trace(TraceLevel.Debug' "{0}: Receive a transfer (id:{1}' settled:{2}) in-win:{3}"' this' transfer.DeliveryId' transfer.Settled()' this.incomingWindow); " is 158.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,ByteBuffer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ByteBuffer.cs,Wrap,The length of the statement  "            return new BufferedByteBuffer(array.Array' array.Offset' array.Offset' array.Offset + array.Count' array.Offset + array.Count' false); " is 134.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,Extensions,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Extensions.cs,SettleType,The length of the statement  "            SenderSettleMode ssm = attach.SndSettleMode.HasValue ? (SenderSettleMode)attach.SndSettleMode.Value : SenderSettleMode.Mixed; " is 125.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,Extensions,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Extensions.cs,SettleType,The length of the statement  "            ReceiverSettleMode rsm = attach.RcvSettleMode.HasValue ? (ReceiverSettleMode)attach.RcvSettleMode.Value : ReceiverSettleMode.First; " is 131.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,ReceivingAmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ReceivingAmqpLink.cs,OnProcessTransfer,The length of the statement  "            Fx.Assert(delivery == null || object.ReferenceEquals(delivery' this.currentDelivery)' "The delivery must be null or must be the same as the current message."); " is 159.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,ReceivingAmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ReceivingAmqpLink.cs,OnProcessTransfer,The length of the statement  "                Utils.Trace(TraceLevel.Debug' "{0}: Complete a message with payload from {1} transfers."' this' this.currentDelivery.Count); " is 124.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,OpenInternal,The length of the statement  "                    WriteCommand(new Attach() { LinkName = Guid.NewGuid().ToString("N")' Handle = 0' Role = false' Target = new Target() { Address = this.parent.node } }); " is 151.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,HandleFrameBuffer,The length of the statement  "                        this.WriteCommand(new Flow() { NextIncomingId = 0' NextOutgoingId = 0' IncomingWindow = uint.MaxValue' OutgoingWindow = uint.MaxValue' Handle = 0' LinkCredit = uint.MaxValue }); " is 177.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,OpenContainerAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OnTransport,The length of the statement  "                thisPtr.connection = new AmqpConnection(args.Transport' settings' new AmqpConnectionSettings() { ContainerId = thisPtr.parent.id }); " is 132.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,Listener,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OnAcceptTransport,The length of the statement  "                AmqpConnection connection = new AmqpConnection(args.Transport' this.settings' new AmqpConnectionSettings() { ContainerId = this.container.id }); " is 144.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp,Listener,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,AcceptLink,The length of the statement  "                if (this.TryMatchLink(node' true' isReceiver' (r) => { return new AcceptLinkAsyncResult(r' messageListener' null' null); }' out result)) " is 136.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpEncoding.cs,GetInvalidFormatCodeException,The length of the statement  "            return GetEncodingException(string.Format(CultureInfo.CurrentCulture' "Invalid format code: {0} at position {1}."' formatCode' position)); " is 138.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DescribedEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DescribedEncoding.cs,GetEncodeSize,The length of the statement  "                FixedWidth.FormatCode + AmqpEncoding.GetObjectEncodeSize(value.Descriptor) + AmqpEncoding.GetObjectEncodeSize(value.Value); " is 123.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Attach,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Attach.cs,ToString,The length of the statement  "            this.AddFieldToString(this.IncompleteUnsettled != null' sb' "incomplete-unsettled"' this.IncompleteUnsettled' ref count); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Attach,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Attach.cs,ToString,The length of the statement  "            this.AddFieldToString(this.InitialDeliveryCount != null' sb' "initial-delivery-count"' this.InitialDeliveryCount' ref count); " is 125.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Attach,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Attach.cs,ToString,The length of the statement  "            this.AddFieldToString(this.OfferedCapabilities != null' sb' "offered-capabilities"' this.OfferedCapabilities' ref count); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Attach,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Attach.cs,ToString,The length of the statement  "            this.AddFieldToString(this.DesiredCapabilities != null' sb' "desired-capabilities"' this.DesiredCapabilities' ref count); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Begin,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Begin.cs,ToString,The length of the statement  "            this.AddFieldToString(this.OfferedCapabilities != null' sb' "offered-capabilities"' this.OfferedCapabilities' ref count); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Begin,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Begin.cs,ToString,The length of the statement  "            this.AddFieldToString(this.DesiredCapabilities != null' sb' "desired-capabilities"' this.DesiredCapabilities' ref count); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The length of the statement  "            byte[] buffer = new byte[8] { (byte)FormatCode.Described' (byte)FormatCode.SmallULong' (byte)Data.Code' 0x00' 0x00' 0x00' 0x00' 0x00 }; " is 135.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,DescribedList,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\DescribedList.cs,DecodeValue,The length of the statement  "                int bytesRemaining = size - (buffer.Offset - offset) - (formatCode == FormatCode.List8 ? FixedWidth.UByte : FixedWidth.UInt); " is 125.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Open,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Open.cs,ToString,The length of the statement  "            this.AddFieldToString(this.OfferedCapabilities != null' sb' "offered-capabilities"' this.OfferedCapabilities' ref count); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Open,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Open.cs,ToString,The length of the statement  "            this.AddFieldToString(this.DesiredCapabilities != null' sb' "desired-capabilities"' this.DesiredCapabilities' ref count); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,ProtocolHeader,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\ProtocolHeader.cs,Decode,The length of the statement  "            header.version = new AmqpVersion(AmqpBitConverter.ReadUByte(buffer)' AmqpBitConverter.ReadUByte(buffer)' AmqpBitConverter.ReadUByte(buffer)); " is 141.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Source,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Source.cs,ToString,The length of the statement  "            this.AddFieldToString(this.DynamicNodeProperties != null' sb' "dynamic-node-properties"' this.DynamicNodeProperties' ref count); " is 128.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Framing,Target,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Target.cs,ToString,The length of the statement  "            this.AddFieldToString(this.DynamicNodeProperties != null' sb' "dynamic-node-properties"' this.DynamicNodeProperties' ref count); " is 128.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Sasl,SaslMechanisms,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Sasl\SaslMechanisms.cs,ToString,The length of the statement  "            this.AddFieldToString(this.SaslServerMechanisms != null' sb' "sasl-server-mechanisms"' this.SaslServerMechanisms' ref count); " is 125.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Sasl,SaslPlainHandler,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Sasl\SaslPlainHandler.cs,OnInit,The length of the statement  "                string message = Encoding.UTF8.GetString(init.InitialResponse.Array' init.InitialResponse.Offset' init.InitialResponse.Count); " is 126.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Serialization,AmqpContractSerializer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Serialization\AmqpContractSerializer.cs,CompileType,The length of the statement  "                Type memberType = memberInfo.MemberType == MemberTypes.Field ? ((FieldInfo)memberInfo).FieldType : ((PropertyInfo)memberInfo).PropertyType; " is 139.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Serialization,PropertyMemberAccessor,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Serialization\MemberAccessor.cs,InitializeGetter,The length of the statement  "                DynamicMethod method = new DynamicMethod(GetAccessorName()' typeof(object)' new[] { typeof(object) }' propertyInfo.DeclaringType); " is 130.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Serialization,PropertyMemberAccessor,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Serialization\MemberAccessor.cs,InitializeSetter,The length of the statement  "                DynamicMethod method = new DynamicMethod(GetAccessorName()' typeof(void)' new[] { typeof(object)' typeof(object) }' propertyInfo.DeclaringType); " is 144.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Transaction,Controller,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transaction\Controller.cs,BeginDeclare,The length of the statement  "            return this.sendLink.BeginSendMessage(message' this.GetDeliveryTag()' AmqpConstants.EmptyBinary' timeout' callback' state); " is 123.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Transaction,Controller,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transaction\Controller.cs,BeginDischange,The length of the statement  "            return this.sendLink.BeginSendMessage(message' this.GetDeliveryTag()' AmqpConstants.EmptyBinary' timeout' callback' state); " is 123.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Transport,AmqpTransportInitiator,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\AmqpTransportInitiator.cs,OnReadHeaderComplete,The length of the statement  "                    throw new AmqpException(AmqpError.NotImplemented' SRClient.ProtocolVersionNotSupported(this.sentHeader' receivedHeader)); " is 121.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Transport,AmqpTransportInitiator,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\AmqpTransportInitiator.cs,OnReadHeaderComplete,The length of the statement  "                TransportBase secureTransport = this.settings.TransportProviders[this.providerIndex].CreateTransport(args.Transport' true); " is 123.
Long Statement,Microsoft.ServiceBus.Messaging.Amqp.Transport,TlsTransportInitiator,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\TlsTransportInitiator.cs,HandleInnerTransportConnected,The length of the statement  "                    IAsyncResult result = this.callbackArgs.Transport.BeginOpen(this.timeoutHelper.RemainingTime()' onTransportOpened' this); " is 121.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,DuplicateHistoryExpiryTimeExceedsMaximumAllowed,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("DuplicateHistoryExpiryTimeExceedsMaximumAllowed"' Culture)' param0); " is 125.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,SQLSyntaxErrorDetailed,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("SQLSyntaxErrorDetailed"' Culture)' param0' param1' param2' param3); " is 124.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,ConfigInvalidBindingConfigurationName,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("ConfigInvalidBindingConfigurationName"' Culture)' param0' param1); " is 123.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,CannotUseSameMessageInstanceInMultipleOperations,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("CannotUseSameMessageInstanceInMultipleOperations"' Culture)' param0); " is 126.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,OverflowWhenAddingException,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("OverflowWhenAddingException"' Culture)' param0' param1' param2); " is 121.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,NoCorrelationResponseForChannelMessageId,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("NoCorrelationResponseForChannelMessageId"' Culture)' param0' param1); " is 126.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,SubscriptionProvisioningError,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("SubscriptionProvisioningError"' Culture)' param0' param1' param2); " is 123.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,FilterFunctionIncorrectNumberOfArguments,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("FilterFunctionIncorrectNumberOfArguments"' Culture)' param0' param1' param2); " is 134.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,ExpectedTypeInvalidCastException,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("ExpectedTypeInvalidCastException"' Culture)' param0' param1' param2); " is 126.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,AppSettingsConfigSettingInvalidValue,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("AppSettingsConfigSettingInvalidValue"' Culture)' param0' param1); " is 122.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,AppSettingsCreateFactoryWithInvalidConnectionString,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("AppSettingsCreateFactoryWithInvalidConnectionString"' Culture)' param0); " is 129.
Long Statement,Microsoft.ServiceBus,SRClient,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\SRClient.Designer.cs,AppSettingsCreateManagerWithInvalidConnectionString,The length of the statement  "            return string.Format(Culture' ResourceManager.GetString("AppSettingsCreateManagerWithInvalidConnectionString"' Culture)' param0); " is 129.
Complex Conditional,Microsoft.ServiceBus.Common,Fx,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Common\Fx.cs,IsFatal,The conditional expression  "exception is FatalException ||                      (exception is OutOfMemoryException && !(exception is InsufficientMemoryException)) ||                      exception is ThreadAbortException ||                      exception is AccessViolationException ||                      exception is AssertionFailedException ||                      exception is SEHException"  is complex.
Complex Conditional,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnFrameBuffer,The conditional expression  "frame.Command.DescriptorCode == OpenCommand.Code ||                  frame.Command.DescriptorCode == CloseCommand.Code ||                  frame.Command.DescriptorCode == Begin.Code ||                  frame.Command.DescriptorCode == End.Code"  is complex.
Complex Conditional,Microsoft.ServiceBus.Messaging.Amqp,AmqpLink,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpLink.cs,OnReceiveAttach,The conditional expression  "(this.IsReceiver && attach.Source == null) ||                      (!this.IsReceiver && attach.Target == null)"  is complex.
Complex Conditional,Microsoft.ServiceBus.Messaging.Amqp.Transport,TransportHandler,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Transport\AmqpTransportListener.cs,OnProtocolHeader,The conditional expression  "(this.parent.settings.RequireSecureTransport && !newTransport.IsSecure) ||                          (!this.parent.settings.AllowAnonymousConnection && !newTransport.IsAuthenticated)"  is complex.
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,OpenAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,OpenAsyncResult,The constructor "OpenAsyncResult" calls a virtual method "OpenInternal".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,OpenAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,OpenAsyncResult,The constructor "OpenAsyncResult" calls a virtual method "Start".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,CloseAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,CloseAsyncResult,The constructor "CloseAsyncResult" calls a virtual method "CloseInternal".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,InputStreamByteBuffer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ByteBuffer.cs,InputStreamByteBuffer,The constructor "InputStreamByteBuffer" calls a virtual method "TakeBuffer".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,OpenContainerAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OpenContainerAsyncResult,The constructor "OpenContainerAsyncResult" calls a virtual method "CreateInitiator".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,OpenContainerAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OpenContainerAsyncResult,The constructor "OpenContainerAsyncResult" calls a virtual method "ConnectAsync".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,OpenTerminusAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OpenTerminusAsyncResult,The constructor "OpenTerminusAsyncResult" calls a virtual method "CreateLink".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,OpenLinkAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OpenLinkAsyncResult,The constructor "OpenLinkAsyncResult" calls a virtual method "ToString".
Virtual Method Call from Constructor,Microsoft.ServiceBus.Messaging.Amqp,OpenLinkAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OpenLinkAsyncResult,The constructor "OpenLinkAsyncResult" calls a virtual method "ToString".
Empty Catch Block,Microsoft.ServiceBus.Common,Fx,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Common\Fx.cs,TryGetDebugSwitch,The method has an empty catch block.
Empty Catch Block,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,OnFrameBuffer,The method has an empty catch block.
Magic Number,Microsoft.ServiceBus.Common,ItemQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\InputQueue.cs,EnqueueItemCore,The following statement contains a magic number: if (this.totalCount == this.items.Length)                  {                      Item[] newItems = new Item[this.items.Length * 2];                      for (int i = 0; i < this.totalCount; i++)                      {                          newItems[i] = this.items[(head + i) % this.items.Length];                      }                      this.head = 0;                      this.items = newItems;                  }
Magic Number,Microsoft.ServiceBus.Common,PooledBufferManager,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\InternalBufferManager.cs,PooledBufferManager,The following statement contains a magic number: for (int bufferSize = minBufferSize; ; )                  {                      long bufferCountLong = this.remainingMemory / bufferSize;                        int bufferCount = bufferCountLong > int.MaxValue ? int.MaxValue : (int)bufferCountLong;                        if (bufferCount > initialBufferCount)                      {                          bufferCount = initialBufferCount;                      }                        bufferPoolList.Add(new BufferPool(bufferSize' bufferCount));                        this.remainingMemory -= (long)bufferCount * bufferSize;                        if (bufferSize >= maxBufferSize)                      {                          break;                      }                        long newBufferSizeLong = (long)bufferSize * 2;                        if (newBufferSizeLong > (long)maxBufferSize)                      {                          bufferSize = maxBufferSize;                      }                      else                      {                          bufferSize = (int)newBufferSizeLong;                      }                  }
Magic Number,Microsoft.ServiceBus.Common,IOThreadScheduler,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadScheduler.cs,ScheduleCallbackHelper,The following statement contains a magic number: if (wrapped)              {                  // Wrapped around the circular buffer.  Create a new' bigger IOThreadScheduler.                  IOThreadScheduler next =                      new IOThreadScheduler(Math.Min(this.slots.Length * 2' MaximumCapacity)' this.slotsLowPri.Length);                  Interlocked.CompareExchange<IOThreadScheduler>(ref IOThreadScheduler.current' next' this);              }
Magic Number,Microsoft.ServiceBus.Common,IOThreadScheduler,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadScheduler.cs,ScheduleCallbackLowPriHelper,The following statement contains a magic number: if (wrapped)              {                  IOThreadScheduler next =                      new IOThreadScheduler(this.slots.Length' Math.Min(this.slotsLowPri.Length * 2' MaximumCapacity));                  Interlocked.CompareExchange<IOThreadScheduler>(ref IOThreadScheduler.current' next' this);              }
Magic Number,Microsoft.ServiceBus.Common,Bits,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadScheduler.cs,Count,The following statement contains a magic number: return ((slot >> HiShift) - slot + 2 & LoMask) - 1;
Magic Number,Microsoft.ServiceBus.Common,IOThreadTimer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,GetSystemTimeResolution,The following statement contains a magic number: return 15 * TimeSpan.TicksPerMillisecond;
Magic Number,Microsoft.ServiceBus.Common,TimerQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,TimerQueue,The following statement contains a magic number: this.timers = new IOThreadTimer[4];
Magic Number,Microsoft.ServiceBus.Common,TimerQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,DeleteTimer,The following statement contains a magic number: for (;;)                  {                      int parentIndex = index / 2;                        if (parentIndex >= 1)                      {                          IOThreadTimer parentTimer = tempTimers[parentIndex];                          tempTimers[index] = parentTimer;                          parentTimer.index = index;                      }                      else                      {                          break;                      }                        index = parentIndex;                  }
Magic Number,Microsoft.ServiceBus.Common,TimerQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,InsertTimer,The following statement contains a magic number: if (index == tempTimers.Length)                  {                      tempTimers = new IOThreadTimer[tempTimers.Length * 2];                      Array.Copy(this.timers' tempTimers' this.timers.Length);                      this.timers = tempTimers;                  }
Magic Number,Microsoft.ServiceBus.Common,TimerQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,InsertTimer,The following statement contains a magic number: if (index > 1)                  {                      for (;;)                      {                          int parentIndex = index / 2;                            if (parentIndex == 0)                          {                              break;                          }                            IOThreadTimer parent = tempTimers[parentIndex];                            if (parent.dueTime > dueTime)                          {                              tempTimers[index] = parent;                              parent.index = index;                              index = parentIndex;                          }                          else                          {                              break;                          }                      }                  }
Magic Number,Microsoft.ServiceBus.Common,TimerQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,UpdateTimer,The following statement contains a magic number: int parentIndex = index / 2;
Magic Number,Microsoft.ServiceBus.Common,TimerQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,UpdateTimer,The following statement contains a magic number: if (parentIndex == 0 ||                      tempTimers[parentIndex].dueTime <= newDueTime)                  {                      int leftChildIndex = index * 2;                      if (leftChildIndex > tempCount ||                          tempTimers[leftChildIndex].dueTime >= newDueTime)                      {                          int rightChildIndex = leftChildIndex + 1;                          if (rightChildIndex > tempCount ||                              tempTimers[rightChildIndex].dueTime >= newDueTime)                          {                              timer.dueTime = newDueTime;                              return index == 1;                          }                      }                  }
Magic Number,Microsoft.ServiceBus.Common,TimerQueue,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\IOThreadTimer.cs,DeleteMinTimerCore,The following statement contains a magic number: if (currentCount == 1)                  {                      this.count = 0;                      this.timers[1] = null;                  }                  else                  {                      IOThreadTimer[] tempTimers = this.timers;                      IOThreadTimer lastTimer = tempTimers[currentCount];                      this.count = --currentCount;                        int index = 1;                      for (;;)                      {                          int leftChildIndex = index * 2;                            if (leftChildIndex > currentCount)                          {                              break;                          }                            int childIndex;                          IOThreadTimer child;                            if (leftChildIndex < currentCount)                          {                              IOThreadTimer leftChild = tempTimers[leftChildIndex];                              int rightChildIndex = leftChildIndex + 1;                              IOThreadTimer rightChild = tempTimers[rightChildIndex];                                if (rightChild.dueTime < leftChild.dueTime)                              {                                  child = rightChild;                                  childIndex = rightChildIndex;                              }                              else                              {                                  child = leftChild;                                  childIndex = leftChildIndex;                              }                          }                          else                          {                              childIndex = leftChildIndex;                              child = tempTimers[childIndex];                          }                            if (lastTimer.dueTime > child.dueTime)                          {                              tempTimers[index] = child;                              child.index = index;                          }                          else                          {                              break;                          }                            index = childIndex;                            if (leftChildIndex >= currentCount)                          {                              break;                          }                      }                        tempTimers[index] = lastTimer;                      lastTimer.index = index;                      tempTimers[currentCount + 1] = null;                  }
Magic Number,Microsoft.ServiceBus.Common,SynchronizedPool<T>,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\SynchronizedPool.cs,SynchronizedPool,The following statement contains a magic number: this.pending = new PendingEntry[4];
Magic Number,Microsoft.ServiceBus.Common,SynchronizedPool<T>,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Common\SynchronizedPool.cs,RecordTakeFromGlobalPool,The following statement contains a magic number: if (localPending.Length >= maxPendingEntries)              {                  this.pending = new PendingEntry[localPending.Length];              }              else              {                  PendingEntry[] newPending = new PendingEntry[localPending.Length * 2];                  Array.Copy(localPending' newPending' localPending.Length);                  this.pending = newPending;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnReceiveOpen,The following statement contains a magic number: if (this.isInitiator && this.Settings.IdleTimeOut.Value != uint.MaxValue)              {                  this.heartBeatInterval = (int)(this.Settings.IdleTimeOut.Value * 3 / 8);                  if (this.heartBeatInterval < 500)                  {                      this.heartBeatInterval = 500;                  }                    this.heartBeatTimer = new IOThreadTimer(OnHeartBeatTimer' this' false);                  this.heartBeatTimer.Set(this.heartBeatInterval);                  Utils.Trace(TraceLevel.Info' "{0}: enabled heart beat timer ({1}ms)"' this' this.heartBeatInterval);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnReceiveOpen,The following statement contains a magic number: if (this.isInitiator && this.Settings.IdleTimeOut.Value != uint.MaxValue)              {                  this.heartBeatInterval = (int)(this.Settings.IdleTimeOut.Value * 3 / 8);                  if (this.heartBeatInterval < 500)                  {                      this.heartBeatInterval = 500;                  }                    this.heartBeatTimer = new IOThreadTimer(OnHeartBeatTimer' this' false);                  this.heartBeatTimer.Set(this.heartBeatInterval);                  Utils.Trace(TraceLevel.Info' "{0}: enabled heart beat timer ({1}ms)"' this' this.heartBeatInterval);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnReceiveOpen,The following statement contains a magic number: if (this.isInitiator && this.Settings.IdleTimeOut.Value != uint.MaxValue)              {                  this.heartBeatInterval = (int)(this.Settings.IdleTimeOut.Value * 3 / 8);                  if (this.heartBeatInterval < 500)                  {                      this.heartBeatInterval = 500;                  }                    this.heartBeatTimer = new IOThreadTimer(OnHeartBeatTimer' this' false);                  this.heartBeatTimer.Set(this.heartBeatInterval);                  Utils.Trace(TraceLevel.Info' "{0}: enabled heart beat timer ({1}ms)"' this' this.heartBeatInterval);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpConnection.cs,OnReceiveOpen,The following statement contains a magic number: if (this.isInitiator && this.Settings.IdleTimeOut.Value != uint.MaxValue)              {                  this.heartBeatInterval = (int)(this.Settings.IdleTimeOut.Value * 3 / 8);                  if (this.heartBeatInterval < 500)                  {                      this.heartBeatInterval = 500;                  }                    this.heartBeatTimer = new IOThreadTimer(OnHeartBeatTimer' this' false);                  this.heartBeatTimer.Set(this.heartBeatInterval);                  Utils.Trace(TraceLevel.Info' "{0}: enabled heart beat timer ({1}ms)"' this' this.heartBeatInterval);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpLinkSettings,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpLinkSettings.cs,GetHashCode,The following statement contains a magic number: return this.LinkName.GetHashCode() * 397 + this.Role.GetHashCode();
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpBufferedMessage,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpMessage.cs,Initialize,The following statement contains a magic number: List<ArraySegment<byte>> segmentList = new List<ArraySegment<byte>>(4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpBodyStreamMessage,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpMessage.cs,OnInitialize,The following statement contains a magic number: this.bodyData = AmqpMessage.ReadStream(this.bodyStream' 1024' out this.bodyLength);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpOutputStreamMessage,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpMessage.cs,OnInitialize,The following statement contains a magic number: if (stream != null && !this.ownStream)                  {                      stream = (BufferListStream)stream.Clone();                  }                  else                  {                      int length = 0;                      ArraySegment<byte>[] buffers = AmqpMessage.ReadStream(this.messageStream' 512' out length);                      stream = new BufferListStream(buffers);                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpMessageReader,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpMessage.cs,ReadFormatCode,The following statement contains a magic number: if ((formatCode & 0x0F) == 0x0F)                  {                      formatCode = (formatCode << 8) + this.stream.ReadByte();                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,OpenAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,OpenAsyncResult,The following statement contains a magic number: tcpSettings.TcpBacklog = 20;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,OpenAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpObject.cs,OpenAsyncResult,The following statement contains a magic number: tcpSettings.TcpBufferSize = 4096;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,SessionChannel,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,SessionChannel,The following statement contains a magic number: int defaultThreshold = this.deliveryBuffer.Length * 2 / 3;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,SessionChannel,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,SessionChannel,The following statement contains a magic number: int defaultThreshold = this.deliveryBuffer.Length * 2 / 3;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,IncomingSessionChannel,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,IncomingSessionChannel,The following statement contains a magic number: this.flowThreshold = this.incomingWindow == uint.MaxValue ? uint.MaxValue : this.incomingWindow * 2 / 3;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,IncomingSessionChannel,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AmqpSession.cs,IncomingSessionChannel,The following statement contains a magic number: this.flowThreshold = this.incomingWindow == uint.MaxValue ? uint.MaxValue : this.incomingWindow * 2 / 3;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AsyncWriter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AsyncIO.cs,WriteBuffer,The following statement contains a magic number: lock (this.syncRoot)                  {                      if (this.state == 2)                      {                          doWrite = false;                      }                      else                      {                          this.AddRequest(request);                          if (this.state == 1)                          {                              doWrite = false;                          }                          else                          {                              this.state = 1;                          }                      }                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AsyncWriter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AsyncIO.cs,TryClose,The following statement contains a magic number: lock (this.syncRoot)                  {                      if (this.state != 2)                      {                          this.state = 2;                          closed = this.firstRequest == null;                      }                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AsyncWriter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AsyncIO.cs,TryClose,The following statement contains a magic number: lock (this.syncRoot)                  {                      if (this.state != 2)                      {                          this.state = 2;                          closed = this.firstRequest == null;                      }                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AsyncWriter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\AsyncIO.cs,ShouldContinue,The following statement contains a magic number: lock (this.syncRoot)                  {                      if (this.firstRequest == null)                      {                          if (this.state == 2)                          {                              this.parent.OnWriterClosed();                          }                          else                          {                              this.state = 0;                          }                            shouldContinue = false;                      }                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,ByteArrayComparer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ByteArrayComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  for (int i = 0; i < obj.Count; ++i)                  {                      num = (num << 4 - num) ^ obj.Array[i + obj.Offset];                  }              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,BufferedByteBuffer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ByteBuffer.cs,EnsureSize,The following statement contains a magic number: if (this.Size < size)                  {                      if (this.autoGrow)                      {                          byte[] newBuffer = BufferPool.TakeBuffer(this.capacity * 2);                          System.Buffer.BlockCopy(this.buffer' this.start' newBuffer' 0' this.Length);                          BufferPool.ReturnBuffer(this.buffer);                          this.buffer = newBuffer;                          this.capacity = newBuffer.Length;                      }                      else                      {                          throw new InvalidOperationException("EnsureSize");                      }                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,InputStreamByteBuffer,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\ByteBuffer.cs,InputStreamByteBuffer,The following statement contains a magic number: this.buffer = BufferPool.TakeBuffer(512);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,Utils,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Utils.cs,TraceRaw,The following statement contains a magic number: if (Utils.TraceListener != null && Utils.TraceListener.ShouldTrace(TraceLevel.Raw))              {                  int maxToTrace = Math.Min(128' buffer.Length);                  ArraySegment<byte> array = new ArraySegment<byte>(buffer.Buffer' buffer.Offset' maxToTrace);                  TraceCore(TraceLevel.Raw' send ? "SEND  {0}" : "RECV  {0}"' array);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,Utils,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Utils.cs,GetString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(binary.Count * 2);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,Write,The following statement contains a magic number: if (this.parent.encoding)                  {                      this.WriteTransferFrame(buffer' offset' count' callback' state);                  }                  else                  {                      ByteBuffer byteBuffer = ByteBuffer.Wrap(Frame.HeaderSize);                      AmqpBitConverter.WriteUInt(byteBuffer' (uint)(Frame.HeaderSize + count));                      byteBuffer.Append(4);                      this.AsyncIO.Writer.WriteBuffer(                          byteBuffer.Array'                           new ArraySegment<byte>[] { new ArraySegment<byte>(buffer' offset' count) }'                          callback'                           state);                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: ByteBuffer byteBuffer = ByteBuffer.Wrap(128);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: int index = 4;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,AmqpFrameConnection,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\AmqpStream.cs,WriteTransferFrame,The following statement contains a magic number: fixed (byte* p = byteBuffer.Buffer)                  {                      p[index++] = 2;                      p[index++] = p[index++] = p[index++] = 0;                        p[index++] = 0;                      p[index++] = (byte)FormatCode.SmallULong;                      p[index++] = (byte)Transfer.Code;                      p[index++] = (byte)FormatCode.List8;                      int listSizeIndex = index++;                      p[index++] = 11;                        // handle                      p[index++] = (byte)FormatCode.UInt0;                        // delivery id                      uint deliveryId = (uint)this.sn++;                      byte* d = (byte*)&deliveryId;                      p[index++] = (byte)FormatCode.UInt;                      p[index++] = d[3];                      p[index++] = d[2];                      p[index++] = d[1];                      p[index++] = d[0];                        // delivery tag                      p[index++] = (byte)FormatCode.Binary8;                      p[index++] = 0;                        // message format                      p[index++] = (byte)FormatCode.UInt0;                        // settled                      p[index++] = (byte)FormatCode.BooleanTrue;                        // more                      p[index++] = (byte)FormatCode.BooleanFalse;                        // rcv settle mode' state' resume' abort                      p[index++] = p[index++] = p[index++] = p[index++] = (byte)FormatCode.Null;                        // batchable                      p[index++] = (byte)FormatCode.BooleanTrue;                        // write list size                      p[listSizeIndex] = (byte)(index - listSizeIndex);                        // write the frame size                      int frameSize = index + payloadSize;                      d = (byte*)&frameSize;                      p[0] = d[3];                      p[1] = d[2];                      p[2] = d[1];                      p[3] = d[0];                  }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,OpenContainerAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OpenContainerAsyncResult,The following statement contains a magic number: tcpSettings.TcpBacklog = 20;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,OpenContainerAsyncResult,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,OpenContainerAsyncResult,The following statement contains a magic number: tcpSettings.TcpBufferSize = 4096;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,Listener,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,Open,The following statement contains a magic number: tcpSettings.TcpBacklog = 20;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp,Listener,C:\repos\Reactive-Extensions_IL2JS\Tests\AmqpClient\Amqp\Container.cs,Open,The following statement contains a magic number: tcpSettings.TcpBufferSize = 4096;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUInt,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadULong,The following statement contains a magic number: fixed (byte* p = &buffer[offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadFloat,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadFloat,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadFloat,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadFloat,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadDouble,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: fixed (byte* p = &buffer.Buffer[buffer.Offset])              {                  byte* d = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer[offset])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer[offset])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer[offset])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUInt,The following statement contains a magic number: fixed (byte* d = &buffer[offset])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteULong,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteFloat,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteFloat,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteFloat,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteFloat,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteDouble,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[7];                  d[1] = p[6];                  d[2] = p[5];                  d[3] = p[4];                  d[4] = p[3];                  d[5] = p[2];                  d[6] = p[1];                  d[7] = p[0];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpBitConverter,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: fixed (byte* d = &buffer.Buffer[buffer.End])              {                  byte* p = (byte*)&data;                  d[0] = p[3];                  d[1] = p[2];                  d[2] = p[1];                  d[3] = p[0];                    d[4] = p[5];                  d[5] = p[4];                    d[6] = p[7];                  d[7] = p[6];                    *((ulong*)&d[8]) = *((ulong*)&p[8]);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,AmqpEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\AmqpEncoding.cs,ReadFormatCode,The following statement contains a magic number: if ((formatCode & 0x0F) == 0x0F)              {                  formatCode = (formatCode << 8) + AmqpBitConverter.ReadUByte(buffer);              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: int highSignificant = bits[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: int signAndExponent = bits[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: int exponent = Decimal128Bias - p[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[0] = p[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[0] |= (byte)(exponent >> 9);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[2] = 0;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[3] = 0;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[4] = p[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[4] = p[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[5] = p[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[5] = p[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[6] = p[1];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[7] = p[0];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[8] = p[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[8] = p[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[9] = p[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[9] = p[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[10] = p[1];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[11] = p[0];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[12] = p[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[12] = p[3];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[13] = p[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[13] = p[2];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[14] = p[1];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,EncodeValue,The following statement contains a magic number: bytes[15] = p[0];
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal32,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 8-bit-exponent (0)23-bit-significant                  exponent = ((bytes[0] & 0x7F) << 1) | ((bytes[1] & 0x80) >> 7);                  bytes[0] = 0;                  bytes[1] &= 0x7F;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 8-bit-exponent (100)21-bit-significant                  exponent = ((bytes[0] & 0x1F) << 3) | ((bytes[1] & 0xE0) >> 5);                  bytes[0] = 0;                  bytes[1] &= 0x1F;                  bytes[1] |= 0x80;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal32,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 8-bit-exponent (0)23-bit-significant                  exponent = ((bytes[0] & 0x7F) << 1) | ((bytes[1] & 0x80) >> 7);                  bytes[0] = 0;                  bytes[1] &= 0x7F;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 8-bit-exponent (100)21-bit-significant                  exponent = ((bytes[0] & 0x1F) << 3) | ((bytes[1] & 0xE0) >> 5);                  bytes[0] = 0;                  bytes[1] &= 0x1F;                  bytes[1] |= 0x80;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal32,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 8-bit-exponent (0)23-bit-significant                  exponent = ((bytes[0] & 0x7F) << 1) | ((bytes[1] & 0x80) >> 7);                  bytes[0] = 0;                  bytes[1] &= 0x7F;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 8-bit-exponent (100)21-bit-significant                  exponent = ((bytes[0] & 0x1F) << 3) | ((bytes[1] & 0xE0) >> 5);                  bytes[0] = 0;                  bytes[1] &= 0x1F;                  bytes[1] |= 0x80;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal64,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 10-bit-exponent (0)53-bit-significant                  exponent = ((bytes[0] & 0x7F) << 3) | ((bytes[1] & 0xE0) >> 5);                  bytes[0] = 0;                  bytes[1] &= 0x1F;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 10-bit-exponent (100)51-bit-significant                  exponent = ((bytes[0] & 0x1F) << 8) | ((bytes[1] & 0xF8) >> 3);                  bytes[0] = 0;                  bytes[1] &= 0x7;                  bytes[1] |= 0x20;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal64,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 10-bit-exponent (0)53-bit-significant                  exponent = ((bytes[0] & 0x7F) << 3) | ((bytes[1] & 0xE0) >> 5);                  bytes[0] = 0;                  bytes[1] &= 0x1F;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 10-bit-exponent (100)51-bit-significant                  exponent = ((bytes[0] & 0x1F) << 8) | ((bytes[1] & 0xF8) >> 3);                  bytes[0] = 0;                  bytes[1] &= 0x7;                  bytes[1] |= 0x20;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal64,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 10-bit-exponent (0)53-bit-significant                  exponent = ((bytes[0] & 0x7F) << 3) | ((bytes[1] & 0xE0) >> 5);                  bytes[0] = 0;                  bytes[1] &= 0x1F;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 10-bit-exponent (100)51-bit-significant                  exponent = ((bytes[0] & 0x1F) << 8) | ((bytes[1] & 0xF8) >> 3);                  bytes[0] = 0;                  bytes[1] &= 0x7;                  bytes[1] |= 0x20;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal64,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 10-bit-exponent (0)53-bit-significant                  exponent = ((bytes[0] & 0x7F) << 3) | ((bytes[1] & 0xE0) >> 5);                  bytes[0] = 0;                  bytes[1] &= 0x1F;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 10-bit-exponent (100)51-bit-significant                  exponent = ((bytes[0] & 0x1F) << 8) | ((bytes[1] & 0xF8) >> 3);                  bytes[0] = 0;                  bytes[1] &= 0x7;                  bytes[1] |= 0x20;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal64,The following statement contains a magic number: int middle = (int)AmqpBitConverter.ReadUInt(bytes' 0' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal64,The following statement contains a magic number: int low = (int)AmqpBitConverter.ReadUInt(bytes' 4' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal64,The following statement contains a magic number: int low = (int)AmqpBitConverter.ReadUInt(bytes' 4' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal128,The following statement contains a magic number: if ((bytes[0] & 0x60) != 0x60)              {                  // s 14-bit-exponent (0)113-bit-significant                  exponent = ((bytes[0] & 0x7F) << 7) | ((bytes[1] & 0xFE) >> 1);                  bytes[0] = 0;                  bytes[1] &= 0x1;              }              else if ((bytes[0] & 0x78) != 0)              {                  // handle NaN and Infinity              }              else              {                  // s 11 14-bit-exponent (100)111-bit-significant                  // it is out of the valid range already. Should not be used                  return 0;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal128,The following statement contains a magic number: int high = (int)AmqpBitConverter.ReadUInt(bytes' 4' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal128,The following statement contains a magic number: int high = (int)AmqpBitConverter.ReadUInt(bytes' 4' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal128,The following statement contains a magic number: int middle = (int)AmqpBitConverter.ReadUInt(bytes' 8' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal128,The following statement contains a magic number: int middle = (int)AmqpBitConverter.ReadUInt(bytes' 8' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal128,The following statement contains a magic number: int low = (int)AmqpBitConverter.ReadUInt(bytes' 12' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,DecodeDecimal128,The following statement contains a magic number: int low = (int)AmqpBitConverter.ReadUInt(bytes' 12' 4);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,DecimalEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\DecimalEncoding.cs,CreateDecimal,The following statement contains a magic number: if (exponent <= 0)              {                  return new decimal(low' middle' high' sign < 0' (byte)-exponent);              }              else              {                  decimal value = new decimal(low' middle' high' sign < 0' 0);                  for (int i = 0; i < exponent; ++i)                  {                      value *= 10;                  }                    return value;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,ListEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\ListEncoding.cs,GetEncodeSize,The following statement contains a magic number: if (value == null)              {                  return FixedWidth.NullEncoded;              }              else if (value.Count == 0)              {                  return FixedWidth.FormatCode;              }              else              {                  int valueSize = ListEncoding.GetValueSize(value);                  int width = AmqpEncoding.GetEncodeWidthByCountAndSize(value.Count' valueSize);                  return FixedWidth.FormatCode + width * 2 + valueSize;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,MapEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\MapEncoding.cs,GetEncodeSize,The following statement contains a magic number: return value == null ?                  FixedWidth.NullEncoded :                  FixedWidth.FormatCode + (MapEncoding.GetEncodeWidth(value) * 2) + value.ValueSize;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,MapEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\MapEncoding.cs,ReadMapValue,The following statement contains a magic number: for (; count > 0; count -= 2)              {                  object key = AmqpEncoding.DecodeObject(buffer);                  object item = AmqpEncoding.DecodeObject(buffer);                  map[new MapKey(key)] = item;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,MapEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\MapEncoding.cs,GetEncodeWidth,The following statement contains a magic number: return AmqpEncoding.GetEncodeWidthByCountAndSize(value.Count * 2' value.ValueSize);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,MapEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\MapEncoding.cs,Encode,The following statement contains a magic number: if (width == FixedWidth.UByte)              {                  AmqpBitConverter.WriteUByte(buffer' (byte)size);                  AmqpBitConverter.WriteUByte(buffer' (byte)(value.Count * 2));              }              else              {                  AmqpBitConverter.WriteUInt(buffer' (uint)size);                  AmqpBitConverter.WriteUInt(buffer' (uint)(value.Count * 2));              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Encoding,MapEncoding,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Encoding\MapEncoding.cs,Encode,The following statement contains a magic number: if (width == FixedWidth.UByte)              {                  AmqpBitConverter.WriteUByte(buffer' (byte)size);                  AmqpBitConverter.WriteUByte(buffer' (byte)(value.Count * 2));              }              else              {                  AmqpBitConverter.WriteUInt(buffer' (uint)size);                  AmqpBitConverter.WriteUInt(buffer' (uint)(value.Count * 2));              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,AmqpDescribed,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\AmqpDescribed.cs,AddFieldToString,The following statement contains a magic number: if (condition)              {                  if (count > 0)                  {                      sb.Append(''');                  }                    if (value is ArraySegment<byte>)                  {                      sb.Append(fieldName);                      sb.Append(':');                      ArraySegment<byte> binValue = (ArraySegment<byte>)value;                      int size = Math.Min(binValue.Count' 64);                      for (int i = 0; i < size; ++i)                      {                          sb.AppendFormat("{0:X2}"' binValue.Array[binValue.Offset + i]);                      }                  }                  else                  {                      sb.AppendFormat(CultureInfo.InvariantCulture' "{0}:{1}"' fieldName' value);                  }                    ++count;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The following statement contains a magic number: byte[] buffer = new byte[8] { (byte)FormatCode.Described' (byte)FormatCode.SmallULong' (byte)Data.Code' 0x00' 0x00' 0x00' 0x00' 0x00 };
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The following statement contains a magic number: if (valueLength <= byte.MaxValue)              {                  buffer[3] = (byte)FormatCode.Binary8;                  buffer[4] = (byte)valueLength;                  count = 5;              }              else              {                  buffer[3] = (byte)FormatCode.Binary32;                  AmqpBitConverter.WriteUInt(buffer' 4' (uint)valueLength);                  count = 8;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The following statement contains a magic number: if (valueLength <= byte.MaxValue)              {                  buffer[3] = (byte)FormatCode.Binary8;                  buffer[4] = (byte)valueLength;                  count = 5;              }              else              {                  buffer[3] = (byte)FormatCode.Binary32;                  AmqpBitConverter.WriteUInt(buffer' 4' (uint)valueLength);                  count = 8;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The following statement contains a magic number: if (valueLength <= byte.MaxValue)              {                  buffer[3] = (byte)FormatCode.Binary8;                  buffer[4] = (byte)valueLength;                  count = 5;              }              else              {                  buffer[3] = (byte)FormatCode.Binary32;                  AmqpBitConverter.WriteUInt(buffer' 4' (uint)valueLength);                  count = 8;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The following statement contains a magic number: if (valueLength <= byte.MaxValue)              {                  buffer[3] = (byte)FormatCode.Binary8;                  buffer[4] = (byte)valueLength;                  count = 5;              }              else              {                  buffer[3] = (byte)FormatCode.Binary32;                  AmqpBitConverter.WriteUInt(buffer' 4' (uint)valueLength);                  count = 8;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The following statement contains a magic number: if (valueLength <= byte.MaxValue)              {                  buffer[3] = (byte)FormatCode.Binary8;                  buffer[4] = (byte)valueLength;                  count = 5;              }              else              {                  buffer[3] = (byte)FormatCode.Binary32;                  AmqpBitConverter.WriteUInt(buffer' 4' (uint)valueLength);                  count = 8;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Data,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Data.cs,GetEncodedPrefix,The following statement contains a magic number: if (valueLength <= byte.MaxValue)              {                  buffer[3] = (byte)FormatCode.Binary8;                  buffer[4] = (byte)valueLength;                  count = 5;              }              else              {                  buffer[3] = (byte)FormatCode.Binary32;                  AmqpBitConverter.WriteUInt(buffer' 4' (uint)valueLength);                  count = 8;              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Frame,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Frame.cs,Decode,The following statement contains a magic number: buffer.Complete(frame.dataOffset * 4 - Frame.HeaderSize);
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,Frame,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\Frame.cs,IsValid,The following statement contains a magic number: return this.size >= Frame.HeaderSize &&                  this.size <= maxFrameSize &&                  this.dataOffset >= Frame.DefaultDataOffset &&                  (this.dataOffset * 2) <= this.size;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,ProtocolHeader,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\ProtocolHeader.cs,GetHashCode,The following statement contains a magic number: int result = ((int)this.protocolId << 24) +                  (this.version.Major << 16) +                  (this.version.Minor << 8) +                  this.version.Revision;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,ProtocolHeader,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\ProtocolHeader.cs,GetHashCode,The following statement contains a magic number: int result = ((int)this.protocolId << 24) +                  (this.version.Major << 16) +                  (this.version.Minor << 8) +                  this.version.Revision;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Framing,ProtocolHeader,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Framing\ProtocolHeader.cs,GetHashCode,The following statement contains a magic number: int result = ((int)this.protocolId << 24) +                  (this.version.Major << 16) +                  (this.version.Minor << 8) +                  this.version.Revision;
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Sasl,SaslPlainHandler,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Sasl\SaslPlainHandler.cs,OnInit,The following statement contains a magic number: if (init.InitialResponse.Count > 0)              {                  string message = Encoding.UTF8.GetString(init.InitialResponse.Array' init.InitialResponse.Offset' init.InitialResponse.Count);                  string[] items = message.Split('\0');                  if (items.Length != 3)                  {                      throw new UnauthorizedAccessException(SaslPlainHandler.InvalidCredential);                  }                    this.AuthorizationIdentity = items[0];                  this.AuthenticationIdentity = items[1];                  password = items[2];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Sasl,SaslPlainHandler,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Sasl\SaslPlainHandler.cs,OnInit,The following statement contains a magic number: if (init.InitialResponse.Count > 0)              {                  string message = Encoding.UTF8.GetString(init.InitialResponse.Array' init.InitialResponse.Offset' init.InitialResponse.Count);                  string[] items = message.Split('\0');                  if (items.Length != 3)                  {                      throw new UnauthorizedAccessException(SaslPlainHandler.InvalidCredential);                  }                    this.AuthorizationIdentity = items[0];                  this.AuthenticationIdentity = items[1];                  password = items[2];              }
Magic Number,Microsoft.ServiceBus.Messaging.Amqp.Serialization,SerializableType,C:\repos\Reactive-Extensions_IL2JS\Tests\Microsoft.ServiceBus.Messaging\Messaging\Amqp\Serialization\SerializableType.cs,WriteObject,The following statement contains a magic number: using (ByteBuffer buffer = ByteBuffer.Wrap(512))              {                  this.OnWriteObject(buffer' graph);                  stream.Write(buffer.Buffer' buffer.Offset' buffer.Length);              }
