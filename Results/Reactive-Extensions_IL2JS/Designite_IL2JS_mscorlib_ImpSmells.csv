Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,BinarySearch,Cyclomatic complexity of the method is 9
Complex Method,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,BinarySearch,Cyclomatic complexity of the method is 9
Complex Method,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,FindLastIndex,Cyclomatic complexity of the method is 8
Complex Method,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,LastIndexOf,Cyclomatic complexity of the method is 9
Complex Method,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,LastIndexOf,Cyclomatic complexity of the method is 9
Complex Method,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,Cyclomatic complexity of the method is 8
Complex Method,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,Cyclomatic complexity of the method is 9
Complex Method,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,Join,Cyclomatic complexity of the method is 8
Complex Method,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,Split,Cyclomatic complexity of the method is 10
Complex Method,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,TrimHelper,Cyclomatic complexity of the method is 13
Complex Method,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Version,Cyclomatic complexity of the method is 9
Complex Method,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,CompareTo,Cyclomatic complexity of the method is 11
Complex Method,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,CompareTo,Cyclomatic complexity of the method is 10
Complex Method,System.Reflection,ConstructorInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\ConstructorInfo.cs,MatchedBy,Cyclomatic complexity of the method is 8
Complex Method,System.Reflection,EventInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\EventInfo.cs,MatchedBy,Cyclomatic complexity of the method is 9
Complex Method,System.Reflection,MethodInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\MethodInfo.cs,MatchedBy,Cyclomatic complexity of the method is 12
Complex Method,System.Reflection,PropertyInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\PropertyInfo.cs,MatchedBy,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.LiveLabs.JavaScript,JSDate,C:\repos\Reactive-Extensions_IL2JS\mscorlib\Microsoft\LiveLabs\JavaScript\JSDate.cs,JSDate,The method has 7 parameters. Parameters: year' month' day' hours' minutes' seconds' milliseconds
Long Parameter List,Microsoft.LiveLabs.JavaScript,JSDate,C:\repos\Reactive-Extensions_IL2JS\mscorlib\Microsoft\LiveLabs\JavaScript\JSDate.cs,UTC,The method has 7 parameters. Parameters: year' month' day' hours' minutes' seconds' milliseconds
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,Copy,The method has 5 parameters. Parameters: sourceArray' sourceIndex' destinationArray' destinationIndex' length
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,Sort,The method has 5 parameters. Parameters: keys' items' index' length' comparer
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,Sort,The method has 5 parameters. Parameters: keys' items' index' length' comparer
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,SwapIfGreaterWithItems,The method has 5 parameters. Parameters: keys' values' comparer' a' b
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,QuickSort,The method has 5 parameters. Parameters: keys' values' left' right' comparer
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,SwapIfGreaterWithItems,The method has 5 parameters. Parameters: keys' values' comparer' a' b
Long Parameter List,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,QuickSort,The method has 5 parameters. Parameters: keys' values' left' right' comparer
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,LocalYMDHMSToJSTicks,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,UTCYMDHMSToJSTicks,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,LocalYMDHMSMToJSTicks,The method has 7 parameters. Parameters: year' month' day' hour' minute' second' ms
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,UTCYMDHMSMToJSTicks,The method has 7 parameters. Parameters: year' month' day' hour' minute' second' ms
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The method has 7 parameters. Parameters: year' month' day' hour' minute' second' kind
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The method has 7 parameters. Parameters: year' month' day' hour' minute' second' millisecond
Long Parameter List,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The method has 8 parameters. Parameters: year' month' day' hour' minute' second' millisecond' kind
Long Parameter List,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,Compare,The method has 5 parameters. Parameters: strA' indexA' strB' indexB' length
Long Parameter List,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,Compare,The method has 6 parameters. Parameters: strA' indexA' strB' indexB' length' ignoreCase
Long Parameter List,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,Compare,The method has 6 parameters. Parameters: strA' indexA' strB' indexB' length' comparisonType
Long Parameter List,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,CompareOrdinal,The method has 5 parameters. Parameters: strA' indexA' strB' indexB' length
Long Parameter List,System,TimeSpan,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\TimeSpan.cs,TimeSpan,The method has 5 parameters. Parameters: days' hours' minutes' seconds' milliseconds
Long Parameter List,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,InvokeMember,The method has 5 parameters. Parameters: name' invokeAttr' target' args' namedParameters
Long Parameter List,System.IO,MemoryStream,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\IO\MemoryStream.cs,MemoryStream,The method has 5 parameters. Parameters: buffer' index' count' writeable' publiclyVisible
Long Parameter List,System.IO,Stream,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\IO\Stream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.IO,Stream,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\IO\Stream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Reflection,NonTypeMemberBase,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\NonTypeMemberBase.cs,NonTypeMemberBase,The method has 6 parameters. Parameters: slot' declType' includeStatic' includeInstance' simpleName' customAttributes
Long Parameter List,System.Reflection,ConstructorInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\ConstructorInfo.cs,ConstructorInfo,The method has 5 parameters. Parameters: slot' declType' isInstance' customAttributes' paramTypes
Long Parameter List,System.Reflection,EventInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\EventInfo.cs,EventInfo,The method has 9 parameters. Parameters: slot' declType' includeStatic' includeInstance' simpleName' customAttributes' handlerType' adder' remover
Long Parameter List,System.Reflection,FieldInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\FieldInfo.cs,FieldInfo,The method has 8 parameters. Parameters: slot' declType' includeStatic' includeInstance' simpleName' customAttributes' fieldType' initialization
Long Parameter List,System.Reflection,FieldInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\FieldInfo.cs,PrimGetValue,The method has 5 parameters. Parameters: declType' isStatic' slot' fieldType' obj
Long Parameter List,System.Reflection,FieldInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\FieldInfo.cs,PrimSetValue,The method has 6 parameters. Parameters: declType' isStatic' slot' fieldType' obj' value
Long Parameter List,System.Reflection,MethodBase,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\MethodBase.cs,MethodBase,The method has 6 parameters. Parameters: slot' declType' includeStatic' includeInstance' simpleName' customAttributes
Long Parameter List,System.Reflection,MethodInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\MethodInfo.cs,MethodInfo,The method has 10 parameters. Parameters: slot' declType' includeStatic' includeInstance' simpleName' customAttributes' isVirtual' paramTypes' returnTypeIsKnown' returnTypeOrNull
Long Parameter List,System.Reflection,MethodInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\MethodInfo.cs,PrimInvoke,The method has 8 parameters. Parameters: declType' isStatic' isVirtual' slot' paramTypes' returnTypeOrNull' obj' paramValues
Long Parameter List,System.Reflection,PropertyInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\PropertyInfo.cs,PropertyInfo,The method has 9 parameters. Parameters: slot' declType' includeStatic' includeInstance' simpleName' customAttributes' propertyType' getter' setter
Long Parameter List,System.Threading,ThreadPool,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Threading\ThreadPool.cs,RegisterWaitForSingleObject,The method has 5 parameters. Parameters: waitObject' callBack' state' millisecondsTimeOutInterval' executeOnlyOnce
Long Parameter List,System.Threading,ThreadPool,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Threading\ThreadPool.cs,RegisterWaitForSingleObject,The method has 5 parameters. Parameters: waitObject' callBack' state' millisecondsTimeOutInterval' executeOnlyOnce
Long Parameter List,System.Threading,ThreadPool,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Threading\ThreadPool.cs,RegisterWaitForSingleObject,The method has 5 parameters. Parameters: waitObject' callBack' state' timeout' executeOnlyOnce
Long Parameter List,System.Threading,ThreadPool,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Threading\ThreadPool.cs,RegisterWaitForSingleObject,The method has 5 parameters. Parameters: waitObject' callBack' state' millisecondsTimeOutInterval' executeOnlyOnce
Long Parameter List,System.Collections.Generic,Dictionary<K;V>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\Dictionary`2.cs,InsertHash,The method has 5 parameters. Parameters: entries' key' value' insertOnly' comparer
Long Statement,System,DateTimeOffset,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTimeOffset.cs,EqualsExact,The length of the statement  "            return (((ClockDateTime == other.ClockDateTime) && (Offset == other.Offset)) && (ClockDateTime.Kind == other.ClockDateTime.Kind)); " is 130.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetEvent,The length of the statement  "            return Find(new EventInfo(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' name' null' null' null' null)); " is 155.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetEvents,The length of the statement  "            return FindAll(new EventInfo(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' null' null' null' null' null)); " is 158.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetField,The length of the statement  "            return Find(new FieldInfo(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' name' null' null' null)); " is 149.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetFields,The length of the statement  "            return FindAll(new FieldInfo(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' null' null' null' null)); " is 152.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetMember,The length of the statement  "            return FindAll(new NonTypeMemberBase(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' name' null)); " is 148.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetMembers,The length of the statement  "            return FindAll(new NonTypeMemberBase(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' null' null)); " is 148.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetMethodImpl,The length of the statement  "            return Find(new MethodInfo(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' name' null' default(bool)' paramTypes' false' null)); " is 178.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetMethods,The length of the statement  "            return FindAll(new MethodInfo(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' null' null' default(bool)' null' false' null)); " is 175.
Long Statement,System,Type,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Type.cs,GetProperties,The length of the statement  "            return FindAll(new PropertyInfo(null' this' (bindingAttr & BindingFlags.Static) != 0' (bindingAttr & BindingFlags.Instance) != 0' null' null' null' null' null)); " is 161.
Long Statement,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Equals,The length of the statement  "            return (((this._Major == version._Major) && (this._Minor == version._Minor)) && ((this._Build == version._Build) && (this._Revision == version._Revision))); " is 156.
Long Statement,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Equals,The length of the statement  "            return (((this._Major == obj._Major) && (this._Minor == obj._Minor)) && ((this._Build == obj._Build) && (this._Revision == obj._Revision))); " is 140.
Long Statement,System.Reflection,EventInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\EventInfo.cs,Rehost,The length of the statement  "            return new EventInfo(slot' type' includeStatic' includeInstance' simpleName' customAttributes' handlerType' adder' remover); " is 124.
Long Statement,System.Reflection,FieldInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\FieldInfo.cs,Rehost,The length of the statement  "            return new FieldInfo(slot' type' includeStatic' includeInstance' simpleName' customAttributes' fieldType' initialization); " is 122.
Long Statement,System.Reflection,MethodInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\MethodInfo.cs,Rehost,The length of the statement  "            return new MethodInfo(slot' type' includeStatic' includeInstance' simpleName' customAttributes' isVirtual' paramTypes' returnTypeIsKnown' returnTypeOrNull); " is 156.
Long Statement,System.Reflection,PropertyInfo,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\PropertyInfo.cs,Rehost,The length of the statement  "            return new PropertyInfo(slot' type' includeStatic' includeInstance' simpleName' customAttributes' propertyType' getter' setter); " is 128.
Long Statement,System.Threading,ThreadPool,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Threading\ThreadPool.cs,RegisterWaitForSingleObject,The length of the statement  "                // Timer will fire every due period...if total time exceeds millisecondsTimeoutInterval then we call the timeoutcallback " is 120.
Complex Conditional,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,Concat,The conditional expression  "((str0 == null) && (str1 == null)) && ((str2 == null) && (str3 == null))"  is complex.
Complex Conditional,System.Reflection,NonTypeMemberBase,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Reflection\NonTypeMemberBase.cs,MatchedBy,The conditional expression  "!((includeStatic && ntmb.includeStatic) || (includeInstance && ntmb.includeInstance))"  is complex.
Magic Number,System,Convert,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Convert.cs,ToInt32,The following statement contains a magic number: if (value >= 0.0)              {                  if (value < 2147483647.5)                  {                      int num = (int)value;                      double num2 = value - num;                      if ((num2 > 0.5) || ((num2 == 0.5) && ((num & 1) != 0)))                      {                          num++;                      }                      return num;                  }              }              else if (value >= -2147483648.5)              {                  int num3 = (int)value;                  double num4 = value - num3;                  if ((num4 < -0.5) || ((num4 == -0.5) && ((num3 & 1) != 0)))                  {                      num3--;                  }                  return num3;              }
Magic Number,System,Convert,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Convert.cs,ToInt32,The following statement contains a magic number: if (value >= 0.0)              {                  if (value < 2147483647.5)                  {                      int num = (int)value;                      double num2 = value - num;                      if ((num2 > 0.5) || ((num2 == 0.5) && ((num & 1) != 0)))                      {                          num++;                      }                      return num;                  }              }              else if (value >= -2147483648.5)              {                  int num3 = (int)value;                  double num4 = value - num3;                  if ((num4 < -0.5) || ((num4 == -0.5) && ((num3 & 1) != 0)))                  {                      num3--;                  }                  return num3;              }
Magic Number,System,Convert,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Convert.cs,ToInt32,The following statement contains a magic number: if (value >= 0.0)              {                  if (value < 2147483647.5)                  {                      int num = (int)value;                      double num2 = value - num;                      if ((num2 > 0.5) || ((num2 == 0.5) && ((num & 1) != 0)))                      {                          num++;                      }                      return num;                  }              }              else if (value >= -2147483648.5)              {                  int num3 = (int)value;                  double num4 = value - num3;                  if ((num4 < -0.5) || ((num4 == -0.5) && ((num3 & 1) != 0)))                  {                      num3--;                  }                  return num3;              }
Magic Number,System,Convert,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Convert.cs,ToInt32,The following statement contains a magic number: if (value >= 0.0)              {                  if (value < 2147483647.5)                  {                      int num = (int)value;                      double num2 = value - num;                      if ((num2 > 0.5) || ((num2 == 0.5) && ((num & 1) != 0)))                      {                          num++;                      }                      return num;                  }              }              else if (value >= -2147483648.5)              {                  int num3 = (int)value;                  double num4 = value - num3;                  if ((num4 < -0.5) || ((num4 == -0.5) && ((num3 & 1) != 0)))                  {                      num3--;                  }                  return num3;              }
Magic Number,System,Convert,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Convert.cs,ToInt32,The following statement contains a magic number: if (value >= 0.0)              {                  if (value < 2147483647.5)                  {                      int num = (int)value;                      double num2 = value - num;                      if ((num2 > 0.5) || ((num2 == 0.5) && ((num & 1) != 0)))                      {                          num++;                      }                      return num;                  }              }              else if (value >= -2147483648.5)              {                  int num3 = (int)value;                  double num4 = value - num3;                  if ((num4 < -0.5) || ((num4 == -0.5) && ((num3 & 1) != 0)))                  {                      num3--;                  }                  return num3;              }
Magic Number,System,Convert,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Convert.cs,ToInt32,The following statement contains a magic number: if (value >= 0.0)              {                  if (value < 2147483647.5)                  {                      int num = (int)value;                      double num2 = value - num;                      if ((num2 > 0.5) || ((num2 == 0.5) && ((num & 1) != 0)))                      {                          num++;                      }                      return num;                  }              }              else if (value >= -2147483648.5)              {                  int num3 = (int)value;                  double num4 = value - num3;                  if ((num4 < -0.5) || ((num4 == -0.5) && ((num3 & 1) != 0)))                  {                      num3--;                  }                  return num3;              }
Magic Number,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,BinarySearch,The following statement contains a magic number: while (low <= hi)              {                  int k;                  int i = low + (hi - low) / 2;                  try                  {                      k = comparer.Compare(array.GetValue(i)' value);                  }                  catch (Exception exception)                  {                      throw new InvalidOperationException("comparison failed"' exception);                  }                  if (k == 0)                      return i;                  if (k < 0)                      low = i + 1;                  else                      hi = i - 1;              }
Magic Number,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,BinarySearch,The following statement contains a magic number: while (low <= hi)              {                  int k;                  int i = low + (hi - low) / 2;                  try                  {                      k = comparer.Compare(array[i]' value);                  }                  catch (Exception exception)                  {                      throw new InvalidOperationException("comparison failed"' exception);                  }                  if (k == 0)                      return i;                  if (k < 0)                      low = i + 1;                  else                      hi = i - 1;              }
Magic Number,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,QuickSort,The following statement contains a magic number: do              {                  int a = left;                  int b = right;                  int m = a + (b - a) / 2;                  SwapIfGreaterWithItems<TKey' TValue>(keys' values' comparer' a' m);                  SwapIfGreaterWithItems<TKey' TValue>(keys' values' comparer' a' b);                  SwapIfGreaterWithItems<TKey' TValue>(keys' values' comparer' m' b);                  var y = keys[m];                  do                  {                      while (comparer.Compare(keys[a]' y) < 0)                          a++;                      while (comparer.Compare(y' keys[b]) < 0)                          b--;                      if (a > b)                          break;                      if (a < b)                      {                          var tmp = keys[a];                          keys[a] = keys[b];                          keys[b] = tmp;                          if (values != null)                          {                              var tmp2 = values[a];                              values[a] = values[b];                              values[b] = tmp2;                          }                      }                      a++;                      b--;                  }                  while (a <= b);                  if (b - left <= right - a)                  {                      if (left < b)                          QuickSort<TKey' TValue>(keys' values' left' b' comparer);                      left = a;                  }                  else                  {                      if (a < right)                          QuickSort<TKey' TValue>(keys' values' a' right' comparer);                      right = b;                  }              }              while (left < right);
Magic Number,System,Array,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Array.cs,QuickSort,The following statement contains a magic number: do              {                  int a = left;                  int b = right;                  int m = a + (b - a) / 2;                  SwapIfGreaterWithItems(keys' values' comparer' a' m);                  SwapIfGreaterWithItems(keys' values' comparer' a' b);                  SwapIfGreaterWithItems(keys' values' comparer' m' b);                  var y = keys.GetValue(m);                  do                  {                      try                      {                          while (comparer.Compare(keys.GetValue(a)' y) < 0)                              a++;                          while (comparer.Compare(y' keys.GetValue(b)) < 0)                              b--;                      }                      catch (IndexOutOfRangeException)                      {                          throw new ArgumentException();                      }                      catch                      {                          throw new InvalidOperationException();                      }                      if (a > b)                          break;                      if (a < b)                      {                          var tmp = keys.GetValue(a);                          keys.SetValue(keys.GetValue(b)' a);                          keys.SetValue(tmp' b);                          if (values != null)                          {                              var tmp2 = values.GetValue(a);                              values.SetValue(values.GetValue(b)' a);                              values.SetValue(tmp2' b);                          }                      }                      a++;                      b--;                  }                  while (a <= b);                  if (b - left <= right - a)                  {                      if (left < b)                          QuickSort(keys' values' left' b' comparer);                      left = a;                  }                  else                  {                      if (a < right)                          QuickSort(keys' values' a' right' comparer);                      right = b;                  }              }              while (left < right);
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365 = new int[13];
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[1] = 31;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[2] = 59;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[2] = 59;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[3] = 90;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[3] = 90;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[4] = 120;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[4] = 120;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[5] = 151;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[5] = 151;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[6] = 181;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[6] = 181;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[7] = 212;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[7] = 212;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[8] = 243;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[8] = 243;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[9] = 273;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[9] = 273;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[10] = 304;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[10] = 304;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[11] = 334;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[11] = 334;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[12] = 365;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth365[12] = 365;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366 = new int[13];
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[1] = 31;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[2] = 60;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[2] = 60;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[3] = 91;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[3] = 91;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[4] = 121;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[4] = 121;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[5] = 152;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[5] = 152;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[6] = 182;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[6] = 182;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[7] = 213;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[7] = 213;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[8] = 244;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[8] = 244;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[9] = 274;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[9] = 274;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[10] = 305;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[10] = 305;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[11] = 335;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[11] = 335;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[12] = 366;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: DaysToMonth366[12] = 366;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (month < 1 || month > 12)                  throw new ArgumentOutOfRangeException("month");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (month < 1 || month > 12)                  throw new ArgumentOutOfRangeException("month");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (hour < 0 || hour >= 24)                  throw new ArgumentOutOfRangeException("hour");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (minute < 0 || minute >= 60)                  throw new ArgumentOutOfRangeException("minute");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (month < 1 || month > 12)                  throw new ArgumentOutOfRangeException("month");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (hour < 0 || hour >= 24)                  throw new ArgumentOutOfRangeException("hour");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (minute < 0 || minute >= 60)                  throw new ArgumentOutOfRangeException("minute");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DateTime,The following statement contains a magic number: if (millisecond < 0 || millisecond >= 1000)                  throw new ArgumentOutOfRangeException("millisecond");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,AddYears,The following statement contains a magic number: return AddMonths(value * 12);
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,AddMonths,The following statement contains a magic number: if (month >= 0)              {                  year += month / 12;                  month = (month % 12) + 1;              }              else              {                  year += (month - 11) / 12;                  month = 12 + (month + 1) % 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,AddMonths,The following statement contains a magic number: if (month >= 0)              {                  year += month / 12;                  month = (month % 12) + 1;              }              else              {                  year += (month - 11) / 12;                  month = 12 + (month + 1) % 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,AddMonths,The following statement contains a magic number: if (month >= 0)              {                  year += month / 12;                  month = (month % 12) + 1;              }              else              {                  year += (month - 11) / 12;                  month = 12 + (month + 1) % 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,AddMonths,The following statement contains a magic number: if (month >= 0)              {                  year += month / 12;                  month = (month % 12) + 1;              }              else              {                  year += (month - 11) / 12;                  month = 12 + (month + 1) % 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,AddMonths,The following statement contains a magic number: if (month >= 0)              {                  year += month / 12;                  month = (month % 12) + 1;              }              else              {                  year += (month - 11) / 12;                  month = 12 + (month + 1) % 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,AddMonths,The following statement contains a magic number: if (month >= 0)              {                  year += month / 12;                  month = (month % 12) + 1;              }              else              {                  year += (month - 11) / 12;                  month = 12 + (month + 1) % 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,DaysInMonth,The following statement contains a magic number: if (month < 1 || month > 12)                  throw new ArgumentOutOfRangeException("month");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,GetHashCode,The following statement contains a magic number: var i = (int)((v >> 32) ^ (v & ((1ul << 32) - 1)));
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,GetHashCode,The following statement contains a magic number: var i = (int)((v >> 32) ^ (v & ((1ul << 32) - 1)));
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,IsLeapYear,The following statement contains a magic number: if (year % 4 != 0)                  return false;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,IsLeapYear,The following statement contains a magic number: if (year % 100 == 0)                  return year % 400 == 0;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,IsLeapYear,The following statement contains a magic number: if (year % 100 == 0)                  return year % 400 == 0;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,ToString,The following statement contains a magic number: if (hour >= 12)              {                  afternoon = true;                  if (hour > 12)                      hour -= 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,ToString,The following statement contains a magic number: if (hour >= 12)              {                  afternoon = true;                  if (hour > 12)                      hour -= 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,ToString,The following statement contains a magic number: if (hour >= 12)              {                  afternoon = true;                  if (hour > 12)                      hour -= 12;              }
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,ToString,The following statement contains a magic number: if (hour == 0)                  hour = 12;
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,ToString,The following statement contains a magic number: if (minute < 10)                  sb.Append("0");
Magic Number,System,DateTime,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\DateTime.cs,ToString,The following statement contains a magic number: if (second < 10)                  sb.Append("0");
Magic Number,System,Enum,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Enum.cs,PrimEnumFields,The following statement contains a magic number: var res = new string[infos.Length*2];
Magic Number,System,Enum,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Enum.cs,PrimEnumFields,The following statement contains a magic number: for (var i = 0; i < infos.Length; i++)              {                  res[i*2] = infos[i].Name;                  res[i * 2 + 1] = ((Enum)infos[i].GetValue(null)).PrimValue();              }
Magic Number,System,Enum,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Enum.cs,PrimEnumFields,The following statement contains a magic number: for (var i = 0; i < infos.Length; i++)              {                  res[i*2] = infos[i].Name;                  res[i * 2 + 1] = ((Enum)infos[i].GetValue(null)).PrimValue();              }
Magic Number,System,Enum,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Enum.cs,Parse,The following statement contains a magic number: for (var i = 0; i < arr.Length; i += 2)              {                  var nm = arr[i];                  if (value.Equals(nm' ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal))                      return PrimNewEnum(enumType' arr[i + 1]);              }
Magic Number,System,Enum,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Enum.cs,ToString,The following statement contains a magic number: for (var i = 0; i < arr.Length; i += 2)              {                  if (arr[i + 1].Equals(val' StringComparison.Ordinal))                      return arr[i];              }
Magic Number,System,Math,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Math.cs,Cosh,The following statement contains a magic number: return 0.5 * (Exp(value) + Exp(-value));
Magic Number,System,Math,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Math.cs,Log10,The following statement contains a magic number: return Log(d' 10.0);
Magic Number,System,Math,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Math.cs,Sinh,The following statement contains a magic number: return 0.5 * (Exp(value) - Exp(-value));
Magic Number,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,String,The following statement contains a magic number: WhitespaceChars = new char[6];
Magic Number,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,String,The following statement contains a magic number: WhitespaceChars[2] = '\v';
Magic Number,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,String,The following statement contains a magic number: WhitespaceChars[3] = '\f';
Magic Number,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,String,The following statement contains a magic number: WhitespaceChars[4] = '\r';
Magic Number,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,String,The following statement contains a magic number: WhitespaceChars[5] = ' ';
Magic Number,System,String,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\String.cs,Format,The following statement contains a magic number: while (i < format.Length)              {                  if (format[i] == '{')                  {                      i++;                      if (i < format.Length)                      {                          if (format[i] == '{')                              sb.Append(format[i++]);                          else if (format[i] >= '0' && format[i] <= '9')                          {                              var n = 0;                              do                              {                                  n = n * 10 + (format[i++] - '0');                                  if (i >= format.Length)                                      throw new FormatException();                              }                              while (format[i] >= '0' && format[i] <= '9');                              if (format[i] == '}')                              {                                  i++;                                  if (n >= args.Length)                                  {                                      throw new FormatException();                                  }                                  if (args[n] != null)                                  {                                      sb.Append(args[n].ToString());                                  }                                  else                                  {                                      sb.Append("NULL");                                  }                              }                              else                                  throw new FormatException();                          }                          else                              throw new FormatException();                      }                      else                          throw new FormatException();                  }                  else                      sb.Append(format[i++]);              }
Magic Number,System,TimeSpan,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\TimeSpan.cs,GetHashCode,The following statement contains a magic number: return (int)((v >> 32) & (v & (1ul << 32) - 1));
Magic Number,System,TimeSpan,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\TimeSpan.cs,GetHashCode,The following statement contains a magic number: return (int)((v >> 32) & (v & (1ul << 32) - 1));
Magic Number,System,TimeSpan,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\TimeSpan.cs,ToString,The following statement contains a magic number: sb.Append(IntToString(hours' 2));
Magic Number,System,TimeSpan,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\TimeSpan.cs,ToString,The following statement contains a magic number: sb.Append(IntToString(mins' 2));
Magic Number,System,TimeSpan,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\TimeSpan.cs,ToString,The following statement contains a magic number: sb.Append(IntToString(secs' 2));
Magic Number,System,TimeSpan,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\TimeSpan.cs,ToString,The following statement contains a magic number: if (total > 0.0)              {                  sb.Append(".");                  sb.Append(IntToString((int)total' 7));              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Version,The following statement contains a magic number: if ((length < 2) || (length > 4))              {                  throw new ArgumentException("version");              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Version,The following statement contains a magic number: if ((length < 2) || (length > 4))              {                  throw new ArgumentException("version");              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Version,The following statement contains a magic number: length -= 2;
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Version,The following statement contains a magic number: if (length > 0)              {                  this._Build = int.Parse(strArray[2]);                  if (this._Build < 0)                  {                      throw new ArgumentOutOfRangeException("build");                  }                  length--;                  if (length > 0)                  {                      this._Revision = int.Parse(strArray[3]);                      if (this._Revision < 0)                      {                          throw new ArgumentOutOfRangeException("revision");                      }                  }              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,Version,The following statement contains a magic number: if (length > 0)              {                  this._Build = int.Parse(strArray[2]);                  if (this._Build < 0)                  {                      throw new ArgumentOutOfRangeException("build");                  }                  length--;                  if (length > 0)                  {                      this._Revision = int.Parse(strArray[3]);                      if (this._Revision < 0)                      {                          throw new ArgumentOutOfRangeException("revision");                      }                  }              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,GetHashCode,The following statement contains a magic number: num |= (this._Major & 15) << 28;
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,GetHashCode,The following statement contains a magic number: num |= (this._Major & 15) << 28;
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,GetHashCode,The following statement contains a magic number: num |= (this._Minor & 255) << 20;
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,GetHashCode,The following statement contains a magic number: num |= (this._Minor & 255) << 20;
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,GetHashCode,The following statement contains a magic number: num |= (this._Build & 255) << 12;
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,GetHashCode,The following statement contains a magic number: num |= (this._Build & 255) << 12;
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,GetHashCode,The following statement contains a magic number: return (num | (this._Revision & 4095));
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,ToString,The following statement contains a magic number: if (this._Build == -1)              {                  return this.ToString(2);              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,ToString,The following statement contains a magic number: if (this._Revision == -1)              {                  return this.ToString(3);              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,ToString,The following statement contains a magic number: return this.ToString(4);
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,ToString,The following statement contains a magic number: switch (fieldCount)              {                  case 0:                      return string.Empty;                    case 1:                      return this._Major.ToString();                    case 2:                      return (this._Major + "." + this._Minor);              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,ToString,The following statement contains a magic number: if (fieldCount == 3)              {                  return string.Concat(new object[] { this._Major' "."' this._Minor' "."' this._Build });              }
Magic Number,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,ToString,The following statement contains a magic number: if (fieldCount != 4)              {                  throw new ArgumentException();              }
Magic Number,System.Threading,ThreadPool,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Threading\ThreadPool.cs,RegisterWaitForSingleObject,The following statement contains a magic number: int tickTime = (int)Math.Min(100' millisecondsTimeOutInterval);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: this.m_array = new int[GetArrayLength(values.Length' 32)];
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: for (int i = 0; i < values.Length; i++)              {                  if (values[i])                  {                      this.m_array[i / 32] |= ((int)1) << (i % 32);                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: for (int i = 0; i < values.Length; i++)              {                  if (values[i])                  {                      this.m_array[i / 32] |= ((int)1) << (i % 32);                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: if (bytes.Length > 268435455)              {                  throw new ArgumentException("bytes");              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: this.m_array = new int[GetArrayLength(bytes.Length' 4)];
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: this.m_length = bytes.Length*8;
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: while ((bytes.Length - num2) >= 4)              {                  m_array[index++] = (((bytes[num2] & 255) | ((bytes[num2 + 1] & 255) << 8)) |                                      ((bytes[num2 + 2] & 255) << 16)) | ((bytes[num2 + 3] & 255) << 24);                  num2 += 4;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: switch ((bytes.Length - num2))              {              case 1:                  m_array[index] |= bytes[num2] & 255;                  break;              case 2:                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;              case 3:                  m_array[index] = (bytes[num2 + 2] & 255) << 16;                  m_array[index] |= (bytes[num2 + 1] & 255) << 8;                  m_array[index] |= bytes[num2] & 255;                  break;                default:                  break;              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: if (values.Length > 67108863)              {                  throw new ArgumentException("values");              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: this.m_length = values.Length * 32;
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: int arrayLength = GetArrayLength(bits.m_length' 32);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,BitArray,The following statement contains a magic number: this.m_array = new int[GetArrayLength(length' 32)];
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,And,The following statement contains a magic number: int arrayLength = GetArrayLength(this.m_length' 32);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,CopyTo,The following statement contains a magic number: if (array is int[])              {                  Array.Copy(this.m_array' 0' array' index' GetArrayLength(this.m_length' 32));              }              else if (array is byte[])              {                  int arrayLength = GetArrayLength(this.m_length' 8);                  if ((array.Length - index) < arrayLength)                  {                      throw new ArgumentException();                  }                  byte[] buffer = (byte[])array;                  for (int i = 0; i < arrayLength; i++)                  {                      buffer[index + i] = (byte)((this.m_array[i / 4] >> ((i % 4) * 8)) & 255);                  }              }              else              {                  if (!(array is bool[]))                  {                      throw new ArgumentException("array");                  }                  if ((array.Length - index) < this.m_length)                  {                      throw new ArgumentException();                  }                  bool[] flagArray = (bool[])array;                  for (int j = 0; j < this.m_length; j++)                  {                      flagArray[index + j] = ((this.m_array[j / 32] >> (j % 32)) & 1) != 0;                  }              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Get,The following statement contains a magic number: return ((this.m_array[index / 32] & (((int)1) << (index % 32))) != 0);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Get,The following statement contains a magic number: return ((this.m_array[index / 32] & (((int)1) << (index % 32))) != 0);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Not,The following statement contains a magic number: int arrayLength = GetArrayLength(this.m_length' 32);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Or,The following statement contains a magic number: int arrayLength = GetArrayLength(this.m_length' 32);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Set,The following statement contains a magic number: if (value)              {                  this.m_array[index / 32] |= ((int)1) << (index % 32);              }              else              {                  this.m_array[index / 32] &= ~(((int)1) << (index % 32));              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Set,The following statement contains a magic number: if (value)              {                  this.m_array[index / 32] |= ((int)1) << (index % 32);              }              else              {                  this.m_array[index / 32] &= ~(((int)1) << (index % 32));              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Set,The following statement contains a magic number: if (value)              {                  this.m_array[index / 32] |= ((int)1) << (index % 32);              }              else              {                  this.m_array[index / 32] &= ~(((int)1) << (index % 32));              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Set,The following statement contains a magic number: if (value)              {                  this.m_array[index / 32] |= ((int)1) << (index % 32);              }              else              {                  this.m_array[index / 32] &= ~(((int)1) << (index % 32));              }
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,SetAll,The following statement contains a magic number: int arrayLength = GetArrayLength(this.m_length' 32);
Magic Number,System.Collections,BitArray,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\BitArray.cs,Xor,The following statement contains a magic number: int arrayLength = GetArrayLength(this.m_length' 32);
Magic Number,System.Collections,HashHelpers,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\HashHelpers.cs,GetPrime,The following statement contains a magic number: for (int j = min | 1; j < 2147483647; j += 2)              {                  if (IsPrime(j))                  {                      return j;                  }              }
Magic Number,System.Collections,HashHelpers,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\HashHelpers.cs,GetPrime,The following statement contains a magic number: for (int j = min | 1; j < 2147483647; j += 2)              {                  if (IsPrime(j))                  {                      return j;                  }              }
Magic Number,System.Collections,HashHelpers,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\HashHelpers.cs,IsPrime,The following statement contains a magic number: if ((candidate & 1) == 0)              {                  return (candidate == 2);              }
Magic Number,System.Collections,HashHelpers,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\HashHelpers.cs,IsPrime,The following statement contains a magic number: for (int i = 3; i <= num; i += 2)              {                  if ((candidate % i) == 0)                  {                      return false;                  }              }
Magic Number,System.Collections,HashHelpers,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\HashHelpers.cs,IsPrime,The following statement contains a magic number: for (int i = 3; i <= num; i += 2)              {                  if ((candidate % i) == 0)                  {                      return false;                  }              }
Magic Number,System.Collections,Stack,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Stack.cs,Stack,The following statement contains a magic number: this._array = new object[10];
Magic Number,System.Collections,Stack,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Stack.cs,Stack,The following statement contains a magic number: if (initialCapacity < 10)              {                  initialCapacity = 10;              }
Magic Number,System.Collections,Stack,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Stack.cs,Stack,The following statement contains a magic number: if (initialCapacity < 10)              {                  initialCapacity = 10;              }
Magic Number,System.Collections,Stack,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Stack.cs,Push,The following statement contains a magic number: if (this._size == this._array.Length)              {                  object[] destinationArray = new object[2 * this._array.Length];                  Array.Copy(this._array' 0' destinationArray' 0' this._size);                  this._array = destinationArray;              }
Magic Number,System.Collections,StackEnumerator,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Stack.cs,StackEnumerator,The following statement contains a magic number: this._index = -2;
Magic Number,System.Collections,StackEnumerator,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Stack.cs,MoveNext,The following statement contains a magic number: if (this._index == -2)                  {                      this._index = this._stack._size - 1;                      flag = this._index >= 0;                      if (flag)                      {                          this.currentElement = this._stack._array[this._index];                      }                      return flag;                  }
Magic Number,System.Collections,StackEnumerator,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Stack.cs,Reset,The following statement contains a magic number: this._index = -2;
Magic Number,System.Collections.Generic,Dictionary<K;V>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\Dictionary`2.cs,Full,The following statement contains a magic number: return c > 0 && n / c < 2;
Magic Number,System.Collections.Generic,Dictionary<K;V>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\Dictionary`2.cs,AddOrSetHash,The following statement contains a magic number: if (entries == null)              {                  entries = new Entry[1];                  entries[0] = new Entry(key' value);                  return true;              }              else if (c + 1 < threshold)              {                  for (var i = 0; i < c; i++)                  {                      if (comparer == null ? entries[i].Key.Equals(key) : comparer.Equals(entries[i].Key' key))                      {                          if (addOnly)                              throw new InvalidOperationException("duplicate key");                          else                          {                              entries[i].Value = value;                              return false;                          }                      }                  }                  if (c < entries.Length)                      entries[c] = new Entry(key' value);                  else                  {                      var newEntries = new Entry[entries.Length * 2];                      for (var i = 0; i < c; i++)                          newEntries[i] = entries[i];                      newEntries[c] = new Entry(key' value);                      entries = newEntries;                  }                  return true;              }              else if (c < threshold)              {                  var newEntries = new Entry[NextNonFull(c + 1)];                  for (var i = 0; i < c; i++)                  {                      if (comparer == null ? entries[i].Key.Equals(key) : comparer.Equals(entries[i].Key' key))                      {                          if (addOnly)                              throw new InvalidOperationException("duplicate key");                          entries[i].Value = value;                          return false;                      }                      InsertHash(newEntries' entries[i].Key' entries[i].Value' true' comparer);                  }                  InsertHash(newEntries' key' value' true' comparer);                  entries = newEntries;                  return true;              }              else if (Full(entries.Length' c + 1))              {                  var newEntries = new Entry[NextNonFull(c + 1)];                  foreach (var e in entries)                  {                      if (e != null)                      {                          if (comparer == null ? e.Key.Equals(key) : comparer.Equals(e.Key' key))                          {                              if (addOnly)                                  throw new InvalidOperationException("duplicate key");                              e.Value = value;                              return false;                          }                          InsertHash(newEntries' e.Key' e.Value' true' comparer);                      }                  }                  InsertHash(newEntries' key' value' true' comparer);                  entries = newEntries;                  return true;              }              else                  return InsertHash(entries' key' value' addOnly' comparer);
Magic Number,System.Collections.Generic,List<T>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\List`1.cs,List,The following statement contains a magic number: if (is2 != null)              {                  int count = is2.Count;                  this._items = new T[count];                  is2.CopyTo(this._items' 0);                  this._size = count;              }              else              {                  this._size = 0;                  this._items = new T[4];                  using (IEnumerator<T> enumerator = collection.GetEnumerator())                  {                      while (enumerator.MoveNext())                      {                          this.Add(enumerator.Current);                      }                  }              }
Magic Number,System.Collections.Generic,List<T>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\List`1.cs,EnsureCapacity,The following statement contains a magic number: if (this._items.Length < min)              {                  int num = (this._items.Length == 0) ? 4 : (this._items.Length * 2);                  if (num < min)                  {                      num = min;                  }                  this.Capacity = num;              }
Magic Number,System.Collections.Generic,List<T>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\List`1.cs,EnsureCapacity,The following statement contains a magic number: if (this._items.Length < min)              {                  int num = (this._items.Length == 0) ? 4 : (this._items.Length * 2);                  if (num < min)                  {                      num = min;                  }                  this.Capacity = num;              }
Magic Number,System.Collections.Generic,List<T>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\List`1.cs,InsertRange,The following statement contains a magic number: if (is2 != null)              {                  int count = is2.Count;                  if (count > 0)                  {                      this.EnsureCapacity(this._size + count);                      if (index < this._size)                      {                          Array.Copy(this._items' index' this._items' index + count' this._size - index);                      }                      if (this == is2)                      {                          Array.Copy(this._items' 0' this._items' index' index);                          Array.Copy(this._items' index + count' this._items' index * 2' this._size - index);                      }                      else                      {                          T[] array = new T[count];                          is2.CopyTo(array' 0);                          array.CopyTo(this._items' index);                      }                      this._size += count;                  }              }              else              {                  using (IEnumerator<T> enumerator = collection.GetEnumerator())                  {                      while (enumerator.MoveNext())                      {                          this.Insert(index++' enumerator.Current);                      }                  }              }
Magic Number,System.Collections.Generic,List<T>,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Collections\Generic\List`1.cs,TrimExcess,The following statement contains a magic number: int num = (int)(this._items.Length * 0.9);
Missing Default,System,Version,C:\repos\Reactive-Extensions_IL2JS\mscorlib\System\Version.cs,ToString,The following switch statement is missing a default case: switch (fieldCount)              {                  case 0:                      return string.Empty;                    case 1:                      return this._Major.ToString();                    case 2:                      return (this._Major + "." + this._Minor);              }
