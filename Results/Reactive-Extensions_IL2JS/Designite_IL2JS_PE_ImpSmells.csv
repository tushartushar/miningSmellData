Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Read,The method has 309 lines of code.
Long Method,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Write,The method has 308 lines of code.
Long Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Skip,The method has 257 lines of code.
Long Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,The method has 279 lines of code.
Long Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The method has 267 lines of code.
Long Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,The method has 286 lines of code.
Long Method,Microsoft.LiveLabs.PE,ConstantRef,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Refs.cs,PersistIndexes,The method has 111 lines of code.
Long Method,Microsoft.LiveLabs.PE,TokenRef,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Refs.cs,ResolveIndexes,The method has 128 lines of code.
Complex Method,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Read,Cyclomatic complexity of the method is 84
Complex Method,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Write,Cyclomatic complexity of the method is 84
Complex Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Skip,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.LiveLabs.PE,ReaderContext,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\ReaderContext.cs,GetRVAReader,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.LiveLabs.PE,ConstantRef,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Refs.cs,ResolveIndexes,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.PE,ConstantRef,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Refs.cs,PersistIndexes,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.LiveLabs.PE,HasCustomAttributeRef,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Refs.cs,ResolveIndexes,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.LiveLabs.PE,HasCustomAttributeRef,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Refs.cs,PersistIndexes,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.LiveLabs.PE,TokenRef,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Refs.cs,ResolveIndexes,Cyclomatic complexity of the method is 40
Complex Method,Microsoft.LiveLabs.PE,TypeSig,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.PE,PrimitiveTypeSig,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,FromTag,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.LiveLabs.PE,PrimitiveTypeSig,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,ToTag,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.LiveLabs.PE,CustomAttributePropertyType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,FromRuntimeType,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.PE,PrimitiveCustomAttributePropertyType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,ReadValue,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.PE,PrimitiveCustomAttributePropertyType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,NewArray,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.LiveLabs.PE,PrimitiveCustomAttributePropertyType,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,WriteValue,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.PE,CustomAttributeSignature,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.LiveLabs.PE,PEFileHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.LiveLabs.PE,PEHeaderNTSpecificFields,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.LiveLabs.PE,PEHeaderDataDirectories,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.LiveLabs.PE,SectionHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,Cyclomatic complexity of the method is 9
Long Identifier,Microsoft.LiveLabs.PE,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Constants.cs,,The length of the parameter EmptyCustomAttributeProperties is 30.
Long Identifier,Microsoft.LiveLabs.PE,Constants,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Constants.cs,,The length of the parameter EmptyNamedCustomAttributueProperties is 36.
Complex Conditional,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUTF16SizedStringWithEncodingHint,The conditional expression  "c >= 0x01 && c <= 0x08 || c >= 0x0e && c <= 0x1f || c == 0x27 || c == 0x2d || c == 0x7f || c > 0xff"  is complex.
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt16,The following statement contains a magic number: return (ushort)((uint)data[currOffset++] | ((uint)data[currOffset++] << 8));
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt16,The following statement contains a magic number: currOffset + 2 <= dataLimit
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt24,The following statement contains a magic number: return (uint)data[currOffset++] | ((uint)(data[currOffset++]) << 8) |                         ((uint)(data[currOffset++]) << 16);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt24,The following statement contains a magic number: return (uint)data[currOffset++] | ((uint)(data[currOffset++]) << 8) |                         ((uint)(data[currOffset++]) << 16);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt24,The following statement contains a magic number: currOffset + 3 <= dataLimit
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)data[currOffset++] | ((uint)data[currOffset++] << 8) | ((uint)data[currOffset++] << 16) |                         ((uint)data[currOffset++] << 24);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)data[currOffset++] | ((uint)data[currOffset++] << 8) | ((uint)data[currOffset++] << 16) |                         ((uint)data[currOffset++] << 24);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)data[currOffset++] | ((uint)data[currOffset++] << 8) | ((uint)data[currOffset++] << 16) |                         ((uint)data[currOffset++] << 24);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt32,The following statement contains a magic number: currOffset + 4 <= dataLimit
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[currOffset++] | ((ulong)data[currOffset++] << 8) |                         ((ulong)data[currOffset++] << 16) | ((ulong)data[currOffset++] << 24) |                         ((ulong)data[currOffset++] << 32) | ((ulong)data[currOffset++] << 40) |                         ((ulong)data[currOffset++] << 48) | ((ulong)data[currOffset++] << 56);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[currOffset++] | ((ulong)data[currOffset++] << 8) |                         ((ulong)data[currOffset++] << 16) | ((ulong)data[currOffset++] << 24) |                         ((ulong)data[currOffset++] << 32) | ((ulong)data[currOffset++] << 40) |                         ((ulong)data[currOffset++] << 48) | ((ulong)data[currOffset++] << 56);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[currOffset++] | ((ulong)data[currOffset++] << 8) |                         ((ulong)data[currOffset++] << 16) | ((ulong)data[currOffset++] << 24) |                         ((ulong)data[currOffset++] << 32) | ((ulong)data[currOffset++] << 40) |                         ((ulong)data[currOffset++] << 48) | ((ulong)data[currOffset++] << 56);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[currOffset++] | ((ulong)data[currOffset++] << 8) |                         ((ulong)data[currOffset++] << 16) | ((ulong)data[currOffset++] << 24) |                         ((ulong)data[currOffset++] << 32) | ((ulong)data[currOffset++] << 40) |                         ((ulong)data[currOffset++] << 48) | ((ulong)data[currOffset++] << 56);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[currOffset++] | ((ulong)data[currOffset++] << 8) |                         ((ulong)data[currOffset++] << 16) | ((ulong)data[currOffset++] << 24) |                         ((ulong)data[currOffset++] << 32) | ((ulong)data[currOffset++] << 40) |                         ((ulong)data[currOffset++] << 48) | ((ulong)data[currOffset++] << 56);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[currOffset++] | ((ulong)data[currOffset++] << 8) |                         ((ulong)data[currOffset++] << 16) | ((ulong)data[currOffset++] << 24) |                         ((ulong)data[currOffset++] << 32) | ((ulong)data[currOffset++] << 40) |                         ((ulong)data[currOffset++] << 48) | ((ulong)data[currOffset++] << 56);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[currOffset++] | ((ulong)data[currOffset++] << 8) |                         ((ulong)data[currOffset++] << 16) | ((ulong)data[currOffset++] << 24) |                         ((ulong)data[currOffset++] << 32) | ((ulong)data[currOffset++] << 40) |                         ((ulong)data[currOffset++] << 48) | ((ulong)data[currOffset++] << 56);
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadUInt64,The following statement contains a magic number: currOffset + 8 <= dataLimit
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadSingle,The following statement contains a magic number: currOffset += 4;
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadSingle,The following statement contains a magic number: currOffset + 4 <= dataLimit
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadDouble,The following statement contains a magic number: currOffset += 8;
Magic Number,Microsoft.LiveLabs.PE,BlobReader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobReader.cs,ReadDouble,The following statement contains a magic number: currOffset + 8 <= dataLimit
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,Prepare,The following statement contains a magic number: var newLength = (uint)data.Length * 2;
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt16,The following statement contains a magic number: Prepare(2);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt16,The following statement contains a magic number: data[currOffset++] = (byte)(value >> 8);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt24,The following statement contains a magic number: Prepare(3);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt24,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 8) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt24,The following statement contains a magic number: data[currOffset++] = (byte)(value >> 16);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt32,The following statement contains a magic number: Prepare(4);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt32,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 8) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt32,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 16) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt32,The following statement contains a magic number: data[currOffset++] = (byte)(value >> 24);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: Prepare(8);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 8) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 16) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 24) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 32) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 40) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: data[currOffset++] = (byte)((value >> 48) & 0xff);
Magic Number,Microsoft.LiveLabs.PE,BlobWriter,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\BlobWriter.cs,WriteUInt64,The following statement contains a magic number: data[currOffset++] = (byte)(value >> 56);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Read,The following statement contains a magic number: i < 64
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Read,The following statement contains a magic number: i < 64
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: TypeDefOrRefIsBig = IsBig(2' TypeDefTable' TypeRefTable' TypeSpecTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: HasConstantIsBig = IsBig(2' FieldTable' ParamTable' PropertyTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: HasCustomAttributeIsBig = IsBig                  (5'                   MethodDefTable'                   FieldTable'                   TypeRefTable'                   TypeDefTable'                   ParamTable'                   InterfaceImplTable'                   MemberRefTable'                   ModuleTable'                   DeclSecurityTable'                   PropertyTable'                   EventTable'                   StandAloneSigTable'                   ModuleRefTable'                   TypeSpecTable'                   AssemblyTable'                   AssemblyRefTable'                   FileTable'                   ExportedTypeTable'                   ManifestResourceTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: HasDeclSecurityIsBig = IsBig(2' TypeDefTable' MethodDefTable' AssemblyTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: MemberRefParentIsBig = IsBig(3' TypeDefTable' TypeRefTable' ModuleRefTable' MethodDefTable' TypeSpecTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: ImplementationIsBig = IsBig(2' FileTable' AssemblyRefTable' ExportedTypeTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: CustomAttributeTypeIsBig = IsBig(3' MethodDefTable' MemberRefTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,DetermineIndexCodingSizes,The following statement contains a magic number: ResolutionScopeIsBig = IsBig(2' ModuleTable' ModuleRefTable' AssemblyRefTable' TypeRefTable);
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Write,The following statement contains a magic number: i < 64
Magic Number,Microsoft.LiveLabs.PE,MetadataTables,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MetadataTables.cs,Write,The following statement contains a magic number: i < 64
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Skip,The following statement contains a magic number: opCode = (OpCode)((ushort)opCode << 8 | reader.ReadByte());
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,The following statement contains a magic number: OpCode = (OpCode)((ushort)OpCode << 8 | reader.ReadByte());
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: var highByte = (ushort)OpCode >> 8;
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Size,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  n += 4;                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  n++;                  break;              case OpCode.Ldc_i4_s:                  n++;                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  n++;                  break;              case OpCode.Ldc_i4:                  n += 4;                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  n += 4;                  break;              case OpCode.Ldc_i8:                  n += 8;                  break;              case OpCode.Ldc_r4:                  n += 4;                  break;              case OpCode.Ldc_r8:                  n += 8;                  break;              case OpCode.Ldstr:                  n += 4;                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      n += (1 + targets.Count)*4;                      break;                  }              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  n += 4;                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,The following statement contains a magic number: var highByte = (ushort)OpCode >> 8;
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  {                      var target = (int)Value;                      // NOTE: Delta is relatative to start of next instruction                      var delta = (int)beginOffset + target - ((int)writer.Offset + 4);                      writer.WriteInt32(delta);                  }                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  {                      var target = (int)Value;                      // NOTE: Delta is w.r.t. begining of next instruction                      var delta = (int)beginOffset + target - ((int)writer.Offset + 1);                      if (delta > 0xff)                          throw new PEException("cannot use small form for this instruction");                      writer.WriteSByte((sbyte)delta);                  }                  break;              case OpCode.Ldc_i4_s:                  writer.WriteSByte((sbyte)(int)Value);                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  writer.WriteByte((byte)(int)Value);                  break;              case OpCode.Ldc_i4:                  writer.WriteInt32((int)Value);                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  writer.WriteUInt32((uint)(int)Value);                  break;              case OpCode.Ldc_i8:                  writer.WriteInt64((long)Value);                  break;              case OpCode.Ldc_r4:                  writer.WriteSingle((float)Value);                  break;              case OpCode.Ldc_r8:                  writer.WriteDouble((double)Value);                  break;              case OpCode.Ldstr:                  WriteUserString(ctxt' writer' (string)Value);                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      writer.WriteUInt32((uint)targets.Count);                      // NOTE: Deltas are w.r.t. start of next instruction                      for (var i = 0; i < targets.Count; i++)                      {                          var delta = (int)beginOffset + targets[i] - ((int)writer.Offset + (targets.Count * 4));                          writer.WriteInt32(delta);                      }                  }                  break;              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  WriteToken(ctxt' writer' findRow(OpCode' Value));                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,Instruction,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,The following statement contains a magic number: switch (OpCode)              {              case OpCode.Nop:              case OpCode.Break:              case OpCode.Ldarg_0:              case OpCode.Ldarg_1:              case OpCode.Ldarg_2:              case OpCode.Ldarg_3:              case OpCode.Ldloc_0:              case OpCode.Ldloc_1:              case OpCode.Ldloc_2:              case OpCode.Ldloc_3:              case OpCode.Stloc_0:              case OpCode.Stloc_1:              case OpCode.Stloc_2:              case OpCode.Stloc_3:              case OpCode.Ldnull:              case OpCode.Ldc_i4_m1:              case OpCode.Ldc_i4_0:              case OpCode.Ldc_i4_1:              case OpCode.Ldc_i4_2:              case OpCode.Ldc_i4_3:              case OpCode.Ldc_i4_4:              case OpCode.Ldc_i4_5:              case OpCode.Ldc_i4_6:              case OpCode.Ldc_i4_7:              case OpCode.Ldc_i4_8:              case OpCode.Dup:              case OpCode.Pop:              case OpCode.Ret:              case OpCode.Ldind_i1:              case OpCode.Ldind_u1:              case OpCode.Ldind_i2:              case OpCode.Ldind_u2:              case OpCode.Ldind_i4:              case OpCode.Ldind_u4:              case OpCode.Ldind_i8:              case OpCode.Ldind_i:              case OpCode.Ldind_r4:              case OpCode.Ldind_r8:              case OpCode.Ldind_ref:              case OpCode.Stind_ref:              case OpCode.Stind_i1:              case OpCode.Stind_i2:              case OpCode.Stind_i4:              case OpCode.Stind_i8:              case OpCode.Stind_r4:              case OpCode.Stind_r8:              case OpCode.Add:              case OpCode.Sub:              case OpCode.Mul:              case OpCode.Div:              case OpCode.Div_un:              case OpCode.Rem:              case OpCode.Rem_un:              case OpCode.And:              case OpCode.Or:              case OpCode.Xor:              case OpCode.Shl:              case OpCode.Shr:              case OpCode.Shr_un:              case OpCode.Neg:              case OpCode.Not:              case OpCode.Conv_i1:              case OpCode.Conv_i2:              case OpCode.Conv_i4:              case OpCode.Conv_i8:              case OpCode.Conv_r4:              case OpCode.Conv_r8:              case OpCode.Conv_u4:              case OpCode.Conv_u8:              case OpCode.Conv_r_un:              case OpCode.Throw:              case OpCode.Conv_ovf_i1_un:              case OpCode.Conv_ovf_i2_un:              case OpCode.Conv_ovf_i4_un:              case OpCode.Conv_ovf_i8_un:              case OpCode.Conv_ovf_u1_un:              case OpCode.Conv_ovf_u2_un:              case OpCode.Conv_ovf_u4_un:              case OpCode.Conv_ovf_u8_un:              case OpCode.Conv_ovf_i_un:              case OpCode.Conv_ovf_u_un:              case OpCode.Ldlen:              case OpCode.Ldelem_i1:              case OpCode.Ldelem_u1:              case OpCode.Ldelem_i2:              case OpCode.Ldelem_u2:              case OpCode.Ldelem_i4:              case OpCode.Ldelem_u4:              case OpCode.Ldelem_i8:              case OpCode.Ldelem_i:              case OpCode.Ldelem_r4:              case OpCode.Ldelem_r8:              case OpCode.Ldelem_ref:              case OpCode.Stelem_i:              case OpCode.Stelem_i1:              case OpCode.Stelem_i2:              case OpCode.Stelem_i4:              case OpCode.Stelem_i8:              case OpCode.Stelem_r4:              case OpCode.Stelem_r8:              case OpCode.Stelem_ref:              case OpCode.Conv_ovf_i1:              case OpCode.Conv_ovf_u1:              case OpCode.Conv_ovf_i2:              case OpCode.Conv_ovf_u2:              case OpCode.Conv_ovf_i4:              case OpCode.Conv_ovf_u4:              case OpCode.Conv_ovf_i8:              case OpCode.Conv_ovf_u8:              case OpCode.Ckfinite:              case OpCode.Conv_u2:              case OpCode.Conv_u1:              case OpCode.Conv_i:              case OpCode.Conv_ovf_i:              case OpCode.Conv_ovf_u:              case OpCode.Add_ovf:              case OpCode.Add_ovf_un:              case OpCode.Mul_ovf:              case OpCode.Mul_ovf_un:              case OpCode.Sub_ovf:              case OpCode.Sub_ovf_un:              case OpCode.Endfinally:              case OpCode.Stind_i:              case OpCode.Conv_u:              case OpCode.Prefix7:              case OpCode.Prefix6:              case OpCode.Prefix5:              case OpCode.Prefix4:              case OpCode.Prefix3:              case OpCode.Prefix2:              case OpCode.Prefix1:              case OpCode.Prefixref:              case OpCode.Arglist:              case OpCode.Ceq:              case OpCode.Cgt:              case OpCode.Cgt_un:              case OpCode.Clt:              case OpCode.Clt_un:              case OpCode.Localloc:              case OpCode.Endfilter:              case OpCode.Volatile:              case OpCode.Tailcall:              case OpCode.Cpblk:              case OpCode.Initblk:              case OpCode.Rethrow:              case OpCode.Refanytype:              case OpCode.Readonly:                  break;              case OpCode.Br:              case OpCode.Brfalse:              case OpCode.Brtrue:              case OpCode.Beq:              case OpCode.Bge:              case OpCode.Bgt:              case OpCode.Ble:              case OpCode.Blt:              case OpCode.Bne_un:              case OpCode.Bge_un:              case OpCode.Bgt_un:              case OpCode.Ble_un:              case OpCode.Blt_un:              case OpCode.Leave:                  {                      var target = (int)Value;                      // NOTE: Delta is relatative to start of next instruction                      var delta = (int)beginOffset + target - ((int)writer.Offset + 4);                      writer.WriteInt32(delta);                  }                  break;              case OpCode.Br_s:              case OpCode.Brfalse_s:              case OpCode.Brtrue_s:              case OpCode.Beq_s:              case OpCode.Bge_s:              case OpCode.Bgt_s:              case OpCode.Ble_s:              case OpCode.Blt_s:              case OpCode.Bne_un_s:              case OpCode.Bge_un_s:              case OpCode.Bgt_un_s:              case OpCode.Ble_un_s:              case OpCode.Blt_un_s:              case OpCode.Leave_s:                  {                      var target = (int)Value;                      // NOTE: Delta is w.r.t. begining of next instruction                      var delta = (int)beginOffset + target - ((int)writer.Offset + 1);                      if (delta > 0xff)                          throw new PEException("cannot use small form for this instruction");                      writer.WriteSByte((sbyte)delta);                  }                  break;              case OpCode.Ldc_i4_s:                  writer.WriteSByte((sbyte)(int)Value);                  break;              case OpCode.Ldarg_s:              case OpCode.Ldarga_s:              case OpCode.Starg_s:              case OpCode.Ldloc_s:              case OpCode.Ldloca_s:              case OpCode.Stloc_s:              case OpCode.Unaligned:                  writer.WriteByte((byte)(int)Value);                  break;              case OpCode.Ldc_i4:                  writer.WriteInt32((int)Value);                  break;              case OpCode.Ldarg:              case OpCode.Ldarga:              case OpCode.Starg:              case OpCode.Ldloc:              case OpCode.Ldloca:              case OpCode.Stloc:                  writer.WriteUInt32((uint)(int)Value);                  break;              case OpCode.Ldc_i8:                  writer.WriteInt64((long)Value);                  break;              case OpCode.Ldc_r4:                  writer.WriteSingle((float)Value);                  break;              case OpCode.Ldc_r8:                  writer.WriteDouble((double)Value);                  break;              case OpCode.Ldstr:                  WriteUserString(ctxt' writer' (string)Value);                  break;              case OpCode.Switch:                  {                      var targets = (Seq<int>)Value;                      writer.WriteUInt32((uint)targets.Count);                      // NOTE: Deltas are w.r.t. start of next instruction                      for (var i = 0; i < targets.Count; i++)                      {                          var delta = (int)beginOffset + targets[i] - ((int)writer.Offset + (targets.Count * 4));                          writer.WriteInt32(delta);                      }                  }                  break;              case OpCode.Calli:              case OpCode.Jmp:              case OpCode.Call:              case OpCode.Callvirt:              case OpCode.Newobj:              case OpCode.Ldftn:              case OpCode.Ldvirtftn:              case OpCode.Ldfld:              case OpCode.Ldflda:              case OpCode.Stfld:              case OpCode.Ldsfld:              case OpCode.Ldsflda:              case OpCode.Stsfld:              case OpCode.Ldtoken:              case OpCode.Cpobj:              case OpCode.Ldobj:              case OpCode.Castclass:              case OpCode.Isinst:              case OpCode.Unbox:              case OpCode.Stobj:              case OpCode.Box:              case OpCode.Newarr:              case OpCode.Ldelema:              case OpCode.Ldelem:              case OpCode.Stelem:              case OpCode.Unbox_any:              case OpCode.Refanyval:              case OpCode.Mkrefany:              case OpCode.Initobj:              case OpCode.Constrained:              case OpCode.Sizeof:                  WriteToken(ctxt' writer' findRow(OpCode' Value));                  break;              default:                  throw new PEException("unrecognised opcode");              }
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,The following statement contains a magic number: switch (formatKind)              {              case CorILMethod.TinyFormat:                  {                      MaxStack = 8;                      bodySize = (uint)(firstByte >> 2);                      break;                  }              case CorILMethod.FatFormat:                  {                      var secondByte = reader.ReadByte();                      var flags = (CorILMethod)(((ushort)(secondByte & 0x7) << 8) | (ushort)firstByte);                      IsInitLocals = (flags & CorILMethod.InitLocals) != 0;                      var headerSize = (secondByte >> 4) & 0x7;                      if (headerSize != 3)                          throw new PEException("unexpected method body header size");                      MaxStack = (int)reader.ReadUInt16();                      bodySize = reader.ReadUInt32();                      LocalVarRef.Read(ctxt' reader);                      LocalVarRef.ResolveIndexes(ctxt);                      more = (flags & CorILMethod.MoreSects) != 0;                      break;                  }              default:                  throw new InvalidOperationException("invalid method body format");              }
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,The following statement contains a magic number: switch (formatKind)              {              case CorILMethod.TinyFormat:                  {                      MaxStack = 8;                      bodySize = (uint)(firstByte >> 2);                      break;                  }              case CorILMethod.FatFormat:                  {                      var secondByte = reader.ReadByte();                      var flags = (CorILMethod)(((ushort)(secondByte & 0x7) << 8) | (ushort)firstByte);                      IsInitLocals = (flags & CorILMethod.InitLocals) != 0;                      var headerSize = (secondByte >> 4) & 0x7;                      if (headerSize != 3)                          throw new PEException("unexpected method body header size");                      MaxStack = (int)reader.ReadUInt16();                      bodySize = reader.ReadUInt32();                      LocalVarRef.Read(ctxt' reader);                      LocalVarRef.ResolveIndexes(ctxt);                      more = (flags & CorILMethod.MoreSects) != 0;                      break;                  }              default:                  throw new InvalidOperationException("invalid method body format");              }
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,The following statement contains a magic number: switch (formatKind)              {              case CorILMethod.TinyFormat:                  {                      MaxStack = 8;                      bodySize = (uint)(firstByte >> 2);                      break;                  }              case CorILMethod.FatFormat:                  {                      var secondByte = reader.ReadByte();                      var flags = (CorILMethod)(((ushort)(secondByte & 0x7) << 8) | (ushort)firstByte);                      IsInitLocals = (flags & CorILMethod.InitLocals) != 0;                      var headerSize = (secondByte >> 4) & 0x7;                      if (headerSize != 3)                          throw new PEException("unexpected method body header size");                      MaxStack = (int)reader.ReadUInt16();                      bodySize = reader.ReadUInt32();                      LocalVarRef.Read(ctxt' reader);                      LocalVarRef.ResolveIndexes(ctxt);                      more = (flags & CorILMethod.MoreSects) != 0;                      break;                  }              default:                  throw new InvalidOperationException("invalid method body format");              }
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,The following statement contains a magic number: switch (formatKind)              {              case CorILMethod.TinyFormat:                  {                      MaxStack = 8;                      bodySize = (uint)(firstByte >> 2);                      break;                  }              case CorILMethod.FatFormat:                  {                      var secondByte = reader.ReadByte();                      var flags = (CorILMethod)(((ushort)(secondByte & 0x7) << 8) | (ushort)firstByte);                      IsInitLocals = (flags & CorILMethod.InitLocals) != 0;                      var headerSize = (secondByte >> 4) & 0x7;                      if (headerSize != 3)                          throw new PEException("unexpected method body header size");                      MaxStack = (int)reader.ReadUInt16();                      bodySize = reader.ReadUInt32();                      LocalVarRef.Read(ctxt' reader);                      LocalVarRef.ResolveIndexes(ctxt);                      more = (flags & CorILMethod.MoreSects) != 0;                      break;                  }              default:                  throw new InvalidOperationException("invalid method body format");              }
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Read,The following statement contains a magic number: switch (formatKind)              {              case CorILMethod.TinyFormat:                  {                      MaxStack = 8;                      bodySize = (uint)(firstByte >> 2);                      break;                  }              case CorILMethod.FatFormat:                  {                      var secondByte = reader.ReadByte();                      var flags = (CorILMethod)(((ushort)(secondByte & 0x7) << 8) | (ushort)firstByte);                      IsInitLocals = (flags & CorILMethod.InitLocals) != 0;                      var headerSize = (secondByte >> 4) & 0x7;                      if (headerSize != 3)                          throw new PEException("unexpected method body header size");                      MaxStack = (int)reader.ReadUInt16();                      bodySize = reader.ReadUInt32();                      LocalVarRef.Read(ctxt' reader);                      LocalVarRef.ResolveIndexes(ctxt);                      more = (flags & CorILMethod.MoreSects) != 0;                      break;                  }              default:                  throw new InvalidOperationException("invalid method body format");              }
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,ReadMethodDataSection,The following statement contains a magic number: reader.Align(4);
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,ReadMethodDataSection,The following statement contains a magic number: size < 4 || (size - 4) % 24 != 0
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,ReadMethodDataSection,The following statement contains a magic number: size < 4 || (size - 4) % 24 != 0
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,ReadMethodDataSection,The following statement contains a magic number: size < 4 || (size - 4) % 24 != 0
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,ReadMethodDataSection,The following statement contains a magic number: count = (size - 4) / 24;
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,ReadMethodDataSection,The following statement contains a magic number: count = (size - 4) / 24;
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,The following statement contains a magic number: ExceptionHandlingClauses.Count > 0 || MaxStack > 8
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,The following statement contains a magic number: var firstWord = (ushort)((uint)flags | (3 << 12));
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,Write,The following statement contains a magic number: var firstWord = (ushort)((uint)flags | (3 << 12));
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,WriteMethodDataSection,The following statement contains a magic number: writer.Align(4);
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,WriteMethodDataSection,The following statement contains a magic number: var size = ExceptionHandlingClauses.Count * 12 + 4;
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,WriteMethodDataSection,The following statement contains a magic number: var size = ExceptionHandlingClauses.Count * 12 + 4;
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,WriteMethodDataSection,The following statement contains a magic number: size = ExceptionHandlingClauses.Count * 24 + 4;
Magic Number,Microsoft.LiveLabs.PE,MethodBody,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\MethodBody.cs,WriteMethodDataSection,The following statement contains a magic number: size = ExceptionHandlingClauses.Count * 24 + 4;
Magic Number,Microsoft.LiveLabs.PE,PrimitiveTypeSig,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,ByteSize,The following statement contains a magic number: switch (PrimitiveType)              {                  case PrimitiveType.Boolean:                  case PrimitiveType.Int8:                  case PrimitiveType.UInt8:                      return 1;                  case PrimitiveType.Char:                  case PrimitiveType.Int16:                  case PrimitiveType.UInt16:                      return 2;                  case PrimitiveType.Int32:                  case PrimitiveType.UInt32:                  case PrimitiveType.Single:                      return 4;                  case PrimitiveType.Int64:                  case PrimitiveType.UInt64:                  case PrimitiveType.Double:                      return 8;                  case PrimitiveType.Void:                      throw new PEException("void type does not have a size");                  case PrimitiveType.IntNative:                  case PrimitiveType.UIntNative:                  case PrimitiveType.String:                  case PrimitiveType.TypedRef:                  case PrimitiveType.Type:                  case PrimitiveType.Object:                      throw new PEException("cannot determine size of type");                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.PE,PrimitiveTypeSig,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,ByteSize,The following statement contains a magic number: switch (PrimitiveType)              {                  case PrimitiveType.Boolean:                  case PrimitiveType.Int8:                  case PrimitiveType.UInt8:                      return 1;                  case PrimitiveType.Char:                  case PrimitiveType.Int16:                  case PrimitiveType.UInt16:                      return 2;                  case PrimitiveType.Int32:                  case PrimitiveType.UInt32:                  case PrimitiveType.Single:                      return 4;                  case PrimitiveType.Int64:                  case PrimitiveType.UInt64:                  case PrimitiveType.Double:                      return 8;                  case PrimitiveType.Void:                      throw new PEException("void type does not have a size");                  case PrimitiveType.IntNative:                  case PrimitiveType.UIntNative:                  case PrimitiveType.String:                  case PrimitiveType.TypedRef:                  case PrimitiveType.Type:                  case PrimitiveType.Object:                      throw new PEException("cannot determine size of type");                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.PE,PrimitiveTypeSig,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Signature.cs,ByteSize,The following statement contains a magic number: switch (PrimitiveType)              {                  case PrimitiveType.Boolean:                  case PrimitiveType.Int8:                  case PrimitiveType.UInt8:                      return 1;                  case PrimitiveType.Char:                  case PrimitiveType.Int16:                  case PrimitiveType.UInt16:                      return 2;                  case PrimitiveType.Int32:                  case PrimitiveType.UInt32:                  case PrimitiveType.Single:                      return 4;                  case PrimitiveType.Int64:                  case PrimitiveType.UInt64:                  case PrimitiveType.Double:                      return 8;                  case PrimitiveType.Void:                      throw new PEException("void type does not have a size");                  case PrimitiveType.IntNative:                  case PrimitiveType.UIntNative:                  case PrimitiveType.String:                  case PrimitiveType.TypedRef:                  case PrimitiveType.Type:                  case PrimitiveType.Object:                      throw new PEException("cannot determine size of type");                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,Microsoft.LiveLabs.PE,PEHeaderStandardFields,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Deref,The following statement contains a magic number: EntryPoint.Value = EntryPoint.GetReaderNonNull(ctxt).ReadBytes(6);
Magic Number,Microsoft.LiveLabs.PE,SectionHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,The following statement contains a magic number: var name = reader.ReadAsciiZeroPaddedString(8);
Magic Number,Microsoft.LiveLabs.PE,SectionHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Write,The following statement contains a magic number: writer.WriteAsciiZeroPaddedString(name' 8);
Magic Number,Microsoft.LiveLabs.PE,ImportLookupOrAddressTable,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,The following statement contains a magic number: HintNameTable.Address >> 31 != 0
Magic Number,Microsoft.LiveLabs.PE,FixupEntry,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,The following statement contains a magic number: Type = (ImageRelocation)(word >> 12);
Magic Number,Microsoft.LiveLabs.PE,FixupEntry,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Write,The following statement contains a magic number: var word = (ushort)(((byte)Type) << 12 | Offset);
Magic Number,Microsoft.LiveLabs.PE,FixupBlock,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Skip,The following statement contains a magic number: reader.Offset += 4;
Magic Number,Microsoft.LiveLabs.PE,FixupBlock,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Skip,The following statement contains a magic number: reader.Offset += blockSize - 8;
Magic Number,Microsoft.LiveLabs.PE,FixupBlock,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,The following statement contains a magic number: var numFixupEntries = (blockSize - 8)/ FixupEntry.Size;
Magic Number,Microsoft.LiveLabs.PE,FixupBlock,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,The following statement contains a magic number: reader.Align(4);
Magic Number,Microsoft.LiveLabs.PE,FixupBlock,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Write,The following statement contains a magic number: var blockSize = (uint)((Entries.Length * FixupEntry.Size) + 8);
Magic Number,Microsoft.LiveLabs.PE,FixupBlock,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Write,The following statement contains a magic number: writer.Align(4);
Magic Number,Microsoft.LiveLabs.PE,StreamHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,The following statement contains a magic number: Name = reader.ReadAsciiZeroTerminatedString(4);
Magic Number,Microsoft.LiveLabs.PE,StreamHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Write,The following statement contains a magic number: writer.WriteAsciiZeroTerminatedString(Name' 4);
Magic Number,Microsoft.LiveLabs.PE,MetadataHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Read,The following statement contains a magic number: Version = reader.ReadUTF8SizedZeroPaddedString(4);
Magic Number,Microsoft.LiveLabs.PE,MetadataHeader,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Structures.cs,Write,The following statement contains a magic number: writer.WriteUTF8SizedZeroPaddedString(Version' 4);
Magic Number,Microsoft.LiveLabs.PE,Row,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Tables.cs,GetHashCode,The following statement contains a magic number: var res = (uint)Tag << 3;
Magic Number,Microsoft.LiveLabs.PE,Row,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Tables.cs,GetHashCode,The following statement contains a magic number: res ^= (uint)Index >> 7;
Magic Number,Microsoft.LiveLabs.PE,Row,C:\research\architectureSmells\repos\Reactive-Extensions_IL2JS\PE\Tables.cs,GetHashCode,The following statement contains a magic number: res ^= (uint)Index << 25;
