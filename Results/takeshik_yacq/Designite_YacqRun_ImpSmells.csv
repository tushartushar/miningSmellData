Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 5 parameters. Parameters: source1' source2' source3' source4' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 6 parameters. Parameters: source1' source2' source3' source4' source5' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 7 parameters. Parameters: source1' source2' source3' source4' source5' source6' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 8 parameters. Parameters: source1' source2' source3' source4' source5' source6' source7' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 9 parameters. Parameters: source1' source2' source3' source4' source5' source6' source7' source8' resultSelector
Long Parameter List,XSpect,Arrays,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Parameter List,XSpect,CommandlineParser,C:\repos\takeshik_yacq\YacqRun\CommandlineParser.cs,Option,The method has 5 parameters. Parameters: id' allowValue' description' shortNames' longNames
Long Parameter List,XSpect,CommandlineOption,C:\repos\takeshik_yacq\YacqRun\CommandlineParser.cs,CommandlineOption,The method has 5 parameters. Parameters: id' allowValue' description' shortNames' longNames
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Apply,The length of the statement  "            Array.ForEach(actions' a => a(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6' tuple.Item7)); " is 122.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Apply,The length of the statement  "            Array.ForEach(actions' a => a(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6' tuple.Item7' tuple.Rest)); " is 134.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext()) " is 124.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext()) " is 144.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                    yield return resultSelector(iter1.Current' iter2.Current' iter3.Current' iter4.Current' iter5.Current' iter6.Current' iter7.Current); " is 133.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext() && iter8.MoveNext()) " is 164.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                    yield return resultSelector(iter1.Current' iter2.Current' iter3.Current' iter4.Current' iter5.Current' iter6.Current' iter7.Current' iter8.Current); " is 148.
Long Statement,XSpect.Yacq.Runner,Program,C:\repos\takeshik_yacq\YacqRun\Program.cs,Main,The length of the statement  "                Console.WriteLine("Usage: {0} [switches] [--] [inputs]"' Path.GetFileNameWithoutExtension(Environment.GetCommandLineArgs()[0])); " is 128.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext() && iter8.MoveNext()"  is complex.
Magic Number,XSpect,CommandlineParser,C:\repos\takeshik_yacq\YacqRun\CommandlineParser.cs,Parse,The following statement contains a magic number: return options                  .SelectMany(o => o.ShortNames                      .Select(c => Tuple.Create("-" + c' o))                      .Concat(o.LongNames.Select(s => Tuple.Create("--" + s' o)))                  )                  .ToDictionary()                  .Let(map => args                      .TakeWhile(s => s != "--")                      .SelectMany((a' i) => a.Length > 1 && a[0] == '-' && a[1] != '-'                          ? a.Substring(1' a.Length - 2)                                .Select(c => MakeTuple(map' "-" + c' o => null))                                .EndWith(MakeTuple(map' "-" + a.Last()' o => o.AllowValue ? args[i + 1] : null))                          : new[] { a.StartsWith("--")                                ? a.Split(new [] { '='' }' 2).Let(_ =>                                      MakeTuple(map' _[0]' o => _.Length == 2 ? _[1] : null)                                  )                                : MakeTuple(_parameter' a)'                          }                      )                  )                  .ToArray()                  .Let(_ => _.Where((t' i) => t.Item1 != _parameter || i == 0 || !_[i - 1].Item1.AllowValue))                  .Concat(args                      .SkipWhile(s => s != "--")                      .Skip(1)                      .Select(a => MakeTuple(_parameter' a))                  )                  .ToLookup(t => t.Item1.Null(o => o.Id)' t => t.Item2);
Magic Number,XSpect,CommandlineParser,C:\repos\takeshik_yacq\YacqRun\CommandlineParser.cs,Parse,The following statement contains a magic number: return options                  .SelectMany(o => o.ShortNames                      .Select(c => Tuple.Create("-" + c' o))                      .Concat(o.LongNames.Select(s => Tuple.Create("--" + s' o)))                  )                  .ToDictionary()                  .Let(map => args                      .TakeWhile(s => s != "--")                      .SelectMany((a' i) => a.Length > 1 && a[0] == '-' && a[1] != '-'                          ? a.Substring(1' a.Length - 2)                                .Select(c => MakeTuple(map' "-" + c' o => null))                                .EndWith(MakeTuple(map' "-" + a.Last()' o => o.AllowValue ? args[i + 1] : null))                          : new[] { a.StartsWith("--")                                ? a.Split(new [] { '='' }' 2).Let(_ =>                                      MakeTuple(map' _[0]' o => _.Length == 2 ? _[1] : null)                                  )                                : MakeTuple(_parameter' a)'                          }                      )                  )                  .ToArray()                  .Let(_ => _.Where((t' i) => t.Item1 != _parameter || i == 0 || !_[i - 1].Item1.AllowValue))                  .Concat(args                      .SkipWhile(s => s != "--")                      .Skip(1)                      .Select(a => MakeTuple(_parameter' a))                  )                  .ToLookup(t => t.Item1.Null(o => o.Id)' t => t.Item2);
Magic Number,XSpect,CommandlineParser,C:\repos\takeshik_yacq\YacqRun\CommandlineParser.cs,Parse,The following statement contains a magic number: return options                  .SelectMany(o => o.ShortNames                      .Select(c => Tuple.Create("-" + c' o))                      .Concat(o.LongNames.Select(s => Tuple.Create("--" + s' o)))                  )                  .ToDictionary()                  .Let(map => args                      .TakeWhile(s => s != "--")                      .SelectMany((a' i) => a.Length > 1 && a[0] == '-' && a[1] != '-'                          ? a.Substring(1' a.Length - 2)                                .Select(c => MakeTuple(map' "-" + c' o => null))                                .EndWith(MakeTuple(map' "-" + a.Last()' o => o.AllowValue ? args[i + 1] : null))                          : new[] { a.StartsWith("--")                                ? a.Split(new [] { '='' }' 2).Let(_ =>                                      MakeTuple(map' _[0]' o => _.Length == 2 ? _[1] : null)                                  )                                : MakeTuple(_parameter' a)'                          }                      )                  )                  .ToArray()                  .Let(_ => _.Where((t' i) => t.Item1 != _parameter || i == 0 || !_[i - 1].Item1.AllowValue))                  .Concat(args                      .SkipWhile(s => s != "--")                      .Skip(1)                      .Select(a => MakeTuple(_parameter' a))                  )                  .ToLookup(t => t.Item1.Null(o => o.Id)' t => t.Item2);
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(from))              {                  case -1:                      switch (Math.Sign(to))                      {                          case -1:                              return from >= to                                  ? list.Skip(list.Count + to).Take(from - to + 1).Reverse()                                  : list.Skip(list.Count + from).Take(to - from + 1);                          case 0:                              return list.Skip(list.Count + from).EndWith(list[0]);                          case 1:                              return list.Skip(list.Count + from).Concat(list.Take(to + 1));                      }                      break;                  case 0:                      switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Reverse().StartWith(list[0]);                          case 0:                              return list.Take(1);                          case 1:                              return list.Take(to + 1);                      }                      break;                  case 1:                      switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Concat(list.Take(from + 1)).Reverse();                          case 0:                              return list.Take(from + 1).Reverse();                          case 1:                              return from <= to                                  ? list.Skip(from).Take(to - from + 1)                                  : list.Skip(to).Take(from - to + 1).Reverse();                      }                      break;              }
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return from >= to                                  ? list.Skip(list.Count + to).Take(from - to + 1).Reverse()                                  : list.Skip(list.Count + from).Take(to - from + 1);                          case 0:                              return list.Skip(list.Count + from).EndWith(list[0]);                          case 1:                              return list.Skip(list.Count + from).Concat(list.Take(to + 1));                      }
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Reverse().StartWith(list[0]);                          case 0:                              return list.Take(1);                          case 1:                              return list.Take(to + 1);                      }
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Concat(list.Take(from + 1)).Reverse();                          case 0:                              return list.Take(from + 1).Reverse();                          case 1:                              return from <= to                                  ? list.Skip(from).Take(to - from + 1)                                  : list.Skip(to).Take(from - to + 1).Reverse();                      }
