Implementation smell,Namespace,Class,File,Method,Description
Long Method,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,ConvertNumericType,The method has 158 lines of code.
Long Method,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,ConvertNumericTypeForAlithmetics,The method has 199 lines of code.
Long Method,XSpect.Yacq.Expressions,YacqExpressionVisitor,C:\repos\takeshik_yacq\Yacq\Expressions\YacqExpressionVisitor.cs,TraverseImpl,The method has 144 lines of code.
Long Method,XSpect.Yacq.LanguageServices,AlternativeGrammar,C:\repos\takeshik_yacq\Yacq\LanguageServices\AlternativeGrammar.cs,AlternativeGrammar,The method has 309 lines of code.
Long Method,XSpect.Yacq.LanguageServices,PatternGrammar,C:\repos\takeshik_yacq\Yacq\LanguageServices\PatternGrammar.cs,PatternGrammar,The method has 218 lines of code.
Long Method,XSpect.Yacq.LanguageServices,StandardGrammar,C:\repos\takeshik_yacq\Yacq\LanguageServices\StandardGrammar.cs,StandardGrammar,The method has 302 lines of code.
Long Method,XSpect.Yacq.Serialization,Node,C:\repos\takeshik_yacq\Yacq\Serialization\Add.cs,Serialize,The method has 238 lines of code.
Long Method,XSpect.Yacq.SystemObjects,YacqAssembly,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqAssembly.cs,DefineType,The method has 137 lines of code.
Long Method,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateType,The method has 119 lines of code.
Complex Method,XSpect.Yacq.Expressions,ListExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ListExpression.cs,ReduceImpl,Cyclomatic complexity of the method is 8
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 5 parameters. Parameters: source1' source2' source3' source4' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 6 parameters. Parameters: source1' source2' source3' source4' source5' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 7 parameters. Parameters: source1' source2' source3' source4' source5' source6' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 8 parameters. Parameters: source1' source2' source3' source4' source5' source6' source7' resultSelector
Long Parameter List,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 9 parameters. Parameters: source1' source2' source3' source4' source5' source6' source7' source8' resultSelector
Long Parameter List,XSpect,Arrays,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 6 parameters. Parameters: symbols' dispatchType' left' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 5 parameters. Parameters: symbols' dispatchType' left' name' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 5 parameters. Parameters: symbols' dispatchType' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 6 parameters. Parameters: symbols' dispatchType' left' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 5 parameters. Parameters: symbols' dispatchType' left' name' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 5 parameters. Parameters: symbols' dispatchType' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 5 parameters. Parameters: dispatchType' left' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Dispatch,The method has 5 parameters. Parameters: dispatchType' left' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq.Expressions,DispatchExpression,C:\repos\takeshik_yacq\Yacq\Expressions\DispatchExpression.TypeNode.cs,DispatchExpression,The method has 6 parameters. Parameters: symbols' dispatchType' left' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq.Expressions,Candidate,C:\repos\takeshik_yacq\Yacq\Expressions\DispatchExpression.Candidate.cs,Candidate,The method has 5 parameters. Parameters: instance' member' typeArgumentMap' argumentNames' arguments
Long Parameter List,XSpect.Yacq.Expressions,Candidate,C:\repos\takeshik_yacq\Yacq\Expressions\DispatchExpression.Candidate.cs,Candidate,The method has 5 parameters. Parameters: instance' member' typeArguments' argumentNames' arguments
Long Parameter List,XSpect.Yacq.Expressions,Candidate,C:\repos\takeshik_yacq\Yacq\Expressions\DispatchExpression.Candidate.cs,Clone,The method has 6 parameters. Parameters: instance' member' typeArgumentMap' typeArguments' argumentNames' arguments
Long Parameter List,XSpect.Yacq.Expressions,YacqExtensions,C:\repos\takeshik_yacq\Yacq\Expressions\YacqExtensions.cs,Method,The method has 5 parameters. Parameters: left' symbols' name' typeArguments' arguments
Long Parameter List,XSpect.Yacq,ParseException,C:\repos\takeshik_yacq\Yacq\ParseException.cs,ParseException,The method has 5 parameters. Parameters: message' innerException' expression' startPosition' endPosition
Long Parameter List,XSpect.Yacq,ParseException,C:\repos\takeshik_yacq\Yacq\ParseException.cs,ParseException,The method has 5 parameters. Parameters: message' innerException' readerState' startPosition' endPosition
Long Parameter List,XSpect.Yacq,ParseException,C:\repos\takeshik_yacq\Yacq\ParseException.cs,ParseException,The method has 5 parameters. Parameters: message' expression' readerState' startPosition' endPosition
Long Parameter List,XSpect.Yacq,ParseException,C:\repos\takeshik_yacq\Yacq\ParseException.cs,ParseException,The method has 6 parameters. Parameters: message' innerException' expression' readerState' startPosition' endPosition
Long Parameter List,XSpect.Yacq,ParseException,C:\repos\takeshik_yacq\Yacq\ParseException.cs,ParseException,The method has 6 parameters. Parameters: message' innerException' expression' readerState' startPosition' endPosition
Long Parameter List,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,DefineMethod,The method has 5 parameters. Parameters: name' attributes' returnType' parameterTypes' body
Long Parameter List,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,DefineProperty,The method has 6 parameters. Parameters: name' type' methodAttributes' initializer' getter' setter
Long Parameter List,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,DefineProperty,The method has 5 parameters. Parameters: name' type' methodAttributes' getter' setter
Long Parameter List,XSpect.Yacq.Symbols,SymbolTable,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Add,The method has 6 parameters. Parameters: dispatchType' leftType' name' targetDispatchType' targetLeftType' targetName
Long Parameter List,XSpect.Yacq.Symbols,SymbolTable,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Add,The method has 5 parameters. Parameters: dispatchType' name' targetDispatchType' targetLeftType' targetName
Long Parameter List,XSpect.Yacq.Symbols,SymbolTable,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Add,The method has 5 parameters. Parameters: dispatchType' leftType' name' targetDispatchType' targetName
Long Parameter List,XSpect.Yacq.Linq,YacqQueryable<TSource>,C:\repos\takeshik_yacq\Yacq\Linq\YacqQueryable.cs,GroupJoin,The method has 5 parameters. Parameters: inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,XSpect.Yacq.Linq,YacqQueryable<TSource>,C:\repos\takeshik_yacq\Yacq\Linq\YacqQueryable.cs,Join,The method has 5 parameters. Parameters: inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Apply,The length of the statement  "            Array.ForEach(actions' a => a(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6' tuple.Item7)); " is 122.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Apply,The length of the statement  "            Array.ForEach(actions' a => a(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6' tuple.Item7' tuple.Rest)); " is 134.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext()) " is 124.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext()) " is 144.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                    yield return resultSelector(iter1.Current' iter2.Current' iter3.Current' iter4.Current' iter5.Current' iter6.Current' iter7.Current); " is 133.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext() && iter8.MoveNext()) " is 164.
Long Statement,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                    yield return resultSelector(iter1.Current' iter2.Current' iter3.Current' iter4.Current' iter5.Current' iter6.Current' iter7.Current' iter8.Current); " is 148.
Long Statement,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,ImplicitConvert,The length of the statement  "                    || expectedType.GetMethod("op_Implicit"' BindingFlags.Public | BindingFlags.Static' null' new [] { expression.Type' }' null) != null " is 132.
Long Statement,XSpect.Yacq.Expressions,QuotedExpression,C:\repos\takeshik_yacq\Yacq\Expressions\QuotedExpression.cs,ProcessQuasiquote,The length of the statement  "                ?? (expression as VectorExpression).Null(ev => Vector(symbols' ev.Elements.Select(e => ProcessQuasiquote(e' symbols' level)))) " is 126.
Long Statement,XSpect.Yacq.Expressions,QuotedExpression,C:\repos\takeshik_yacq\Yacq\Expressions\QuotedExpression.cs,ProcessQuasiquote,The length of the statement  "                ?? (expression as LambdaListExpression).Null(el => LambdaList(symbols' el.Elements.Select(e => ProcessQuasiquote(e' symbols' level)))) " is 134.
Long Statement,XSpect.Yacq.Expressions,YacqExpressionVisitor,C:\repos\takeshik_yacq\Yacq\Expressions\YacqExpressionVisitor.cs,TraverseImpl,The length of the statement  "                    throw new ArgumentException("Expression node type '" + expression.GetType().Name + "' is not supported."' "expression"); " is 120.
Long Statement,XSpect.Yacq.LanguageServices,Grammar,C:\repos\takeshik_yacq\Yacq\LanguageServices\Grammar.cs,Add,The length of the statement  "            this.Add(category' (this.Keys.Where(k => k.Category == category).Max(k => (Nullable<Int32>) k.Priority) ?? 0) + 100' id' rule); " is 127.
Long Statement,XSpect.Yacq,YacqServices,C:\repos\takeshik_yacq\Yacq\YacqServices.cs,ParseFunc,The length of the statement  "            return (Expression<Func<TReturn>>) ParseLambda(symbols' typeof(TReturn)' code' Arrays.Empty<AmbiguousParameterExpression>()); " is 125.
Long Statement,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,DefineProperty,The length of the statement  "                                  methodAttributes | MethodAttributes.HideBySig | MethodAttributes.SpecialName | (isStatic ? 0 : MethodAttributes.Virtual)' " is 121.
Long Statement,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,DefineProperty,The length of the statement  "                                  methodAttributes | MethodAttributes.HideBySig | MethodAttributes.SpecialName | (isStatic ? 0 : MethodAttributes.Virtual)' " is 121.
Long Statement,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,DefineProperty,The length of the statement  "                                  methodAttributes | MethodAttributes.HideBySig | MethodAttributes.SpecialName | (isStatic ? 0 : MethodAttributes.Virtual)' " is 121.
Long Statement,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,DefineProperty,The length of the statement  "                                  methodAttributes | MethodAttributes.HideBySig | MethodAttributes.SpecialName | (isStatic ? 0 : MethodAttributes.Virtual)' " is 121.
Long Statement,XSpect.Yacq.Symbols,SymbolEntry,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolEntry.cs,Parse,The length of the statement  "                (l.First() as VectorExpression).Null(v => Static.Type(((TypeCandidateExpression) v.Elements.First().Reduce(symbols)).ElectedType)) " is 130.
Long Statement,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,PlusAssign,The length of the statement  "                                    l.Type.GetMethod("op_Addition"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null " is 125.
Long Statement,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,MinusAssign,The length of the statement  "                              l.Type.GetMethod("op_Subtraction"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null " is 128.
Long Statement,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,MultiplyAssign,The length of the statement  "                        l.Type.GetMethod("op_Multiply"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null " is 125.
Long Statement,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,DivideAssign,The length of the statement  "                        l.Type.GetMethod("op_Division"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null " is 125.
Long Statement,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ModuloAssign,The length of the statement  "                        l.Type.GetMethod("op_Modulus"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null " is 124.
Long Statement,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LeftShiftAssign,The length of the statement  "                        l.Type.GetMethod("op_LeftShift"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null " is 126.
Long Statement,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,RightShiftAssign,The length of the statement  "                        l.Type.GetMethod("op_RightShift"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null " is 127.
Long Statement,XSpect.Yacq.Linq,YacqQueryable<TSource>,C:\repos\takeshik_yacq\Yacq\Linq\YacqQueryable.cs,OrderBy,The length of the statement  "            return new YacqOrderedQueryable<TSource>(this.Symbols' (IOrderedQueryable<TSource>) this.Provider.CreateQuery(Expression.Call( " is 126.
Long Statement,XSpect.Yacq.Linq,YacqQueryable<TSource>,C:\repos\takeshik_yacq\Yacq\Linq\YacqQueryable.cs,OrderByDescending,The length of the statement  "            return new YacqOrderedQueryable<TSource>(this.Symbols' (IOrderedQueryable<TSource>) this.Provider.CreateQuery(Expression.Call( " is 126.
Long Statement,XSpect.Yacq.Linq,YacqOrderedQueryable<TSource>,C:\repos\takeshik_yacq\Yacq\Linq\YacqQueryable.cs,ThenBy,The length of the statement  "            return new YacqOrderedQueryable<TSource>(this.Symbols' (IOrderedQueryable<TSource>) this.Provider.CreateQuery(Expression.Call( " is 126.
Long Statement,XSpect.Yacq.Linq,YacqOrderedQueryable<TSource>,C:\repos\takeshik_yacq\Yacq\Linq\YacqQueryable.cs,ThenByDescending,The length of the statement  "            return new YacqOrderedQueryable<TSource>(this.Symbols' (IOrderedQueryable<TSource>) this.Provider.CreateQuery(Expression.Call( " is 126.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext() && iter8.MoveNext()"  is complex.
Complex Conditional,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,ImplicitConvert,The conditional expression  "(expectedType.IsAppropriate(expression.Type) && expression.Type.IsValueType && !expectedType.IsValueType)                      || expectedType.GetMethod("op_Implicit"' BindingFlags.Public | BindingFlags.Static' null' new [] { expression.Type' }' null) != null"  is complex.
Complex Conditional,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The conditional expression  "b == 10 && (text.Contains(".") || suffix == "D" || suffix == "F")"  is complex.
Magic Number,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Text,The following statement contains a magic number: return String.IsNullOrEmpty(text) || text.First() != text.Last()                  ? Text(symbols' default(Char)' text)                  : Text(symbols' text.First()' text.Substring(1' text.Length - 2));
Magic Number,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Identifier,The following statement contains a magic number: return String.IsNullOrEmpty(name) || name.Length < 2 || name.First() != name.Last()                  ? Identifier(symbols' default(Char)' name)                  : Identifier(symbols' name.First()' name.Substring(1' name.Length - 2));
Magic Number,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,Identifier,The following statement contains a magic number: return String.IsNullOrEmpty(name) || name.Length < 2 || name.First() != name.Last()                  ? Identifier(symbols' default(Char)' name)                  : Identifier(symbols' name.First()' name.Substring(1' name.Length - 2));
Magic Number,XSpect.Yacq.Expressions,EscapeSequences,C:\repos\takeshik_yacq\Yacq\Expressions\EscapeSequences.cs,ParseFragment,The following statement contains a magic number: if (str.StartsWithInvariant("$("))              {                  codes.Add(ParseFragment(str.Substring(1)' codes));                  return "{" + (codes.Count - 1) + "}";              }              else if (str.StartsWithInvariant("M-\\C-") || str.StartsWithInvariant("C-\\M-"))              {                  return ((Char) (ParseFragment(str.Substring(4)' codes)[0] & 0x9f | 0x80)).ToString();              }              else if (str.StartsWithInvariant("C-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0x9f)).ToString();              }              else if (str.StartsWithInvariant("M-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0xff | 0x80)).ToString();              }              else if (str[0] == 'u' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (str[0] == 'U' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (Char.IsDigit(str' 0))              {                  return ((Char) Convert.ToInt32(str' 8)).ToString();              }              else if (str[0] == 'x' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else              {                  switch (str[0])                  {                      case 'a':                          return "\a";                      case 'b':                          return "\b";                      case 'e':                          return "\x1b";                      case 'f':                          return "\f";                      case 'n':                          return "\n";                      case 'r':                          return "\r";                      case 's':                          return " ";                      case 't':                          return "\t";                      case 'v':                          return "\v";                      case 'N':                          return Environment.NewLine;                      default:                          return str;                  }              }
Magic Number,XSpect.Yacq.Expressions,EscapeSequences,C:\repos\takeshik_yacq\Yacq\Expressions\EscapeSequences.cs,ParseFragment,The following statement contains a magic number: if (str.StartsWithInvariant("$("))              {                  codes.Add(ParseFragment(str.Substring(1)' codes));                  return "{" + (codes.Count - 1) + "}";              }              else if (str.StartsWithInvariant("M-\\C-") || str.StartsWithInvariant("C-\\M-"))              {                  return ((Char) (ParseFragment(str.Substring(4)' codes)[0] & 0x9f | 0x80)).ToString();              }              else if (str.StartsWithInvariant("C-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0x9f)).ToString();              }              else if (str.StartsWithInvariant("M-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0xff | 0x80)).ToString();              }              else if (str[0] == 'u' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (str[0] == 'U' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (Char.IsDigit(str' 0))              {                  return ((Char) Convert.ToInt32(str' 8)).ToString();              }              else if (str[0] == 'x' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else              {                  switch (str[0])                  {                      case 'a':                          return "\a";                      case 'b':                          return "\b";                      case 'e':                          return "\x1b";                      case 'f':                          return "\f";                      case 'n':                          return "\n";                      case 'r':                          return "\r";                      case 's':                          return " ";                      case 't':                          return "\t";                      case 'v':                          return "\v";                      case 'N':                          return Environment.NewLine;                      default:                          return str;                  }              }
Magic Number,XSpect.Yacq.Expressions,EscapeSequences,C:\repos\takeshik_yacq\Yacq\Expressions\EscapeSequences.cs,ParseFragment,The following statement contains a magic number: if (str.StartsWithInvariant("$("))              {                  codes.Add(ParseFragment(str.Substring(1)' codes));                  return "{" + (codes.Count - 1) + "}";              }              else if (str.StartsWithInvariant("M-\\C-") || str.StartsWithInvariant("C-\\M-"))              {                  return ((Char) (ParseFragment(str.Substring(4)' codes)[0] & 0x9f | 0x80)).ToString();              }              else if (str.StartsWithInvariant("C-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0x9f)).ToString();              }              else if (str.StartsWithInvariant("M-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0xff | 0x80)).ToString();              }              else if (str[0] == 'u' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (str[0] == 'U' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (Char.IsDigit(str' 0))              {                  return ((Char) Convert.ToInt32(str' 8)).ToString();              }              else if (str[0] == 'x' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else              {                  switch (str[0])                  {                      case 'a':                          return "\a";                      case 'b':                          return "\b";                      case 'e':                          return "\x1b";                      case 'f':                          return "\f";                      case 'n':                          return "\n";                      case 'r':                          return "\r";                      case 's':                          return " ";                      case 't':                          return "\t";                      case 'v':                          return "\v";                      case 'N':                          return Environment.NewLine;                      default:                          return str;                  }              }
Magic Number,XSpect.Yacq.Expressions,EscapeSequences,C:\repos\takeshik_yacq\Yacq\Expressions\EscapeSequences.cs,ParseFragment,The following statement contains a magic number: if (str.StartsWithInvariant("$("))              {                  codes.Add(ParseFragment(str.Substring(1)' codes));                  return "{" + (codes.Count - 1) + "}";              }              else if (str.StartsWithInvariant("M-\\C-") || str.StartsWithInvariant("C-\\M-"))              {                  return ((Char) (ParseFragment(str.Substring(4)' codes)[0] & 0x9f | 0x80)).ToString();              }              else if (str.StartsWithInvariant("C-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0x9f)).ToString();              }              else if (str.StartsWithInvariant("M-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0xff | 0x80)).ToString();              }              else if (str[0] == 'u' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (str[0] == 'U' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (Char.IsDigit(str' 0))              {                  return ((Char) Convert.ToInt32(str' 8)).ToString();              }              else if (str[0] == 'x' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else              {                  switch (str[0])                  {                      case 'a':                          return "\a";                      case 'b':                          return "\b";                      case 'e':                          return "\x1b";                      case 'f':                          return "\f";                      case 'n':                          return "\n";                      case 'r':                          return "\r";                      case 's':                          return " ";                      case 't':                          return "\t";                      case 'v':                          return "\v";                      case 'N':                          return Environment.NewLine;                      default:                          return str;                  }              }
Magic Number,XSpect.Yacq.Expressions,EscapeSequences,C:\repos\takeshik_yacq\Yacq\Expressions\EscapeSequences.cs,ParseFragment,The following statement contains a magic number: if (str.StartsWithInvariant("$("))              {                  codes.Add(ParseFragment(str.Substring(1)' codes));                  return "{" + (codes.Count - 1) + "}";              }              else if (str.StartsWithInvariant("M-\\C-") || str.StartsWithInvariant("C-\\M-"))              {                  return ((Char) (ParseFragment(str.Substring(4)' codes)[0] & 0x9f | 0x80)).ToString();              }              else if (str.StartsWithInvariant("C-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0x9f)).ToString();              }              else if (str.StartsWithInvariant("M-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0xff | 0x80)).ToString();              }              else if (str[0] == 'u' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (str[0] == 'U' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (Char.IsDigit(str' 0))              {                  return ((Char) Convert.ToInt32(str' 8)).ToString();              }              else if (str[0] == 'x' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else              {                  switch (str[0])                  {                      case 'a':                          return "\a";                      case 'b':                          return "\b";                      case 'e':                          return "\x1b";                      case 'f':                          return "\f";                      case 'n':                          return "\n";                      case 'r':                          return "\r";                      case 's':                          return " ";                      case 't':                          return "\t";                      case 'v':                          return "\v";                      case 'N':                          return Environment.NewLine;                      default:                          return str;                  }              }
Magic Number,XSpect.Yacq.Expressions,EscapeSequences,C:\repos\takeshik_yacq\Yacq\Expressions\EscapeSequences.cs,ParseFragment,The following statement contains a magic number: if (str.StartsWithInvariant("$("))              {                  codes.Add(ParseFragment(str.Substring(1)' codes));                  return "{" + (codes.Count - 1) + "}";              }              else if (str.StartsWithInvariant("M-\\C-") || str.StartsWithInvariant("C-\\M-"))              {                  return ((Char) (ParseFragment(str.Substring(4)' codes)[0] & 0x9f | 0x80)).ToString();              }              else if (str.StartsWithInvariant("C-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0x9f)).ToString();              }              else if (str.StartsWithInvariant("M-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0xff | 0x80)).ToString();              }              else if (str[0] == 'u' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (str[0] == 'U' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (Char.IsDigit(str' 0))              {                  return ((Char) Convert.ToInt32(str' 8)).ToString();              }              else if (str[0] == 'x' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else              {                  switch (str[0])                  {                      case 'a':                          return "\a";                      case 'b':                          return "\b";                      case 'e':                          return "\x1b";                      case 'f':                          return "\f";                      case 'n':                          return "\n";                      case 'r':                          return "\r";                      case 's':                          return " ";                      case 't':                          return "\t";                      case 'v':                          return "\v";                      case 'N':                          return Environment.NewLine;                      default:                          return str;                  }              }
Magic Number,XSpect.Yacq.Expressions,EscapeSequences,C:\repos\takeshik_yacq\Yacq\Expressions\EscapeSequences.cs,ParseFragment,The following statement contains a magic number: if (str.StartsWithInvariant("$("))              {                  codes.Add(ParseFragment(str.Substring(1)' codes));                  return "{" + (codes.Count - 1) + "}";              }              else if (str.StartsWithInvariant("M-\\C-") || str.StartsWithInvariant("C-\\M-"))              {                  return ((Char) (ParseFragment(str.Substring(4)' codes)[0] & 0x9f | 0x80)).ToString();              }              else if (str.StartsWithInvariant("C-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0x9f)).ToString();              }              else if (str.StartsWithInvariant("M-"))              {                  return ((Char) (ParseFragment(str.Substring(2)' codes)[0] & 0xff | 0x80)).ToString();              }              else if (str[0] == 'u' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (str[0] == 'U' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else if (Char.IsDigit(str' 0))              {                  return ((Char) Convert.ToInt32(str' 8)).ToString();              }              else if (str[0] == 'x' && str.Length > 1)              {                  return ((Char) Convert.ToInt32(str.Substring(1)' 16)).ToString();              }              else              {                  switch (str[0])                  {                      case 'a':                          return "\a";                      case 'b':                          return "\b";                      case 'e':                          return "\x1b";                      case 'f':                          return "\f";                      case 'n':                          return "\n";                      case 'r':                          return "\r";                      case 's':                          return " ";                      case 't':                          return "\t";                      case 'v':                          return "\v";                      case 'N':                          return Environment.NewLine;                      default:                          return str;                  }              }
Magic Number,XSpect.Yacq.Expressions,AmbiguousLambdaExpression,C:\repos\takeshik_yacq\Yacq\Expressions\AmbiguousLambdaExpression.cs,ToString,The following statement contains a magic number: return this.Parameters.Stringify("' ")                  + " => "                  + (this.Bodies.Count > 2 ? "{ ... }" : this.Bodies.Single().ToString());
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var b = text[0] != '-'                  ? text.Length > 2                        ? GetBase(text.Substring(0' 2))                        : 10                  : text.Length > 3                        ? GetBase(text.Substring(1' 3))                        : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var b = text[0] != '-'                  ? text.Length > 2                        ? GetBase(text.Substring(0' 2))                        : 10                  : text.Length > 3                        ? GetBase(text.Substring(1' 3))                        : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var b = text[0] != '-'                  ? text.Length > 2                        ? GetBase(text.Substring(0' 2))                        : 10                  : text.Length > 3                        ? GetBase(text.Substring(1' 3))                        : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var b = text[0] != '-'                  ? text.Length > 2                        ? GetBase(text.Substring(0' 2))                        : 10                  : text.Length > 3                        ? GetBase(text.Substring(1' 3))                        : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var b = text[0] != '-'                  ? text.Length > 2                        ? GetBase(text.Substring(0' 2))                        : 10                  : text.Length > 3                        ? GetBase(text.Substring(1' 3))                        : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var b = text[0] != '-'                  ? text.Length > 2                        ? GetBase(text.Substring(0' 2))                        : 10                  : text.Length > 3                        ? GetBase(text.Substring(1' 3))                        : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var suffix = text.Length > 1                  ? text                        .Substring(text.Length - 2)                        .Where(b == 10                            ? (_ => _ == 'D' || _ == 'F' || _ == 'M' || _ == 'L' || _ == 'U')                            : ((Func<Char' Boolean>) (_ => _ == 'L' || _ == 'U'))                        )                        .Stringify()                  : "";
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: var suffix = text.Length > 1                  ? text                        .Substring(text.Length - 2)                        .Where(b == 10                            ? (_ => _ == 'D' || _ == 'F' || _ == 'M' || _ == 'L' || _ == 'U')                            : ((Func<Char' Boolean>) (_ => _ == 'L' || _ == 'U'))                        )                        .Stringify()                  : "";
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: if (b == 10 && suffix == "M")              {                  return Decimal.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else if (b == 10 && (text.Contains(".") || suffix == "D" || suffix == "F"))              {                  return suffix == "F"                      ? (Object) Single.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture)                      : Double.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else              {                  if (text[0] != '-')                  {                      if (text[0] == '+')                      {                          text = text.Substring(1);                      }                      var value = b != 10                          ? System.Convert.ToUInt64(text.Substring(2)' b)                          : UInt64.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);                      if (suffix == "UL" || suffix == "LU")                      {                          return value;                      }                      else if (suffix == "U")                      {                          return value <= UInt32.MaxValue                              ? (UInt32) value                              : (Object) value;                      }                      else if (suffix == "L")                      {                          return value <= Int64.MaxValue                              ? (Int64) value                              : (Object) value;                      }                      else                      {                          return value <= Int32.MaxValue                              ? (Int32) value                              : value <= UInt32.MaxValue                                    ? (UInt32) value                                    : (Object) value;                      }                  }                  else                  {                      var value = b != 10                          ? System.Convert.ToInt64("-" + text.Substring(3)' b)                          : Int64.Parse(text' CultureInfo.InvariantCulture);                      return suffix != "L" && value >= Int32.MinValue && value <= Int32.MaxValue                          ? (Int32) value                          : (Object) value;                  }              }
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: if (b == 10 && suffix == "M")              {                  return Decimal.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else if (b == 10 && (text.Contains(".") || suffix == "D" || suffix == "F"))              {                  return suffix == "F"                      ? (Object) Single.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture)                      : Double.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else              {                  if (text[0] != '-')                  {                      if (text[0] == '+')                      {                          text = text.Substring(1);                      }                      var value = b != 10                          ? System.Convert.ToUInt64(text.Substring(2)' b)                          : UInt64.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);                      if (suffix == "UL" || suffix == "LU")                      {                          return value;                      }                      else if (suffix == "U")                      {                          return value <= UInt32.MaxValue                              ? (UInt32) value                              : (Object) value;                      }                      else if (suffix == "L")                      {                          return value <= Int64.MaxValue                              ? (Int64) value                              : (Object) value;                      }                      else                      {                          return value <= Int32.MaxValue                              ? (Int32) value                              : value <= UInt32.MaxValue                                    ? (UInt32) value                                    : (Object) value;                      }                  }                  else                  {                      var value = b != 10                          ? System.Convert.ToInt64("-" + text.Substring(3)' b)                          : Int64.Parse(text' CultureInfo.InvariantCulture);                      return suffix != "L" && value >= Int32.MinValue && value <= Int32.MaxValue                          ? (Int32) value                          : (Object) value;                  }              }
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: if (b == 10 && suffix == "M")              {                  return Decimal.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else if (b == 10 && (text.Contains(".") || suffix == "D" || suffix == "F"))              {                  return suffix == "F"                      ? (Object) Single.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture)                      : Double.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else              {                  if (text[0] != '-')                  {                      if (text[0] == '+')                      {                          text = text.Substring(1);                      }                      var value = b != 10                          ? System.Convert.ToUInt64(text.Substring(2)' b)                          : UInt64.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);                      if (suffix == "UL" || suffix == "LU")                      {                          return value;                      }                      else if (suffix == "U")                      {                          return value <= UInt32.MaxValue                              ? (UInt32) value                              : (Object) value;                      }                      else if (suffix == "L")                      {                          return value <= Int64.MaxValue                              ? (Int64) value                              : (Object) value;                      }                      else                      {                          return value <= Int32.MaxValue                              ? (Int32) value                              : value <= UInt32.MaxValue                                    ? (UInt32) value                                    : (Object) value;                      }                  }                  else                  {                      var value = b != 10                          ? System.Convert.ToInt64("-" + text.Substring(3)' b)                          : Int64.Parse(text' CultureInfo.InvariantCulture);                      return suffix != "L" && value >= Int32.MinValue && value <= Int32.MaxValue                          ? (Int32) value                          : (Object) value;                  }              }
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: if (b == 10 && suffix == "M")              {                  return Decimal.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else if (b == 10 && (text.Contains(".") || suffix == "D" || suffix == "F"))              {                  return suffix == "F"                      ? (Object) Single.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture)                      : Double.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else              {                  if (text[0] != '-')                  {                      if (text[0] == '+')                      {                          text = text.Substring(1);                      }                      var value = b != 10                          ? System.Convert.ToUInt64(text.Substring(2)' b)                          : UInt64.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);                      if (suffix == "UL" || suffix == "LU")                      {                          return value;                      }                      else if (suffix == "U")                      {                          return value <= UInt32.MaxValue                              ? (UInt32) value                              : (Object) value;                      }                      else if (suffix == "L")                      {                          return value <= Int64.MaxValue                              ? (Int64) value                              : (Object) value;                      }                      else                      {                          return value <= Int32.MaxValue                              ? (Int32) value                              : value <= UInt32.MaxValue                                    ? (UInt32) value                                    : (Object) value;                      }                  }                  else                  {                      var value = b != 10                          ? System.Convert.ToInt64("-" + text.Substring(3)' b)                          : Int64.Parse(text' CultureInfo.InvariantCulture);                      return suffix != "L" && value >= Int32.MinValue && value <= Int32.MaxValue                          ? (Int32) value                          : (Object) value;                  }              }
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: if (b == 10 && suffix == "M")              {                  return Decimal.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else if (b == 10 && (text.Contains(".") || suffix == "D" || suffix == "F"))              {                  return suffix == "F"                      ? (Object) Single.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture)                      : Double.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else              {                  if (text[0] != '-')                  {                      if (text[0] == '+')                      {                          text = text.Substring(1);                      }                      var value = b != 10                          ? System.Convert.ToUInt64(text.Substring(2)' b)                          : UInt64.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);                      if (suffix == "UL" || suffix == "LU")                      {                          return value;                      }                      else if (suffix == "U")                      {                          return value <= UInt32.MaxValue                              ? (UInt32) value                              : (Object) value;                      }                      else if (suffix == "L")                      {                          return value <= Int64.MaxValue                              ? (Int64) value                              : (Object) value;                      }                      else                      {                          return value <= Int32.MaxValue                              ? (Int32) value                              : value <= UInt32.MaxValue                                    ? (UInt32) value                                    : (Object) value;                      }                  }                  else                  {                      var value = b != 10                          ? System.Convert.ToInt64("-" + text.Substring(3)' b)                          : Int64.Parse(text' CultureInfo.InvariantCulture);                      return suffix != "L" && value >= Int32.MinValue && value <= Int32.MaxValue                          ? (Int32) value                          : (Object) value;                  }              }
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,Parse,The following statement contains a magic number: if (b == 10 && suffix == "M")              {                  return Decimal.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else if (b == 10 && (text.Contains(".") || suffix == "D" || suffix == "F"))              {                  return suffix == "F"                      ? (Object) Single.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture)                      : Double.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);              }              else              {                  if (text[0] != '-')                  {                      if (text[0] == '+')                      {                          text = text.Substring(1);                      }                      var value = b != 10                          ? System.Convert.ToUInt64(text.Substring(2)' b)                          : UInt64.Parse(text' NumberStyles.AllowExponent | NumberStyles.Number' CultureInfo.InvariantCulture);                      if (suffix == "UL" || suffix == "LU")                      {                          return value;                      }                      else if (suffix == "U")                      {                          return value <= UInt32.MaxValue                              ? (UInt32) value                              : (Object) value;                      }                      else if (suffix == "L")                      {                          return value <= Int64.MaxValue                              ? (Int64) value                              : (Object) value;                      }                      else                      {                          return value <= Int32.MaxValue                              ? (Int32) value                              : value <= UInt32.MaxValue                                    ? (UInt32) value                                    : (Object) value;                      }                  }                  else                  {                      var value = b != 10                          ? System.Convert.ToInt64("-" + text.Substring(3)' b)                          : Int64.Parse(text' CultureInfo.InvariantCulture);                      return suffix != "L" && value >= Int32.MinValue && value <= Int32.MaxValue                          ? (Int32) value                          : (Object) value;                  }              }
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,GetBase,The following statement contains a magic number: return b == "0B"                  ? 2                  : b == "0O"                        ? 8                        : b == "0X"                              ? 16                              : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,GetBase,The following statement contains a magic number: return b == "0B"                  ? 2                  : b == "0O"                        ? 8                        : b == "0X"                              ? 16                              : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,GetBase,The following statement contains a magic number: return b == "0B"                  ? 2                  : b == "0O"                        ? 8                        : b == "0X"                              ? 16                              : 10;
Magic Number,XSpect.Yacq.Expressions,NumberExpression,C:\repos\takeshik_yacq\Yacq\Expressions\NumberExpression.cs,GetBase,The following statement contains a magic number: return b == "0B"                  ? 2                  : b == "0O"                        ? 8                        : b == "0X"                              ? 16                              : 10;
Magic Number,XSpect.Yacq.LanguageServices,Grammar,C:\repos\takeshik_yacq\Yacq\LanguageServices\Grammar.cs,Add,The following statement contains a magic number: this.Add(category' (this.Keys.Where(k => k.Category == category).Max(k => (Nullable<Int32>) k.Priority) ?? 0) + 100' id' rule);
Magic Number,XSpect.Yacq.SystemObjects,DocumentSet,C:\repos\takeshik_yacq\Yacq\SystemObjects\DocumentSet.cs,GetXmlDocumentName,The following statement contains a magic number: return "Y:" +                  (key.LeftType != null                      ? key.LeftType.TryGetGenericTypeDefinition() == typeof(Static<>)                            ? "[" + GetXmlDocumentName(key.LeftType.GetGenericArguments()[0]).Substring(2) + "]."                            : GetXmlDocumentName(key.LeftType).Substring(2) + "."                      : ""                  ) +                  (key.DispatchType.HasFlag(DispatchTypes.Method)                      ? "(" + key.Name + ")"                      : key.Name                  );
Magic Number,XSpect.Yacq.SystemObjects,DocumentSet,C:\repos\takeshik_yacq\Yacq\SystemObjects\DocumentSet.cs,GetXmlDocumentName,The following statement contains a magic number: return "Y:" +                  (key.LeftType != null                      ? key.LeftType.TryGetGenericTypeDefinition() == typeof(Static<>)                            ? "[" + GetXmlDocumentName(key.LeftType.GetGenericArguments()[0]).Substring(2) + "]."                            : GetXmlDocumentName(key.LeftType).Substring(2) + "."                      : ""                  ) +                  (key.DispatchType.HasFlag(DispatchTypes.Method)                      ? "(" + key.Name + ")"                      : key.Name                  );
Magic Number,XSpect.Yacq.SystemObjects,ModuleLoader,C:\repos\takeshik_yacq\Yacq\SystemObjects\ModuleLoader.cs,Get,The following statement contains a magic number: switch (Regex.Match(name' @"(^[^:]+:)").Value)              {                  case FilePrefix:                      return GetFromFile(symbols' name.Substring(5));                  case ResourcePrefix:                      return GetFromResource(symbols' name.Substring(4));                  case CtsPrefix:                      return GetFromNamespace(symbols' name.Substring(4));                  default:                      return GetFromFile(symbols' name)                          ?? GetFromResource(symbols' name);              }
Magic Number,XSpect.Yacq.SystemObjects,ModuleLoader,C:\repos\takeshik_yacq\Yacq\SystemObjects\ModuleLoader.cs,Get,The following statement contains a magic number: switch (Regex.Match(name' @"(^[^:]+:)").Value)              {                  case FilePrefix:                      return GetFromFile(symbols' name.Substring(5));                  case ResourcePrefix:                      return GetFromResource(symbols' name.Substring(4));                  case CtsPrefix:                      return GetFromNamespace(symbols' name.Substring(4));                  default:                      return GetFromFile(symbols' name)                          ?? GetFromResource(symbols' name);              }
Magic Number,XSpect.Yacq.SystemObjects,ModuleLoader,C:\repos\takeshik_yacq\Yacq\SystemObjects\ModuleLoader.cs,Get,The following statement contains a magic number: switch (Regex.Match(name' @"(^[^:]+:)").Value)              {                  case FilePrefix:                      return GetFromFile(symbols' name.Substring(5));                  case ResourcePrefix:                      return GetFromResource(symbols' name.Substring(4));                  case CtsPrefix:                      return GetFromNamespace(symbols' name.Substring(4));                  default:                      return GetFromFile(symbols' name)                          ?? GetFromResource(symbols' name);              }
Magic Number,XSpect.Yacq.SystemObjects,YacqAssembly,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqAssembly.cs,DefineType,The following statement contains a magic number: var name =  ":Anonymous:" + Convert.ToBase64String(_sha.ComputeHash(Encoding.Unicode.GetBytes(                  String.Concat(members.Select(_ => "<" + _.Key + ":" + _.Value.AssemblyQualifiedName + ">"))              )))                  .Substring(0' 27)                  .Replace('+'' '-')                  .Replace('/'' '_');
Magic Number,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,LoadArgs,The following statement contains a magic number: indexes.ForEach(i =>              {                  switch (i)                  {                      case 0:                          generator.Emit(OpCodes.Ldarg_0);                          break;                      case 1:                          generator.Emit(OpCodes.Ldarg_1);                          break;                      case 2:                          generator.Emit(OpCodes.Ldarg_2);                          break;                      case 3:                          generator.Emit(OpCodes.Ldarg_3);                          break;                      default:                          if (i <= Int16.MaxValue)                          {                              generator.Emit(OpCodes.Ldarg_S' (Int16) i);                          }                          else                          {                              generator.Emit(OpCodes.Ldarg' i);                          }                          break;                  }              });
Magic Number,XSpect.Yacq.SystemObjects,YacqType,C:\repos\takeshik_yacq\Yacq\SystemObjects\YacqType.cs,LoadArgs,The following statement contains a magic number: indexes.ForEach(i =>              {                  switch (i)                  {                      case 0:                          generator.Emit(OpCodes.Ldarg_0);                          break;                      case 1:                          generator.Emit(OpCodes.Ldarg_1);                          break;                      case 2:                          generator.Emit(OpCodes.Ldarg_2);                          break;                      case 3:                          generator.Emit(OpCodes.Ldarg_3);                          break;                      default:                          if (i <= Int16.MaxValue)                          {                              generator.Emit(OpCodes.Ldarg_S' (Int16) i);                          }                          else                          {                              generator.Emit(OpCodes.Ldarg' i);                          }                          break;                  }              });
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Assign,The following statement contains a magic number: return (e.Arguments.At(-2).List(".")                      .Null(l => YacqBinder.IsInDynamicContext(s' l.First())                          ? Expression.Dynamic(                                YacqBinder.SetMember(s' l.Last().Id())'                                typeof(Object)'                                l.First().Reduce(s)'                                e.Arguments.Last().Reduce()                            )                          : null                      ) ?? e.Arguments.At(-2).Reduce(s).Let(l =>                          (Expression) Expression.Assign(l' e.Arguments.Last().Reduce(s' l.Type))                      )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "="' e.Arguments                            .SkipLast(2)                            .EndWith(_)                        )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Assign,The following statement contains a magic number: return (e.Arguments.At(-2).List(".")                      .Null(l => YacqBinder.IsInDynamicContext(s' l.First())                          ? Expression.Dynamic(                                YacqBinder.SetMember(s' l.Last().Id())'                                typeof(Object)'                                l.First().Reduce(s)'                                e.Arguments.Last().Reduce()                            )                          : null                      ) ?? e.Arguments.At(-2).Reduce(s).Let(l =>                          (Expression) Expression.Assign(l' e.Arguments.Last().Reduce(s' l.Type))                      )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "="' e.Arguments                            .SkipLast(2)                            .EndWith(_)                        )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Assign,The following statement contains a magic number: return (e.Arguments.At(-2).List(".")                      .Null(l => YacqBinder.IsInDynamicContext(s' l.First())                          ? Expression.Dynamic(                                YacqBinder.SetMember(s' l.Last().Id())'                                typeof(Object)'                                l.First().Reduce(s)'                                e.Arguments.Last().Reduce()                            )                          : null                      ) ?? e.Arguments.At(-2).Reduce(s).Let(l =>                          (Expression) Expression.Assign(l' e.Arguments.Last().Reduce(s' l.Type))                      )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "="' e.Arguments                            .SkipLast(2)                            .EndWith(_)                        )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Assign,The following statement contains a magic number: return (e.Arguments.At(-2).List(".")                      .Null(l => YacqBinder.IsInDynamicContext(s' l.First())                          ? Expression.Dynamic(                                YacqBinder.SetMember(s' l.Last().Id())'                                typeof(Object)'                                l.First().Reduce(s)'                                e.Arguments.Last().Reduce()                            )                          : null                      ) ?? e.Arguments.At(-2).Reduce(s).Let(l =>                          (Expression) Expression.Assign(l' e.Arguments.Last().Reduce(s' l.Type))                      )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "="' e.Arguments                            .SkipLast(2)                            .EndWith(_)                        )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Plus,The following statement contains a magic number: return e.Arguments.Any(a => a.Type(s) == typeof(String))                      ? YacqExpression.TypeCandidate(typeof(String)).Method(s' "Concat"' e.Arguments)                      : e.Arguments.Count == 1                            ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.UnaryOperation(s' ExpressionType.UnaryPlus)'                                        typeof(Object)'                                        e.Arguments[0].Reduce(s)                                    )                                  : Expression.UnaryPlus(e.Arguments[0].Reduce(s)                                        .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' false)))                              )                            : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.BinaryOperation(s' ExpressionType.Add)'                                        typeof(Object)'                                        e.Arguments.Take(2).ReduceAll(s)                                    )                                  : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                        .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                            .Let(_ => Expression.Add(a[0].TryConvert(_)' a[1].TryConvert(_)))                                        )                              ).Let(_ => e.Arguments.Count > 2                                  ? (Expression) YacqExpression.Function(s' "+"' e.Arguments                                      .Skip(2)                                      .StartWith(_)                                  )                                  : _                              );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Plus,The following statement contains a magic number: return e.Arguments.Any(a => a.Type(s) == typeof(String))                      ? YacqExpression.TypeCandidate(typeof(String)).Method(s' "Concat"' e.Arguments)                      : e.Arguments.Count == 1                            ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.UnaryOperation(s' ExpressionType.UnaryPlus)'                                        typeof(Object)'                                        e.Arguments[0].Reduce(s)                                    )                                  : Expression.UnaryPlus(e.Arguments[0].Reduce(s)                                        .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' false)))                              )                            : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.BinaryOperation(s' ExpressionType.Add)'                                        typeof(Object)'                                        e.Arguments.Take(2).ReduceAll(s)                                    )                                  : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                        .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                            .Let(_ => Expression.Add(a[0].TryConvert(_)' a[1].TryConvert(_)))                                        )                              ).Let(_ => e.Arguments.Count > 2                                  ? (Expression) YacqExpression.Function(s' "+"' e.Arguments                                      .Skip(2)                                      .StartWith(_)                                  )                                  : _                              );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Plus,The following statement contains a magic number: return e.Arguments.Any(a => a.Type(s) == typeof(String))                      ? YacqExpression.TypeCandidate(typeof(String)).Method(s' "Concat"' e.Arguments)                      : e.Arguments.Count == 1                            ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.UnaryOperation(s' ExpressionType.UnaryPlus)'                                        typeof(Object)'                                        e.Arguments[0].Reduce(s)                                    )                                  : Expression.UnaryPlus(e.Arguments[0].Reduce(s)                                        .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' false)))                              )                            : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.BinaryOperation(s' ExpressionType.Add)'                                        typeof(Object)'                                        e.Arguments.Take(2).ReduceAll(s)                                    )                                  : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                        .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                            .Let(_ => Expression.Add(a[0].TryConvert(_)' a[1].TryConvert(_)))                                        )                              ).Let(_ => e.Arguments.Count > 2                                  ? (Expression) YacqExpression.Function(s' "+"' e.Arguments                                      .Skip(2)                                      .StartWith(_)                                  )                                  : _                              );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Plus,The following statement contains a magic number: return e.Arguments.Any(a => a.Type(s) == typeof(String))                      ? YacqExpression.TypeCandidate(typeof(String)).Method(s' "Concat"' e.Arguments)                      : e.Arguments.Count == 1                            ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.UnaryOperation(s' ExpressionType.UnaryPlus)'                                        typeof(Object)'                                        e.Arguments[0].Reduce(s)                                    )                                  : Expression.UnaryPlus(e.Arguments[0].Reduce(s)                                        .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' false)))                              )                            : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.BinaryOperation(s' ExpressionType.Add)'                                        typeof(Object)'                                        e.Arguments.Take(2).ReduceAll(s)                                    )                                  : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                        .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                            .Let(_ => Expression.Add(a[0].TryConvert(_)' a[1].TryConvert(_)))                                        )                              ).Let(_ => e.Arguments.Count > 2                                  ? (Expression) YacqExpression.Function(s' "+"' e.Arguments                                      .Skip(2)                                      .StartWith(_)                                  )                                  : _                              );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,PlusAssign,The following statement contains a magic number: return e.Arguments.Any(a => a.Type(s) == typeof(String))                      ? YacqExpression.Function(s' "="'                            e.Arguments[0].Reduce(s)'                            YacqExpression.TypeCandidate(typeof(String)).Method(s' "Concat"' e.Arguments)                        )                      : e.Arguments[0].Reduce(s).Let(l =>                            e.Arguments.Count == 1                                ? YacqExpression.Function(s' "="'                                      l'                                      YacqExpression.Function(s' "+"' l).ReduceAndTryConvert(s' l.Type)                                  )                                : (e.Arguments.Count == 2                                      ? e.Arguments[1]                                      : YacqExpression.Function(s' "+"' e.Arguments.Skip(1))                                  ).Let(r =>                                      !YacqBinder.IsInDynamicContext(s' e.Arguments[0]' r) &&                                      l.Type == r.Type(s) &&                                      new []                                      {                                          typeof(Int16)'                                          typeof(UInt16)'                                          typeof(Int32)'                                          typeof(UInt32)'                                          typeof(Int64)'                                          typeof(UInt64)'                                          typeof(Single)'                                          typeof(Double)'                                      }.Contains(l.Type) ||                                      l.Type.GetMethod("op_Addition"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null                                          ? (Expression) Expression.AddAssign(l' r.Reduce(s))                                          : YacqExpression.Function(s' "="'                                                l'                                                ((Expression) YacqExpression.Function(s' "+"' e.Arguments[0]' r)).If(                                                    _ => !YacqBinder.IsInDynamicContext(s' r)'                                                    _ => _.ReduceAndTryConvert(s' l.Type)                                                )                                            )                                  )                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Minus,The following statement contains a magic number: return e.Arguments.Count == 1                      ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                            ? (Expression) Expression.Dynamic(                                  YacqBinder.UnaryOperation(s' ExpressionType.Negate)'                                  typeof(Object)'                                  e.Arguments[0].Reduce(s)                              )                            : Expression.Negate(e.Arguments[0].Reduce(s)                                  .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' true)))                              )                      : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Subtract)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.Subtract(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                        ).Let(_ => e.Arguments.Count > 2                            ? (Expression) YacqExpression.Function(s' "-"' e.Arguments                                .Skip(2)                                .StartWith(_)                            )                            : _                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Minus,The following statement contains a magic number: return e.Arguments.Count == 1                      ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                            ? (Expression) Expression.Dynamic(                                  YacqBinder.UnaryOperation(s' ExpressionType.Negate)'                                  typeof(Object)'                                  e.Arguments[0].Reduce(s)                              )                            : Expression.Negate(e.Arguments[0].Reduce(s)                                  .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' true)))                              )                      : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Subtract)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.Subtract(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                        ).Let(_ => e.Arguments.Count > 2                            ? (Expression) YacqExpression.Function(s' "-"' e.Arguments                                .Skip(2)                                .StartWith(_)                            )                            : _                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Minus,The following statement contains a magic number: return e.Arguments.Count == 1                      ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                            ? (Expression) Expression.Dynamic(                                  YacqBinder.UnaryOperation(s' ExpressionType.Negate)'                                  typeof(Object)'                                  e.Arguments[0].Reduce(s)                              )                            : Expression.Negate(e.Arguments[0].Reduce(s)                                  .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' true)))                              )                      : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Subtract)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.Subtract(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                        ).Let(_ => e.Arguments.Count > 2                            ? (Expression) YacqExpression.Function(s' "-"' e.Arguments                                .Skip(2)                                .StartWith(_)                            )                            : _                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Minus,The following statement contains a magic number: return e.Arguments.Count == 1                      ? YacqBinder.IsInDynamicContext(s' e.Arguments[0])                            ? (Expression) Expression.Dynamic(                                  YacqBinder.UnaryOperation(s' ExpressionType.Negate)'                                  typeof(Object)'                                  e.Arguments[0].Reduce(s)                              )                            : Expression.Negate(e.Arguments[0].Reduce(s)                                  .Let(_ => _.TryConvert(YacqExpression.ConvertNumericTypeForAlithmetics(_.Type' true)))                              )                      : (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Subtract)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.Subtract(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                        ).Let(_ => e.Arguments.Count > 2                            ? (Expression) YacqExpression.Function(s' "-"' e.Arguments                                .Skip(2)                                .StartWith(_)                            )                            : _                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,MinusAssign,The following statement contains a magic number: return e.Arguments[0].Reduce(s).Let(l =>                      e.Arguments.Count == 1                          ? YacqExpression.Function(s' "="'                                l'                                YacqExpression.Function(s' "-"' l).ReduceAndTryConvert(s' l.Type)                            )                          : (e.Arguments.Count == 2                                ? e.Arguments[1]                                : YacqExpression.Function(s' "+"' e.Arguments.Skip(1))                            ).Let(r =>                                !YacqBinder.IsInDynamicContext(s' e.Arguments[0]' r) &&                                l.Type == r.Type(s) &&                                new []                                {                                    typeof(Int16)'                                    typeof(UInt16)'                                    typeof(Int32)'                                    typeof(UInt32)'                                    typeof(Int64)'                                    typeof(UInt64)'                                    typeof(Single)'                                    typeof(Double)'                                }.Contains(l.Type) ||                                l.Type.GetMethod("op_Subtraction"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null                                    ? (Expression) Expression.SubtractAssign(l' r.Reduce(s))                                    : YacqExpression.Function(s' "="'                                          l'                                          ((Expression) YacqExpression.Function(s' "-"' e.Arguments[0]' r)).If(                                              _ => !YacqBinder.IsInDynamicContext(s' r)'                                              _ => _.ReduceAndTryConvert(s' l.Type)                                          )                                      )                            )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Multiply,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Multiply)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Multiply(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "*"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Multiply,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Multiply)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Multiply(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "*"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Multiply,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Multiply)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Multiply(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "*"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Multiply,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Multiply)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Multiply(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "*"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,MultiplyAssign,The following statement contains a magic number: return e.Arguments[0].Reduce(s).Let(l =>                      (e.Arguments.Count == 2                          ? e.Arguments[1]                          : YacqExpression.Function(s' "*"' e.Arguments.Skip(1))                      ).Let(r =>                          l.Type == r.Type(s) &&                          new []                          {                              typeof(Int16)'                              typeof(UInt16)'                              typeof(Int32)'                              typeof(UInt32)'                              typeof(Int64)'                              typeof(UInt64)'                              typeof(Single)'                              typeof(Double)'                          }.Contains(l.Type) ||                          l.Type.GetMethod("op_Multiply"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null                              ? (Expression) Expression.MultiplyAssign(l' r.Reduce(s))                              : YacqExpression.Function(s' "="'                                    l'                                    ((Expression) YacqExpression.Function(s' "*"' e.Arguments[0]' r)).If(                                        _ => !YacqBinder.IsInDynamicContext(s' r)'                                        _ => _.ReduceAndTryConvert(s' l.Type)                                    )                                )                      )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Divide,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Divide)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Divide(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "/"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Divide,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Divide)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Divide(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "/"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Divide,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Divide)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Divide(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "/"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Divide,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Divide)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Divide(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "/"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,DivideAssign,The following statement contains a magic number: return e.Arguments[0].Reduce(s).Let(l =>                      (e.Arguments.Count == 2                          ? e.Arguments[1]                          : YacqExpression.Function(s' "/"' e.Arguments.Skip(1))                      ).Let(r =>                          l.Type == r.Type(s) &&                          new []                          {                              typeof(Int16)'                              typeof(UInt16)'                              typeof(Int32)'                              typeof(UInt32)'                              typeof(Int64)'                              typeof(UInt64)'                              typeof(Single)'                              typeof(Double)'                          }.Contains(l.Type) ||                          l.Type.GetMethod("op_Division"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null                              ? (Expression) Expression.DivideAssign(l' r.Reduce(s))                              : YacqExpression.Function(s' "="'                                    l'                                    ((Expression) YacqExpression.Function(s' "/"' e.Arguments[0]' r)).If(                                        _ => !YacqBinder.IsInDynamicContext(s' r)'                                        _ => _.ReduceAndTryConvert(s' l.Type)                                    )                                )                      )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Power,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.Power)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.Power(                            e.Arguments[0].ReduceAndTryConvert(s' typeof(Double))'                            e.Arguments[1].ReduceAndTryConvert(s' typeof(Double))                        )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "**"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Power,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.Power)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.Power(                            e.Arguments[0].ReduceAndTryConvert(s' typeof(Double))'                            e.Arguments[1].ReduceAndTryConvert(s' typeof(Double))                        )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "**"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Power,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.Power)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.Power(                            e.Arguments[0].ReduceAndTryConvert(s' typeof(Double))'                            e.Arguments[1].ReduceAndTryConvert(s' typeof(Double))                        )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "**"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Power,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.Power)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.Power(                            e.Arguments[0].ReduceAndTryConvert(s' typeof(Double))'                            e.Arguments[1].ReduceAndTryConvert(s' typeof(Double))                        )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "**"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,PowerAssign,The following statement contains a magic number: return e.Arguments[0].Reduce(s).Let(l =>                      (e.Arguments.Count == 2                          ? e.Arguments[1]                          : YacqExpression.Function(s' "**"' e.Arguments.Skip(1))                      ).Let(r =>                          l.Type == r.Type(s) && l.Type == typeof(Double)                              ? (Expression) Expression.PowerAssign(l' r.Reduce(s))                              : YacqExpression.Function(s' "="'                                    l'                                    ((Expression) YacqExpression.Function(s' "**"' e.Arguments[0]' r)).If(                                        _ => !YacqBinder.IsInDynamicContext(s' r)'                                        _ => _.ReduceAndTryConvert(s' l.Type)                                    )                                )                      )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Modulo,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Modulo)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Modulo(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "%"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Modulo,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Modulo)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Modulo(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "%"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Modulo,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Modulo)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Modulo(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "%"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Modulo,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Modulo)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Modulo(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "%"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ModuloAssign,The following statement contains a magic number: return e.Arguments[0].Reduce(s).Let(l =>                      (e.Arguments.Count == 2                          ? e.Arguments[1]                          : YacqExpression.Function(s' "%"' e.Arguments.Skip(1))                      ).Let(r =>                          l.Type == r.Type(s) &&                          new []                          {                              typeof(Int16)'                              typeof(UInt16)'                              typeof(Int32)'                              typeof(UInt32)'                              typeof(Int64)'                              typeof(UInt64)'                              typeof(Single)'                              typeof(Double)'                          }.Contains(l.Type) ||                          l.Type.GetMethod("op_Modulus"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null                              ? (Expression) Expression.ModuloAssign(l' r.Reduce(s))                              : YacqExpression.Function(s' "="'                                    l'                                    ((Expression) YacqExpression.Function(s' "%"' e.Arguments[0]' r)).If(                                        _ => !YacqBinder.IsInDynamicContext(s' r)'                                        _ => _.ReduceAndTryConvert(s' l.Type)                                    )                                )                      )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LeftShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.LeftShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.LeftShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "<<"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LeftShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.LeftShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.LeftShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "<<"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LeftShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.LeftShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.LeftShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "<<"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LeftShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.LeftShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.LeftShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "<<"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LeftShiftAssign,The following statement contains a magic number: return e.Arguments[0].Reduce(s).Let(l =>                      (e.Arguments.Count == 2                          ? e.Arguments[1]                          : YacqExpression.Function(s' "<<"' e.Arguments.Skip(1))                      ).Let(r =>                          r.Type(s) == typeof(Int32) &&                          new []                          {                              typeof(SByte)'                              typeof(Byte)'                              typeof(Int16)'                              typeof(UInt16)'                              typeof(Int32)'                              typeof(UInt32)'                              typeof(Int64)'                              typeof(UInt64)'                          }.Contains(l.Type) ||                          l.Type.GetMethod("op_LeftShift"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null                              ? (Expression) Expression.LeftShiftAssign(l' r.Reduce(s))                              : YacqExpression.Function(s' "="'                                    l'                                    ((Expression) YacqExpression.Function(s' "<<"' e.Arguments[0]' r)).If(                                        _ => !YacqBinder.IsInDynamicContext(s' r)'                                        _ => _.ReduceAndTryConvert(s' l.Type)                                    )                                )                      )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,RightShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.RightShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.RightShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' ">>"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,RightShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.RightShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.RightShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' ">>"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,RightShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.RightShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.RightShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' ">>"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,RightShift,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                            YacqBinder.BinaryOperation(s' ExpressionType.RightShift)'                            typeof(Object)'                            e.Arguments.Take(2).ReduceAll(s)                        )                      : Expression.RightShift(e.Arguments[0].Reduce(s)' e.Arguments[1].ReduceAndTryConvert(s' typeof(Int32)))                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' ">>"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,RightShiftAssign,The following statement contains a magic number: return e.Arguments[0].Reduce(s).Let(l =>                      (e.Arguments.Count == 2                          ? e.Arguments[1]                          : YacqExpression.Function(s' ">>"' e.Arguments.Skip(1))                      ).Let(r =>                          r.Type(s) == typeof(Int32) &&                          new []                          {                              typeof(SByte)'                              typeof(Byte)'                              typeof(Int16)'                              typeof(UInt16)'                              typeof(Int32)'                              typeof(UInt32)'                              typeof(Int64)'                              typeof(UInt64)'                          }.Contains(l.Type) ||                          l.Type.GetMethod("op_RightShift"' BindingFlags.Public | BindingFlags.Static' null' new [] { l.Type' r.Type(s)' }' null) != null                              ? (Expression) Expression.RightShiftAssign(l' r.Reduce(s))                              : YacqExpression.Function(s' "="'                                    l'                                    ((Expression) YacqExpression.Function(s' ">>"' e.Arguments[0]' r)).If(                                        _ => !YacqBinder.IsInDynamicContext(s' r)'                                        _ => _.ReduceAndTryConvert(s' l.Type)                                    )                                )                      )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LessThan,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.LessThan)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.LessThan(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "<"' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "<"' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LessThan,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.LessThan)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.LessThan(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "<"' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "<"' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LessThan,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.LessThan)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.LessThan(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "<"' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "<"' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LessThanOrEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.LessThanOrEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.LessThanOrEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "<="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "<="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LessThanOrEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.LessThanOrEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.LessThanOrEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "<="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "<="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,LessThanOrEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.LessThanOrEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.LessThanOrEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "<="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "<="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GreaterThan,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.GreaterThan)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.GreaterThan(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' ">"' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' ">"' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GreaterThan,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.GreaterThan)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.GreaterThan(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' ">"' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' ">"' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GreaterThan,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.GreaterThan)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.GreaterThan(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' ">"' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' ">"' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GreaterThanOrEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.GreaterThanOrEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.GreaterThanOrEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' ">="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' ">="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GreaterThanOrEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.GreaterThanOrEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.GreaterThanOrEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' ">="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' ">="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GreaterThanOrEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.GreaterThanOrEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.GreaterThanOrEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' ">="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' ">="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Equal,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Equal)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.Equal(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "=="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "=="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Equal,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Equal)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.Equal(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "=="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "=="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Equal,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Equal)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.Equal(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "=="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "=="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,NotEqual,The following statement contains a magic number: return e.Arguments.Count == 1                      ? YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "!"' e.Arguments[0])                        )                      : e.Arguments.Count == 2                            ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.BinaryOperation(s' ExpressionType.NotEqual)'                                        typeof(Object)'                                        e.Arguments.Take(2).ReduceAll(s)                                    )                                  : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                        .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                            .Let(_ => Expression.NotEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                        )                            : YacqExpression.Function(s' "&&"'                                  YacqExpression.Function(s' "!="' e.Arguments[0]' e.Arguments[1])'                                  YacqExpression.Function(s' "!="' e.Arguments.Skip(1))                              );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,NotEqual,The following statement contains a magic number: return e.Arguments.Count == 1                      ? YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "!"' e.Arguments[0])                        )                      : e.Arguments.Count == 2                            ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.BinaryOperation(s' ExpressionType.NotEqual)'                                        typeof(Object)'                                        e.Arguments.Take(2).ReduceAll(s)                                    )                                  : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                        .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                            .Let(_ => Expression.NotEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                        )                            : YacqExpression.Function(s' "&&"'                                  YacqExpression.Function(s' "!="' e.Arguments[0]' e.Arguments[1])'                                  YacqExpression.Function(s' "!="' e.Arguments.Skip(1))                              );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,NotEqual,The following statement contains a magic number: return e.Arguments.Count == 1                      ? YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "!"' e.Arguments[0])                        )                      : e.Arguments.Count == 2                            ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                                  ? (Expression) Expression.Dynamic(                                        YacqBinder.BinaryOperation(s' ExpressionType.NotEqual)'                                        typeof(Object)'                                        e.Arguments.Take(2).ReduceAll(s)                                    )                                  : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                        .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                            .Let(_ => Expression.NotEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                        )                            : YacqExpression.Function(s' "&&"'                                  YacqExpression.Function(s' "!="' e.Arguments[0]' e.Arguments[1])'                                  YacqExpression.Function(s' "!="' e.Arguments.Skip(1))                              );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ReferenceEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Equal)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.ReferenceEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "==="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "==="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ReferenceEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Equal)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.ReferenceEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "==="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "==="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ReferenceEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.Equal)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.ReferenceEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "==="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "==="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ReferenceNotEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.NotEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.ReferenceNotEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "!=="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "!=="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ReferenceNotEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.NotEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.ReferenceNotEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "!=="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "!=="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ReferenceNotEqual,The following statement contains a magic number: return e.Arguments.Count == 2                      ? YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                            ? (Expression) Expression.Dynamic(                                  YacqBinder.BinaryOperation(s' ExpressionType.NotEqual)'                                  typeof(Object)'                                  e.Arguments.Take(2).ReduceAll(s)                              )                            : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                                  .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                      .Let(_ => Expression.ReferenceNotEqual(a[0].TryConvert(_)' a[1].TryConvert(_)))                                  )                      : YacqExpression.Function(s' "&&"'                            YacqExpression.Function(s' "!=="' e.Arguments[0]' e.Arguments[1])'                            YacqExpression.Function(s' "!=="' e.Arguments.Skip(1))                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,And,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.And(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,And,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.And(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,And,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.And(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,And,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.And(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,AndAssign,The following statement contains a magic number: return YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "&"' e.Arguments)                        )                      : Expression.AndAssign(e.Arguments[0].Reduce(s)' e.Arguments.Count == 2                            ? e.Arguments[1].Reduce(s)                            : YacqExpression.Function(s' "&"' e.Arguments.Skip(1)).Reduce(s)                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,AndAssign,The following statement contains a magic number: return YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "&"' e.Arguments)                        )                      : Expression.AndAssign(e.Arguments[0].Reduce(s)' e.Arguments.Count == 2                            ? e.Arguments[1].Reduce(s)                            : YacqExpression.Function(s' "&"' e.Arguments.Skip(1)).Reduce(s)                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Or,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Or(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "|"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Or,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Or(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "|"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Or,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Or(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "|"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Or,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.Or(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "|"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,OrAssign,The following statement contains a magic number: return YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "|"' e.Arguments)                        )                      : Expression.OrAssign(e.Arguments[0].Reduce(s)' e.Arguments.Count == 2                            ? e.Arguments[1].Reduce(s)                            : YacqExpression.Function(s' "|"' e.Arguments.Skip(1)).Reduce(s)                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,OrAssign,The following statement contains a magic number: return YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "|"' e.Arguments)                        )                      : Expression.OrAssign(e.Arguments[0].Reduce(s)' e.Arguments.Count == 2                            ? e.Arguments[1].Reduce(s)                            : YacqExpression.Function(s' "|"' e.Arguments.Skip(1)).Reduce(s)                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ExclusiveOr,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.ExclusiveOr)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.ExclusiveOr(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "^"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ExclusiveOr,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.ExclusiveOr)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.ExclusiveOr(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "^"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ExclusiveOr,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.ExclusiveOr)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.ExclusiveOr(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "^"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ExclusiveOr,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.ExclusiveOr)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.ExclusiveOr(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "^"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ExclusiveOrAssign,The following statement contains a magic number: return YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "^"' e.Arguments)                        )                      : Expression.ExclusiveOrAssign(e.Arguments[0].Reduce(s)' e.Arguments.Count == 2                            ? e.Arguments[1].Reduce(s)                            : YacqExpression.Function(s' "^"' e.Arguments.Skip(1)).Reduce(s)                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ExclusiveOrAssign,The following statement contains a magic number: return YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) YacqExpression.Function(s' "="'                            e.Arguments[0]'                            YacqExpression.Function(s' "^"' e.Arguments)                        )                      : Expression.ExclusiveOrAssign(e.Arguments[0].Reduce(s)' e.Arguments.Count == 2                            ? e.Arguments[1].Reduce(s)                            : YacqExpression.Function(s' "^"' e.Arguments.Skip(1)).Reduce(s)                        );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,AndAlso,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.AndAlso(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,AndAlso,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.AndAlso(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,AndAlso,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.AndAlso(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,AndAlso,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.And)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.AndAlso(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "&&"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,OrElse,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.OrElse(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "||"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,OrElse,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.OrElse(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "||"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,OrElse,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.OrElse(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "||"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,OrElse,The following statement contains a magic number: return (YacqBinder.IsInDynamicContext(s' e.Arguments.Take(2))                      ? (Expression) Expression.Dynamic(                              YacqBinder.BinaryOperation(s' ExpressionType.Or)'                              typeof(Object)'                              e.Arguments.Take(2).ReduceAll(s)                          )                      : new [] { e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s)' }                            .Let(a => YacqExpression.ConvertNumericTypeForAlithmetics(a[0].Type' a[1].Type)                                .Let(_ => Expression.OrElse(a[0].TryConvert(_)' a[1].TryConvert(_)))                            )                  ).Let(_ => e.Arguments.Count > 2                      ? (Expression) YacqExpression.Function(s' "||"' e.Arguments                              .Skip(2)                              .StartWith(_)                          )                      : _                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Coalesce,The following statement contains a magic number: return Expression.Coalesce(e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s))                      .Let(_ => e.Arguments.Count > 2                          ? (Expression) YacqExpression.Function(s' "??"' e.Arguments                                .Skip(2)                                .StartWith(_)                            )                          : _                      );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Coalesce,The following statement contains a magic number: return Expression.Coalesce(e.Arguments[0].Reduce(s)' e.Arguments[1].Reduce(s))                      .Let(_ => e.Arguments.Count > 2                          ? (Expression) YacqExpression.Function(s' "??"' e.Arguments                                .Skip(2)                                .StartWith(_)                            )                          : _                      );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,IsNotNull,The following statement contains a magic number: return e.Arguments.Count > 2                      ? YacqExpression.Function(s' "&&"'                            e.Arguments                                .Select(a => YacqExpression.Function(s' "!=="'                                    a'                                    Expression.Constant(null)                                ))  #if SILVERLIGHT                                .Cast<Expression>()  #endif                        )                      : YacqExpression.Function(s' "!=="'                            e.Arguments[0]'                            Expression.Constant(null)                       );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,IsNull,The following statement contains a magic number: return e.Arguments.Count > 2                      ? YacqExpression.Function(s' "||"'                            e.Arguments                                .Select(a => YacqExpression.Function(s' "==="'                                    a'                                    Expression.Constant(null)                                ))  #if SILVERLIGHT                                .Cast<Expression>()  #endif                          )                      : YacqExpression.Function(s' "==="'                            e.Arguments[0]'                            Expression.Constant(null)                       );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Dot,The following statement contains a magic number: if (e.Arguments.Count > 2)                  {                      return YacqExpression.Function(s' "."'                          e.Arguments                              .Skip(2)                              .StartWith(YacqExpression.Function(s' "."' e.Arguments[0]' e.Arguments[1]))                      );                  }
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Dot,The following statement contains a magic number: if (e.Arguments.Count > 2)                  {                      return YacqExpression.Function(s' "."'                          e.Arguments                              .Skip(2)                              .StartWith(YacqExpression.Function(s' "."' e.Arguments[0]' e.Arguments[1]))                      );                  }
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Let,The following statement contains a magic number: return e.Arguments.Any()                      ? e.Arguments[0] is VectorExpression                            ? (Expression) new SymbolTable(s).Let(s_ => ((VectorExpression) e.Arguments[0]).Elements                                  .SelectMany(_ => _.List(":").Let(l => l != null                                      ? new [] { l.First()' Expression.Default(((TypeCandidateExpression) l.Last().Reduce(s)).ElectedType)' }                                      : Arrays.From(_)                                  ))                                  .Buffer(2)                                  .Select(iv => iv[0].Let(i => iv[1].Let(v => i.Id().Let(n =>                                      v.Reduce(s_).Apply(r => s_.Add(n' r is YacqExpression                                          ? r                                          : ((Expression) Expression.Variable(r.Type' n)).If(                                                ve => YacqBinder.IsInDynamicContext(s_' v)'                                                ve => YacqExpression.Contextful(s_' ve' ContextType.Dynamic)                                            )                                      ))                                  ))))                                  .ToArray()                                  .Let(_ => Expression.Block(                                      s_.Literals.Values                                          .Choose(v => v as ParameterExpression                                              ?? (ParameterExpression) (v as ContextfulExpression).Null(ce => ce.Expression)                                          )'                                      (e.Arguments.Count > 1                                          ? e.Arguments                                                .Skip(1)                                                .ReduceAll(s_)                                          : Arrays.From(  #if SILVERLIGHT                                                (Expression)  #endif                                                Expression.Empty()                                            )                                      )                                          .StartWith(s_.Literals.Values                                              .Choose(v => v as ParameterExpression ?? (v as ContextfulExpression).Null(ce => ce.Expression))                                              .Zip(_.Where(a => !(a is YacqExpression))' (l' r) => YacqExpression.Function(s_' "="' l' r).Reduce(s))                                              .ToArray()                                          )                                  ))                              )                            : Expression.Block(e.Arguments.ReduceAll(s))                      : Expression.Empty();
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Use,The following statement contains a magic number: return e.Arguments.Any()                      ? e.Arguments[0] is VectorExpression                            ? (Expression) new SymbolTable(s).Let(s_ => ((VectorExpression) e.Arguments[0]).Elements                                  .SelectMany(_ => _.List(":").Let(l => l != null                                      ? new [] { l.First()' Expression.Default(((TypeCandidateExpression) l.Last().Reduce(s)).ElectedType)' }                                      : Arrays.From(_)                                  ))                                  .Buffer(2)                                  .Select(iv => iv[0].Let(i => iv[1].Let(v => i.Id().Let(n =>                                      v.Reduce(s_).Apply(r => s_.Add(n' r is YacqExpression ? r : Expression.Variable(r.Type' n)))                                  ))))                                  .ToArray()                                  .Let(_ => Expression.Block(                                      s_.Literals.Values                                          .OfType<ParameterExpression>()'                                      Arrays.From(                                          Expression.Block(                                              e.Arguments.Count > 1                                                  ? e.Arguments                                                        .Skip(1)                                                        .ReduceAll(s_)                                                  : Arrays.From(  #if SILVERLIGHT                                                        (Expression)  #endif                                                        Expression.Empty()                                                    )                                          )                                          .Method(s' "finally"'                                              s_.Literals.Values                                                  .OfType<ParameterExpression>()                                                  .Where(p => typeof(IDisposable).IsAssignableFrom(p.Type))                                                  .Select(p => YacqExpression.Function(s' "?"' p)                                                      .Method(s' "then"'                                                          Expression.Convert(p' typeof(IDisposable))                                                              .Method(s' "Dispose")                                                      )                                                  )  #if SILVERLIGHT                                                  .Cast<Expression>()  #endif                                          )                                          .Reduce(s)                                      )                                          .StartWith(s_.Literals.Values                                              .OfType<ParameterExpression>()                                              .Zip(_.Where(a => !(a is YacqExpression))' (l' r) => YacqExpression.Function(s_' "="' l' r).Reduce(s))                                              .ToArray()                                          )                                  ))                              )                            : Expression.Block(e.Arguments.ReduceAll(s))                      : Expression.Empty();
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateTuple,The following statement contains a magic number: return e.Arguments.Count <= 8                      ? YacqExpression.TypeCandidate(typeof(Tuple)).Method(s' "Create"' e.Arguments)                      : e.Arguments                            .Take(7)                            .ReduceAll(s)                            .EndWith(YacqExpression.Function(s' "tuple"' e.Arguments.Skip(7)))                            .ToArray()                            .Let(_ => YacqExpression.TypeCandidate(typeof(Tuple<'''''''>)                                .MakeGenericType(_.Select(a => a.Type).ToArray())                            ).Method(s' "new"' _));
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateTuple,The following statement contains a magic number: return e.Arguments.Count <= 8                      ? YacqExpression.TypeCandidate(typeof(Tuple)).Method(s' "Create"' e.Arguments)                      : e.Arguments                            .Take(7)                            .ReduceAll(s)                            .EndWith(YacqExpression.Function(s' "tuple"' e.Arguments.Skip(7)))                            .ToArray()                            .Let(_ => YacqExpression.TypeCandidate(typeof(Tuple<'''''''>)                                .MakeGenericType(_.Select(a => a.Type).ToArray())                            ).Method(s' "new"' _));
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateTuple,The following statement contains a magic number: return e.Arguments.Count <= 8                      ? YacqExpression.TypeCandidate(typeof(Tuple)).Method(s' "Create"' e.Arguments)                      : e.Arguments                            .Take(7)                            .ReduceAll(s)                            .EndWith(YacqExpression.Function(s' "tuple"' e.Arguments.Skip(7)))                            .ToArray()                            .Let(_ => YacqExpression.TypeCandidate(typeof(Tuple<'''''''>)                                .MakeGenericType(_.Select(a => a.Type).ToArray())                            ).Method(s' "new"' _));
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateAnonymousInstance,The following statement contains a magic number: return e.Arguments                      .Buffer(2)                      .Select(es => Tuple.Create(es[0].Id()' es[1].Reduce(s)))                      .Let(ms => s.Resolve("*assembly*").Evaluate<YacqAssembly>()                          .TryDefineType(ms.ToDictionary(_ => _.Item1' _ => _.Item2.Type))                          .Create(s)                          .Let(nt => Expression.New(                              nt.GetConstructors()[0]'                              ms.Select(_ => _.Item2)'                              ms.Select(_ => nt.GetProperty(_.Item1))  #if SILVERLIGHT                                  .Cast<MemberInfo>()  #endif                          ))                      );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateType,The following statement contains a magic number: e.Arguments                      .Skip(1)                      .OfType<ListExpression>()                      .ForEach(l =>                      {                          var rest = l.Elements                              .SkipWhile(_ => _.Id().Let(i => i != "member" && i != "method"))                              .Skip(1)                              .ToArray();                          var attributes = l.Elements                              .SkipLast(rest.Length)                              .OfType<IdentifierExpression>()                              .Select(_ => _.Name)                              .ToArray()                              .Let(_ =>                                  (_.Last() == "method"                                      ? MemberTypes.Method                                      : rest                                            .OfType<IdentifierExpression>()                                            .Any(i => i.Name == "get" || i.Name == "set")                                                ? MemberTypes.Property                                                : MemberTypes.Field                                  )                                  .Let(mt => Tuple.Create(mt' _.Any()                                      ? Enum.Parse(                                            mt == MemberTypes.Field                                                ? typeof(FieldAttributes)                                                : typeof(MethodAttributes)'                                            _.SkipLast(1).Stringify("'")'                                            true                                        )                                      : null                                  ))                              )                              .If(                                  _ => _.Item1 == MemberTypes.Method && rest.First().Id() == "new"'                                  _ => Tuple.Create(MemberTypes.Constructor' _.Item2)                              );                          switch (attributes.Item1)                          {                              case MemberTypes.Field:                                  rest[0].List(":").Let(es => type.DefineField(                                      es.First().Id()'                                      ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                      (FieldAttributes) (attributes.Item2 ?? FieldAttributes.Public)'                                      rest.ElementAtOrDefault(1)                                  ));                                  break;                              case MemberTypes.Property:                                  rest[0].List(":").Let(es => type.DefineProperty(                                      es.First().Id()'                                      ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                      (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                      rest[1].Id().Let(i => i != "get" && i != "set") ? rest[1] : null'                                      rest.Any(_ => _.Id() == "get")                                          ? rest                                                .SkipWhile(_ => _.Id() != "get")                                                .Skip(1)                                                .If(                                                    _ => _.Any() && _.First().Id() != "set"'                                                    _ => _.First()'                                                    _ => YacqExpression.Ignore()                                                )                                          : null'                                      rest.Any(_ => _.Id() == "set")                                          ? rest                                                .SkipWhile(_ => _.Id() != "set")                                                .Skip(1)                                                .If(                                                    _ => _.Any() && _.First().Id() != "get"'                                                    _ => _.First()'                                                    _ => YacqExpression.Ignore()                                                )                                          : null                                  ));                                  break;                              case MemberTypes.Method:                                  (rest[0].List(":") ?? new [] { rest[0]' YacqExpression.TypeCandidate(typeof(void))' })                                      .Let(es => type.DefineMethod(                                          es.First().Id()'                                          (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                          ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                          ((VectorExpression) rest[1]).Elements                                              .ReduceAll(s)                                              .OfType<TypeCandidateExpression>()                                              .Select(_ => _.ElectedType)                                              .ToArray()'                                          rest[2]                                      ));                                  break;                              case MemberTypes.Constructor:                                  type.DefineConstructor(                                      (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                      ((VectorExpression) rest[1]).Elements                                          .ReduceAll(s)                                          .OfType<TypeCandidateExpression>()                                          .Select(_ => _.ElectedType)                                          .ToArray()'                                      rest[2]                                  );                                  break;                          }                      });
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateType,The following statement contains a magic number: e.Arguments                      .Skip(1)                      .OfType<ListExpression>()                      .ForEach(l =>                      {                          var rest = l.Elements                              .SkipWhile(_ => _.Id().Let(i => i != "member" && i != "method"))                              .Skip(1)                              .ToArray();                          var attributes = l.Elements                              .SkipLast(rest.Length)                              .OfType<IdentifierExpression>()                              .Select(_ => _.Name)                              .ToArray()                              .Let(_ =>                                  (_.Last() == "method"                                      ? MemberTypes.Method                                      : rest                                            .OfType<IdentifierExpression>()                                            .Any(i => i.Name == "get" || i.Name == "set")                                                ? MemberTypes.Property                                                : MemberTypes.Field                                  )                                  .Let(mt => Tuple.Create(mt' _.Any()                                      ? Enum.Parse(                                            mt == MemberTypes.Field                                                ? typeof(FieldAttributes)                                                : typeof(MethodAttributes)'                                            _.SkipLast(1).Stringify("'")'                                            true                                        )                                      : null                                  ))                              )                              .If(                                  _ => _.Item1 == MemberTypes.Method && rest.First().Id() == "new"'                                  _ => Tuple.Create(MemberTypes.Constructor' _.Item2)                              );                          switch (attributes.Item1)                          {                              case MemberTypes.Field:                                  rest[0].List(":").Let(es => type.DefineField(                                      es.First().Id()'                                      ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                      (FieldAttributes) (attributes.Item2 ?? FieldAttributes.Public)'                                      rest.ElementAtOrDefault(1)                                  ));                                  break;                              case MemberTypes.Property:                                  rest[0].List(":").Let(es => type.DefineProperty(                                      es.First().Id()'                                      ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                      (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                      rest[1].Id().Let(i => i != "get" && i != "set") ? rest[1] : null'                                      rest.Any(_ => _.Id() == "get")                                          ? rest                                                .SkipWhile(_ => _.Id() != "get")                                                .Skip(1)                                                .If(                                                    _ => _.Any() && _.First().Id() != "set"'                                                    _ => _.First()'                                                    _ => YacqExpression.Ignore()                                                )                                          : null'                                      rest.Any(_ => _.Id() == "set")                                          ? rest                                                .SkipWhile(_ => _.Id() != "set")                                                .Skip(1)                                                .If(                                                    _ => _.Any() && _.First().Id() != "get"'                                                    _ => _.First()'                                                    _ => YacqExpression.Ignore()                                                )                                          : null                                  ));                                  break;                              case MemberTypes.Method:                                  (rest[0].List(":") ?? new [] { rest[0]' YacqExpression.TypeCandidate(typeof(void))' })                                      .Let(es => type.DefineMethod(                                          es.First().Id()'                                          (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                          ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                          ((VectorExpression) rest[1]).Elements                                              .ReduceAll(s)                                              .OfType<TypeCandidateExpression>()                                              .Select(_ => _.ElectedType)                                              .ToArray()'                                          rest[2]                                      ));                                  break;                              case MemberTypes.Constructor:                                  type.DefineConstructor(                                      (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                      ((VectorExpression) rest[1]).Elements                                          .ReduceAll(s)                                          .OfType<TypeCandidateExpression>()                                          .Select(_ => _.ElectedType)                                          .ToArray()'                                      rest[2]                                  );                                  break;                          }                      });
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Switch,The following statement contains a magic number: return Expression.Switch(                      e.Left.Reduce(s)'                      e.Arguments.Count % 2 == 1                          ? e.Arguments.Last().Reduce(s)                          : null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(_ => Expression.SwitchCase(                              _[1].Reduce(s)'                              _[0] is VectorExpression                                  ? ((VectorExpression) _[0]).Elements.ReduceAll(s)                                  : Arrays.From(_[0].Reduce(s))                          ))                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Switch,The following statement contains a magic number: return Expression.Switch(                      e.Left.Reduce(s)'                      e.Arguments.Count % 2 == 1                          ? e.Arguments.Last().Reduce(s)                          : null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(_ => Expression.SwitchCase(                              _[1].Reduce(s)'                              _[0] is VectorExpression                                  ? ((VectorExpression) _[0]).Elements.ReduceAll(s)                                  : Arrays.From(_[0].Reduce(s))                          ))                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Switch,The following statement contains a magic number: return Expression.Switch(                      e.Left.Reduce(s)'                      e.Arguments.Count % 2 == 1                          ? e.Arguments.Last().Reduce(s)                          : null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(_ => Expression.SwitchCase(                              _[1].Reduce(s)'                              _[0] is VectorExpression                                  ? ((VectorExpression) _[0]).Elements.ReduceAll(s)                                  : Arrays.From(_[0].Reduce(s))                          ))                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,SwitchVoid,The following statement contains a magic number: return Expression.Switch(                      typeof(void)'                      e.Left.Reduce(s)'                      e.Arguments.Count % 2 == 1                          ? e.Arguments.Last().Reduce(s)                          : null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(_ => Expression.SwitchCase(                              _[1].Reduce(s)'                              _[0] is VectorExpression                                  ? ((VectorExpression) _[0]).Elements.ReduceAll(s)                                  : Arrays.From(_[0].Reduce(s))                          ))                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,SwitchVoid,The following statement contains a magic number: return Expression.Switch(                      typeof(void)'                      e.Left.Reduce(s)'                      e.Arguments.Count % 2 == 1                          ? e.Arguments.Last().Reduce(s)                          : null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(_ => Expression.SwitchCase(                              _[1].Reduce(s)'                              _[0] is VectorExpression                                  ? ((VectorExpression) _[0]).Elements.ReduceAll(s)                                  : Arrays.From(_[0].Reduce(s))                          ))                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,SwitchVoid,The following statement contains a magic number: return Expression.Switch(                      typeof(void)'                      e.Left.Reduce(s)'                      e.Arguments.Count % 2 == 1                          ? e.Arguments.Last().Reduce(s)                          : null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(_ => Expression.SwitchCase(                              _[1].Reduce(s)'                              _[0] is VectorExpression                                  ? ((VectorExpression) _[0]).Elements.ReduceAll(s)                                  : Arrays.From(_[0].Reduce(s))                          ))                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,Lock,The following statement contains a magic number: return YacqExpression.Identifier(s' ".lock-" + Guid.NewGuid().ToString("n").Substring(0' 8)).Let(i =>                      YacqExpression.Function(s' "let"'                          YacqExpression.Vector(s' i' e.Arguments[0])'                          YacqExpression.Function(s' "let"'                              YacqExpression.TypeCandidate(typeof(Monitor))                                  .Method(s' "Enter"' i)'                              e.Left                          )                              .Method(s' "finally"'                                  YacqExpression.TypeCandidate(typeof(Monitor))                                      .Method(s' "Exit"' i)                              )                      )                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,InitializeInstance,The following statement contains a magic number: return e.Left.Reduce(s).Let(l => l is NewExpression                      ? (Expression) Expression.MemberInit(                            (NewExpression) l'                            e.Arguments                                .Buffer(2)                                .Select(p => Expression.Bind(                                    l.Type.GetMember(                                        p[0].Id()'                                        BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy                                    ).Single()'                                    p[1].Reduce(s)                                ))  #if SILVERLIGHT                                .Cast<MemberBinding>()  #endif                        )                      : e                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,DefineIn,The following statement contains a magic number: var isLiteral = !(body as AmbiguousLambdaExpression).Null(l => l.UnfixedParameters.Count() == 3);
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,ForceDefineIn,The following statement contains a magic number: var isLiteral = !(body as AmbiguousLambdaExpression).Null(l => l.UnfixedParameters.Count() == 3);
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GetMembersAndSymbols,The following statement contains a magic number: return Expression.Constant(e.Left.Type(s).Let(lt =>                      DispatchExpression.GetMembers(s' lt)                          .Where(m => m.GetAccessibility() == MemberAccessibilities.Public && !m.IsSpecialName())                          .OrderBy(m => m is MethodInfo                              ? ((MethodInfo) m).IsExtensionMethod()                                    ? 2                                    : 1                              : 0                          )                          .ThenBy(m => m.Name)                          .Select(m => m is MethodBase                              ? "("+ m.Name + ")"                              : m.Name                          )                          .Concat(s.AllKeys                              .Where(_ => _.TypeMatch(lt))                              .OrderBy(_ => _.DispatchType.HasFlag(DispatchTypes.Member)                                  ? 0                                  : 1                              )                              .ThenBy(m => m.Name)                              .Select(_ => _.DispatchType.HasFlag(DispatchTypes.Member)                                  ? _.Name                                  : "(" + _.Name + ")"                              )                          )                          .Distinct()                  ));
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GetStaticMembersAndSymbols,The following statement contains a magic number: return Expression.Constant(((TypeCandidateExpression) e.Left.Reduce(s)).Candidates                      .Select(Static.Type)                      .ToArray()                      .Let(ts =>                      DispatchExpression.GetMembers(s' ts)                          .Where(m => m.GetAccessibility() == MemberAccessibilities.Public && !m.IsSpecialName())                          .OrderBy(m => m is MethodInfo                              ? ((MethodInfo) m).IsExtensionMethod()                                    ? 2                                    : 1                              : 0                          )                          .ThenBy(m => m.Name)                          .Select(m => m is MethodBase                              ? "(" + m.Name + ")"                              : m.Name                          )                          .Concat(s.AllKeys                              .Where(_ => ts.Any(_.TypeMatch))                              .OrderBy(_ => _.DispatchType.HasFlag(DispatchTypes.Member)                                  ? 0                                  : 1                              )                              .ThenBy(m => m.Name)                              .Select(_ => _.DispatchType.HasFlag(DispatchTypes.Member)                                  ? _.Name                                  : "(" + _.Name + ")"                              )                          )                          .Distinct()                  ));
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,_Try,The following statement contains a magic number: return Expression.MakeTry(                      returnType'                      e.Left.Reduce(s)'                      null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(c => (c.First() as VectorExpression)                              .Null(v => (IList<Expression>) v.Elements' new [] { c.First()' })                              .Let(ves => (ves[0].List(":").If(                                      les => les != null'                                      les => new SymbolTable(s)                                      {                                          {les.First().Id()' Expression.Parameter(                                              ((TypeCandidateExpression) les.Last().Reduce(s)).ElectedType'                                              les.First().Id()                                          )}                                      }                                          .Let(ns => Expression.Catch(                                              (ParameterExpression) ns.Literals.Values.Single()'                                              c.Last().Reduce(ns)'                                              ves.Count > 1 ? ves[1].Reduce(ns) : null                                          ))'                                      les => Expression.Catch(                                          ((TypeCandidateExpression) ves[0].Reduce(s)).ElectedType'                                          c.Last().Reduce(s)'                                          ves.Count > 1 ? ves[1].Reduce(s) : null                                      )                                  )                              ))                          )                          .If(_ => e.Arguments.Count % 2 == 1' _ =>                              _.StartWith(Expression.Catch(                                  typeof(Exception)'                                  e.Arguments.Last().Reduce(s))                              )                          )                          .ToArray()                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,_Try,The following statement contains a magic number: return Expression.MakeTry(                      returnType'                      e.Left.Reduce(s)'                      null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(c => (c.First() as VectorExpression)                              .Null(v => (IList<Expression>) v.Elements' new [] { c.First()' })                              .Let(ves => (ves[0].List(":").If(                                      les => les != null'                                      les => new SymbolTable(s)                                      {                                          {les.First().Id()' Expression.Parameter(                                              ((TypeCandidateExpression) les.Last().Reduce(s)).ElectedType'                                              les.First().Id()                                          )}                                      }                                          .Let(ns => Expression.Catch(                                              (ParameterExpression) ns.Literals.Values.Single()'                                              c.Last().Reduce(ns)'                                              ves.Count > 1 ? ves[1].Reduce(ns) : null                                          ))'                                      les => Expression.Catch(                                          ((TypeCandidateExpression) ves[0].Reduce(s)).ElectedType'                                          c.Last().Reduce(s)'                                          ves.Count > 1 ? ves[1].Reduce(s) : null                                      )                                  )                              ))                          )                          .If(_ => e.Arguments.Count % 2 == 1' _ =>                              _.StartWith(Expression.Catch(                                  typeof(Exception)'                                  e.Arguments.Last().Reduce(s))                              )                          )                          .ToArray()                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,_Try,The following statement contains a magic number: return Expression.MakeTry(                      returnType'                      e.Left.Reduce(s)'                      null'                      null'                      e.Arguments                          .SkipLast(e.Arguments.Count % 2)                          .Buffer(2)                          .Select(c => (c.First() as VectorExpression)                              .Null(v => (IList<Expression>) v.Elements' new [] { c.First()' })                              .Let(ves => (ves[0].List(":").If(                                      les => les != null'                                      les => new SymbolTable(s)                                      {                                          {les.First().Id()' Expression.Parameter(                                              ((TypeCandidateExpression) les.Last().Reduce(s)).ElectedType'                                              les.First().Id()                                          )}                                      }                                          .Let(ns => Expression.Catch(                                              (ParameterExpression) ns.Literals.Values.Single()'                                              c.Last().Reduce(ns)'                                              ves.Count > 1 ? ves[1].Reduce(ns) : null                                          ))'                                      les => Expression.Catch(                                          ((TypeCandidateExpression) ves[0].Reduce(s)).ElectedType'                                          c.Last().Reduce(s)'                                          ves.Count > 1 ? ves[1].Reduce(s) : null                                      )                                  )                              ))                          )                          .If(_ => e.Arguments.Count % 2 == 1' _ =>                              _.StartWith(Expression.Catch(                                  typeof(Exception)'                                  e.Arguments.Last().Reduce(s))                              )                          )                          .ToArray()                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GetIdentifierFragments,The following statement contains a magic number: return expression.List(".").Null(l => l                      .Expand(_ => _ is ListExpression                          ? ((ListExpression) _).Elements                          : Enumerable.Empty<Expression>()                      )                      .OfType<IdentifierExpression>()                      .Select(_ => _.Name)                      .Where(_ => _ != ".")                      .ToArray()                      .Let(_ => _.TakeLast(2).Concat(_.SkipLast(2).Reverse()))'                      new [] { expression.Id()' }                  );
Magic Number,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,GetIdentifierFragments,The following statement contains a magic number: return expression.List(".").Null(l => l                      .Expand(_ => _ is ListExpression                          ? ((ListExpression) _).Elements                          : Enumerable.Empty<Expression>()                      )                      .OfType<IdentifierExpression>()                      .Select(_ => _.Name)                      .Where(_ => _ != ".")                      .ToArray()                      .Let(_ => _.TakeLast(2).Concat(_.SkipLast(2).Reverse()))'                      new [] { expression.Id()' }                  );
Duplicate Code,XSpect.Yacq.Expressions,YacqExpression,C:\repos\takeshik_yacq\Yacq\Expressions\ContextfulExpression.cs,ConvertNumericTypeForAlithmetics,The method contains a code clone-set at the following line numbers (starting from the method definition): ((23' 42)' (88' 107))
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(from))              {                  case -1:                      switch (Math.Sign(to))                      {                          case -1:                              return from >= to                                  ? list.Skip(list.Count + to).Take(from - to + 1).Reverse()                                  : list.Skip(list.Count + from).Take(to - from + 1);                          case 0:                              return list.Skip(list.Count + from).EndWith(list[0]);                          case 1:                              return list.Skip(list.Count + from).Concat(list.Take(to + 1));                      }                      break;                  case 0:                      switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Reverse().StartWith(list[0]);                          case 0:                              return list.Take(1);                          case 1:                              return list.Take(to + 1);                      }                      break;                  case 1:                      switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Concat(list.Take(from + 1)).Reverse();                          case 0:                              return list.Take(from + 1).Reverse();                          case 1:                              return from <= to                                  ? list.Skip(from).Take(to - from + 1)                                  : list.Skip(to).Take(from - to + 1).Reverse();                      }                      break;              }
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return from >= to                                  ? list.Skip(list.Count + to).Take(from - to + 1).Reverse()                                  : list.Skip(list.Count + from).Take(to - from + 1);                          case 0:                              return list.Skip(list.Count + from).EndWith(list[0]);                          case 1:                              return list.Skip(list.Count + from).Concat(list.Take(to + 1));                      }
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Reverse().StartWith(list[0]);                          case 0:                              return list.Take(1);                          case 1:                              return list.Take(to + 1);                      }
Missing Default,XSpect,Lists,C:\repos\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Concat(list.Take(from + 1)).Reverse();                          case 0:                              return list.Take(from + 1).Reverse();                          case 1:                              return from <= to                                  ? list.Skip(from).Take(to - from + 1)                                  : list.Skip(to).Take(from - to + 1).Reverse();                      }
Missing Default,XSpect.Yacq.Dynamic,YacqBinaryOperationBinder,C:\repos\takeshik_yacq\Yacq\Dynamic\YacqBinaryOperationBinder.cs,GetSymbolName,The following switch statement is missing a default case: switch (operation)              {                  case ExpressionType.Add:                      return "+";                  case ExpressionType.And:                      return "&";                  case ExpressionType.AndAlso:                      return "&&";                  case ExpressionType.Coalesce:                      return "??";                  case ExpressionType.Divide:                      return "/";                  case ExpressionType.Equal:                      return "==";                  case ExpressionType.ExclusiveOr:                      return "^";                  case ExpressionType.GreaterThan:                      return ">";                  case ExpressionType.GreaterThanOrEqual:                      return ">=";                  case ExpressionType.LeftShift:                      return "<<";                  case ExpressionType.LessThan:                      return "<";                  case ExpressionType.LessThanOrEqual:                      return "<=";                  case ExpressionType.Modulo:                      return "%";                  case ExpressionType.Multiply:                      return "*";                  case ExpressionType.MultiplyChecked:                      return "*";                  case ExpressionType.NotEqual:                      return "!=";                  case ExpressionType.Or:                      return "|";                  case ExpressionType.OrElse:                      return "|";                  case ExpressionType.Power:                      return "**";                  case ExpressionType.RightShift:                      return ">>";                  case ExpressionType.Subtract:                      return "-";                  case ExpressionType.SubtractChecked:                      return "-";                  case ExpressionType.Assign:                      return "=";                  case ExpressionType.AddAssign:                      return "+=";                  case ExpressionType.AndAssign:                      return "&=";                  case ExpressionType.DivideAssign:                      return "/=";                  case ExpressionType.ExclusiveOrAssign:                      return "^=";                  case ExpressionType.LeftShiftAssign:                      return "<<=";                  case ExpressionType.ModuloAssign:                      return "&=";                  case ExpressionType.MultiplyAssign:                      return "*=";                  case ExpressionType.OrAssign:                      return "|=";                  case ExpressionType.PowerAssign:                      return "**=";                  case ExpressionType.RightShiftAssign:                      return ">>=";                  case ExpressionType.SubtractAssign:                      return "-=";                  case ExpressionType.AddAssignChecked:                      return "+=";                  case ExpressionType.MultiplyAssignChecked:                      return "*=";                  case ExpressionType.SubtractAssignChecked:                      return "-=";              }
Missing Default,XSpect.Yacq.Dynamic,YacqUnaryOperationBinder,C:\repos\takeshik_yacq\Yacq\Dynamic\YacqUnaryOperationBinder.cs,GetSymbolName,The following switch statement is missing a default case: switch (operation)              {                  case ExpressionType.Negate:                      return "-";                  case ExpressionType.UnaryPlus:                      return "+";                  case ExpressionType.NegateChecked:                      return "-";                  case ExpressionType.Not:                      return "!";                  case ExpressionType.Quote:                      return "quote";                  case ExpressionType.Decrement:                      return "--";                  case ExpressionType.Increment:                      return "++";                  case ExpressionType.PreIncrementAssign:                      return "++=";                  case ExpressionType.PreDecrementAssign:                      return "--=";                  case ExpressionType.PostIncrementAssign:                      return "=++";                  case ExpressionType.PostDecrementAssign:                      return "=--";                  case ExpressionType.OnesComplement:                      return "~";              }
Missing Default,XSpect.Yacq.Serialization,Node,C:\repos\takeshik_yacq\Yacq\Serialization\Add.cs,Serialize,The following switch statement is missing a default case: switch (expr.Binder.GetType().Name)                      {                          case "YacqBinaryOperationBinder":                              return DynamicBinaryOperation(expr);                          case "YacqConvertBinder":                              return DynamicConvert(expr);                          case "YacqGetIndexBinder":                              return DynamicGetIndex(expr);                          case "YacqGetMemberBinder":                              return DynamicGetMember(expr);                          case "YacqInvokeBinder":                              return DynamicInvoke(expr);                          case "YacqInvokeMemberBinder":                              return DynamicInvokeMember(expr);                          case "YacqSetIndexBinder":                              return DynamicSetIndex(expr);                          case "YacqSetMemberBinder":                              return DynamicSetMember(expr);                          case "YacqUnaryOperationBinder":                              return DynamicUnaryOperation(expr);                      }
Missing Default,XSpect.Yacq.Serialization,Node,C:\repos\takeshik_yacq\Yacq\Serialization\Add.cs,Serialize,The following switch statement is missing a default case: switch (expression.GetType().Name)                          {                              case "AmbiguousLambdaExpression":                                  return AmbiguousLambda((AmbiguousLambdaExpression) expression);                              case "AmbiguousParameterExpression":                                  return AmbiguousParameter((AmbiguousParameterExpression) expression);                              case "ContextfulExpression":                                  return Contextful((ContextfulExpression) expression);                              case "DispatchExpression":                                  return Dispatch((DispatchExpression) expression);                              case "IdentifierExpression":                                  return Identifier((IdentifierExpression) expression);                              case "IgnoredExpression":                                  return Ignored((IgnoredExpression) expression);                              case "LambdaListExpression":                                  return LambdaList((LambdaListExpression) expression);                              case "ListExpression":                                  return List((ListExpression) expression);                              case "MacroExpression":                                  return Macro((MacroExpression) expression);                              case "NumberExpression":                                  return Number((NumberExpression) expression);                              case "QuotedExpression":                                  return Quoted((QuotedExpression) expression);                              case "SerializedExpression":                                  return Serialized((SerializedExpression) expression);                              case "SymbolTableExpression":                                  break;                              case "TextExpression":                                  return Text((TextExpression) expression);                              case "TypeCandidateExpression":                                  return TypeCandidate((TypeCandidateExpression) expression);                              case "VectorExpression":                                  return Vector((VectorExpression) expression);                          }
Missing Default,XSpect.Yacq.Symbols,RootSymbols,C:\repos\takeshik_yacq\Yacq\Symbols\SymbolTable.RootSymbols.cs,CreateType,The following switch statement is missing a default case: switch (attributes.Item1)                          {                              case MemberTypes.Field:                                  rest[0].List(":").Let(es => type.DefineField(                                      es.First().Id()'                                      ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                      (FieldAttributes) (attributes.Item2 ?? FieldAttributes.Public)'                                      rest.ElementAtOrDefault(1)                                  ));                                  break;                              case MemberTypes.Property:                                  rest[0].List(":").Let(es => type.DefineProperty(                                      es.First().Id()'                                      ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                      (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                      rest[1].Id().Let(i => i != "get" && i != "set") ? rest[1] : null'                                      rest.Any(_ => _.Id() == "get")                                          ? rest                                                .SkipWhile(_ => _.Id() != "get")                                                .Skip(1)                                                .If(                                                    _ => _.Any() && _.First().Id() != "set"'                                                    _ => _.First()'                                                    _ => YacqExpression.Ignore()                                                )                                          : null'                                      rest.Any(_ => _.Id() == "set")                                          ? rest                                                .SkipWhile(_ => _.Id() != "set")                                                .Skip(1)                                                .If(                                                    _ => _.Any() && _.First().Id() != "get"'                                                    _ => _.First()'                                                    _ => YacqExpression.Ignore()                                                )                                          : null                                  ));                                  break;                              case MemberTypes.Method:                                  (rest[0].List(":") ?? new [] { rest[0]' YacqExpression.TypeCandidate(typeof(void))' })                                      .Let(es => type.DefineMethod(                                          es.First().Id()'                                          (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                          ((TypeCandidateExpression) es.Last().Reduce(s)).ElectedType'                                          ((VectorExpression) rest[1]).Elements                                              .ReduceAll(s)                                              .OfType<TypeCandidateExpression>()                                              .Select(_ => _.ElectedType)                                              .ToArray()'                                          rest[2]                                      ));                                  break;                              case MemberTypes.Constructor:                                  type.DefineConstructor(                                      (MethodAttributes) (attributes.Item2 ?? MethodAttributes.Public)'                                      ((VectorExpression) rest[1]).Elements                                          .ReduceAll(s)                                          .OfType<TypeCandidateExpression>()                                          .Select(_ => _.ElectedType)                                          .ToArray()'                                      rest[2]                                  );                                  break;                          }
