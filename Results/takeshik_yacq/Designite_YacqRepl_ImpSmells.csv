Implementation smell,Namespace,Class,File,Method,Description
Long Method,XSpect.Yacq.Repl,ConsoleReplInterface,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\ConsoleReplInterface.cs,Run,The method has 127 lines of code.
Complex Method,XSpect,Lists,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,Cyclomatic complexity of the method is 9
Complex Method,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,CopyTo,Cyclomatic complexity of the method is 8
Long Parameter List,XSpect,CommandlineParser,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRun\CommandlineParser.cs,Option,The method has 5 parameters. Parameters: id' allowValue' description' shortNames' longNames
Long Parameter List,XSpect,CommandlineOption,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRun\CommandlineParser.cs,CommandlineOption,The method has 5 parameters. Parameters: id' allowValue' description' shortNames' longNames
Long Parameter List,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 5 parameters. Parameters: source1' source2' source3' source4' resultSelector
Long Parameter List,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 6 parameters. Parameters: source1' source2' source3' source4' source5' resultSelector
Long Parameter List,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 7 parameters. Parameters: source1' source2' source3' source4' source5' source6' resultSelector
Long Parameter List,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 8 parameters. Parameters: source1' source2' source3' source4' source5' source6' source7' resultSelector
Long Parameter List,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The method has 9 parameters. Parameters: source1' source2' source3' source4' source5' source6' source7' source8' resultSelector
Long Parameter List,XSpect,Arrays,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Statement,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Apply,The length of the statement  "            Array.ForEach(actions' a => a(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6' tuple.Item7)); " is 122.
Long Statement,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Apply,The length of the statement  "            Array.ForEach(actions' a => a(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6' tuple.Item7' tuple.Rest)); " is 134.
Long Statement,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext()) " is 124.
Long Statement,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext()) " is 144.
Long Statement,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                    yield return resultSelector(iter1.Current' iter2.Current' iter3.Current' iter4.Current' iter5.Current' iter6.Current' iter7.Current); " is 133.
Long Statement,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                while (iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext() && iter8.MoveNext()) " is 164.
Long Statement,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The length of the statement  "                    yield return resultSelector(iter1.Current' iter2.Current' iter3.Current' iter4.Current' iter5.Current' iter6.Current' iter7.Current' iter8.Current); " is 148.
Complex Conditional,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext()"  is complex.
Complex Conditional,XSpect,Flows,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Zip,The conditional expression  "iter1.MoveNext() && iter2.MoveNext() && iter3.MoveNext() && iter4.MoveNext() && iter5.MoveNext() && iter6.MoveNext() && iter7.MoveNext() && iter8.MoveNext()"  is complex.
Magic Number,XSpect,CommandlineParser,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRun\CommandlineParser.cs,Parse,The following statement contains a magic number: return options                  .SelectMany(o => o.ShortNames                      .Select(c => Tuple.Create("-" + c' o))                      .Concat(o.LongNames.Select(s => Tuple.Create("--" + s' o)))                  )                  .ToDictionary()                  .Let(map => args                      .TakeWhile(s => s != "--")                      .SelectMany((a' i) => a.Length > 1 && a[0] == '-' && a[1] != '-'                          ? a.Substring(1' a.Length - 2)                                .Select(c => MakeTuple(map' "-" + c' o => null))                                .EndWith(MakeTuple(map' "-" + a.Last()' o => o.AllowValue ? args[i + 1] : null))                          : new[] { a.StartsWith("--")                                ? a.Split(new [] { '='' }' 2).Let(_ =>                                      MakeTuple(map' _[0]' o => _.Length == 2 ? _[1] : null)                                  )                                : MakeTuple(_parameter' a)'                          }                      )                  )                  .ToArray()                  .Let(_ => _.Where((t' i) => t.Item1 != _parameter || i == 0 || !_[i - 1].Item1.AllowValue))                  .Concat(args                      .SkipWhile(s => s != "--")                      .Skip(1)                      .Select(a => MakeTuple(_parameter' a))                  )                  .ToLookup(t => t.Item1.Null(o => o.Id)' t => t.Item2);
Magic Number,XSpect,CommandlineParser,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRun\CommandlineParser.cs,Parse,The following statement contains a magic number: return options                  .SelectMany(o => o.ShortNames                      .Select(c => Tuple.Create("-" + c' o))                      .Concat(o.LongNames.Select(s => Tuple.Create("--" + s' o)))                  )                  .ToDictionary()                  .Let(map => args                      .TakeWhile(s => s != "--")                      .SelectMany((a' i) => a.Length > 1 && a[0] == '-' && a[1] != '-'                          ? a.Substring(1' a.Length - 2)                                .Select(c => MakeTuple(map' "-" + c' o => null))                                .EndWith(MakeTuple(map' "-" + a.Last()' o => o.AllowValue ? args[i + 1] : null))                          : new[] { a.StartsWith("--")                                ? a.Split(new [] { '='' }' 2).Let(_ =>                                      MakeTuple(map' _[0]' o => _.Length == 2 ? _[1] : null)                                  )                                : MakeTuple(_parameter' a)'                          }                      )                  )                  .ToArray()                  .Let(_ => _.Where((t' i) => t.Item1 != _parameter || i == 0 || !_[i - 1].Item1.AllowValue))                  .Concat(args                      .SkipWhile(s => s != "--")                      .Skip(1)                      .Select(a => MakeTuple(_parameter' a))                  )                  .ToLookup(t => t.Item1.Null(o => o.Id)' t => t.Item2);
Magic Number,XSpect,CommandlineParser,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRun\CommandlineParser.cs,Parse,The following statement contains a magic number: return options                  .SelectMany(o => o.ShortNames                      .Select(c => Tuple.Create("-" + c' o))                      .Concat(o.LongNames.Select(s => Tuple.Create("--" + s' o)))                  )                  .ToDictionary()                  .Let(map => args                      .TakeWhile(s => s != "--")                      .SelectMany((a' i) => a.Length > 1 && a[0] == '-' && a[1] != '-'                          ? a.Substring(1' a.Length - 2)                                .Select(c => MakeTuple(map' "-" + c' o => null))                                .EndWith(MakeTuple(map' "-" + a.Last()' o => o.AllowValue ? args[i + 1] : null))                          : new[] { a.StartsWith("--")                                ? a.Split(new [] { '='' }' 2).Let(_ =>                                      MakeTuple(map' _[0]' o => _.Length == 2 ? _[1] : null)                                  )                                : MakeTuple(_parameter' a)'                          }                      )                  )                  .ToArray()                  .Let(_ => _.Where((t' i) => t.Item1 != _parameter || i == 0 || !_[i - 1].Item1.AllowValue))                  .Concat(args                      .SkipWhile(s => s != "--")                      .Skip(1)                      .Select(a => MakeTuple(_parameter' a))                  )                  .ToLookup(t => t.Item1.Null(o => o.Id)' t => t.Item2);
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._length = bytes.Length * 8;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._length = arrlen * 32;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,BitArray,The following statement contains a magic number: this._array = new Int32[(this._length + 31) / 32];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,Equals,The following statement contains a magic number: return Enumerable.Range(0' (this.Count + 7) / 8)                  .Select(this.GetByte)                  .SequenceEqual(other);
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,Equals,The following statement contains a magic number: return Enumerable.Range(0' (this.Count + 7) / 8)                  .Select(this.GetByte)                  .SequenceEqual(other);
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,GetByte,The following statement contains a magic number: Int32 index = byteIndex / 4;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,GetByte,The following statement contains a magic number: Int32 shift = (byteIndex % 4) * 8;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,GetByte,The following statement contains a magic number: Int32 shift = (byteIndex % 4) * 8;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,SetByte,The following statement contains a magic number: Int32 index = byteIndex / 4;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,SetByte,The following statement contains a magic number: Int32 shift = (byteIndex % 4) * 8;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,SetByte,The following statement contains a magic number: Int32 shift = (byteIndex % 4) * 8;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,CopyTo,The following statement contains a magic number: Int32 numbytes = (this._length + 7) / 8;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,CopyTo,The following statement contains a magic number: Int32 numbytes = (this._length + 7) / 8;
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,CopyTo,The following statement contains a magic number: Array.Copy(this._array' 0' array' index' (this._length + 31) / 32);
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,CopyTo,The following statement contains a magic number: Array.Copy(this._array' 0' array' index' (this._length + 31) / 32);
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,ToByteArray,The following statement contains a magic number: var array = new Byte[(this.Count + 7) / 8];
Magic Number,XSpect.Collections,BitArray,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\BitArray.cs,ToByteArray,The following statement contains a magic number: var array = new Byte[(this.Count + 7) / 8];
Magic Number,XSpect.Yacq.Repl,ConsoleReplInterface,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\ConsoleReplInterface.cs,Run,The following statement contains a magic number: Arrays.From(this._sandbox)                  .Repeat()                  .Do(s => Console.Write("yacq[{0}]> "' s.History.Count))                  .Select(s => (Console.ForegroundColor = ConsoleColor.White)                      .Let(_ => Console.ReadLine())                      .Apply(_ => Console.ResetColor())                      .If(l => l == null' l => ":exit")                      .If(                          l => l.FirstOrDefault() == ':' && !l.StartsWith(":<<")'                          l => l.Substring(1).Split(' ').Let(_ =>                          {                              switch (_[0])                              {                                  case "exit":                                      Environment.Exit(0);                                      return "";                                  case "sandbox":                                      this._manager.Unload(this._sandbox);                                      this._sandbox = this._manager.CreateSandbox();                                      return "(type 'System.AppDomain').CurrentDomain.FriendlyName";                                  case "privileged":                                      this._manager.Unload(this._sandbox);                                      this._sandbox = this._manager.DefaultSandbox;                                      return "(type 'System.AppDomain').CurrentDomain.FriendlyName";                                  default:                                      return "";                              }                          })                      )                      .If(                          l => l.StartsWith(":<<")'                          h => Arrays.From(Unit.Default)                              .Repeat()                              .Do(_ => Console.Write("yacq[{0}]| "' _sandbox.History.Count))                              .Select(_ => (Console.ForegroundColor = ConsoleColor.White)                                  .Let(__ => Console.ReadLine())                                  .Apply(l => Console.ResetColor())                              )                              .TakeWhile(l => l != h.Substring(3))'                          h => Arrays.From(h)                      )                  )                  .Select(ls => String.Join(Environment.NewLine' ls))                  .Where(s => !String.IsNullOrWhiteSpace(s))                  .Select(s => this._sandbox.Evaluate(s))                  .Do(u =>                  {                      u.Tag = (this._sandbox.History.Count - 1).ToString();                      u.Logs.Subscribe(e =>                      {                          WriteHeader(u.Tag' e.Timestamp);                          WriteLine(e.Color' e.Body);                      });                      u.ParsedExpressions                          .Subscribe(e =>                          {                              WriteHeader(u.Tag' e.Timestamp);                              Write(ConsoleColor.Gray' "parsed: ");                              Write(ConsoleColor.DarkCyan' "{0} => {1} = "' e.Node.GetType().Name' e.Type);                              WriteLine(ConsoleColor.Cyan' e.Node.ToString());                          });                      u.ReturnedValues                          .Catch(Observable.Never<ReturnedValue>())                          .Subscribe(v =>                          {                              WriteHeader(u.Tag' v.Timestamp);                              Write(ConsoleColor.Gray' "returned: ");                              if (v.Value != null)                              {                                  Write(ConsoleColor.DarkGreen' TypeRef.Serialize(v.Value.GetType()).ToString());                                  var stringified = v.Value.GetType().GetMethod("ToString"' Type.EmptyTypes).DeclaringType != typeof(Object);                                  if (stringified)                                  {                                      Write(ConsoleColor.DarkGreen' " = ");                                      if (v.Value is Expression)                                      {                                          Write(ConsoleColor.Green' Node.Serialize((Expression) v.Value).ToString());                                      }                                      else                                      {                                          Write(ConsoleColor.Green' v.Value.ToString());                                      }                                  }                                    if (!(v.Value is String) && v.Value.GetType().GetInterface("IEnumerable") != null)                                  {                                      Write(ConsoleColor.DarkGreen' (stringified ? " [" : " = [") + Environment.NewLine + "    ");                                      ((IEnumerable) v.Value)                                          .Cast<Object>()                                          .Take(ReplSymbols.DumpLimit + 1)                                          .ToArray()                                          .ForEach((e' i) =>                                          {                                              var line = Console.CursorTop;                                              if (Console.CursorLeft == 0)                                              {                                                  Console.Write("    ");                                              }                                              if (i < ReplSymbols.DumpLimit)                                              {                                                  Write(                                                      ConsoleColor.Green'                                                      e != null ? e.ToString() : "(null)"                                                      );                                                  Write(ConsoleColor.DarkGreen' "' ");                                              }                                              else                                              {                                                  Write(ConsoleColor.DarkGreen' "(more...)");                                              }                                              if (Console.CursorTop != line || Console.CursorLeft > Console.BufferWidth * 0.8)                                              {                                                  Console.WriteLine();                                              }                                          });                                      Write(ConsoleColor.DarkGreen' Environment.NewLine + "  ]");                                  }                              }                              else                              {                                  Write(ConsoleColor.DarkGreen' "null");                              }                              Console.WriteLine();                          });                  })                  .ForEach(u => u.Start());
Magic Number,XSpect.Yacq.Repl,ConsoleReplInterface,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\ConsoleReplInterface.cs,Run,The following statement contains a magic number: Arrays.From(this._sandbox)                  .Repeat()                  .Do(s => Console.Write("yacq[{0}]> "' s.History.Count))                  .Select(s => (Console.ForegroundColor = ConsoleColor.White)                      .Let(_ => Console.ReadLine())                      .Apply(_ => Console.ResetColor())                      .If(l => l == null' l => ":exit")                      .If(                          l => l.FirstOrDefault() == ':' && !l.StartsWith(":<<")'                          l => l.Substring(1).Split(' ').Let(_ =>                          {                              switch (_[0])                              {                                  case "exit":                                      Environment.Exit(0);                                      return "";                                  case "sandbox":                                      this._manager.Unload(this._sandbox);                                      this._sandbox = this._manager.CreateSandbox();                                      return "(type 'System.AppDomain').CurrentDomain.FriendlyName";                                  case "privileged":                                      this._manager.Unload(this._sandbox);                                      this._sandbox = this._manager.DefaultSandbox;                                      return "(type 'System.AppDomain').CurrentDomain.FriendlyName";                                  default:                                      return "";                              }                          })                      )                      .If(                          l => l.StartsWith(":<<")'                          h => Arrays.From(Unit.Default)                              .Repeat()                              .Do(_ => Console.Write("yacq[{0}]| "' _sandbox.History.Count))                              .Select(_ => (Console.ForegroundColor = ConsoleColor.White)                                  .Let(__ => Console.ReadLine())                                  .Apply(l => Console.ResetColor())                              )                              .TakeWhile(l => l != h.Substring(3))'                          h => Arrays.From(h)                      )                  )                  .Select(ls => String.Join(Environment.NewLine' ls))                  .Where(s => !String.IsNullOrWhiteSpace(s))                  .Select(s => this._sandbox.Evaluate(s))                  .Do(u =>                  {                      u.Tag = (this._sandbox.History.Count - 1).ToString();                      u.Logs.Subscribe(e =>                      {                          WriteHeader(u.Tag' e.Timestamp);                          WriteLine(e.Color' e.Body);                      });                      u.ParsedExpressions                          .Subscribe(e =>                          {                              WriteHeader(u.Tag' e.Timestamp);                              Write(ConsoleColor.Gray' "parsed: ");                              Write(ConsoleColor.DarkCyan' "{0} => {1} = "' e.Node.GetType().Name' e.Type);                              WriteLine(ConsoleColor.Cyan' e.Node.ToString());                          });                      u.ReturnedValues                          .Catch(Observable.Never<ReturnedValue>())                          .Subscribe(v =>                          {                              WriteHeader(u.Tag' v.Timestamp);                              Write(ConsoleColor.Gray' "returned: ");                              if (v.Value != null)                              {                                  Write(ConsoleColor.DarkGreen' TypeRef.Serialize(v.Value.GetType()).ToString());                                  var stringified = v.Value.GetType().GetMethod("ToString"' Type.EmptyTypes).DeclaringType != typeof(Object);                                  if (stringified)                                  {                                      Write(ConsoleColor.DarkGreen' " = ");                                      if (v.Value is Expression)                                      {                                          Write(ConsoleColor.Green' Node.Serialize((Expression) v.Value).ToString());                                      }                                      else                                      {                                          Write(ConsoleColor.Green' v.Value.ToString());                                      }                                  }                                    if (!(v.Value is String) && v.Value.GetType().GetInterface("IEnumerable") != null)                                  {                                      Write(ConsoleColor.DarkGreen' (stringified ? " [" : " = [") + Environment.NewLine + "    ");                                      ((IEnumerable) v.Value)                                          .Cast<Object>()                                          .Take(ReplSymbols.DumpLimit + 1)                                          .ToArray()                                          .ForEach((e' i) =>                                          {                                              var line = Console.CursorTop;                                              if (Console.CursorLeft == 0)                                              {                                                  Console.Write("    ");                                              }                                              if (i < ReplSymbols.DumpLimit)                                              {                                                  Write(                                                      ConsoleColor.Green'                                                      e != null ? e.ToString() : "(null)"                                                      );                                                  Write(ConsoleColor.DarkGreen' "' ");                                              }                                              else                                              {                                                  Write(ConsoleColor.DarkGreen' "(more...)");                                              }                                              if (Console.CursorTop != line || Console.CursorLeft > Console.BufferWidth * 0.8)                                              {                                                  Console.WriteLine();                                              }                                          });                                      Write(ConsoleColor.DarkGreen' Environment.NewLine + "  ]");                                  }                              }                              else                              {                                  Write(ConsoleColor.DarkGreen' "null");                              }                              Console.WriteLine();                          });                  })                  .ForEach(u => u.Start());
Magic Number,XSpect.Yacq.Repl,ReplSymbols,D:\research\architectureSmells\repos1\takeshik_yacq\YacqRepl\ReplSymbols.cs,ReplSymbols,The following statement contains a magic number: DumpLimit = 100;
Missing Default,XSpect,Lists,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(from))              {                  case -1:                      switch (Math.Sign(to))                      {                          case -1:                              return from >= to                                  ? list.Skip(list.Count + to).Take(from - to + 1).Reverse()                                  : list.Skip(list.Count + from).Take(to - from + 1);                          case 0:                              return list.Skip(list.Count + from).EndWith(list[0]);                          case 1:                              return list.Skip(list.Count + from).Concat(list.Take(to + 1));                      }                      break;                  case 0:                      switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Reverse().StartWith(list[0]);                          case 0:                              return list.Take(1);                          case 1:                              return list.Take(to + 1);                      }                      break;                  case 1:                      switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Concat(list.Take(from + 1)).Reverse();                          case 0:                              return list.Take(from + 1).Reverse();                          case 1:                              return from <= to                                  ? list.Skip(from).Take(to - from + 1)                                  : list.Skip(to).Take(from - to + 1).Reverse();                      }                      break;              }
Missing Default,XSpect,Lists,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return from >= to                                  ? list.Skip(list.Count + to).Take(from - to + 1).Reverse()                                  : list.Skip(list.Count + from).Take(to - from + 1);                          case 0:                              return list.Skip(list.Count + from).EndWith(list[0]);                          case 1:                              return list.Skip(list.Count + from).Concat(list.Take(to + 1));                      }
Missing Default,XSpect,Lists,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Reverse().StartWith(list[0]);                          case 0:                              return list.Take(1);                          case 1:                              return list.Take(to + 1);                      }
Missing Default,XSpect,Lists,D:\research\architectureSmells\repos1\takeshik_yacq\Yacq\CommonExtensions.cs,Slice,The following switch statement is missing a default case: switch (Math.Sign(to))                      {                          case -1:                              return list.Skip(list.Count + to).Concat(list.Take(from + 1)).Reverse();                          case 0:                              return list.Take(from + 1).Reverse();                          case 1:                              return from <= to                                  ? list.Skip(from).Take(to - from + 1)                                  : list.Skip(to).Take(from - to + 1).Reverse();                      }
