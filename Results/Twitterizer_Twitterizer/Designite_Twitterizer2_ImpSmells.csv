Implementation smell,Namespace,Class,File,Method,Description
Long Method,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ExecuteCommand,The method has 161 lines of code.
Long Method,Twitterizer.Entities,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Tweets\Entities\TwitterEntityCollection.cs,parseMediaEntity,The method has 102 lines of code.
Complex Method,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,Cyclomatic complexity of the method is 8
Complex Method,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,Cyclomatic complexity of the method is 14
Complex Method,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,Cyclomatic complexity of the method is 12
Complex Method,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,PrepareRequest,Cyclomatic complexity of the method is 8
Complex Method,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ExecuteCommand,Cyclomatic complexity of the method is 12
Complex Method,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,SetStatusCode,Cyclomatic complexity of the method is 9
Complex Method,Twitterizer.Commands,SearchCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Search\SearchCommand.cs,Init,Cyclomatic complexity of the method is 12
Complex Method,Twitterizer.Commands,UpdateStatusCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Tweets\UpdateStatusCommand.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,Twitterizer.Entities,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Tweets\Entities\TwitterEntityCollection.cs,ReadJson,Cyclomatic complexity of the method is 16
Complex Method,Twitterizer.Entities,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Tweets\Entities\TwitterEntityCollection.cs,parseMediaEntity,Cyclomatic complexity of the method is 17
Long Parameter List,Twitterizer,OAuthUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\OAuthUtility.cs,GetAccessToken,The method has 5 parameters. Parameters: consumerKey' consumerSecret' requestToken' verifier' proxy
Long Parameter List,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,New,The method has 6 parameters. Parameters: tokens' username' name' isPublic' description' options
Long Parameter List,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,New,The method has 5 parameters. Parameters: tokens' name' isPublic' description' options
Long Parameter List,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,New,The method has 5 parameters. Parameters: tokens' username' name' isPublic' description
Long Parameter List,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,AddMember,The method has 5 parameters. Parameters: tokens' ownerUsername' listId' userIdToAdd' options
Long Parameter List,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,RemoveMember,The method has 5 parameters. Parameters: tokens' ownerUsername' listId' userIdToAdd' options
Long Parameter List,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,CheckMembership,The method has 5 parameters. Parameters: tokens' ownerUsername' listId' userId' options
Long Parameter List,Twitterizer.Commands,AddListMemberCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\AddListMemberCommand.cs,AddListMemberCommand,The method has 5 parameters. Parameters: requestTokens' ownerUsername' listId' userId' options
Long Parameter List,Twitterizer.Commands,CheckListMembershipCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\CheckListMembershipCommand.cs,CheckListMembershipCommand,The method has 5 parameters. Parameters: requestTokens' ownerUsername' listId' userId' options
Long Parameter List,Twitterizer.Commands,RemoveListMemberCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\RemoveListMemberCommand.cs,RemoveListMemberCommand,The method has 5 parameters. Parameters: requestTokens' ownerUsername' listId' userId' options
Long Parameter List,Twitterizer.Commands,ShowFriendshipCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Friendship\ShowFriendshipCommand.cs,ShowFriendshipCommand,The method has 6 parameters. Parameters: tokens' sourceUserId' sourceUserName' targetUserId' targetScreenName' optionalProperties
Long Identifier,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,,The length of the parameter OAuthParametersToIncludeInHeader is 32.
Long Statement,Twitterizer,TwitterCursorPagedIdCollection,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCursorPagedIdCollection.cs,DeserializeWrapper,The length of the statement  "            TwitterCursorPagedIdCollection result = JsonConvert.DeserializeObject<TwitterCursorPagedIdCollection>(value.SelectToken("ids").ToString()); " is 139.
Long Statement,Twitterizer,TwitterAccount,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Account\TwitterAccount.cs,UpdateProfileImage,The length of the statement  "            Commands.UpdateProfileImageCommand command = new Twitterizer.Commands.UpdateProfileImageCommand(tokens' imageData' options); " is 124.
Long Statement,Twitterizer,TwitterAccount,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Account\TwitterAccount.cs,UpdateProfileBackgroundImage,The length of the statement  "                throw new System.ArgumentNullException("imageData"' "You must provide image data or indicate you wish to not use any image in the options argument."); " is 150.
Long Statement,Twitterizer,TwitterAccount,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Account\TwitterAccount.cs,UpdateProfileBackgroundImage,The length of the statement  "            Commands.UpdateProfileBackgroundImageCommand command = new Twitterizer.Commands.UpdateProfileBackgroundImageCommand(tokens' imageData' options); " is 144.
Long Statement,Twitterizer,TwitterRelationship,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Friendship\TwitterRelationship.cs,Delete,The length of the statement  "            Commands.DeleteFriendshipCommand command = new Twitterizer.Commands.DeleteFriendshipCommand(tokens' this.Target.Id' string.Empty' null); " is 136.
Long Statement,Twitterizer,TwitterFriendship,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Friendship\TwitterFriendship.cs,Show,The length of the statement  "            Commands.ShowFriendshipCommand command = new Twitterizer.Commands.ShowFriendshipCommand(tokens' 0' sourceUserName' 0' targetUserName' options); " is 143.
Long Statement,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The length of the statement  "                                            var date = DateTime.ParseExact(reader.Value.ToString()' dateformats' CultureInfo.InvariantCulture' DateTimeStyles.None); " is 120.
Long Statement,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The length of the statement  "                                result.Locations = (TwitterTrendLocationCollection)e.ReadJson(reader' typeof(TwitterTrendLocationCollection)' null' serializer); " is 128.
Long Statement,Twitterizer,TwitterNotification,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Notification\TwitterNotification.cs,Follow,The length of the statement  "            Commands.NotificationFollowCommand command = new Commands.NotificationFollowCommand(tokens' userId' string.Empty' options); " is 123.
Long Statement,Twitterizer,TwitterNotification,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Notification\TwitterNotification.cs,Leave,The length of the statement  "            Commands.NotificationLeaveCommand command = new Commands.NotificationLeaveCommand(tokens' userId' string.Empty' options); " is 121.
Long Statement,Twitterizer,OAuthUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\OAuthUtility.cs,GetRequestToken,The length of the statement  "                throw new ArgumentNullException("callbackAddress"' @"You must always provide a callback url when obtaining a request token. For PIN-based authentication' use ""oob"" as the callback url."); " is 189.
Long Statement,Twitterizer,OAuthUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\OAuthUtility.cs,GetRequestToken,The length of the statement  "                throw new ArgumentNullException("callbackAddress"' @"You must always provide a callback url when obtaining a request token. For PIN-based authentication' use ""oob"" as the callback url."); " is 189.
Long Statement,Twitterizer,OAuthUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\OAuthUtility.cs,GetAccessToken,The length of the statement  "            response.UserId = long.Parse(Regex.Match(responseBody' @"user_id=([^&]+)").Groups[1].Value' CultureInfo.CurrentCulture); " is 120.
Long Statement,Twitterizer,OAuthUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\OAuthUtility.cs,GetAccessToken,The length of the statement  "            response.UserId = long.Parse(Regex.Match(responseBody' @"user_id=([^&]+)").Groups[1].Value' CultureInfo.CurrentCulture); " is 120.
Long Statement,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,PrepareRequest,The length of the statement  "            if (this.RequestUri.Host.Contains("search.twitter.com") || this.RequestUri.Host.Contains("api.twitter.com")) //-- DG HACK FOR TWITTER QUERIES TO FIX BAD COOKIE DOMAIN= DATA BEING RETURNED FROM TWITTER. " is 201.
Long Statement,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,PrepareRequest,The length of the statement  "#if !SILVERLIGHT // No silverlight user-agent as Assembly.GetName() isn't supported and setting the request.UserAgent is also not supported. " is 140.
Long Statement,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,PrepareRequest,The length of the statement  "            request.UserAgent = (string.IsNullOrEmpty(userAgent)) ? string.Format(CultureInfo.InvariantCulture' "Twitterizer/{0}"' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version) : userAgent; " is 200.
Long Statement,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,AddQueryStringParametersToUri,The length of the statement  "			Dictionary<string' object> fieldsToInclude = new Dictionary<string' object>(this.Parameters.Where(p => !OAuthParametersToIncludeInHeader.Contains(p.Key) && " is 155.
Long Statement,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,GetMultipartFormData,The length of the statement  "			Dictionary<string' object> fieldsToInclude = new Dictionary<string' object>(param.Where(p => !OAuthParametersToIncludeInHeader.Contains(p.Key) && " is 145.
Long Statement,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,GetMultipartFormData,The length of the statement  "					string header = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\";\r\nContent-Type: application/octet-stream\r\n\r\n"' " is 155.
Long Statement,Twitterizer,XAuthUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\XAuthUtility.cs,GetAccessTokens,The length of the statement  "                    response.UserId = long.Parse(Regex.Match(responseBody' @"user_id=([^&]+)").Groups[1].Value' CultureInfo.CurrentCulture); " is 120.
Long Statement,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,Delete,The length of the statement  "            Commands.DeleteListCommand command = new Twitterizer.Commands.DeleteListCommand(tokens' username' listIdOrSlug' options); " is 121.
Long Statement,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,GetStatuses,The length of the statement  "            Commands.ListStatusesCommand command = new Twitterizer.Commands.ListStatusesCommand(tokens' username' listIdOrSlug' options); " is 125.
Long Statement,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,GetSubscriptions,The length of the statement  "            Commands.GetListSubscriptionsCommand command = new Twitterizer.Commands.GetListSubscriptionsCommand(tokens' userName' options); " is 127.
Long Statement,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,GetMembers,The length of the statement  "            Commands.GetListMembersCommand command = new Twitterizer.Commands.GetListMembersCommand(tokens' username' listIdOrSlug' options); " is 129.
Long Statement,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,AddMember,The length of the statement  "            Commands.AddListMemberCommand command = new Twitterizer.Commands.AddListMemberCommand(tokens' ownerUsername' listId' userIdToAdd' options); " is 139.
Long Statement,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,RemoveMember,The length of the statement  "            Commands.RemoveListMemberCommand command = new Twitterizer.Commands.RemoveListMemberCommand(tokens' ownerUsername' listId' userIdToAdd' options); " is 145.
Long Statement,Twitterizer,TwitterList,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\List\TwitterList.cs,Subscribe,The length of the statement  "            Commands.CreateListMembershipCommand command = new Commands.CreateListMembershipCommand(tokens' listId' optionalProperties); " is 124.
Long Statement,Twitterizer,TwitterSearchResultCollection,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Search\TwitterSearchResultCollection.cs,Deserialize,The length of the statement  "            TwitterSearchResultCollection result = JsonConvert.DeserializeObject<TwitterSearchResultCollection>(value["statuses"].ToString()); " is 130.
Long Statement,Twitterizer,TwitterUserCollection,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\User\TwitterUserCollection.cs,DeserializeWrapper,The length of the statement  "            TwitterUserCollection result = JsonConvert.DeserializeObject<TwitterUserCollection>(value.SelectToken("users").ToString()); " is 123.
Long Statement,Twitterizer,TwitterizerException,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Exceptions\TwitterizerException.cs,ParseRateLimitHeaders,The length of the statement  "            if (response.Headers.AllKeys.Contains("X-Rate-Limit-Limit") && !string.IsNullOrEmpty(response.Headers["X-Rate-Limit-Limit"])) " is 125.
Long Statement,Twitterizer,TwitterizerException,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Exceptions\TwitterizerException.cs,ParseRateLimitHeaders,The length of the statement  "            if (response.Headers.AllKeys.Contains("X-Rate-Limit-Remaining") && !string.IsNullOrEmpty(response.Headers["X-Rate-Limit-Remaining"])) " is 133.
Long Statement,Twitterizer,TwitterizerException,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Exceptions\TwitterizerException.cs,ParseRateLimitHeaders,The length of the statement  "            if (!string.IsNullOrEmpty(response.Headers["X-Rate-Limit-Reset"]) && !string.IsNullOrEmpty(response.Headers["X-Rate-Limit-Reset"])) " is 131.
Long Statement,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ExecuteCommand,The length of the statement  "                        throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' "Tokens are required for the \"{0}\" command."' this.GetType())); " is 135.
Long Statement,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ExecuteCommand,The length of the statement  "                        throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' "Token values cannot be null when executing the \"{0}\" command."' this.GetType())); " is 154.
Long Statement,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ExecuteCommand,The length of the statement  "				WebRequestBuilder requestBuilder = new WebRequestBuilder(this.Uri' this.Verb' this.Tokens) { Multipart = this.Multipart }; " is 122.
Long Statement,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,SetCommandUri,The length of the statement  "                throw new ArgumentException("The API endpoint cannot begin with a forward slash. This will result in 404 errors and headaches."' "endPoint"); " is 141.
Long Statement,Twitterizer.Commands,FriendsIdsCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Friendship\FriendsIdsCommand.cs,Init,The length of the statement  "            this.RequestParameters.Add("cursor"' options.Cursor > 0 ? options.Cursor.ToString(CultureInfo.InvariantCulture) : "-1"); " is 120.
Long Statement,Twitterizer.Commands,FollowersIdsCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Friendship\FollowersIdsCommand.cs,Init,The length of the statement  "            this.RequestParameters.Add("cursor"' options.Cursor > 0 ? options.Cursor.ToString(CultureInfo.InvariantCulture) : "-1"); " is 120.
Long Statement,Twitterizer.Entities,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Tweets\Entities\TwitterEntityCollection.cs,parseMediaEntity,The length of the statement  "                                            ((string)reader.Value == "fit" ? TwitterMediaEntity.MediaSize.MediaSizeResizes.Fit : TwitterMediaEntity.MediaSize.MediaSizeResizes.Crop); " is 137.
Complex Conditional,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,NormalizeUrl,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Complex Conditional,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ExecuteCommand,The conditional expression  "string.IsNullOrEmpty(this.Tokens.ConsumerKey) ||                          string.IsNullOrEmpty(this.Tokens.ConsumerSecret) ||                          string.IsNullOrEmpty(this.Tokens.AccessToken) ||                          string.IsNullOrEmpty(this.Tokens.AccessTokenSecret)"  is complex.
Complex Conditional,Twitterizer.Commands,UpdateProfileBackgroundImageCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Account\UpdateProfileBackgroundImageCommand.cs,UpdateProfileBackgroundImageCommand,The conditional expression  "(options == null && (image == null || image.Length == 0)) || (options != null && !options.UseImage)"  is complex.
Complex Conditional,Twitterizer.Commands,FollowersCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\User\FollowersCommand.cs,FollowersCommand,The conditional expression  "tokens == null && options != null && options.UserId <= 0 && string.IsNullOrEmpty(options.ScreenName)"  is complex.
Complex Conditional,Twitterizer.Commands,UserTimelineCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Timeline\UserTimelineCommand.cs,UserTimelineCommand,The conditional expression  "options != null && tokens == null && string.IsNullOrEmpty(options.ScreenName) && options.UserId <= 0"  is complex.
Complex Conditional,Twitterizer.Commands,ShowUserCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\User\ShowUserCommand.cs,ShowUserCommand,The conditional expression  "(userId <= 0 && string.IsNullOrEmpty(username)) || (userId > 0 && !string.IsNullOrEmpty(username))"  is complex.
Empty Catch Block,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ExecuteCommand,The method has an empty catch block.
Empty Catch Block,Twitterizer.Entities,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Tweets\Entities\TwitterEntityCollection.cs,ReadJson,The method has an empty catch block.
Magic Number,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following statement contains a magic number: int itemIndex = Convert.ToInt32(Math.Ceiling(count / 2) - 1);
Magic Number,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following statement contains a magic number: count % 2 > 0
Magic Number,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following statement contains a magic number: switch ((string)reader.Value)                          {                              //TODO these two datetime converters don't seem to convert.                              case "as_of":                                  reader.Read();                                  var c = new TwitterizerDateConverter();                                  result.AsOf = (DateTime)c.ReadJson(reader' typeof(DateTime)' null' serializer);                                  continue;                                case "trends":                                  reader.Read();                                  while (reader.Read() && reader.Depth >= 3)                                  {                                      if (reader.TokenType == JsonToken.PropertyName && reader.Depth == 3)                                      {                                          try                                          {                                              var date = DateTime.ParseExact(reader.Value.ToString()' dateformats' CultureInfo.InvariantCulture' DateTimeStyles.None);                                              result.Add(date' new TwitterTrendCollection());                                                var converter = new TwitterTrendCollection.Converter();                                              result[date] = (TwitterTrendCollection)converter.ReadJson(reader' typeof(TwitterTrendCollection)' null' serializer);                                          }                                          catch                                          {                                              //bad date format                                              return null;                                          }                                      }                                  }                                  continue;                          }
Magic Number,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following statement contains a magic number: switch ((string)reader.Value)                          {                              //TODO these two datetime converters don't seem to convert.                              case "as_of":                                  reader.Read();                                  var c = new TwitterizerDateConverter();                                  result.AsOf = (DateTime)c.ReadJson(reader' typeof(DateTime)' null' serializer);                                  continue;                                case "trends":                                  reader.Read();                                  while (reader.Read() && reader.Depth >= 3)                                  {                                      if (reader.TokenType == JsonToken.PropertyName && reader.Depth == 3)                                      {                                          try                                          {                                              var date = DateTime.ParseExact(reader.Value.ToString()' dateformats' CultureInfo.InvariantCulture' DateTimeStyles.None);                                              result.Add(date' new TwitterTrendCollection());                                                var converter = new TwitterTrendCollection.Converter();                                              result[date] = (TwitterTrendCollection)converter.ReadJson(reader' typeof(TwitterTrendCollection)' null' serializer);                                          }                                          catch                                          {                                              //bad date format                                              return null;                                          }                                      }                                  }                                  continue;                          }
Magic Number,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following statement contains a magic number: switch ((string)reader.Value)                          {                              case "name":                                  reader.Read();                                  result[result.Count - 1].Name = (string)reader.Value;                                  continue;                              case "woeid":                                  reader.Read();                                  result[result.Count - 1].WOEID = int.Parse(reader.Value.ToString());                                  continue;                                case "placeType":                                  int placetypeDepth = reader.Depth;                                  while (reader.Read() && reader.Depth > placetypeDepth)                                  {                                      if (reader.TokenType == JsonToken.StartObject && reader.Depth >= 2)                                          result[result.Count - 1].PlaceType = new TwitterTrendLocationPlaceType();                                        if (reader.TokenType == JsonToken.PropertyName)                                      {                                          switch ((string)reader.Value)                                          {                                              case "name":                                                  reader.Read();                                                  result[result.Count - 1].PlaceType.Name = (string)reader.Value;                                                  continue;                                                case "code":                                                  reader.Read();                                                  result[result.Count - 1].PlaceType.Code = int.Parse(reader.Value.ToString());                                                  continue;                                          }                                      }                                  }                                  continue;                                case "country":                                  reader.Read();                                  result[result.Count - 1].Country = (string)reader.Value;                                  continue;                              case "url":                                  reader.Read();                                  result[result.Count - 1].URL = (string)reader.Value;                                  continue;                              case "countryCode":                                  reader.Read();                                  result[result.Count - 1].CountryCode = (string)reader.Value;                                  continue;                            }
Magic Number,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following statement contains a magic number: reader.TokenType == JsonToken.PropertyName && reader.Depth == initialDepth + 2
Magic Number,Twitterizer,ConversionUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\ConversionUtility.cs,ReadStream,The following statement contains a magic number: byte[] data = new byte[32768];
Magic Number,Twitterizer,ConversionUtility,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\ConversionUtility.cs,ReadStream,The following statement contains a magic number: byte[] buffer = new byte[32768];
Magic Number,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,GenerateTimeStamp,The following statement contains a magic number: TimeSpan ts = DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,GenerateNonce,The following statement contains a magic number: return new Random()                  .Next(123400' int.MaxValue)                  .ToString("X"' CultureInfo.InvariantCulture);
Magic Number,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,NormalizeUrl,The following statement contains a magic number: !((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))
Magic Number,Twitterizer,WebRequestBuilder,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\OAuth\WebRequestBuilder.cs,NormalizeUrl,The following statement contains a magic number: !((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))
Magic Number,Twitterizer,TwitterizerException,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Exceptions\TwitterizerException.cs,ParseRateLimitHeaders,The following statement contains a magic number: this.RateLimiting.ResetDate = DateTime.SpecifyKind(new DateTime(1970' 1' 1' 0' 0' 0' 0)                      .AddSeconds(double.Parse(response.Headers["X-Rate-Limit-Reset"]' CultureInfo.InvariantCulture))' DateTimeKind.Utc);
Magic Number,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,SetStatusCode,The following statement contains a magic number: switch (statusCode)              {                  case HttpStatusCode.OK:                      twitterResponse.Result = RequestResult.Success;                      break;                    case HttpStatusCode.BadRequest:                      twitterResponse.Result = RequestResult.BadRequest;                      break;                    case (HttpStatusCode)420: //Rate Limited from Search/Trends API                  case (HttpStatusCode)429:                      twitterResponse.Result = RequestResult.RateLimited;                      break;                    case HttpStatusCode.Unauthorized:                      twitterResponse.Result = RequestResult.Unauthorized;                      break;                    case HttpStatusCode.NotFound:                      twitterResponse.Result = RequestResult.FileNotFound;                      break;                    case HttpStatusCode.ProxyAuthenticationRequired:                      twitterResponse.Result = RequestResult.ProxyAuthenticationRequired;                      break;                    case HttpStatusCode.RequestTimeout:                      twitterResponse.Result = RequestResult.TwitterIsOverloaded;                      break;                    case HttpStatusCode.Forbidden:                      twitterResponse.Result = RequestResult.Unauthorized;                      break;                    default:                      twitterResponse.Result = RequestResult.Unknown;                      break;              }
Magic Number,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,SetStatusCode,The following statement contains a magic number: switch (statusCode)              {                  case HttpStatusCode.OK:                      twitterResponse.Result = RequestResult.Success;                      break;                    case HttpStatusCode.BadRequest:                      twitterResponse.Result = RequestResult.BadRequest;                      break;                    case (HttpStatusCode)420: //Rate Limited from Search/Trends API                  case (HttpStatusCode)429:                      twitterResponse.Result = RequestResult.RateLimited;                      break;                    case HttpStatusCode.Unauthorized:                      twitterResponse.Result = RequestResult.Unauthorized;                      break;                    case HttpStatusCode.NotFound:                      twitterResponse.Result = RequestResult.FileNotFound;                      break;                    case HttpStatusCode.ProxyAuthenticationRequired:                      twitterResponse.Result = RequestResult.ProxyAuthenticationRequired;                      break;                    case HttpStatusCode.RequestTimeout:                      twitterResponse.Result = RequestResult.TwitterIsOverloaded;                      break;                    case HttpStatusCode.Forbidden:                      twitterResponse.Result = RequestResult.Unauthorized;                      break;                    default:                      twitterResponse.Result = RequestResult.Unknown;                      break;              }
Magic Number,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ParseRateLimitHeaders,The following statement contains a magic number: rateLimiting.ResetDate = DateTime.SpecifyKind(new DateTime(1970' 1' 1' 0' 0' 0' 0)                      .AddSeconds(double.Parse(responseHeaders["X-Rate-Limit-Reset"]' CultureInfo.InvariantCulture))' DateTimeKind.Utc);
Magic Number,Twitterizer.Commands,UpdateProfileBackgroundImageCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Account\UpdateProfileBackgroundImageCommand.cs,UpdateProfileBackgroundImageCommand,The following statement contains a magic number: image != null && image.Length > 102400
Magic Number,Twitterizer.Commands,UpdateProfileImageCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Account\UpdateProfileImageCommand.cs,UpdateProfileImageCommand,The following statement contains a magic number: image.Length > 716800
Missing Default,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following switch statement is missing a default case: switch ((string)reader.Value)                          {                              //TODO these two datetime converters don't seem to convert.                              case "as_of":                                  reader.Read();                                  var c = new TwitterizerDateConverter();                                  result.AsOf = (DateTime)c.ReadJson(reader' typeof(DateTime)' null' serializer);                                  continue;                                case "trends":                                  reader.Read();                                  while (reader.Read() && reader.Depth >= 3)                                  {                                      if (reader.TokenType == JsonToken.PropertyName && reader.Depth == 3)                                      {                                          try                                          {                                              var date = DateTime.ParseExact(reader.Value.ToString()' dateformats' CultureInfo.InvariantCulture' DateTimeStyles.None);                                              result.Add(date' new TwitterTrendCollection());                                                var converter = new TwitterTrendCollection.Converter();                                              result[date] = (TwitterTrendCollection)converter.ReadJson(reader' typeof(TwitterTrendCollection)' null' serializer);                                          }                                          catch                                          {                                              //bad date format                                              return null;                                          }                                      }                                  }                                  continue;                          }
Missing Default,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following switch statement is missing a default case: switch ((string)reader.Value)                          {                              case "name":                                  reader.Read();                                  result[result.Count - 1].Name = (string)reader.Value;                                  continue;                              case "woeid":                                  reader.Read();                                  result[result.Count - 1].WOEID = int.Parse(reader.Value.ToString());                                  continue;                                case "placeType":                                  int placetypeDepth = reader.Depth;                                  while (reader.Read() && reader.Depth > placetypeDepth)                                  {                                      if (reader.TokenType == JsonToken.StartObject && reader.Depth >= 2)                                          result[result.Count - 1].PlaceType = new TwitterTrendLocationPlaceType();                                        if (reader.TokenType == JsonToken.PropertyName)                                      {                                          switch ((string)reader.Value)                                          {                                              case "name":                                                  reader.Read();                                                  result[result.Count - 1].PlaceType.Name = (string)reader.Value;                                                  continue;                                                case "code":                                                  reader.Read();                                                  result[result.Count - 1].PlaceType.Code = int.Parse(reader.Value.ToString());                                                  continue;                                          }                                      }                                  }                                  continue;                                case "country":                                  reader.Read();                                  result[result.Count - 1].Country = (string)reader.Value;                                  continue;                              case "url":                                  reader.Read();                                  result[result.Count - 1].URL = (string)reader.Value;                                  continue;                              case "countryCode":                                  reader.Read();                                  result[result.Count - 1].CountryCode = (string)reader.Value;                                  continue;                            }
Missing Default,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following switch statement is missing a default case: switch ((string)reader.Value)                                          {                                              case "name":                                                  reader.Read();                                                  result[result.Count - 1].PlaceType.Name = (string)reader.Value;                                                  continue;                                                case "code":                                                  reader.Read();                                                  result[result.Count - 1].PlaceType.Code = int.Parse(reader.Value.ToString());                                                  continue;                                          }
Missing Default,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following switch statement is missing a default case: switch ((string)reader.Value)                          {                              //TODO these two datetime converters don't seem to convert.                              case "as_of":                                  reader.Read();                                  var c = new TwitterizerDateConverter();                                  result.AsOf = (DateTime)c.ReadJson(reader' typeof(DateTime)' null' serializer);                                  continue;                                case "created_at":                                  reader.Read();                                  var d = new TwitterizerDateConverter();                                  result.CreatedAt = (DateTime)d.ReadJson(reader' typeof(DateTime)' null' serializer);                                  continue;                              case "locations":                                  reader.Read();                                  var e = new TwitterTrendLocationCollection.Converter();                                  result.Locations = (TwitterTrendLocationCollection)e.ReadJson(reader' typeof(TwitterTrendLocationCollection)' null' serializer);                                  continue;                          }
Missing Default,Twitterizer,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Geo\Coordinate.cs,ReadJson,The following switch statement is missing a default case: switch ((string)reader.Value)                          {                              case "query":                                  reader.Read();                                  result[result.Count - 1].SearchQuery = (string)reader.Value;                                  continue;                              case "name":                                  reader.Read();                                  result[result.Count - 1].Name = (string)reader.Value;                                  continue;                              case "url":                                  reader.Read();                                  result[result.Count - 1].Address = (string)reader.Value;                                  continue;                              case "promoted_content":                                  reader.Read();                                  result[result.Count - 1].PromotedContent = (string)reader.Value;                                  continue;                              case "events":                                  reader.Read();                                  result[result.Count - 1].Events = (string)reader.Value;                                  continue;                          }
Missing Default,Twitterizer.Core,TwitterCommand<T>,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Core\TwitterCommand.cs,ParseAccessLevel,The following switch statement is missing a default case: switch (responseHeaders["X-Access-Level"].ToLower())                  {                      case "read":                          return AccessLevel.Read;                      case "read-write":                          return AccessLevel.ReadWrite;                      case "read-write-privatemessages":                      case "read-write-directmessages":                          return AccessLevel.ReadWriteDirectMessage;                  }
Missing Default,Twitterizer.Commands,SearchCommand,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Search\SearchCommand.cs,Init,The following switch statement is missing a default case: switch (options.ResultType)              {                  case SearchOptionsResultType.Mixed:                      this.RequestParameters.Add("result_type"' "mixed");                      break;                  case SearchOptionsResultType.Recent:                      this.RequestParameters.Add("result_type"' "recent");                      break;                  case SearchOptionsResultType.Popular:                      this.RequestParameters.Add("result_type"' "popular");                      break;              }
Missing Default,Twitterizer.Entities,Converter,D:\research\architectureSmells\repos1\Twitterizer_Twitterizer\Twitterizer2\Methods\Tweets\Entities\TwitterEntityCollection.cs,ReadJson,The following switch statement is missing a default case: switch (entityType)                          {                              case "urls":                                  if (reader.TokenType == JsonToken.StartObject)                                      entity = new TwitterUrlEntity();                                    TwitterUrlEntity tue = entity as TwitterUrlEntity;                                  if (tue != null)                                  {                                      ReadFieldValue(reader' "url"' entity' () => tue.Url);                                      ReadFieldValue(reader' "display_url"' entity' () => tue.DisplayUrl);                                      ReadFieldValue(reader' "expanded_url"' entity' () => tue.ExpandedUrl);                                  }                                  break;                                case "user_mentions":                                  if (reader.TokenType == JsonToken.StartObject)                                      entity = new TwitterMentionEntity();                                    TwitterMentionEntity tme = entity as TwitterMentionEntity;                                  if (tme != null)                                  {                                      ReadFieldValue(reader' "screen_name"' entity' () => tme.ScreenName);                                      ReadFieldValue(reader' "name"' entity' () => tme.Name);                                      ReadFieldValue(reader' "id"' entity' () => tme.UserId);                                  }                                  break;                                case "hashtags":                                  if (reader.TokenType == JsonToken.StartObject)                                      entity = new TwitterHashTagEntity();                                    TwitterHashTagEntity the = entity as TwitterHashTagEntity;                                  if (the != null)                                  {                                      ReadFieldValue(reader' "text"' entity' () => the.Text);                                  }                                  break;                                case "media":                                  // Move to object start and parse the entity                                  reader.Read();                                  entity = parseMediaEntity(reader);                                    break;                          }
