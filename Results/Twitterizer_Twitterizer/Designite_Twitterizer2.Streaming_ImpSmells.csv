Implementation smell,Namespace,Class,File,Method,Description
Long Method,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,StreamCallback,The method has 139 lines of code.
Complex Method,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,ParseMessage,Cyclomatic complexity of the method is 16
Long Parameter List,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,StartUserStream,The method has 8 parameters. Parameters: friendsCallback' streamStoppedCallback' statusCreatedCallback' statusDeletedCallback' directMessageCreatedCallback' directMessageDeletedCallback' eventCallback' rawJsonCallback
Long Parameter List,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,StartPublicStream,The method has 5 parameters. Parameters: streamStoppedCallback' statusCreatedCallback' statusDeletedCallback' eventCallback' rawJsonCallback
Long Parameter List,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,StartSampleStream,The method has 5 parameters. Parameters: streamStoppedCallback' statusCreatedCallback' statusDeletedCallback' eventCallback' rawJsonCallback
Long Statement,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,ParseMessage,The length of the statement  "                        directMessageDeletedCallback(JsonConvert.DeserializeObject<TwitterStreamDeletedEvent>(ConvertJTokenToString(deletedDirectMessage))); " is 132.
Long Statement,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,ParseMessage,The length of the statement  "                    directMessageCreatedCallback(JsonConvert.DeserializeObject<TwitterDirectMessage>(ConvertJTokenToString(directMessage))); " is 120.
Long Statement,Twitterizer.Core,SerializationHelper<T>,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\SerializationHelper.cs,Deserialize,The length of the statement  "                resultObject = deserializationHandler((JObject)JsonConvert.DeserializeObject(Encoding.UTF8.GetString(webResponseData))); " is 120.
Long Statement,Twitterizer.Core,SerializationHelper<T>,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\SerializationHelper.cs,Deserialize,The length of the statement  "                resultObject = deserializationHandler((JObject)JsonConvert.DeserializeObject(Encoding.UTF8.GetString(webResponseData' 0' webResponseData.Length))); " is 147.
Magic Number,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,StartUserStream,The following statement contains a magic number: request.Timeout = 10000;
Magic Number,Twitterizer.Streaming,TwitterStream,C:\repos\Twitterizer_Twitterizer\Twitterizer2.Streaming\TwitterStream.cs,StreamCallback,The following statement contains a magic number: try              {                  response = (HttpWebResponse)req.EndGetResponse(result);                    if (response.StatusCode == HttpStatusCode.OK)                  {                      using (StreamReader reader = new StreamReader(response.GetResponseStream()))                      {                          try                          {                              // This will keep the count of open brackets                              // When { is encountered' the count is incremented                              // When } is encountered' the count is decremented                              int bracketCount = 0;                                // The blockBuilder will hold the string of the current block of json.                              StringBuilder blockBuilder = new StringBuilder();                                while (!stopReceived && !reader.EndOfStream)                              {                                  string lineOfData = reader.ReadLine();                                    if (stopReceived || lineOfData == null)                                  {                                      break;                                  }                                    for (int index = 0; index < lineOfData.Length; index++)                                  {                                      blockBuilder.Append(lineOfData[index]);                                        if (!new[] { '{'' '}' }.Contains(lineOfData[index]))                                      {                                          continue;                                      }                                        if (lineOfData[index] == '{')                                      {                                          bracketCount++;                                      }                                        if (lineOfData[index] == '}')                                      {                                          bracketCount--;                                      }                                        if (bracketCount == 0)                                      {                                          var blockbuilderstring = blockBuilder.ToString();                                            if (rawJsonCallback != null)                                          {                                              rawJsonCallback(blockbuilderstring);                                          }                                          ThreadPool.QueueUserWorkItem(delegate { ParseMessage(blockbuilderstring.Trim()); });                                          blockBuilder.Clear();                                      }                                  }                              }                                reader.Close();                              OnStreamStopped(stopReceived ? StopReasons.StoppedByRequest : StopReasons.WebConnectionFailed);                          }                          catch                          {                              reader.Close();                              OnStreamStopped(stopReceived ? StopReasons.StoppedByRequest : StopReasons.WebConnectionFailed);                          }                      }                  }              }              catch (WebException we)              {                  HttpWebResponse httpResponse = we.Response as HttpWebResponse;                  if (httpResponse != null)                  {                      switch ((httpResponse).StatusCode)                      {                          case HttpStatusCode.Unauthorized:                              {                                  OnStreamStopped(StopReasons.Unauthorised);                                  break;                              }                          case HttpStatusCode.Forbidden:                              {                                  OnStreamStopped(StopReasons.Forbidden);                                  break;                              }                          case HttpStatusCode.NotFound:                              {                                  OnStreamStopped(StopReasons.NotFound);                                  break;                              }                          case HttpStatusCode.NotAcceptable:                              {                                  OnStreamStopped(StopReasons.NotAcceptable);                                  break;                              }                          case HttpStatusCode.RequestEntityTooLarge:                              {                                  OnStreamStopped(StopReasons.TooLong);                                  break;                              }                          case HttpStatusCode.RequestedRangeNotSatisfiable:                              {                                  OnStreamStopped(StopReasons.RangeUnacceptable);                                  break;                              }                          case (HttpStatusCode)420: //Rate Limited                              {                                  OnStreamStopped(StopReasons.RateLimited);                                  break;                              }                          case HttpStatusCode.InternalServerError:                              {                                  OnStreamStopped(StopReasons.TwitterServerError);                                  break;                              }                          case HttpStatusCode.ServiceUnavailable:                              {                                  OnStreamStopped(StopReasons.TwitterOverloaded);                                  break;                              }                          default:                              {                                  OnStreamStopped(StopReasons.Unknown);                                  break;                              }                      }                  }                  else                  {                      OnStreamStopped(StopReasons.Unknown);                  }              }              catch (Exception)              {                  OnStreamStopped(StopReasons.WebConnectionFailed);              }              finally              {                  req.Abort();                  if (response != null)                      response.Close();                  request = null;              }
