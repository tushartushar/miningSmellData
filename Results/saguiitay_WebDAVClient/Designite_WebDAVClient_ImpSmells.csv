Implementation smell,Namespace,Class,File,Method,Description
Long Method,WebDAVClient.Helpers,ResponseParser,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Helpers\ResponseParser.cs,ParseItems,The method has 122 lines of code.
Long Statement,WebDAVClient,Client,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Client.cs,List,The length of the statement  "                response = await HttpRequest(listUri.Uri' PropFind' headers' Encoding.UTF8.GetBytes(PropFindRequestContent)).ConfigureAwait(false); " is 131.
Long Statement,WebDAVClient,Client,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Client.cs,Get,The length of the statement  "                response = await HttpRequest(listUri' PropFind' headers' Encoding.UTF8.GetBytes(PropFindRequestContent)).ConfigureAwait(false); " is 127.
Long Statement,WebDAVClient,Client,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Client.cs,Get,The length of the statement  "                    throw new WebDAVException((int)response.StatusCode' string.Format("Failed retrieving item/folder (Status Code: {0})"' response.StatusCode)); " is 140.
Long Statement,WebDAVClient,Client,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Client.cs,DownloadPartial,The length of the statement  "            var dictionary = new Dictionary<string' string> { { "translate"' "f" }' { "Range"' "bytes=" + startBytes + "-" + endBytes } }; " is 126.
Long Statement,WebDAVClient,Client,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Client.cs,Upload,The length of the statement  "            var uploadUri = await GetServerUrl(remoteFilePath.TrimEnd('/') + "/" + name.TrimStart('/')' false).ConfigureAwait(false); " is 121.
Long Statement,WebDAVClient,Client,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Client.cs,Move,The length of the statement  "            var response = await HttpRequest(srcUri' MoveMethod' headers' Encoding.UTF8.GetBytes(requestContent)).ConfigureAwait(false); " is 124.
Missing Default,WebDAVClient.Helpers,ResponseParser,C:\repos\saguiitay_WebDAVClient\WebDAVClient\Helpers\ResponseParser.cs,ParseItems,The following switch statement is missing a default case: switch (reader.LocalName.ToLower())                          {                              case "response":                                  itemInfo = new Item();                                  break;                              case "href":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      var value = reader.Value;                                      value = value.Replace("#"' "%23");                                      itemInfo.Href = value;                                  }                                  break;                              case "creationdate":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      DateTime creationdate;                                      if (DateTime.TryParse(reader.Value' out creationdate))                                          itemInfo.CreationDate = creationdate;                                  }                                  break;                              case "getlastmodified":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      DateTime lastmodified;                                      if (DateTime.TryParse(reader.Value' out lastmodified))                                          itemInfo.LastModified = lastmodified;                                  }                                  break;                              case "displayname":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      itemInfo.DisplayName = reader.Value;                                  }                                  break;                              case "getcontentlength":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      long contentLength;                                      if (long.TryParse(reader.Value' out contentLength))                                          itemInfo.ContentLength = contentLength;                                  }                                  break;                              case "getcontenttype":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      itemInfo.ContentType = reader.Value;                                  }                                  break;                              case "getetag":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      itemInfo.Etag = reader.Value;                                  }                                  break;                              case "iscollection":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      bool isCollection;                                      if (bool.TryParse(reader.Value' out isCollection))                                          itemInfo.IsCollection = isCollection;                                      int isCollectionInt;                                      if (int.TryParse(reader.Value' out isCollectionInt))                                          itemInfo.IsCollection = isCollectionInt == 1;                                  }                                  break;                              case "resourcetype":                                  if (!reader.IsEmptyElement)                                  {                                      reader.Read();                                      var resourceType = reader.LocalName.ToLower();                                      if (string.Equals(resourceType' "collection"' StringComparison.InvariantCultureIgnoreCase))                                          itemInfo.IsCollection = true;                                  }                                  break;                              case "hidden":                              case "ishidden":                                  itemInfo.IsHidden = true;                                  break;                              case "checked-in":                              case "version-controlled-configuration":                                  reader.Skip();                                  break;                          }
