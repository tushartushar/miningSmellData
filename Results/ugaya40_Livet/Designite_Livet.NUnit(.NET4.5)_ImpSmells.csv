Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,FilteredHandlerLifeCycleTest,The length of the statement  "            listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler1Called = true; }); " is 151.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,FilteredHandlerLifeCycleTest,The length of the statement  "            listener.RegisterHandler(NotifyCollectionChangedAction.Remove' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Remove); handler2Called = true; }); " is 157.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,FilteredHandlerLifeCycleTest,The length of the statement  "            listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler3Called = true; }); " is 151.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,AddHandlerKindTest,The length of the statement  "                {NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler1Called = true; }}' " is 127.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,AddHandlerKindTest,The length of the statement  "                {NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler5Called = true; }} " is 126.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,MultiThreadHandlerTest,The length of the statement  "                            listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handlerCalledCount++; }); " is 150.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,FilteredHandlerLifeCycleTest,The length of the statement  "            listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler1Called = true; }); " is 151.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,FilteredHandlerLifeCycleTest,The length of the statement  "            listener.RegisterHandler(NotifyCollectionChangedAction.Remove' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Remove); handler2Called = true; }); " is 157.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,FilteredHandlerLifeCycleTest,The length of the statement  "            listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler3Called = true; }); " is 151.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,AddHandlerKindTest,The length of the statement  "                {NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler1Called = true; }}' " is 127.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,AddHandlerKindTest,The length of the statement  "                {NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handler5Called = true; }} " is 126.
Long Statement,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,MultiThreadHandlerTest,The length of the statement  "                            listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handlerCalledCount++; }); " is 150.
Long Statement,NUnit.Framework,AssertEx,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,Is,The length of the statement  "            CollectionAssert.AreEqual(expected.ToArray()' actual.ToArray()' new ComparisonComparer<T>(equalityComparison)' message); " is 120.
Long Statement,NUnit.Framework,AssertEx,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,IsNot,The length of the statement  "            CollectionAssert.AreNotEqual(notExpected.ToArray()' actual.ToArray()' new ComparisonComparer<T>(equalityComparison)' message); " is 126.
Long Statement,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,TrySetIndex,The length of the statement  "                    typeof(T).InvokeMember("Item"' TransparentFlags | BindingFlags.SetProperty' null' target' indexes.Concat(new[] { value }).ToArray()); " is 133.
Long Statement,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,TrySetIndex,The length of the statement  "                catch (MissingMethodException) { throw new ArgumentException(string.Format("indexer not found : Type <{0}>"' typeof(T).Name)); }; " is 129.
Long Statement,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,TryGetIndex,The length of the statement  "                catch (MissingMethodException) { throw new ArgumentException(string.Format("indexer not found : Type <{0}>"' typeof(T).Name)); }; " is 129.
Long Statement,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,TryInvokeMember,The length of the statement  "                var parameterTypes = (binder.GetType().GetField("Cache"' BindingFlags.NonPublic | BindingFlags.Instance).GetValue(binder) as Dictionary<Type' object>) " is 150.
Long Statement,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,MatchMethod,The length of the statement  "                if (!nameMatched.Any()) throw new ArgumentException(string.Format("\"{0}\" not found : Type <{1}>"' methodName' typeof(T).Name)); " is 129.
Long Statement,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,MatchMethod,The length of the statement  "                if (!typedMethods.Any()) throw new ArgumentException(string.Format("\"{0}\" not match arguments : Type <{1}>"' methodName' typeof(T).Name)); " is 140.
Long Statement,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,MatchMethod,The length of the statement  "                if (generic != null) return generic.MethodInfo.MakeGenericMethod(generic.TypeParameters.Select(kvp => kvp.Value).ToArray()); " is 124.
Magic Number,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                      {                          for (int f = 0; f < 500; f++)                          {                              listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handlerCalledCount++; });                          }                        });                  }              });
Magic Number,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                      {                          for (int f = 0; f < 500; f++)                          {                              listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handlerCalledCount++; });                          }                        });                  }              });
Magic Number,Livet.NUnit.EventListeners,CollectionChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedWeakEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: handlerCalledCount.Is(25000);
Magic Number,Livet.NUnit.EventListeners,PropertyChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\PropertyChangedWeakEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                      {                          for (int f = 0; f < 500; f++)                          {                              listener.RegisterHandler("Dummy1"' (sender' e) => { e.PropertyName.Is("Dummy1"); handlerCalledCount++; });                          }                        });                  }              });
Magic Number,Livet.NUnit.EventListeners,PropertyChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\PropertyChangedWeakEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                      {                          for (int f = 0; f < 500; f++)                          {                              listener.RegisterHandler("Dummy1"' (sender' e) => { e.PropertyName.Is("Dummy1"); handlerCalledCount++; });                          }                        });                  }              });
Magic Number,Livet.NUnit.EventListeners,PropertyChangedWeakEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\PropertyChangedWeakEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: handlerCalledCount.Is(25000);
Magic Number,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                      {                          for (int f = 0; f < 500; f++)                          {                              listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handlerCalledCount++; });                          }                        });                  }              });
Magic Number,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                      {                          for (int f = 0; f < 500; f++)                          {                              listener.RegisterHandler(NotifyCollectionChangedAction.Add' (sender' e) => { e.Action.Is(NotifyCollectionChangedAction.Add); handlerCalledCount++; });                          }                        });                  }              });
Magic Number,Livet.NUnit.EventListeners,CollectionChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\CollectionChangedEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: handlerCalledCount.Is(25000);
Magic Number,Livet.NUnit.EventListeners,PropertyChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\PropertyChangedEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                              {                                  for (int f = 0; f < 500; f++)                                  {                                      listener.RegisterHandler("Dummy1"' (sender' e) => { e.PropertyName.Is("Dummy1"); handlerCalledCount++; });                                  }                                });                  }              });
Magic Number,Livet.NUnit.EventListeners,PropertyChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\PropertyChangedEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: var parentTask = new Task(() =>              {                  var tf = new TaskFactory(TaskCreationOptions.AttachedToParent' TaskContinuationOptions.AttachedToParent);                    for (int i = 0; i < 50; i++)                  {                      tf.StartNew(() =>                              {                                  for (int f = 0; f < 500; f++)                                  {                                      listener.RegisterHandler("Dummy1"' (sender' e) => { e.PropertyName.Is("Dummy1"); handlerCalledCount++; });                                  }                                });                  }              });
Magic Number,Livet.NUnit.EventListeners,PropertyChangedEventListenerTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\EventListeners\PropertyChangedEventListenerTest.cs,MultiThreadHandlerTest,The following statement contains a magic number: handlerCalledCount.Is(25000);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest,The following statement contains a magic number: test1CalledCount.Is(2);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest,The following statement contains a magic number: test1CalledCount.Is(3);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest,The following statement contains a magic number: test1CalledCount.Is(4);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest,The following statement contains a magic number: test1CalledCount.Is(5);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest,The following statement contains a magic number: test1CalledCount.Is(6);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest2,The following statement contains a magic number: test2CalledCount.Is(2);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest2,The following statement contains a magic number: test2CalledCount.Is(3);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest2,The following statement contains a magic number: test2CalledCount.Is(4);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest2,The following statement contains a magic number: test2CalledCount.Is(5);
Magic Number,Livet.NUnit.Behaviors,MethodBinderTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Behaviors\MethodBinderTest.cs,SimpleCaseTest2,The following statement contains a magic number: test2CalledCount.Is(6);
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,CanExecuteHandlerBasicTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    EventHandler handler1 = (sender' e) => handlerResultList.Add("Handler1");                  EventHandler handler2 = (sender' e) => handlerResultList.Add("Handler2");                  EventHandler handler3 = (sender' e) => handlerResultList.Add("Handler3");                    command.CanExecuteChanged += handler1;                  command.CanExecuteChanged += handler2;                  command.CanExecuteChanged += handler3;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(3);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler2");                  handlerResultList[2].Is("Handler3");                    handlerResultList.Clear();                    command.CanExecuteChanged -= handler2;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(2);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler3");              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,CanExecuteHandlerBasicTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    EventHandler handler1 = (sender' e) => handlerResultList.Add("Handler1");                  EventHandler handler2 = (sender' e) => handlerResultList.Add("Handler2");                  EventHandler handler3 = (sender' e) => handlerResultList.Add("Handler3");                    command.CanExecuteChanged += handler1;                  command.CanExecuteChanged += handler2;                  command.CanExecuteChanged += handler3;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(3);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler2");                  handlerResultList[2].Is("Handler3");                    handlerResultList.Clear();                    command.CanExecuteChanged -= handler2;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(2);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler3");              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,CanExecuteHandlerBasicTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    EventHandler handler1 = (sender' e) => handlerResultList.Add("Handler1");                  EventHandler handler2 = (sender' e) => handlerResultList.Add("Handler2");                  EventHandler handler3 = (sender' e) => handlerResultList.Add("Handler3");                    command.CanExecuteChanged += handler1;                  command.CanExecuteChanged += handler2;                  command.CanExecuteChanged += handler3;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(3);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler2");                  handlerResultList[2].Is("Handler3");                    handlerResultList.Clear();                    command.CanExecuteChanged -= handler2;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(2);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler3");              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,CanExecuteHandlerBasicTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    EventHandler handler1 = (sender' e) => handlerResultList.Add("Handler1");                  EventHandler handler2 = (sender' e) => handlerResultList.Add("Handler2");                  EventHandler handler3 = (sender' e) => handlerResultList.Add("Handler3");                    command.CanExecuteChanged += handler1;                  command.CanExecuteChanged += handler2;                  command.CanExecuteChanged += handler3;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(3);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler2");                  handlerResultList[2].Is("Handler3");                    handlerResultList.Clear();                    command.CanExecuteChanged -= handler2;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(2);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler3");              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,CanExecuteHandlerBasicTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    EventHandler handler1 = (sender' e) => handlerResultList.Add("Handler1");                  EventHandler handler2 = (sender' e) => handlerResultList.Add("Handler2");                  EventHandler handler3 = (sender' e) => handlerResultList.Add("Handler3");                    command.CanExecuteChanged += handler1;                  command.CanExecuteChanged += handler2;                  command.CanExecuteChanged += handler3;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(3);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler2");                  handlerResultList[2].Is("Handler3");                    handlerResultList.Clear();                    command.CanExecuteChanged -= handler2;                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    handlerResultList.Count.Is(2);                  handlerResultList[0].Is("Handler1");                  handlerResultList[1].Is("Handler3");              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,WeakHandlerTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  int eventReceivedCount = 0;                    DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    var realReceiver1 = new EventReceiver(command'() => eventReceivedCount++);                  var realReceiver2 = new EventReceiver(command' () => eventReceivedCount++);                    var receiver1 = new WeakReference(realReceiver1);                  var receiver2 = new WeakReference(realReceiver2);                  var receiver3 = new EventReceiver(command' () => eventReceivedCount++);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    eventReceivedCount.Is(3);                    realReceiver1 = null;                  realReceiver2 = null;                    GC.Collect();                  GC.WaitForPendingFinalizers();                  GC.Collect();                    receiver1.IsAlive.Is(false);                  receiver2.IsAlive.Is(false);                  receiver3.IsNot(null);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                  eventReceivedCount.Is(4);              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,WeakHandlerTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  int eventReceivedCount = 0;                    DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    var realReceiver1 = new EventReceiver(command'() => eventReceivedCount++);                  var realReceiver2 = new EventReceiver(command' () => eventReceivedCount++);                    var receiver1 = new WeakReference(realReceiver1);                  var receiver2 = new WeakReference(realReceiver2);                  var receiver3 = new EventReceiver(command' () => eventReceivedCount++);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    eventReceivedCount.Is(3);                    realReceiver1 = null;                  realReceiver2 = null;                    GC.Collect();                  GC.WaitForPendingFinalizers();                  GC.Collect();                    receiver1.IsAlive.Is(false);                  receiver2.IsAlive.Is(false);                  receiver3.IsNot(null);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                  eventReceivedCount.Is(4);              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,WeakHandlerTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  int eventReceivedCount = 0;                    DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    var realReceiver1 = new EventReceiver(command'() => eventReceivedCount++);                  var realReceiver2 = new EventReceiver(command' () => eventReceivedCount++);                    var receiver1 = new WeakReference(realReceiver1);                  var receiver2 = new WeakReference(realReceiver2);                  var receiver3 = new EventReceiver(command' () => eventReceivedCount++);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    eventReceivedCount.Is(3);                    realReceiver1 = null;                  realReceiver2 = null;                    GC.Collect();                  GC.WaitForPendingFinalizers();                  GC.Collect();                    receiver1.IsAlive.Is(false);                  receiver2.IsAlive.Is(false);                  receiver3.IsNot(null);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                  eventReceivedCount.Is(4);              }
Magic Number,Livet.NUnit.Commands,CommandTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\Commands\CommandTest.cs,WeakHandlerTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  int eventReceivedCount = 0;                    DispatcherHelper.UIDispatcher = dispatcher.Dispatcher;                    var handlerResultList = new List<string>();                    var command = new ViewModelCommand(() => { }' () => true);                    var realReceiver1 = new EventReceiver(command'() => eventReceivedCount++);                  var realReceiver2 = new EventReceiver(command' () => eventReceivedCount++);                    var receiver1 = new WeakReference(realReceiver1);                  var receiver2 = new WeakReference(realReceiver2);                  var receiver3 = new EventReceiver(command' () => eventReceivedCount++);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                    eventReceivedCount.Is(3);                    realReceiver1 = null;                  realReceiver2 = null;                    GC.Collect();                  GC.WaitForPendingFinalizers();                  GC.Collect();                    receiver1.IsAlive.Is(false);                  receiver2.IsAlive.Is(false);                  receiver3.IsNot(null);                    command.RaiseCanExecuteChanged();                  System.Threading.Thread.Sleep(1000);                  eventReceivedCount.Is(4);              }
Magic Number,NUnit.Framework,DynamicAccessor<T>,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\ChainingAssertion.NUnit.cs,TryInvokeMember,The following statement contains a magic number: var parameterTypes = (binder.GetType().GetField("Cache"' BindingFlags.NonPublic | BindingFlags.Instance).GetValue(binder) as Dictionary<Type' object>)                      .First()                      .Key                      .GetGenericArguments()                      .Skip(2)                      .Take(args.Length)                      .ToArray();
Magic Number,Livet.NUnit,TestDispatcherContext,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\TestDispatcherContext.cs,TestDispatcherContext,The following statement contains a magic number: while (_dispatcher == null) { Thread.Sleep(10); }
Magic Number,Livet.NUnit,TestDispatcherContext,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\TestInfrastructures\TestDispatcherContext.cs,TestDispatcherContext,The following statement contains a magic number: while (!dispatcherRunFlag) { Thread.Sleep(10); }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
Magic Number,Livet.NUnit,ViewModelHelperTest,C:\repos\ugaya40_Livet\.NET4.0\Livet.NUnit(.NET4.0)\ViewModelHelperTest.cs,LinkTest,The following statement contains a magic number: using (var dispatcher = new TestDispatcherContext())              {                  var disposedCount = 0;                    //------------------Init                  var source = new ObservableCollection<int>() { 9' 8' 7 };                    var result = ViewModelHelper.CreateReadOnlyDispatcherCollection<int' TestViewModel>(                      source'                      i => new TestViewModel(i * i'() => disposedCount++)'                      dispatcher.Dispatcher);                    result.Count().Is(3);                  result[0].Number.Is(81);                  result[1].Number.Is(64);                  result[2].Number.Is(49);                    //------------------Add                  source.Add(1);                    result.Count().Is(4);                  result[3].Number.Is(1);                    //------------------Add & Remove                  source.Add(3);                  source.Add(4);                  source.Add(5);                  source.Add(6);                  source.Remove(5);                    result.Count().Is(7);                  result[4].Number.Is(9);                  result[5].Number.Is(16);                  result[6].Number.Is(36);                    //------------------Replace                  source[2] = 10;                    result.Count().Is(7);                  result[2].Number.Is(100);                    //------------------Clear                  source.Clear();                    result.Any().Is(false);                    //------------------Dispose                  result.Dispose();                    source.Add(1);                    result.Any().Is(false);                    disposedCount.Is(9);              }
