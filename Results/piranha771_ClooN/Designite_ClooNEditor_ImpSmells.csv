Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,timerButtonDown_Tick,Cyclomatic complexity of the method is 32
Long Statement,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateResultQuery,The length of the statement  "	implicitQuery = new ImplicitCube (shiftLeftRight - (zoomFactor / 2.0f)' 1.0f / width * zoomFactor' width' shiftUpDown - (zoomFactor / 2.0f)' 1.0f / height * zoomFactor' height' layerZ' 1' 1); " is 191.
Long Statement,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateResultQuery,The length of the statement  "	labelCoordTR.Text = (implicitQuery.StartX + (implicitQuery.OffsetX * implicitQuery.LengthX)).ToString (precision) + "/" + implicitQuery.StartY.ToString (precision); " is 164.
Long Statement,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateResultQuery,The length of the statement  "	labelCoordBL.Text = implicitQuery.StartX.ToString (precision) + "/" + (implicitQuery.StartY + +(implicitQuery.OffsetY * implicitQuery.LengthY)).ToString (precision); " is 165.
Long Statement,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateResultQuery,The length of the statement  "	labelCoordBR.Text = (implicitQuery.StartX + (implicitQuery.OffsetX * implicitQuery.LengthX)).ToString (precision) + "/" + (implicitQuery.StartY + +(implicitQuery.OffsetY * implicitQuery.LengthY)).ToString (precision); " is 217.
Long Statement,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateResultQuery,The length of the statement  "				explicitQuery [x + pictureBoxResult.Width * y] = new Single3 (((float)x / (float)width * zoomFactor) + shiftLeftRight - (zoomFactor / 2.0f)' ((float)y / (float)height * zoomFactor) + shiftUpDown - (zoomFactor / 2.0f)' layerZ); " is 226.
Long Statement,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The length of the statement  "		BitmapData bitmapData = result.LockBits (new Rectangle (0' 0' width' height)' ImageLockMode.WriteOnly' result.PixelFormat); " is 123.
Long Statement,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,FormMain_Resize,The length of the statement  "	statusLabelResolution.Text = string.Format ("Res: {0}x{1} ({2}MP)"' pictureBoxResult.Width' pictureBoxResult.Height' ((float)(pictureBoxResult.Width * pictureBoxResult.Height) / 1000000).ToString ("0.0")); " is 205.
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: unsafe {  	Bitmap result = new Bitmap (width' height' PixelFormat.Format24bppRgb);  	BitmapData bitmapData = result.LockBits (new Rectangle (0' 0' width' height)' ImageLockMode.WriteOnly' result.PixelFormat);  	int BytesPerPixel = System.Drawing.Bitmap.GetPixelFormatSize (result.PixelFormat) / 8;  	int WidthInBytes = bitmapData.Width * BytesPerPixel;  	byte* PtrFirstPixel = (byte*)bitmapData.Scan0;  	Parallel.For (0' height' y =>  {  		byte* CurrentLine = PtrFirstPixel + (y * bitmapData.Stride);  		int xPixel = 0;  		for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  			var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  			CurrentLine [x] = value;  			// Blue  			CurrentLine [x + 1] = value;  			// Green  			CurrentLine [x + 2] = value;  			// Red  			xPixel++;  		}  	});  	result.UnlockBits (bitmapData);  	return result;  }  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: unsafe {  	Bitmap result = new Bitmap (width' height' PixelFormat.Format24bppRgb);  	BitmapData bitmapData = result.LockBits (new Rectangle (0' 0' width' height)' ImageLockMode.WriteOnly' result.PixelFormat);  	int BytesPerPixel = System.Drawing.Bitmap.GetPixelFormatSize (result.PixelFormat) / 8;  	int WidthInBytes = bitmapData.Width * BytesPerPixel;  	byte* PtrFirstPixel = (byte*)bitmapData.Scan0;  	Parallel.For (0' height' y =>  {  		byte* CurrentLine = PtrFirstPixel + (y * bitmapData.Stride);  		int xPixel = 0;  		for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  			var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  			CurrentLine [x] = value;  			// Blue  			CurrentLine [x + 1] = value;  			// Green  			CurrentLine [x + 2] = value;  			// Red  			xPixel++;  		}  	});  	result.UnlockBits (bitmapData);  	return result;  }  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: unsafe {  	Bitmap result = new Bitmap (width' height' PixelFormat.Format24bppRgb);  	BitmapData bitmapData = result.LockBits (new Rectangle (0' 0' width' height)' ImageLockMode.WriteOnly' result.PixelFormat);  	int BytesPerPixel = System.Drawing.Bitmap.GetPixelFormatSize (result.PixelFormat) / 8;  	int WidthInBytes = bitmapData.Width * BytesPerPixel;  	byte* PtrFirstPixel = (byte*)bitmapData.Scan0;  	Parallel.For (0' height' y =>  {  		byte* CurrentLine = PtrFirstPixel + (y * bitmapData.Stride);  		int xPixel = 0;  		for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  			var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  			CurrentLine [x] = value;  			// Blue  			CurrentLine [x + 1] = value;  			// Green  			CurrentLine [x + 2] = value;  			// Red  			xPixel++;  		}  	});  	result.UnlockBits (bitmapData);  	return result;  }  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: unsafe {  	Bitmap result = new Bitmap (width' height' PixelFormat.Format24bppRgb);  	BitmapData bitmapData = result.LockBits (new Rectangle (0' 0' width' height)' ImageLockMode.WriteOnly' result.PixelFormat);  	int BytesPerPixel = System.Drawing.Bitmap.GetPixelFormatSize (result.PixelFormat) / 8;  	int WidthInBytes = bitmapData.Width * BytesPerPixel;  	byte* PtrFirstPixel = (byte*)bitmapData.Scan0;  	Parallel.For (0' height' y =>  {  		byte* CurrentLine = PtrFirstPixel + (y * bitmapData.Stride);  		int xPixel = 0;  		for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  			var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  			CurrentLine [x] = value;  			// Blue  			CurrentLine [x + 1] = value;  			// Green  			CurrentLine [x + 2] = value;  			// Red  			xPixel++;  		}  	});  	result.UnlockBits (bitmapData);  	return result;  }  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: Parallel.For (0' height' y =>  {  	byte* CurrentLine = PtrFirstPixel + (y * bitmapData.Stride);  	int xPixel = 0;  	for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  		var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  		CurrentLine [x] = value;  		// Blue  		CurrentLine [x + 1] = value;  		// Green  		CurrentLine [x + 2] = value;  		// Red  		xPixel++;  	}  });  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: Parallel.For (0' height' y =>  {  	byte* CurrentLine = PtrFirstPixel + (y * bitmapData.Stride);  	int xPixel = 0;  	for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  		var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  		CurrentLine [x] = value;  		// Blue  		CurrentLine [x + 1] = value;  		// Green  		CurrentLine [x + 2] = value;  		// Red  		xPixel++;  	}  });  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: Parallel.For (0' height' y =>  {  	byte* CurrentLine = PtrFirstPixel + (y * bitmapData.Stride);  	int xPixel = 0;  	for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  		var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  		CurrentLine [x] = value;  		// Blue  		CurrentLine [x + 1] = value;  		// Green  		CurrentLine [x + 2] = value;  		// Red  		xPixel++;  	}  });  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  	var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  	CurrentLine [x] = value;  	// Blue  	CurrentLine [x + 1] = value;  	// Green  	CurrentLine [x + 2] = value;  	// Red  	xPixel++;  }  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  	var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  	CurrentLine [x] = value;  	// Blue  	CurrentLine [x + 1] = value;  	// Green  	CurrentLine [x + 2] = value;  	// Red  	xPixel++;  }  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: for (int x = 0; x < WidthInBytes; x = x + BytesPerPixel) {  	var value = (byte)((Clamp (-1.0f' 1.0f' noise [xPixel + width * y] * contrast) + 1) / 2 * 255);  	CurrentLine [x] = value;  	// Blue  	CurrentLine [x + 1] = value;  	// Green  	CurrentLine [x + 2] = value;  	// Red  	xPixel++;  }  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,CreateNoiseBitmap,The following statement contains a magic number: CurrentLine [x + 2] = value;  
Magic Number,ClooNEditor,FormMain,C:\repos\piranha771_ClooN\ClooNEditor\FormMain.cs,FormMain_Resize,The following statement contains a magic number: statusLabelResolution.Text = string.Format ("Res: {0}x{1} ({2}MP)"' pictureBoxResult.Width' pictureBoxResult.Height' ((float)(pictureBoxResult.Width * pictureBoxResult.Height) / 1000000).ToString ("0.0"));  
Magic Number,ClooNEditor,ModuleCompiler,C:\repos\piranha771_ClooN\ClooNEditor\ModuleCompiler.cs,CreateModule,The following statement contains a magic number: if (results.Errors.HasErrors) {  	StringBuilder sb = new StringBuilder ();  	foreach (CompilerError error in results.Errors) {  		sb.AppendLine (String.Format ("Error : {2}"' error.Line - 9' error.Column' error.ErrorText));  	}  	errorMessage = sb.ToString ();  	return false;  }  else {  	MethodInfo info = results.CompiledAssembly.GetType ("Stub.StubClass").GetMethod ("ModuleMaker");  	lastSuccessful = ((Func<NoiseModule>)Delegate.CreateDelegate (typeof(Func<NoiseModule>)' info)) ();  	lastValidCode = moduleCode;  	return true;  }  
Magic Number,ClooNEditor,ModuleCompiler,C:\repos\piranha771_ClooN\ClooNEditor\ModuleCompiler.cs,CreateModule,The following statement contains a magic number: foreach (CompilerError error in results.Errors) {  	sb.AppendLine (String.Format ("Error : {2}"' error.Line - 9' error.Column' error.ErrorText));  }  
Magic Number,ClooNEditor,ModuleCompiler,C:\repos\piranha771_ClooN\ClooNEditor\ModuleCompiler.cs,CreateModule,The following statement contains a magic number: sb.AppendLine (String.Format ("Error : {2}"' error.Line - 9' error.Column' error.ErrorText));  
