Implementation smell,Namespace,Class,File,Method,Description
Long Method,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The method has 563 lines of code.
Complex Method,FSpot.Database,TagStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\TagStore.cs,LoadAllTags,Cyclomatic complexity of the method is 10
Complex Method,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,Update,Cyclomatic complexity of the method is 12
Complex Method,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,BuildQuery,Cyclomatic complexity of the method is 11
Complex Method,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Run,Cyclomatic complexity of the method is 11
Long Parameter List,FSpot.Database,ExportItem,C:\repos\mono_f-spot\src\Core\FSpot.Database\ExportStore.cs,ExportItem,The method has 5 parameters. Parameters: id' image_id' image_version_id' export_type' export_token
Long Parameter List,FSpot.Database,Job,C:\repos\mono_f-spot\src\Core\FSpot.Database\JobStore.cs,Job,The method has 6 parameters. Parameters: db' id' job_options' job_priority' run_at' persistent
Long Parameter List,FSpot.Database,JobStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\JobStore.cs,Create,The method has 5 parameters. Parameters: job_type' job_options' run_at' job_priority' persistent
Long Parameter List,FSpot.Database.Jobs,CalculateHashJob,C:\repos\mono_f-spot\src\Core\FSpot.Database\Jobs\CalculateHashJob.cs,CalculateHashJob,The method has 6 parameters. Parameters: db' id' job_options' run_at' job_priority' persistent
Long Parameter List,FSpot.Database.Jobs,CalculateHashJob,C:\repos\mono_f-spot\src\Core\FSpot.Database\Jobs\CalculateHashJob.cs,CalculateHashJob,The method has 6 parameters. Parameters: db' id' job_options' run_at' job_priority' persistent
Long Parameter List,FSpot.Database.Jobs,SyncMetadataJob,C:\repos\mono_f-spot\src\Core\FSpot.Database\Jobs\SyncMetadataJob.cs,SyncMetadataJob,The method has 6 parameters. Parameters: db' id' job_options' run_at' job_priority' persistent
Long Parameter List,FSpot.Database.Jobs,SyncMetadataJob,C:\repos\mono_f-spot\src\Core\FSpot.Database\Jobs\SyncMetadataJob.cs,SyncMetadataJob,The method has 6 parameters. Parameters: db' id' job_options' run_at' job_priority' persistent
Long Statement,FSpot.Database,Db,C:\repos\mono_f-spot\src\Core\FSpot.Database\Db.cs,Repair,The length of the statement  "				backup_path = string.Format ("{0}-{1}-{2}{3}"' Path.GetFileNameWithoutExtension (path)' DateTime.Now.ToString ("yyyyMMdd")' i++' Path.GetExtension (path)); " is 155.
Long Statement,FSpot.Database,TagStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\TagStore.cs,InsertTagIntoTable,The length of the statement  "			long id = Database.Execute (new HyenaSqliteCommand ("INSERT INTO tags (name' category_id' is_category' sort_priority' icon)" " is 124.
Long Statement,FSpot.Database,RollStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\RollStore.cs,Get,The length of the statement  "			Hyena.Data.Sqlite.IDataReader reader = Database.Query (new HyenaSqliteCommand ("SELECT time FROM rolls WHERE id = ?"' id)); " is 123.
Long Statement,FSpot.Database,RollStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\RollStore.cs,PhotosInRoll,The length of the statement  "			using (Hyena.Data.Sqlite.IDataReader reader = Database.Query (new HyenaSqliteCommand ("SELECT count(*) AS count FROM photos WHERE roll_id = ?"' roll.Id))) { " is 156.
Long Statement,FSpot.Database,RollStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\RollStore.cs,GetRolls,The length of the statement  "			string query = "SELECT DISTINCT rolls.id AS roll_id' rolls.time AS roll_time FROM rolls' photos WHERE photos.roll_id = rolls.id ORDER BY rolls.time DESC"; " is 154.
Long Statement,FSpot.Database,ExportStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\ExportStore.cs,LoadAllItems,The length of the statement  "			Hyena.Data.Sqlite.IDataReader reader = Database.Query ("SELECT id' image_id' image_version_id' export_type' export_token FROM exports"); " is 136.
Long Statement,FSpot.Database,ExportStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\ExportStore.cs,Create,The length of the statement  "			long id = Database.Execute (new HyenaSqliteCommand ("INSERT INTO exports (image_id' image_version_id' export_type' export_token) VALUES (?' ?' ?' ?)"' " is 150.
Long Statement,FSpot.Database,ExportStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\ExportStore.cs,Commit,The length of the statement  "			Database.Execute (new HyenaSqliteCommand ("UPDATE exports SET image_id = ?' image_version_id = ?' export_type = ? SET export_token = ? WHERE id = ?"' " is 149.
Long Statement,FSpot.Database,ExportStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\ExportStore.cs,GetByImageId,The length of the statement  "			Hyena.Data.Sqlite.IDataReader reader = Database.Query (new HyenaSqliteCommand ("SELECT id' image_id' image_version_id' export_type' export_token FROM exports WHERE image_id = ? AND image_version_id = ?"' " is 203.
Long Statement,FSpot.Database,JobStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\JobStore.cs,LoadAllItems,The length of the statement  "    		Hyena.Data.Sqlite.IDataReader reader = Database.Query ("SELECT id' job_type' job_options' run_at' job_priority FROM jobs"); " is 123.
Long Statement,FSpot.Database,JobStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\JobStore.cs,Create,The length of the statement  "    			id = Database.Execute (new HyenaSqliteCommand ("INSERT INTO jobs (job_type' job_options' run_at' job_priority) VALUES (?' ?' ?' ?)"' " is 132.
Long Statement,FSpot.Database,MetaStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\MetaStore.cs,Create,The length of the statement  "    		uint id = (uint)Database.Execute(new HyenaSqliteCommand("INSERT INTO meta (name' data) VALUES (?' ?)"' name' data ?? "NULL" )); " is 127.
Long Statement,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,HasDuplicate,The length of the statement  "			using (var reader = Database.Query (new HyenaSqliteCommand (query' uri.GetBaseUri ().ToString ()' uri.GetFilename ()))) { " is 121.
Long Statement,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,HasDuplicate,The length of the statement  "			using (var reader = Database.Query (new HyenaSqliteCommand ("SELECT photos.id' photos.time' pv.filename FROM photos LEFT JOIN photo_versions AS pv ON pv.photo_id = photos.id WHERE pv.filename = ?"' name))) { " is 207.
Long Statement,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,CreateFrom,The length of the statement  "				string name = defaultVersionOnly && versionId == Photo.OriginalVersionId ? Catalog.GetString ("Original") : version.Name; " is 121.
Long Statement,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,GetTags,The length of the statement  "			using (var reader = Database.Query (new HyenaSqliteCommand ("SELECT tag_id FROM photo_tags WHERE photo_id = ?"' photo.Id))) { " is 125.
Long Statement,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,GetAllVersions,The length of the statement  "			using (var reader = Database.Query ("SELECT photo_id' version_id' name' base_uri' filename' import_md5' protected FROM photo_versions WHERE photo_id IN " + ids)) { " is 163.
Long Statement,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,Update,The length of the statement  "			if (changes.DescriptionChanged || changes.DefaultVersionIdChanged || changes.TimeChanged || changes.UriChanged || changes.RatingChanged || changes.MD5SumChanged) " is 161.
Long Statement,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,PhotosPerMonth,The length of the statement  "				var query_builder = new StringBuilder ("CREATE TEMPORARY TABLE population AS SELECT strftime('%Y%m'' datetime(time' 'unixepoch')) AS month FROM photos"); " is 153.
Long Statement,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,MoveTableToTemp,The length of the statement  "			string sql = SelectSingleString (string.Format ("SELECT sql FROM sqlite_master WHERE tbl_name = '{0}' AND type = 'table' ORDER BY type DESC"' table_name)); " is 155.
Long Statement,FSpot.Database,Update,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Execute,The length of the statement  "				db.Execute (new HyenaSqliteCommand ("UPDATE meta SET data = ? WHERE name = ?"' db_version.ToString ()' meta_db_version_string)); " is 128.
Complex Conditional,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,Update,The conditional expression  "changes.DescriptionChanged || changes.DefaultVersionIdChanged || changes.TimeChanged || changes.UriChanged || changes.RatingChanged || changes.MD5SumChanged"  is complex.
Empty Catch Block,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,SelectSingleString,The method has an empty catch block.
Magic Number,FSpot.Database,TagStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\TagStore.cs,CreateDefaultTags,The following statement contains a magic number: favorites_category.SortPriority = -10;
Magic Number,FSpot.Database,TagStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\TagStore.cs,CreateDefaultTags,The following statement contains a magic number: hidden_tag.SortPriority = -9;
Magic Number,FSpot.Database,TagStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\TagStore.cs,CreateDefaultTags,The following statement contains a magic number: people_category.SortPriority = -8;
Magic Number,FSpot.Database,TagStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\TagStore.cs,CreateDefaultTags,The following statement contains a magic number: places_category.SortPriority = -8;
Magic Number,FSpot.Database,TagStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\TagStore.cs,CreateDefaultTags,The following statement contains a magic number: events_category.SortPriority = -7;
Magic Number,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,PhotosPerMonth,The following statement contains a magic number: lock (populationTableLock) {  				uint timer = Log.DebugTimerStart ();  				var val = new Dictionary<int' int []> ();    				//Sqlite is way more efficient querying to a temp then grouping than grouping at once  				Database.Execute ("DROP TABLE IF EXISTS population");  				var query_builder = new StringBuilder ("CREATE TEMPORARY TABLE population AS SELECT strftime('%Y%m'' datetime(time' 'unixepoch')) AS month FROM photos");  				bool where_added = false;  				foreach (IQueryCondition condition in conditions) {  					if (condition == null)  						continue;  					if (condition is IOrderCondition)  						continue;  					query_builder.Append (where_added ? " AND " : " WHERE ");  					query_builder.Append (condition.SqlClause ());  					where_added = true;  				}  				Database.Execute (query_builder.ToString ());    				int minyear = Int32.MaxValue;  				int maxyear = Int32.MinValue;    				using (var reader = Database.Query ("SELECT COUNT (*) as count' month from population GROUP BY month")) {  					while (reader.Read ()) {  						string yyyymm = reader ["month"].ToString ();  						int count = Convert.ToInt32 (reader ["count"]);  						int year = Convert.ToInt32 (yyyymm.Substring (0' 4));  						maxyear = Math.Max (year' maxyear);  						minyear = Math.Min (year' minyear);  						int month = Convert.ToInt32 (yyyymm.Substring (4));  						if (!val.ContainsKey (year))  							val.Add (year' new int [12]);  						val [year] [month - 1] = count;  					}  				}    				//Fill the blank  				for (int i = minyear; i <= maxyear; i++)  					if (!val.ContainsKey (i))  						val.Add (i' new int [12]);    				Log.DebugTimerPrint (timer' "PhotosPerMonth took {0}");  				return val;  			}
Magic Number,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,PhotosPerMonth,The following statement contains a magic number: lock (populationTableLock) {  				uint timer = Log.DebugTimerStart ();  				var val = new Dictionary<int' int []> ();    				//Sqlite is way more efficient querying to a temp then grouping than grouping at once  				Database.Execute ("DROP TABLE IF EXISTS population");  				var query_builder = new StringBuilder ("CREATE TEMPORARY TABLE population AS SELECT strftime('%Y%m'' datetime(time' 'unixepoch')) AS month FROM photos");  				bool where_added = false;  				foreach (IQueryCondition condition in conditions) {  					if (condition == null)  						continue;  					if (condition is IOrderCondition)  						continue;  					query_builder.Append (where_added ? " AND " : " WHERE ");  					query_builder.Append (condition.SqlClause ());  					where_added = true;  				}  				Database.Execute (query_builder.ToString ());    				int minyear = Int32.MaxValue;  				int maxyear = Int32.MinValue;    				using (var reader = Database.Query ("SELECT COUNT (*) as count' month from population GROUP BY month")) {  					while (reader.Read ()) {  						string yyyymm = reader ["month"].ToString ();  						int count = Convert.ToInt32 (reader ["count"]);  						int year = Convert.ToInt32 (yyyymm.Substring (0' 4));  						maxyear = Math.Max (year' maxyear);  						minyear = Math.Min (year' minyear);  						int month = Convert.ToInt32 (yyyymm.Substring (4));  						if (!val.ContainsKey (year))  							val.Add (year' new int [12]);  						val [year] [month - 1] = count;  					}  				}    				//Fill the blank  				for (int i = minyear; i <= maxyear; i++)  					if (!val.ContainsKey (i))  						val.Add (i' new int [12]);    				Log.DebugTimerPrint (timer' "PhotosPerMonth took {0}");  				return val;  			}
Magic Number,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,PhotosPerMonth,The following statement contains a magic number: lock (populationTableLock) {  				uint timer = Log.DebugTimerStart ();  				var val = new Dictionary<int' int []> ();    				//Sqlite is way more efficient querying to a temp then grouping than grouping at once  				Database.Execute ("DROP TABLE IF EXISTS population");  				var query_builder = new StringBuilder ("CREATE TEMPORARY TABLE population AS SELECT strftime('%Y%m'' datetime(time' 'unixepoch')) AS month FROM photos");  				bool where_added = false;  				foreach (IQueryCondition condition in conditions) {  					if (condition == null)  						continue;  					if (condition is IOrderCondition)  						continue;  					query_builder.Append (where_added ? " AND " : " WHERE ");  					query_builder.Append (condition.SqlClause ());  					where_added = true;  				}  				Database.Execute (query_builder.ToString ());    				int minyear = Int32.MaxValue;  				int maxyear = Int32.MinValue;    				using (var reader = Database.Query ("SELECT COUNT (*) as count' month from population GROUP BY month")) {  					while (reader.Read ()) {  						string yyyymm = reader ["month"].ToString ();  						int count = Convert.ToInt32 (reader ["count"]);  						int year = Convert.ToInt32 (yyyymm.Substring (0' 4));  						maxyear = Math.Max (year' maxyear);  						minyear = Math.Min (year' minyear);  						int month = Convert.ToInt32 (yyyymm.Substring (4));  						if (!val.ContainsKey (year))  							val.Add (year' new int [12]);  						val [year] [month - 1] = count;  					}  				}    				//Fill the blank  				for (int i = minyear; i <= maxyear; i++)  					if (!val.ContainsKey (i))  						val.Add (i' new int [12]);    				Log.DebugTimerPrint (timer' "PhotosPerMonth took {0}");  				return val;  			}
Magic Number,FSpot.Database,PhotoStore,C:\repos\mono_f-spot\src\Core\FSpot.Database\PhotoStore.cs,PhotosPerMonth,The following statement contains a magic number: lock (populationTableLock) {  				uint timer = Log.DebugTimerStart ();  				var val = new Dictionary<int' int []> ();    				//Sqlite is way more efficient querying to a temp then grouping than grouping at once  				Database.Execute ("DROP TABLE IF EXISTS population");  				var query_builder = new StringBuilder ("CREATE TEMPORARY TABLE population AS SELECT strftime('%Y%m'' datetime(time' 'unixepoch')) AS month FROM photos");  				bool where_added = false;  				foreach (IQueryCondition condition in conditions) {  					if (condition == null)  						continue;  					if (condition is IOrderCondition)  						continue;  					query_builder.Append (where_added ? " AND " : " WHERE ");  					query_builder.Append (condition.SqlClause ());  					where_added = true;  				}  				Database.Execute (query_builder.ToString ());    				int minyear = Int32.MaxValue;  				int maxyear = Int32.MinValue;    				using (var reader = Database.Query ("SELECT COUNT (*) as count' month from population GROUP BY month")) {  					while (reader.Read ()) {  						string yyyymm = reader ["month"].ToString ();  						int count = Convert.ToInt32 (reader ["count"]);  						int year = Convert.ToInt32 (yyyymm.Substring (0' 4));  						maxyear = Math.Max (year' maxyear);  						minyear = Math.Min (year' minyear);  						int month = Convert.ToInt32 (yyyymm.Substring (4));  						if (!val.ContainsKey (year))  							val.Add (year' new int [12]);  						val [year] [month - 1] = count;  					}  				}    				//Fill the blank  				for (int i = minyear; i <= maxyear; i++)  					if (!val.ContainsKey (i))  						val.Add (i' new int [12]);    				Log.DebugTimerPrint (timer' "PhotosPerMonth took {0}");  				return val;  			}
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (3' 1)' delegate () {  				if (TableExists ("exports"))  					ExecuteScalar ("DELETE FROM exports WHERE export_type='fspot:Folder'");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (4' 0)' delegate () {});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (5' 0)' delegate () {  				Log.Debug ("Will add a roll_id field to photos!");  				string tmp_photos = MoveTableToTemp ("photos");  				Execute (  					"CREATE TABLE photos (                                     " +  					"	id                 INTEGER PRIMARY KEY NOT NULL'   " +  					"       time               INTEGER NOT NULL'	   	   " +  					"       directory_path     STRING NOT NULL'		   " +  					"       name               STRING NOT NULL'		   " +  					"       description        TEXT NOT NULL'	           " +  					"       roll_id            INTEGER NOT NULL'		   " +  					"       default_version_id INTEGER NOT NULL		   " +  					")");  				ExecuteScalar (string.Format ("INSERT INTO photos SELECT id' time' directory_path' name' description' 0' default_version_id FROM {0}"' tmp_photos));    				Log.Debug ("Will rename imports to rolls!");  				string tmp_rolls = MoveTableToTemp ("imports");  				Execute (  					"CREATE TABLE rolls (                                     " +  					"	id                 INTEGER PRIMARY KEY NOT NULL'   " +  					"       time               INTEGER NOT NULL	   	   " +  					")");  				ExecuteScalar (string.Format ("INSERT INTO rolls SELECT id' time FROM {0}"' tmp_rolls));    				Log.Debug ("Cleaning weird descriptions' fixes bug #324425.");  				Execute ("UPDATE photos SET description = \"\" WHERE description LIKE \"Invalid size of entry%\"");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (6' 0)' delegate () {  				ExecuteScalar ("UPDATE tags SET icon = \"stock_icon:emblem-generic\" " +  						" WHERE icon LIKE \"stock_icon:f-spot-other.png\"");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (7' 0)' delegate () {  				string tmp_photos = MoveTableToTemp ("photos");  				Execute (  					"CREATE TABLE photos (" +  					"	id                 INTEGER PRIMARY KEY NOT NULL'" +  					"       time               INTEGER NOT NULL'" +  					"       uri                STRING NOT NULL'" +  					"       description        TEXT NOT NULL'" +  					"       roll_id            INTEGER NOT NULL'" +  					"       default_version_id INTEGER NOT NULL" +  					")");  				Execute (string.Format (  					"INSERT INTO photos (id' time' uri' description' roll_id' default_version_id)	" +  					"SELECT id' time' 'file://' || directory_path || '/' || name' 		" +  					"description' roll_id' default_version_id FROM {0}"' tmp_photos));  			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (8' 0)' delegate () {  				string tmp_versions = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (          " +  					"       photo_id        INTEGER'        " +  					"       version_id      INTEGER'        " +  					"       name            STRING'         " +  					"       uri             STRING NOT NULL " +  					")");    				Hyena.Data.Sqlite.IDataReader reader = ExecuteReader (string.Format (  						"SELECT photo_id' version_id' name' uri " +  						"FROM {0}' photos " +  						"WHERE photo_id = id "' tmp_versions));    				while (reader.Read ()) {  					System.Uri photo_uri = new System.Uri (reader [3] as string);  					string name_without_extension = System.IO.Path.GetFileNameWithoutExtension (photo_uri.AbsolutePath);  					string extension = System.IO.Path.GetExtension (photo_uri.AbsolutePath);    					string uri = photo_uri.Scheme + "://" +  						photo_uri.Host +  						System.IO.Path.GetDirectoryName (photo_uri.AbsolutePath) + "/" +  						name_without_extension + " (" + (reader [2]).ToString () + ")" + extension;    					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' uri) " +  						"VALUES (?' ?' ?' ?)"'  						Convert.ToUInt32 (reader [0])'  						Convert.ToUInt32 (reader [1])'  						(reader [2]).ToString ()'  						uri));  				}    			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (8' 0)' delegate () {  				string tmp_versions = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (          " +  					"       photo_id        INTEGER'        " +  					"       version_id      INTEGER'        " +  					"       name            STRING'         " +  					"       uri             STRING NOT NULL " +  					")");    				Hyena.Data.Sqlite.IDataReader reader = ExecuteReader (string.Format (  						"SELECT photo_id' version_id' name' uri " +  						"FROM {0}' photos " +  						"WHERE photo_id = id "' tmp_versions));    				while (reader.Read ()) {  					System.Uri photo_uri = new System.Uri (reader [3] as string);  					string name_without_extension = System.IO.Path.GetFileNameWithoutExtension (photo_uri.AbsolutePath);  					string extension = System.IO.Path.GetExtension (photo_uri.AbsolutePath);    					string uri = photo_uri.Scheme + "://" +  						photo_uri.Host +  						System.IO.Path.GetDirectoryName (photo_uri.AbsolutePath) + "/" +  						name_without_extension + " (" + (reader [2]).ToString () + ")" + extension;    					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' uri) " +  						"VALUES (?' ?' ?' ?)"'  						Convert.ToUInt32 (reader [0])'  						Convert.ToUInt32 (reader [1])'  						(reader [2]).ToString ()'  						uri));  				}    			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (8' 0)' delegate () {  				string tmp_versions = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (          " +  					"       photo_id        INTEGER'        " +  					"       version_id      INTEGER'        " +  					"       name            STRING'         " +  					"       uri             STRING NOT NULL " +  					")");    				Hyena.Data.Sqlite.IDataReader reader = ExecuteReader (string.Format (  						"SELECT photo_id' version_id' name' uri " +  						"FROM {0}' photos " +  						"WHERE photo_id = id "' tmp_versions));    				while (reader.Read ()) {  					System.Uri photo_uri = new System.Uri (reader [3] as string);  					string name_without_extension = System.IO.Path.GetFileNameWithoutExtension (photo_uri.AbsolutePath);  					string extension = System.IO.Path.GetExtension (photo_uri.AbsolutePath);    					string uri = photo_uri.Scheme + "://" +  						photo_uri.Host +  						System.IO.Path.GetDirectoryName (photo_uri.AbsolutePath) + "/" +  						name_without_extension + " (" + (reader [2]).ToString () + ")" + extension;    					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' uri) " +  						"VALUES (?' ?' ?' ?)"'  						Convert.ToUInt32 (reader [0])'  						Convert.ToUInt32 (reader [1])'  						(reader [2]).ToString ()'  						uri));  				}    			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (8' 0)' delegate () {  				string tmp_versions = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (          " +  					"       photo_id        INTEGER'        " +  					"       version_id      INTEGER'        " +  					"       name            STRING'         " +  					"       uri             STRING NOT NULL " +  					")");    				Hyena.Data.Sqlite.IDataReader reader = ExecuteReader (string.Format (  						"SELECT photo_id' version_id' name' uri " +  						"FROM {0}' photos " +  						"WHERE photo_id = id "' tmp_versions));    				while (reader.Read ()) {  					System.Uri photo_uri = new System.Uri (reader [3] as string);  					string name_without_extension = System.IO.Path.GetFileNameWithoutExtension (photo_uri.AbsolutePath);  					string extension = System.IO.Path.GetExtension (photo_uri.AbsolutePath);    					string uri = photo_uri.Scheme + "://" +  						photo_uri.Host +  						System.IO.Path.GetDirectoryName (photo_uri.AbsolutePath) + "/" +  						name_without_extension + " (" + (reader [2]).ToString () + ")" + extension;    					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' uri) " +  						"VALUES (?' ?' ?' ?)"'  						Convert.ToUInt32 (reader [0])'  						Convert.ToUInt32 (reader [1])'  						(reader [2]).ToString ()'  						uri));  				}    			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (9' 0)' delegate () {  				string tmp_versions = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (          " +  					"       photo_id        INTEGER'        " +  					"       version_id      INTEGER'        " +  					"       name            STRING'         " +  					"       uri             STRING NOT NULL'" +  					"	protected	BOOLEAN		" +  					")");  				Execute (string.Format (  					"INSERT INTO photo_versions (photo_id' version_id' name' uri' protected) " +  					"SELECT photo_id' version_id' name' uri' 0 " +  					"FROM {0} "' tmp_versions));  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (10' 0)' delegate () {  				string tmp_photos = MoveTableToTemp ("photos");  				Execute (  					"CREATE TABLE photos (                                     " +  					"	id                 INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL' " +  					"	time               INTEGER NOT NULL'	   	   " +  					"	uri		   STRING NOT NULL'		   " +  					"	description        TEXT NOT NULL'	           " +  					"	roll_id            INTEGER NOT NULL'		   " +  					"	default_version_id INTEGER NOT NULL		   " +  					")");    				Execute (string.Format (  					"INSERT INTO photos (id' time' uri' description' roll_id' default_version_id) " +  					"SELECT id' time' uri' description' roll_id' default_version_id  " +  					"FROM  {0} "' tmp_photos));  			}' false);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (11' 0)' delegate () {  				string tmp_photos = MoveTableToTemp ("photos");  				Execute (  					"CREATE TABLE photos (                                     " +  					"	id                 INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL' " +  					"	time               INTEGER NOT NULL'	   	   " +  					"	uri		   STRING NOT NULL'		   " +  					"	description        TEXT NOT NULL'	           " +  					"	roll_id            INTEGER NOT NULL'		   " +  					"	default_version_id INTEGER NOT NULL'		   " +  					"       rating             INTEGER NULL			   " +  					")");    				Execute (string.Format (  					"INSERT INTO photos (id' time' uri' description' roll_id' default_version_id' rating) " +  					"SELECT id' time' uri' description' roll_id' default_version_id' null  " +  					"FROM  {0} "' tmp_photos));  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (12' 0)' delegate () {  				Execute ("DELETE FROM photo_tags WHERE tag_id NOT IN (SELECT id FROM tags)");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (13' 0)' delegate () {  				Execute ("UPDATE photos SET rating = 0 WHERE rating IS NULL");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (14' 0)' delegate () {  				Execute ("UPDATE photos SET rating = 0 WHERE rating IS NULL");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (15' 0)' delegate () {  				string tmp_photo_tags = MoveTableToTemp ("photo_tags");  				Execute (  					"CREATE TABLE photo_tags (        " +  					"	photo_id      INTEGER'    " +  					"       tag_id        INTEGER'    " +  					"       UNIQUE (photo_id' tag_id) " +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_tags (photo_id' tag_id) " +  					"SELECT photo_id' tag_id FROM {0}"' tmp_photo_tags));  				string tmp_photo_versions = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (		" +  					"	photo_id	INTEGER'	" +  					"	version_id	INTEGER'	" +  					"	name		STRING'		" +  					"	uri		STRING NOT NULL'" +  					"	protected	BOOLEAN' 	" +  					"	UNIQUE (photo_id' version_id)	" +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_versions 		" +  					"(photo_id' version_id' name' uri' protected)	" +  					"SELECT photo_id' version_id' name' uri' protected FROM {0}"' tmp_photo_versions));  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 0)' delegate () {  				string temp_table = MoveTableToTemp ("photos");    				Execute ("CREATE TABLE photos ( " +  					  "	id                 INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL'   " +  					  "	time               INTEGER NOT NULL'	   	   " +  					  "	uri		   STRING NOT NULL'		   " +  					  "	description        TEXT NOT NULL'	           " +  					  "	roll_id            INTEGER NOT NULL'		   " +  					  "	default_version_id INTEGER NOT NULL'		   " +  					  "	rating		   INTEGER NULL'		   " +  					  "	md5_sum		   TEXT NULL  			   " +  					  ")"  				 );    				Execute (string.Format ("INSERT INTO photos (id' time' uri' description' roll_id' " +  							 "default_version_id' rating' md5_sum) " +  							 "SELECT id' time' uri' description' roll_id' " +  							 "       default_version_id' rating' '' " +  							 "FROM   {0} "'  							 temp_table  							)  				 );      				string temp_versions_table = MoveTableToTemp ("photo_versions");    				Execute ("CREATE TABLE photo_versions (    	" +  					  "      photo_id        INTEGER'  	" +  					  "      version_id      INTEGER'  	" +  					  "      name            STRING'    	" +  					  "	uri		STRING NOT NULL'" +  					  "	md5_sum		STRING NOT NULL'" +  					  "	protected	BOOLEAN		" +  					  ")");    				Execute (string.Format ("INSERT INTO photo_versions (photo_id' version_id' name' uri' md5_sum' protected) " +  							 "SELECT photo_id' version_id' name' uri' ''' protected " +  							 "FROM   {0} "'  							 temp_versions_table  							)  				 );    				JobStore.CreateTable (db);    				// This is kind of hacky but should be a lot faster on  				// large photo databases  				Execute (string.Format ("INSERT INTO jobs (job_type' job_options' run_at' job_priority) " +  							 "SELECT '{0}'' id' {1}' {2} " +  							 "FROM   photos "'  							 typeof(Jobs.CalculateHashJob).ToString ()'  							 DateTimeUtil.FromDateTime (DateTime.Now)'  							 0  							)  				 );  			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 1)' delegate () {  				Execute ("CREATE INDEX idx_photo_versions_id ON photo_versions(photo_id)");  			}' false);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 2)' delegate () {  				Execute ("CREATE INDEX idx_photos_roll_id ON photos(roll_id)");  			}' false);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 2)' delegate () {  				Execute ("CREATE INDEX idx_photos_roll_id ON photos(roll_id)");  			}' false);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 3)' delegate () {  				Execute (string.Format ("DELETE FROM jobs WHERE job_type = '{0}'"' typeof(Jobs.CalculateHashJob).ToString ()));  			}' false);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 3)' delegate () {  				Execute (string.Format ("DELETE FROM jobs WHERE job_type = '{0}'"' typeof(Jobs.CalculateHashJob).ToString ()));  			}' false);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 4)' delegate () { //fix the tables schema EOL  				string temp_table = MoveTableToTemp ("exports");  				Execute (  					"CREATE TABLE exports (\n" +  					"	id			INTEGER PRIMARY KEY NOT NULL' \n" +  					"	image_id		INTEGER NOT NULL' \n" +  					"	image_version_id	INTEGER NOT NULL' \n" +  					"	export_type		TEXT NOT NULL' \n" +  					"	export_token		TEXT NOT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO exports (id' image_id' image_version_id' export_type' export_token) " +  					"SELECT id' image_id' image_version_id' export_type' export_token " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("jobs");  				Execute (  					"CREATE TABLE jobs (\n" +  					"	id		INTEGER PRIMARY KEY NOT NULL' \n" +  					"	job_type	TEXT NOT NULL' \n" +  					"	job_options	TEXT NOT NULL' \n" +  					"	run_at		INTEGER' \n" +  					"	job_priority	INTEGER NOT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO jobs (id' job_type' job_options' run_at' job_priority) " +  					"SELECT id' job_type' job_options' run_at' job_priority " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("meta");  				Execute (  					"CREATE TABLE meta (\n" +  					"	id	INTEGER PRIMARY KEY NOT NULL' \n" +  					"	name	TEXT UNIQUE NOT NULL' \n" +  					"	data	TEXT\n" +  					")");  				Execute (string.Format (  					"INSERT INTO meta (id' name' data) " +  					"SELECT id' name' data " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("photos");  				Execute (  					"CREATE TABLE photos (\n" +  					"	id			INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL' \n" +  					"	time			INTEGER NOT NULL' \n" +  					"	uri			STRING NOT NULL' \n" +  					"	description		TEXT NOT NULL' \n" +  					"	roll_id			INTEGER NOT NULL' \n" +  					"	default_version_id	INTEGER NOT NULL' \n" +  					"	rating			INTEGER NULL' \n" +  					"	md5_sum			TEXT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO photos (id' time' uri' description' roll_id' default_version_id' rating' md5_sum) " +  					"SELECT id' time' uri' description' roll_id' default_version_id' rating' md5_sum " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("photo_tags");  				Execute (  					"CREATE TABLE photo_tags (\n" +  					"	photo_id	INTEGER' \n" +  					"       tag_id		INTEGER' \n" +  					"       UNIQUE (photo_id' tag_id)\n" +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_tags (photo_id' tag_id) " +  					"SELECT photo_id' tag_id " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (\n" +  					"	photo_id	INTEGER' \n" +  					"	version_id	INTEGER' \n" +  					"	name		STRING' \n" +  					"	uri		STRING NOT NULL' \n" +  					"	md5_sum		STRING NOT NULL' \n" +  					"	protected	BOOLEAN' \n" +  					"	UNIQUE (photo_id' version_id)\n" +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_versions (photo_id' version_id' name' uri' md5_sum' protected) " +  					"SELECT photo_id' version_id' name' uri' md5_sum' protected " +  					"FROM {0}"' temp_table));    				Execute ("CREATE INDEX idx_photo_versions_id ON photo_versions(photo_id)");  				Execute ("CREATE INDEX idx_photos_roll_id ON photos(roll_id)");    				temp_table = MoveTableToTemp ("rolls");  				Execute (  					"CREATE TABLE rolls (\n" +  					"	id	INTEGER PRIMARY KEY NOT NULL' \n" +  					"       time	INTEGER NOT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO rolls (id' time) " +  					"SELECT id' time " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("tags");  				Execute (  					"CREATE TABLE tags (\n" +  					"	id		INTEGER PRIMARY KEY NOT NULL' \n" +  					"	name		TEXT UNIQUE' \n" +  					"	category_id	INTEGER' \n" +  					"	is_category	BOOLEAN' \n" +  					"	sort_priority	INTEGER' \n" +  					"	icon		TEXT\n" +  					")");  				Execute (string.Format (  					"INSERT INTO tags (id' name' category_id' is_category' sort_priority' icon) " +  					"SELECT id' name' category_id' is_category' sort_priority' icon " +  					"FROM {0}"' temp_table));  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 4)' delegate () { //fix the tables schema EOL  				string temp_table = MoveTableToTemp ("exports");  				Execute (  					"CREATE TABLE exports (\n" +  					"	id			INTEGER PRIMARY KEY NOT NULL' \n" +  					"	image_id		INTEGER NOT NULL' \n" +  					"	image_version_id	INTEGER NOT NULL' \n" +  					"	export_type		TEXT NOT NULL' \n" +  					"	export_token		TEXT NOT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO exports (id' image_id' image_version_id' export_type' export_token) " +  					"SELECT id' image_id' image_version_id' export_type' export_token " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("jobs");  				Execute (  					"CREATE TABLE jobs (\n" +  					"	id		INTEGER PRIMARY KEY NOT NULL' \n" +  					"	job_type	TEXT NOT NULL' \n" +  					"	job_options	TEXT NOT NULL' \n" +  					"	run_at		INTEGER' \n" +  					"	job_priority	INTEGER NOT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO jobs (id' job_type' job_options' run_at' job_priority) " +  					"SELECT id' job_type' job_options' run_at' job_priority " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("meta");  				Execute (  					"CREATE TABLE meta (\n" +  					"	id	INTEGER PRIMARY KEY NOT NULL' \n" +  					"	name	TEXT UNIQUE NOT NULL' \n" +  					"	data	TEXT\n" +  					")");  				Execute (string.Format (  					"INSERT INTO meta (id' name' data) " +  					"SELECT id' name' data " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("photos");  				Execute (  					"CREATE TABLE photos (\n" +  					"	id			INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL' \n" +  					"	time			INTEGER NOT NULL' \n" +  					"	uri			STRING NOT NULL' \n" +  					"	description		TEXT NOT NULL' \n" +  					"	roll_id			INTEGER NOT NULL' \n" +  					"	default_version_id	INTEGER NOT NULL' \n" +  					"	rating			INTEGER NULL' \n" +  					"	md5_sum			TEXT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO photos (id' time' uri' description' roll_id' default_version_id' rating' md5_sum) " +  					"SELECT id' time' uri' description' roll_id' default_version_id' rating' md5_sum " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("photo_tags");  				Execute (  					"CREATE TABLE photo_tags (\n" +  					"	photo_id	INTEGER' \n" +  					"       tag_id		INTEGER' \n" +  					"       UNIQUE (photo_id' tag_id)\n" +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_tags (photo_id' tag_id) " +  					"SELECT photo_id' tag_id " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (\n" +  					"	photo_id	INTEGER' \n" +  					"	version_id	INTEGER' \n" +  					"	name		STRING' \n" +  					"	uri		STRING NOT NULL' \n" +  					"	md5_sum		STRING NOT NULL' \n" +  					"	protected	BOOLEAN' \n" +  					"	UNIQUE (photo_id' version_id)\n" +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_versions (photo_id' version_id' name' uri' md5_sum' protected) " +  					"SELECT photo_id' version_id' name' uri' md5_sum' protected " +  					"FROM {0}"' temp_table));    				Execute ("CREATE INDEX idx_photo_versions_id ON photo_versions(photo_id)");  				Execute ("CREATE INDEX idx_photos_roll_id ON photos(roll_id)");    				temp_table = MoveTableToTemp ("rolls");  				Execute (  					"CREATE TABLE rolls (\n" +  					"	id	INTEGER PRIMARY KEY NOT NULL' \n" +  					"       time	INTEGER NOT NULL\n" +  					")");  				Execute (string.Format (  					"INSERT INTO rolls (id' time) " +  					"SELECT id' time " +  					"FROM {0}"' temp_table));    				temp_table = MoveTableToTemp ("tags");  				Execute (  					"CREATE TABLE tags (\n" +  					"	id		INTEGER PRIMARY KEY NOT NULL' \n" +  					"	name		TEXT UNIQUE' \n" +  					"	category_id	INTEGER' \n" +  					"	is_category	BOOLEAN' \n" +  					"	sort_priority	INTEGER' \n" +  					"	icon		TEXT\n" +  					")");  				Execute (string.Format (  					"INSERT INTO tags (id' name' category_id' is_category' sort_priority' icon) " +  					"SELECT id' name' category_id' is_category' sort_priority' icon " +  					"FROM {0}"' temp_table));  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 5)' delegate () { //fix md5 null in photos and photo_versions table  				string temp_table = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (\n" +  					"	photo_id	INTEGER' \n" +  					"	version_id	INTEGER' \n" +  					"	name		STRING' \n" +  					"	uri		STRING NOT NULL' \n" +  					"	md5_sum		TEXT NULL' \n" +  					"	protected	BOOLEAN' \n" +  					"	UNIQUE (photo_id' version_id)\n" +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_versions (photo_id' version_id' name' uri' md5_sum' protected) " +  					"SELECT photo_id' version_id' name' uri' md5_sum' protected " +  					"FROM {0}"' temp_table));    				Execute ("CREATE INDEX idx_photo_versions_id ON photo_versions(photo_id)");    				Execute ("UPDATE photos SET md5_sum = NULL WHERE md5_sum = ''");  				Execute ("UPDATE photo_versions SET md5_sum = NULL WHERE md5_sum = ''");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (16' 5)' delegate () { //fix md5 null in photos and photo_versions table  				string temp_table = MoveTableToTemp ("photo_versions");  				Execute (  					"CREATE TABLE photo_versions (\n" +  					"	photo_id	INTEGER' \n" +  					"	version_id	INTEGER' \n" +  					"	name		STRING' \n" +  					"	uri		STRING NOT NULL' \n" +  					"	md5_sum		TEXT NULL' \n" +  					"	protected	BOOLEAN' \n" +  					"	UNIQUE (photo_id' version_id)\n" +  					")");  				Execute (string.Format (  					"INSERT OR IGNORE INTO photo_versions (photo_id' version_id' name' uri' md5_sum' protected) " +  					"SELECT photo_id' version_id' name' uri' md5_sum' protected " +  					"FROM {0}"' temp_table));    				Execute ("CREATE INDEX idx_photo_versions_id ON photo_versions(photo_id)");    				Execute ("UPDATE photos SET md5_sum = NULL WHERE md5_sum = ''");  				Execute ("UPDATE photo_versions SET md5_sum = NULL WHERE md5_sum = ''");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (17' 0)' delegate () {  				string tmp_photos = MoveTableToTemp ("photos");  				string tmp_versions = MoveTableToTemp ("photo_versions");    				Execute (  					"CREATE TABLE photos (\n" +  					"	id			INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL' \n" +  					"	time			INTEGER NOT NULL' \n" +  					"	base_uri		STRING NOT NULL' \n" +  					"	filename		STRING NOT NULL' \n" +  					"	description		TEXT NOT NULL' \n" +  					"	roll_id			INTEGER NOT NULL' \n" +  					"	default_version_id	INTEGER NOT NULL' \n" +  					"	rating			INTEGER NULL' \n" +  					"	md5_sum			TEXT NULL\n" +  					")");    				Execute (  					"CREATE TABLE photo_versions (\n" +  					"	photo_id	INTEGER' \n" +  					"	version_id	INTEGER' \n" +  					"	name		STRING' \n" +  					"	base_uri		STRING NOT NULL' \n" +  					"	filename		STRING NOT NULL' \n" +  					"	md5_sum		TEXT NULL' \n" +  					"	protected	BOOLEAN' \n" +  					"	UNIQUE (photo_id' version_id)\n" +  					")");    				Hyena.Data.Sqlite.IDataReader reader = ExecuteReader (string.Format (  					"SELECT id' time' uri' description' roll_id' default_version_id' rating' md5_sum " +  					"FROM {0} "' tmp_photos));    				while (reader.Read ()) {  					System.Uri photo_uri = new System.Uri (reader ["uri"] as string);    					string filename = photo_uri.GetFilename ();  					Uri base_uri = photo_uri.GetDirectoryUri ();    					string md5 = reader ["md5_sum"] != null ? reader ["md5_sum"].ToString () : null;    					Execute (new HyenaSqliteCommand (  						"INSERT INTO photos (id' time' base_uri' filename' description' roll_id' default_version_id' rating' md5_sum) " +  						"VALUES (?' ?' ?' ?' ?' ?' ?' ?' ?)"'  						Convert.ToUInt32 (reader ["id"])'  						reader ["time"]'  						base_uri.ToString ()'  						filename'  						reader ["description"].ToString ()'  						Convert.ToUInt32 (reader ["roll_id"])'  						Convert.ToUInt32 (reader ["default_version_id"])'  						Convert.ToUInt32 (reader ["rating"])'  						string.IsNullOrEmpty (md5) ? null : md5));  				}    				reader.Dispose ();    				reader = ExecuteReader (string.Format (  						"SELECT photo_id' version_id' name' uri' md5_sum' protected " +  						"FROM {0} "' tmp_versions));    				while (reader.Read ()) {  					System.Uri photo_uri = new System.Uri (reader ["uri"] as string);    					string filename = photo_uri.GetFilename ();  					Uri base_uri = photo_uri.GetDirectoryUri ();    					string md5 = reader ["md5_sum"] != null ? reader ["md5_sum"].ToString () : null;    					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' base_uri' filename' protected' md5_sum) " +  						"VALUES (?' ?' ?' ?' ?' ?' ?)"'  						Convert.ToUInt32 (reader ["photo_id"])'  						Convert.ToUInt32 (reader ["version_id"])'  						reader ["name"].ToString ()'  						base_uri.ToString ()'  						filename'  						Convert.ToBoolean (reader ["protected"])'  						string.IsNullOrEmpty (md5) ? null : md5));  				}    				Execute ("CREATE INDEX idx_photos_roll_id ON photos(roll_id)");  				Execute ("CREATE INDEX idx_photo_versions_id ON photo_versions(photo_id)");      			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (17' 1)' delegate () {  				Execute ("UPDATE tags SET name = 'Imported Tags' WHERE name = 'Import Tags'");  			});
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (17' 2)' delegate () {  				// Find photos that have no original version;  				var have_original_query = "SELECT id FROM photos LEFT JOIN photo_versions AS pv ON pv.photo_id = id WHERE pv.version_id = 1";  				var no_original_query = string.Format ("SELECT id' base_uri' filename FROM photos WHERE id NOT IN ({0})"' have_original_query);    				var reader = ExecuteReader (no_original_query);    				while (reader.Read ()) {  					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' base_uri' filename' protected' md5_sum) " +  						"VALUES (?' ?' ?' ?' ?' ?' ?)"'  						Convert.ToUInt32 (reader ["id"])'  						1'  						"Original"'  						reader ["base_uri"].ToString ()'  						reader ["filename"].ToString ()'  						1'  						""));  				}  			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (17' 2)' delegate () {  				// Find photos that have no original version;  				var have_original_query = "SELECT id FROM photos LEFT JOIN photo_versions AS pv ON pv.photo_id = id WHERE pv.version_id = 1";  				var no_original_query = string.Format ("SELECT id' base_uri' filename FROM photos WHERE id NOT IN ({0})"' have_original_query);    				var reader = ExecuteReader (no_original_query);    				while (reader.Read ()) {  					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' base_uri' filename' protected' md5_sum) " +  						"VALUES (?' ?' ?' ?' ?' ?' ?)"'  						Convert.ToUInt32 (reader ["id"])'  						1'  						"Original"'  						reader ["base_uri"].ToString ()'  						reader ["filename"].ToString ()'  						1'  						""));  				}  			}' true);
Magic Number,FSpot.Database,Updater,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Updater,The following statement contains a magic number: AddUpdate (new Version (18' 0)' delegate () {  				string tmp_photos = MoveTableToTemp ("photos");  				string tmp_versions = MoveTableToTemp ("photo_versions");    				Execute (  					"CREATE TABLE photos (\n" +  					"	id			INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL' \n" +  					"	time			INTEGER NOT NULL' \n" +  					"	base_uri		STRING NOT NULL' \n" +  					"	filename		STRING NOT NULL' \n" +  					"	description		TEXT NOT NULL' \n" +  					"	roll_id			INTEGER NOT NULL' \n" +  					"	default_version_id	INTEGER NOT NULL' \n" +  					"	rating			INTEGER NULL \n" +  					")");    				Execute (  					"CREATE TABLE photo_versions (\n" +  					"	photo_id	INTEGER' \n" +  					"	version_id	INTEGER' \n" +  					"	name		STRING' \n" +  					"	base_uri		STRING NOT NULL' \n" +  					"	filename		STRING NOT NULL' \n" +  					"	import_md5		TEXT NULL' \n" +  					"	protected	BOOLEAN' \n" +  					"	UNIQUE (photo_id' version_id)\n" +  					")");    				var reader = ExecuteReader (string.Format (  					"SELECT id' time' base_uri' filename' description' roll_id' default_version_id' rating " +  					"FROM {0} "' tmp_photos));    				while (reader.Read ()) {  					Execute (new HyenaSqliteCommand (  						"INSERT INTO photos (id' time' base_uri' filename' description' roll_id' default_version_id' rating) " +  						"VALUES (?' ?' ?' ?' ?' ?' ?' ?)"'  						Convert.ToUInt32 (reader ["id"])'  						reader ["time"]'  						reader ["base_uri"].ToString ()'  						reader ["filename"].ToString ()'  						reader ["description"].ToString ()'  						Convert.ToUInt32 (reader ["roll_id"])'  						Convert.ToUInt32 (reader ["default_version_id"])'  						Convert.ToUInt32 (reader ["rating"])));  				}    				reader.Dispose ();    				reader = ExecuteReader (string.Format (  						"SELECT photo_id' version_id' name' base_uri' filename' protected " +  						"FROM {0} "' tmp_versions));    				while (reader.Read ()) {  					Execute (new HyenaSqliteCommand (  						"INSERT INTO photo_versions (photo_id' version_id' name' base_uri' filename' protected' import_md5) " +  						"VALUES (?' ?' ?' ?' ?' ?' ?)"'  						Convert.ToUInt32 (reader ["photo_id"])'  						Convert.ToUInt32 (reader ["version_id"])'  						reader ["name"].ToString ()'  						reader ["base_uri"].ToString ()'  						reader ["filename"].ToString ()'  						Convert.ToBoolean (reader ["protected"])'  						""));  				}    				Execute ("CREATE INDEX idx_photo_versions_import_md5 ON photo_versions(import_md5)");    			}' true);
Magic Number,FSpot.Database,Version,C:\repos\mono_f-spot\src\Core\FSpot.Database\Updater.cs,Version,The following statement contains a magic number: string [] parts = version.Split (new char [] {'.'}' 2);
Magic Number,FSpot.Database.Jobs,CalculateHashJob,C:\repos\mono_f-spot\src\Core\FSpot.Database\Jobs\CalculateHashJob.cs,Execute,The following statement contains a magic number: System.Threading.Thread.Sleep (200);
Magic Number,FSpot.Database.Jobs,SyncMetadataJob,C:\repos\mono_f-spot\src\Core\FSpot.Database\Jobs\SyncMetadataJob.cs,Execute,The following statement contains a magic number: System.Threading.Thread.Sleep (500);
