Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,InitEntities,The method has 257 lines of code.
Complex Method,Hyena.Query,QueryListNode,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryListNode.cs,AppendUserQuery,Cyclomatic complexity of the method is 8
Complex Method,Hyena.CommandLine,Layout,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.CommandLine\Layout.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Hyena,StringUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\StringUtil.cs,FormatInterleaved,Cyclomatic complexity of the method is 8
Complex Method,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexNumber,Cyclomatic complexity of the method is 8
Complex Method,Hyena.Json,Serializer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Serializer.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 14
Complex Method,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 11
Complex Method,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Long Parameter List,Hyena.Data,PropertyChangeEventArgs,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Data\PropertyStore.cs,PropertyChangeEventArgs,The method has 5 parameters. Parameters: propertyName' added' removed' oldValue' newValue
Long Parameter List,Hyena.Data,PropertyStore,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Data\PropertyStore.cs,OnPropertyChanged,The method has 5 parameters. Parameters: propertyName' added' removed' oldValue' newValue
Long Parameter List,Hyena.Query,QueryField,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryField.cs,QueryField,The method has 5 parameters. Parameters: name' propertyName' label' column' aliases
Long Parameter List,Hyena.Query,QueryField,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryField.cs,QueryField,The method has 6 parameters. Parameters: name' propertyName' label' column' isDefault' aliases
Long Parameter List,Hyena.Query,QueryField,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryField.cs,QueryField,The method has 6 parameters. Parameters: name' propertyName' label' column' valueType' aliases
Long Parameter List,Hyena.Query,QueryField,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryField.cs,QueryField,The method has 6 parameters. Parameters: name' propertyName' label' column' valueTypes' aliases
Long Parameter List,Hyena.Query,QueryField,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryField.cs,QueryField,The method has 7 parameters. Parameters: name' propertyName' label' column' valueTypes' isDefault' aliases
Long Parameter List,Hyena.Query,Operator,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryOperator.cs,Operator,The method has 5 parameters. Parameters: name' label' sql_format' is_not' userOps
Long Parameter List,Hyena.Query,QueryOrder,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryOrder.cs,QueryOrder,The method has 5 parameters. Parameters: name' label' order_sql' field' asc
Long Parameter List,Hyena,ApplicationContext,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ApplicationContext.cs,prctl,The method has 5 parameters. Parameters: option' arg2' arg3' arg4' arg5
Long Statement,Hyena.Query,RelativeTimeSpanQueryValue,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\RelativeTimeSpanQueryValue.cs,ToSql,The length of the statement  "            return DateTimeUtil.FromDateTime (DateTime.Now + TimeSpan.FromSeconds ((double) offset)).ToString (System.Globalization.CultureInfo.InvariantCulture); " is 150.
Long Statement,Hyena,StringUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\StringUtil.cs,FormatInterleaved,The length of the statement  "                    Hyena.Log.ErrorFormat ("Translated string {0} should contain {{1}} in which to place object {2}"' format' i' objects[i]); " is 121.
Long Statement,Hyena.Downloader,HttpDownloaderState,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Downloader\HttpDownloaderState.cs,ToString,The length of the statement  "                return String.Format ("HttpDownloaderState: finished' {0}"' Success ? "successful" : "error: " + FailureException.Message); " is 123.
Complex Conditional,Hyena.Query,QueryTermNode,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryTermNode.cs,Trim,The conditional expression  "Parent != null && (qvalue == null || qvalue.IsEmpty || (field != null && op == null))"  is complex.
Complex Conditional,Hyena.Query,StringQueryValue,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\StringQueryValue.cs,EscapeString,The conditional expression  "op == Contains   || op == DoesNotContain ||                  op == StartsWith || op == EndsWith"  is complex.
Complex Conditional,Hyena.SExpEngine,Parser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\Parser.cs,TokenPush,The conditional expression  "token.Length > 0 && token != "." && token != "-" &&                  token != "+" && number_regex.IsMatch(token)"  is complex.
Complex Conditional,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||  				(c < 'A' && c > '9') ||  				(c > 'Z' && c < 'a') ||  				(c > 'z')"  is complex.
Complex Conditional,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Virtual Method Call from Constructor,Hyena.Query,QueryParser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryParser.cs,QueryParser,The constructor "QueryParser" calls a virtual method "Reset".
Empty Catch Block,Hyena.Query,XmlQueryParser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\XmlQueryParser.cs,BuildTree,The method has an empty catch block.
Empty Catch Block,Hyena,XdgBaseDirectorySpec,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\XdgBaseDirectorySpec.cs,GetUserDirectory,The method has an empty catch block.
Empty Catch Block,Hyena,Paths,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\Paths.cs,FindProgramInPath,The method has an empty catch block.
Empty Catch Block,Hyena,StringUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\StringUtil.cs,SearchKey,The method has an empty catch block.
Empty Catch Block,Hyena,ApplicationContext,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ApplicationContext.cs,TrySetProcessName,The method has an empty catch block.
Empty Catch Block,Hyena,PlatformDetection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\PlatformDetection.cs,PlatformDetection,The method has an empty catch block.
Empty Catch Block,Hyena.Downloader,HttpStringDownloader,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Downloader\HttpStringDownloader.cs,OnBufferUpdated,The method has an empty catch block.
Empty Catch Block,Hyena.Jobs,SimpleAsyncJob,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Jobs\SimpleAsyncJob.cs,InnerStart,The method has an empty catch block.
Magic Number,Hyena.Query,QueryListNode,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryListNode.cs,GetRightSibling,The following statement contains a magic number: if(index < 0 || index > ChildCount - 2) {                  return null;              }
Magic Number,Hyena.Query,QueryNode,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryNode.cs,PrintIndent,The following statement contains a magic number: Console.Write(String.Empty.PadLeft(depth * 2' ' '));
Magic Number,Hyena.Query,QueryNode,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\QueryNode.cs,ToXml,The following statement contains a magic number: using (StringWriter sw = new StringWriter ()) {                  using (XmlTextWriter xtw = new XmlTextWriter (sw)) {                      xtw.Formatting = System.Xml.Formatting.Indented;                      xtw.Indentation = 2;                      doc.WriteTo (xtw);                      return sw.ToString ();                  }              }
Magic Number,Hyena.Query,TimeSpanQueryValue,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\TimeSpanQueryValue.cs,ToSql,The following statement contains a magic number: return Convert.ToString (offset * 1000' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,Hyena.CommandLine,Layout,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.CommandLine\Layout.cs,ToString,The following statement contains a magic number: int min_spacing = 6;
Magic Number,Hyena.CommandLine,Layout,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.CommandLine\Layout.cs,ToString,The following statement contains a magic number: max_description_length = TerminalWidth - max_option_length - min_spacing - 4;
Magic Number,Hyena.CommandLine,Layout,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.CommandLine\Layout.cs,ToString,The following statement contains a magic number: description_alignment = max_option_length + min_spacing + 4;
Magic Number,Hyena.CommandLine,CommandLineParser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.CommandLine\CommandLineParser.cs,IsOption,The following statement contains a magic number: return argument.Length > 2 && argument.Substring (0' 2) == "--";
Magic Number,Hyena.CommandLine,CommandLineParser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.CommandLine\CommandLineParser.cs,IsOption,The following statement contains a magic number: return argument.Length > 2 && argument.Substring (0' 2) == "--";
Magic Number,Hyena.CommandLine,CommandLineParser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.CommandLine\CommandLineParser.cs,OptionName,The following statement contains a magic number: return argument.Substring (2);
Magic Number,Hyena,XdgBaseDirectorySpec,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\XdgBaseDirectorySpec.cs,GetUserDirectory,The following statement contains a magic number: try {                  using (StreamReader reader = new StreamReader (user_dirs_path)) {                      string line;                      while ((line = reader.ReadLine ()) != null) {                          line = line.Trim ();                          int delim_index = line.IndexOf ('=');                          if (delim_index > 8 && line.Substring (0' delim_index) == key) {                              string path = line.Substring (delim_index + 1).Trim ('"');                              bool relative = false;                                if (path.StartsWith ("$HOME/")) {                                  relative = true;                                  path = path.Substring (6);                              } else if (path.StartsWith ("~")) {                                  relative = true;                                  path = path.Substring (1);                              } else if (!path.StartsWith ("/")) {                                  relative = true;                              }                                return relative ? Path.Combine (home_dir' path) : path;                          }                      }                  }              } catch (FileNotFoundException) {              }
Magic Number,Hyena,XdgBaseDirectorySpec,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\XdgBaseDirectorySpec.cs,GetUserDirectory,The following statement contains a magic number: try {                  using (StreamReader reader = new StreamReader (user_dirs_path)) {                      string line;                      while ((line = reader.ReadLine ()) != null) {                          line = line.Trim ();                          int delim_index = line.IndexOf ('=');                          if (delim_index > 8 && line.Substring (0' delim_index) == key) {                              string path = line.Substring (delim_index + 1).Trim ('"');                              bool relative = false;                                if (path.StartsWith ("$HOME/")) {                                  relative = true;                                  path = path.Substring (6);                              } else if (path.StartsWith ("~")) {                                  relative = true;                                  path = path.Substring (1);                              } else if (!path.StartsWith ("/")) {                                  relative = true;                              }                                return relative ? Path.Combine (home_dir' path) : path;                          }                      }                  }              } catch (FileNotFoundException) {              }
Magic Number,Hyena,StringUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\StringUtil.cs,RelaxedCompare,The following statement contains a magic number: int a_offset = a.StartsWith ("the ") ? 4 : 0;
Magic Number,Hyena,StringUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\StringUtil.cs,RelaxedCompare,The following statement contains a magic number: int b_offset = b.StartsWith ("the ") ? 4 : 0;
Magic Number,Hyena,StringUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\StringUtil.cs,CamelCaseToUnderCase,The following statement contains a magic number: for (int i = 0; i < tokens.Length; i++) {                  if (tokens[i] == String.Empty) {                      continue;                  }                    undercase.Append (tokens[i].ToLower (System.Globalization.CultureInfo.InvariantCulture));                  if (i < tokens.Length - 2) {                      undercase.Append (underscore);                  }              }
Magic Number,Hyena,StringUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\StringUtil.cs,FormatInterleaved,The following statement contains a magic number: foreach (var obj in objects.OrderBy (w => indices[w])) {                  int widget_i = indices[obj];                  if (widget_i > str_pos) {                      var str = format.Substring (str_pos' widget_i - str_pos).Trim ();                      if (str != "") yield return str;                  }                    yield return obj;                  str_pos = widget_i + 2 + Array.IndexOf (objects' obj).ToString ().Length;              }
Magic Number,Hyena,Log,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\Log.cs,TimerPrint,The following statement contains a magic number: if (duration.TotalSeconds < 60) {                  d_message = duration.TotalSeconds.ToString ();              } else {                  d_message = duration.ToString ();              }
Magic Number,Hyena,CryptoUtil,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\CryptoUtil.cs,IsMd5Encoded,The following statement contains a magic number: return text == null || text.Length != 32 ? false : md5_regex.IsMatch (text);
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                  // Dark colors                  case ConsoleColor.Black: return 0;                  case ConsoleColor.DarkRed: return 1;                  case ConsoleColor.DarkGreen: return 2;                  case ConsoleColor.DarkYellow: return 3;                  case ConsoleColor.DarkBlue: return 4;                  case ConsoleColor.DarkMagenta: return 5;                  case ConsoleColor.DarkCyan: return 6;                  case ConsoleColor.Gray: return 7;                    // Light colors                  case ConsoleColor.DarkGray: light = true; return 0;                  case ConsoleColor.Red: light = true; return 1;                  case ConsoleColor.Green: light = true; return 2;                  case ConsoleColor.Yellow: light = true; return 3;                  case ConsoleColor.Blue: light = true; return 4;                  case ConsoleColor.Magenta: light = true; return 5;                  case ConsoleColor.Cyan: light = true; return 6;                  case ConsoleColor.White: default: light = true; return 7;              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,GetAnsiColorControlCode,The following statement contains a magic number: int code = TranslateColor (color' out light) + (isForeground ? 30 : 40) + (light ? 60 : 0);
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,GetAnsiColorControlCode,The following statement contains a magic number: int code = TranslateColor (color' out light) + (isForeground ? 30 : 40) + (light ? 60 : 0);
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,GetAnsiColorControlCode,The following statement contains a magic number: int code = TranslateColor (color' out light) + (isForeground ? 30 : 40) + (light ? 60 : 0);
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,DetectXtermColors,The following statement contains a magic number: xterm_colors = _xterm_colors && isatty (1) && isatty (2);
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TestAnsi,The following statement contains a magic number: foreach (ConsoleColor color in Enum.GetValues (typeof (ConsoleColor))) {                  string color_code_fg = GetAnsiColorControlCode (color' true);                  string color_code_bg = GetAnsiColorControlCode (color' false);                  Console.Write ("{0}{1}: {2}{3} :: {4}{1}: {5}{3}"' color_code_fg' color' color_code_fg.Substring (2)'                      GetAnsiResetControlCode ()' color_code_bg' color_code_bg.Substring (2));                  Console.WriteLine ();              }
Magic Number,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,TestAnsi,The following statement contains a magic number: foreach (ConsoleColor color in Enum.GetValues (typeof (ConsoleColor))) {                  string color_code_fg = GetAnsiColorControlCode (color' true);                  string color_code_bg = GetAnsiColorControlCode (color' false);                  Console.Write ("{0}{1}: {2}{3} :: {4}{1}: {5}{3}"' color_code_fg' color' color_code_fg.Substring (2)'                      GetAnsiResetControlCode ()' color_code_bg' color_code_bg.Substring (2));                  Console.WriteLine ();              }
Magic Number,Hyena,ApplicationContext,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ApplicationContext.cs,SetProcessName,The following statement contains a magic number: try {                  if (prctl (15 /* PR_SET_NAME */' Encoding.ASCII.GetBytes (name + "\0")'                      IntPtr.Zero' IntPtr.Zero' IntPtr.Zero) != 0) {                      throw new ApplicationException ("Error setting process name: " +                          Mono.Unix.Native.Stdlib.GetLastError ());                  }              } catch (EntryPointNotFoundException) {                  setproctitle (Encoding.ASCII.GetBytes ("%s\0")'                      Encoding.ASCII.GetBytes (name + "\0"));              }
Magic Number,Hyena,PlatformDetection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\PlatformDetection.cs,PlatformDetection,The following statement contains a magic number: IsUnix = p == 4 || p == 6 || p == 128;
Magic Number,Hyena,PlatformDetection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\PlatformDetection.cs,PlatformDetection,The following statement contains a magic number: IsUnix = p == 4 || p == 6 || p == 128;
Magic Number,Hyena,PlatformDetection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\PlatformDetection.cs,PlatformDetection,The following statement contains a magic number: IsUnix = p == 4 || p == 6 || p == 128;
Magic Number,Hyena,PlatformDetection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\PlatformDetection.cs,PlatformDetection,The following statement contains a magic number: IsWindows = p < 4;
Magic Number,Hyena,PlatformDetection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\PlatformDetection.cs,PlatformDetection,The following statement contains a magic number: try {                  utsname = Marshal.AllocHGlobal (8192);                  if (uname (utsname) == 0) {                      PosixSystemName = Marshal.PtrToStringAnsi (utsname);                  }              } catch {              } finally {                  if (utsname != IntPtr.Zero) {                      Marshal.FreeHGlobal (utsname);                  }              }
Magic Number,Hyena.Collections,RangeCollection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Collections\RangeCollection.cs,FindInsertionPosition,The following statement contains a magic number: while (min <= max) {                  int mid = min + ((max - min) / 2);                  int cmp = CompareRanges (ranges[mid]' range);                    if (cmp == 0) {                      return mid;                  } else if (cmp > 0) {                      if (mid > 0 && CompareRanges (ranges[mid - 1]' range) < 0) {                          return mid;                      }                        max = mid - 1;                  } else {                      min = mid + 1;                  }              }
Magic Number,Hyena.Collections,RangeCollection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Collections\RangeCollection.cs,FindRangeIndexForValue,The following statement contains a magic number: while (min <= max) {  				int mid = min + ((max - min) / 2);  				Range range = ranges[mid];  				if (value >= range.Start && value <= range.End) {  				    return mid;    // In Range  				} else if (value < range.Start) {  					max = mid - 1; // Below Range  				} else {  					min = mid + 1; // Above Range  		        }  			}
Magic Number,Hyena.Collections,IntervalHeap<T>,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Collections\IntervalHeap.cs,TrimExcess,The following statement contains a magic number: if (count < heap.Length * 0.9) {                  Array.Resize (ref heap' count);              }
Magic Number,Hyena.Collections,IntervalHeap<T>,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Collections\IntervalHeap.cs,GetLeftChildIndex,The following statement contains a magic number: return index * 2 + 1;
Magic Number,Hyena.Collections,IntervalHeap<T>,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Collections\IntervalHeap.cs,GetParentIndex,The following statement contains a magic number: return (index - 1) / 2;
Magic Number,Hyena.SExpEngine,CompareFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\CompareFunctionSet.cs,OnCompareTo,The following statement contains a magic number: if(args.Length != 2) {                  throw new ArgumentException("must have two arguments");              }
Magic Number,Hyena.SExpEngine,ControlFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ControlFunctionSet.cs,OnIf,The following statement contains a magic number: if(args == null || args.Length < 2 || args.Length > 3) {                  throw new ArgumentException("if accepts 2 or 3 arguments");              }
Magic Number,Hyena.SExpEngine,ControlFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ControlFunctionSet.cs,OnIf,The following statement contains a magic number: if(args == null || args.Length < 2 || args.Length > 3) {                  throw new ArgumentException("if accepts 2 or 3 arguments");              }
Magic Number,Hyena.SExpEngine,ControlFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ControlFunctionSet.cs,OnIf,The following statement contains a magic number: if(conditional.Value) {                  return Evaluate(args[1]);              } else if(args.Length == 3) {                  return Evaluate(args[2]);              }
Magic Number,Hyena.SExpEngine,ControlFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ControlFunctionSet.cs,OnIf,The following statement contains a magic number: if(conditional.Value) {                  return Evaluate(args[1]);              } else if(args.Length == 3) {                  return Evaluate(args[2]);              }
Magic Number,Hyena.SExpEngine,ControlFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ControlFunctionSet.cs,OnWhile,The following statement contains a magic number: if(args == null || args.Length < 1 || args.Length > 2) {                  throw new ArgumentException("while accepts a condition and an expression or just an expression");              }
Magic Number,Hyena.SExpEngine,ControlFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ControlFunctionSet.cs,OnWhile,The following statement contains a magic number: while(true) {                  if(args.Length == 2) {                      TreeNode result = Evaluate(args[0]);                      if(!(result is BooleanLiteral)) {                          throw new ArgumentException("condition is not boolean");                      }                        if(!(result as BooleanLiteral).Value) {                          break;                      }                  }                    try {                      Evaluate(args[args.Length - 1]);                  } catch(Exception e) {                      if(BreakHandler(e)) {                          break;                      }                  }              }
Magic Number,Hyena.SExpEngine,FunctionFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\FunctionFunctionSet.cs,VariableSet,The following statement contains a magic number: if(args.Length != 2) {                  throw new ArgumentException("must have two arguments");              }
Magic Number,Hyena.SExpEngine,FunctionFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\FunctionFunctionSet.cs,OnDefine,The following statement contains a magic number: if(args.Length < 2 || args.Length > 3) {                  throw new ArgumentException("define must have two or three arguments");              }
Magic Number,Hyena.SExpEngine,FunctionFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\FunctionFunctionSet.cs,OnDefine,The following statement contains a magic number: if(args.Length < 2 || args.Length > 3) {                  throw new ArgumentException("define must have two or three arguments");              }
Magic Number,Hyena.SExpEngine,FunctionFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\FunctionFunctionSet.cs,OnDefine,The following statement contains a magic number: if(args.Length == 3 && args[1].HasChildren) {                  foreach(TreeNode function_arg in args[1].Children) {                      if(!(function_arg is FunctionNode)) {                          throw new ArgumentException("define function arguments must be variable tokens");                      }                        function.RegisterFunction((function_arg as FunctionNode).Function' new VoidLiteral());                  }              }
Magic Number,Hyena.SExpEngine,ListFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ListFunctionSet.cs,OnInsert,The following statement contains a magic number: list.Children.Insert(index' Evaluate(args[2]));
Magic Number,Hyena.SExpEngine,ListFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ListFunctionSet.cs,OnForeach,The following statement contains a magic number: TreeNode function = args[2];
Magic Number,Hyena.SExpEngine,LogicFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\LogicFunctionSet.cs,OnAndOr,The following statement contains a magic number: if(args.Length < 2) {                  throw new ArgumentException("must have two or more boolean arguments");              }
Magic Number,Hyena.SExpEngine,Parser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\Parser.cs,TokenPush,The following statement contains a magic number: if(as_string) {                  node = new StringLiteral(token);              } else if(token == "#t") {                  node = new BooleanLiteral(true);              } else if(token == "#f") {                  node = new BooleanLiteral(false);              } else if(token.Length > 0 && token != "." && token != "-" &&                  token != "+" && number_regex.IsMatch(token)) {                  try {                      if(token.StartsWith("0x") || token.StartsWith("-0x")) {                          int offset = token[0] == '-' ? 3 : 2;                          int value = Int32.Parse(token.Substring(offset)'                              NumberStyles.HexNumber' culture_info.NumberFormat);                          node = new IntLiteral(value * (offset == 3 ? -1 : 1));                      } else if(token.Contains(".")) {                          node = new DoubleLiteral(Double.Parse(token'                              NumberStyles.Float' culture_info.NumberFormat));                      } else {                          node = new IntLiteral(Int32.Parse(token'                              NumberStyles.Integer' culture_info.NumberFormat));                      }                  } catch {                      throw new FormatException("Invalid number format: " + token);                  }              } else {                  node = new FunctionNode(token);              }
Magic Number,Hyena.SExpEngine,Parser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\Parser.cs,TokenPush,The following statement contains a magic number: if(as_string) {                  node = new StringLiteral(token);              } else if(token == "#t") {                  node = new BooleanLiteral(true);              } else if(token == "#f") {                  node = new BooleanLiteral(false);              } else if(token.Length > 0 && token != "." && token != "-" &&                  token != "+" && number_regex.IsMatch(token)) {                  try {                      if(token.StartsWith("0x") || token.StartsWith("-0x")) {                          int offset = token[0] == '-' ? 3 : 2;                          int value = Int32.Parse(token.Substring(offset)'                              NumberStyles.HexNumber' culture_info.NumberFormat);                          node = new IntLiteral(value * (offset == 3 ? -1 : 1));                      } else if(token.Contains(".")) {                          node = new DoubleLiteral(Double.Parse(token'                              NumberStyles.Float' culture_info.NumberFormat));                      } else {                          node = new IntLiteral(Int32.Parse(token'                              NumberStyles.Integer' culture_info.NumberFormat));                      }                  } catch {                      throw new FormatException("Invalid number format: " + token);                  }              } else {                  node = new FunctionNode(token);              }
Magic Number,Hyena.SExpEngine,Parser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\Parser.cs,TokenPush,The following statement contains a magic number: if(as_string) {                  node = new StringLiteral(token);              } else if(token == "#t") {                  node = new BooleanLiteral(true);              } else if(token == "#f") {                  node = new BooleanLiteral(false);              } else if(token.Length > 0 && token != "." && token != "-" &&                  token != "+" && number_regex.IsMatch(token)) {                  try {                      if(token.StartsWith("0x") || token.StartsWith("-0x")) {                          int offset = token[0] == '-' ? 3 : 2;                          int value = Int32.Parse(token.Substring(offset)'                              NumberStyles.HexNumber' culture_info.NumberFormat);                          node = new IntLiteral(value * (offset == 3 ? -1 : 1));                      } else if(token.Contains(".")) {                          node = new DoubleLiteral(Double.Parse(token'                              NumberStyles.Float' culture_info.NumberFormat));                      } else {                          node = new IntLiteral(Int32.Parse(token'                              NumberStyles.Integer' culture_info.NumberFormat));                      }                  } catch {                      throw new FormatException("Invalid number format: " + token);                  }              } else {                  node = new FunctionNode(token);              }
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnContains,The following statement contains a magic number: CheckArgumentCount(args' 2);
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnIndexOf,The following statement contains a magic number: CheckArgumentCount(args' 2);
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnLastIndexOf,The following statement contains a magic number: CheckArgumentCount(args' 2);
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnStartsWith,The following statement contains a magic number: CheckArgumentCount(args' 2);
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnEndsWith,The following statement contains a magic number: CheckArgumentCount(args' 2);
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnSubstring,The following statement contains a magic number: CheckArgumentCount(args' 2' 3);
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnSubstring,The following statement contains a magic number: CheckArgumentCount(args' 2' 3);
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnSubstring,The following statement contains a magic number: if(args.Length == 2) {                  return new StringLiteral(GetArgumentString(args' 0).Substring(GetArgumentInteger(args' 1)));              } else {                  return new StringLiteral(GetArgumentString(args' 0).Substring(                      GetArgumentInteger(args' 1)' GetArgumentInteger(args' 2)));              }
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnSubstring,The following statement contains a magic number: if(args.Length == 2) {                  return new StringLiteral(GetArgumentString(args' 0).Substring(GetArgumentInteger(args' 1)));              } else {                  return new StringLiteral(GetArgumentString(args' 0).Substring(                      GetArgumentInteger(args' 1)' GetArgumentInteger(args' 2)));              }
Magic Number,Hyena.SExpEngine,StringFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\StringFunctionSet.cs,OnSplit,The following statement contains a magic number: CheckArgumentCount(args' 2);
Magic Number,Hyena.SExpEngine,TreeNode,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\TreeNode.cs,DumpTree,The following statement contains a magic number: if(node is LiteralNodeBase || node is FunctionNode) {                  PrintIndent(depth' node);              } else if(node != null) {                  int i = 0;                  Console.Write("{0}+ ["' String.Empty.PadLeft(depth * 2' ' '));                  foreach(KeyValuePair<string' FunctionNode> function in node.Functions) {                      Console.Write("{0}{1}"' function.Key' i++ < node.FunctionCount - 1 ? "' " : String.Empty);                  }                  Console.WriteLine("]");                  foreach(TreeNode child in node.Children) {                      DumpTree(child' depth + 1);                  }              }
Magic Number,Hyena.SExpEngine,TreeNode,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\TreeNode.cs,PrintIndent,The following statement contains a magic number: Console.Write(String.Empty.PadLeft(depth * 2' ' '));
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,GetStringBuilder,The following statement contains a magic number: if (string_buffer == null) {                  string_buffer = new StringBuilder (64);                  return string_buffer;              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexString,The following statement contains a magic number: while (!reader.EndOfStream) {                  if (read) {                      ReadChar ();                  }                    read = true;                    if (peek == '\\') {                      ReadChar ();                      switch (peek) {                          case 'u':                              ReadChar ();                              buffer.Append ((char)LexInt (true' 4));                              read = false;                              break;                          case '"':                          case '\\':                          case '/': buffer.Append (peek); break;                          case 'b': buffer.Append ('\b'); break;                          case 'f': buffer.Append ('\f'); break;                          case 'n': buffer.Append ('\n'); break;                          case 'r': buffer.Append ('\r'); break;                          case 't': buffer.Append ('\t'); break;                          default:                              UnexpectedCharacter (peek);                              break;                      }                  } else if (peek == '"') {                      ReadChar ();                      return buffer.ToString ();                  } else {                      buffer.Append (peek);                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                      ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                    if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                      ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                    if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                      ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                    if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                      ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                    if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: double d = 10;
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: while (true) {                  ReadChar ();                    if (!Char.IsDigit (peek)) {                      break;                  }                    fraction += (peek - '0') / d;                  d *= 10;              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Hyena.Downloader,DownloadManager,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Downloader\DownloadManager.cs,DownloadManager,The following statement contains a magic number: MaxConcurrentDownloaders = 2;
Magic Number,Hyena.Downloader,HttpDownloader,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Downloader\HttpDownloader.cs,HttpDownloader,The following statement contains a magic number: ProgressEventRaiseLimit = TimeSpan.FromSeconds (0.25);
Magic Number,Hyena.Downloader,HttpDownloader,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Downloader\HttpDownloader.cs,CreateRequest,The following statement contains a magic number: request.Timeout = 10000;
Magic Number,Hyena.Downloader,HttpDownloaderState,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Downloader\HttpDownloaderState.cs,ToString,The following statement contains a magic number: if (Working) {                  return String.Format ("HttpDownloaderState: working ({0}% complete)"' PercentComplete * 100.0);              } else {                  return String.Format ("HttpDownloaderState: finished' {0}"' Success ? "successful" : "error: " + FailureException.Message);              }
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255) {  				foreach (byte b in e.GetBytes (new char[] { ch }))  					buf.Add (b);  			} else  				buf.Add ((byte)ch);
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  				return c - 'a' + 10;
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  				return c - 'A' + 10;
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				int current = GetInt (bytes [i]);  				if (current == -1)  					return -1;  				value = (value << 4) + current;  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				char c = str [i];  				if (c > 127)  					return -1;    				int current = GetInt ((byte) c);  				if (current == -1)  					return -1;  				val = (val << 4) + current;  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				char c = str [i];  				if (c > 127)  					return -1;    				int current = GetInt ((byte) c);  				if (current == -1)  					return -1;  				val = (val << 4) + current;  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++){  				char c = (char) bytes [i];  				if (c == '+') {  					c = ' ';  				} else if (c == '%' && i < end - 2) {  					int xchar = GetChar (bytes' i + 1' 2);  					if (xchar != -1) {  						c = (char) xchar;  						i += 2;  					}  				}  				result.WriteByte ((byte) c);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++){  				char c = (char) bytes [i];  				if (c == '+') {  					c = ' ';  				} else if (c == '%' && i < end - 2) {  					int xchar = GetChar (bytes' i + 1' 2);  					if (xchar != -1) {  						c = (char) xchar;  						i += 2;  					}  				}  				result.WriteByte ((byte) c);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++){  				char c = (char) bytes [i];  				if (c == '+') {  					c = ' ';  				} else if (c == '%' && i < end - 2) {  					int xchar = GetChar (bytes' i + 1' 2);  					if (xchar != -1) {  						c = (char) xchar;  						i += 2;  					}  				}  				result.WriteByte ((byte) c);  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (	(c < '0') ||  				(c < 'A' && c > '9') ||  				(c > 'Z' && c < 'a') ||  				(c > 'z')) {  				if (isUnicode && c > 127) {  					result.WriteByte ((byte)'%');  					result.WriteByte ((byte)'u');  					result.WriteByte ((byte)'0');  					result.WriteByte ((byte)'0');  				}  				else  					result.WriteByte ((byte)'%');  				  				int idx = ((int) c) >> 4;  				result.WriteByte ((byte)hexChars [idx]);  				idx = ((int) c) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  			}  			else  				result.WriteByte ((byte)c);
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (	(c < '0') ||  				(c < 'A' && c > '9') ||  				(c > 'Z' && c < 'a') ||  				(c > 'z')) {  				if (isUnicode && c > 127) {  					result.WriteByte ((byte)'%');  					result.WriteByte ((byte)'u');  					result.WriteByte ((byte)'0');  					result.WriteByte ((byte)'0');  				}  				else  					result.WriteByte ((byte)'%');  				  				int idx = ((int) c) >> 4;  				result.WriteByte ((byte)hexChars [idx]);  				idx = ((int) c) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  			}  			else  				result.WriteByte ((byte)c);
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  					}  				} else if (state == 3) {  					if (c == ';') {  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  						have_trailing_digits = false;  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  				char c = s [i];  				if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159) {  					needEncode = true;  					break;  				}  			}
Magic Number,System.Web,HttpUtility,C:\repos\mono_f-spot\lib\Hyena\Hyena\System.Web\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)   				switch (s [i]) {  				case '&' :  					output.Append ("&amp;");  					break;  				case '>' :   					output.Append ("&gt;");  					break;  				case '<' :  					output.Append ("&lt;");  					break;  				case '"' :  					output.Append ("&quot;");  					break;  				default:  					// MS starts encoding with &# from 160 and stops at 255.  					// We don't do that. One reason is the 65308/65310 unicode  					// characters that look like '<' and '>'.  #if TARGET_JVM  					if (s [i] > 159 && s [i] < 256) {  #else  					if (s [i] > 159) {  #endif  						output.Append ("&#");  						output.Append (((int) s [i]).ToString (Helpers.InvariantCulture));  						output.Append (";");  					} else {  						output.Append (s [i]);  					}  					break;  				}
Missing Default,Hyena.Query,UserQueryParser,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.Query\UserQueryParser.cs,ParseToken,The following switch statement is missing a default case: switch (token.ID) {                  case TokenID.OpenParen:                      DepthPush ();                      break;                    case TokenID.CloseParen:                      DepthPop ();                      break;                    case TokenID.Not:                      NodePush (new QueryListNode (Keyword.Not));                      break;                    case TokenID.Or:                  case TokenID.And:                      // Only push a node if the current_parent is not the same as this token                      if (current_parent.Keyword == Keyword.Not ||                              current_parent.Keyword == (token.ID == TokenID.Or ? Keyword.And : Keyword.Or)) {                            QueryListNode list = new QueryListNode (token.ID == TokenID.Or ? Keyword.Or : Keyword.And);                          QueryListNode p = current_parent.Parent;                            if (p != null) {                              current_parent.Parent.RemoveChild (current_parent);                          }                            if (current_parent.Keyword == Keyword.Not || current_parent.ChildCount > 1) {                              list.AddChild (current_parent);                          } else {                              list.TakeChildren (current_parent);                          }                            current_parent = p;                          NodePush (list);                      }                      break;                    case TokenID.Term:                      NodePush (QueryTermNode.ParseUserQuery (field_set' token.Term));                      break;              }
Missing Default,Hyena,Log,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\Log.cs,Commit,The following switch statement is missing a default case: switch (type) {                      case LogEntryType.Error: ConsoleCrayon.ForegroundColor = ConsoleColor.Red; break;                      case LogEntryType.Warning: ConsoleCrayon.ForegroundColor = ConsoleColor.DarkYellow; break;                      case LogEntryType.Information: ConsoleCrayon.ForegroundColor = ConsoleColor.Green; break;                      case LogEntryType.Debug: ConsoleCrayon.ForegroundColor = ConsoleColor.Blue; break;                  }
Missing Default,Hyena,Log,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\Log.cs,TypeString,The following switch statement is missing a default case: switch (type) {                  case LogEntryType.Debug:         return "Debug";                  case LogEntryType.Warning:       return "Warn ";                  case LogEntryType.Error:         return "Error";                  case LogEntryType.Information:   return "Info ";              }
Missing Default,Hyena,ConsoleCrayon,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\ConsoleCrayon.cs,DetectXtermColors,The following switch statement is missing a default case: switch (Environment.GetEnvironmentVariable ("TERM")) {                  case "xterm":                  case "rxvt":                  case "rxvt-unicode":                      if (Environment.GetEnvironmentVariable ("COLORTERM") != null) {                          _xterm_colors = true;                      }                      break;                  case "xterm-color":                      _xterm_colors = true;                      break;              }
Missing Default,Hyena,PlatformDetection,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena\PlatformDetection.cs,PlatformDetection,The following switch statement is missing a default case: switch (PosixSystemName) {                  case "Darwin": IsMac = true; break;                  case "Linux": IsLinux = true; break;              }
Missing Default,Hyena.SExpEngine,ArithmeticFunctionSet,C:\repos\mono_f-spot\lib\Hyena\Hyena\Hyena.SExpEngine\ArithmeticFunctionSet.cs,OnPerformArithmetic,The following switch statement is missing a default case: switch(operation) {                          case ArithmeticOperation.Add:                              result += arg_value;                              break;                          case ArithmeticOperation.Subtract:                              result -= arg_value;                              break;                          case ArithmeticOperation.Multiply:                              result *= arg_value;                              break;                          case ArithmeticOperation.Divide:                              result /= arg_value;                              break;                          case ArithmeticOperation.Modulo:                              if(!(arg is IntLiteral)) {                                  throw new ArgumentException("Modulo requires int arguments");                              }                                result %= (int)arg_value;                              break;                      }
