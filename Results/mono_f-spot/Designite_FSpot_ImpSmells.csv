Implementation smell,Namespace,Class,File,Method,Description
Long Method,FSpot,FullScreenView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FullScreenView.cs,FullScreenView,The method has 117 lines of code.
Long Method,FSpot,Driver,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\main.cs,Main,The method has 110 lines of code.
Long Method,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,MainWindow,The method has 225 lines of code.
Long Method,FSpot.UI.Dialog,AboutDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\AboutDialog.cs,AboutDialog,The method has 115 lines of code.
Long Method,FSpot.Widgets,FindBar,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FindBar.cs,ConstructQuery,The method has 100 lines of code.
Long Method,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,SetupWidgets,The method has 178 lines of code.
Long Method,FSpot.Widgets,MetadataDisplayWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\MetadataDisplay.cs,Update,The method has 158 lines of code.
Long Method,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The method has 124 lines of code.
Long Method,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The method has 187 lines of code.
Complex Method,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,HandleAdaptorChanged,Cyclomatic complexity of the method is 9
Complex Method,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,OnExposeEvent,Cyclomatic complexity of the method is 12
Complex Method,FSpot,Driver,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\main.cs,Main,Cyclomatic complexity of the method is 16
Complex Method,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragDataReceived,Cyclomatic complexity of the method is 9
Complex Method,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleMergeTagsCommand,Cyclomatic complexity of the method is 8
Complex Method,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleOpenWith,Cyclomatic complexity of the method is 11
Complex Method,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,Dispose,Cyclomatic complexity of the method is 10
Complex Method,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,Cyclomatic complexity of the method is 9
Complex Method,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,HandleResponse,Cyclomatic complexity of the method is 11
Complex Method,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragDataReceived,Cyclomatic complexity of the method is 14
Complex Method,FSpot,ObsoletePhotoQueries,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ObsoletePhotoQueries.cs,Query,Cyclomatic complexity of the method is 8
Complex Method,FSpot.UI.Dialog,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\PreferenceDialog.cs,PreferenceDialog,Cyclomatic complexity of the method is 9
Complex Method,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,Cyclomatic complexity of the method is 14
Complex Method,FSpot.Widgets,FindBar,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FindBar.cs,ConstructQuery,Cyclomatic complexity of the method is 11
Complex Method,FSpot.Widgets,FolderTreeModel,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FolderTreeModel.cs,UpdateFolderTree,Cyclomatic complexity of the method is 10
Complex Method,FSpot.Widgets,TagEntry,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\TagEntry.cs,UpdateFromSelection,Cyclomatic complexity of the method is 8
Complex Method,FSpot.Widgets,TagEntry,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\TagEntry.cs,OnActivated,Cyclomatic complexity of the method is 10
Complex Method,FSpot.Widgets,ThumbnailTagsCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailTagsCaptionRenderer.cs,Render,Cyclomatic complexity of the method is 9
Complex Method,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,UpdateRubberbandSelection,Cyclomatic complexity of the method is 9
Complex Method,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,Cyclomatic complexity of the method is 19
Complex Method,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,Cyclomatic complexity of the method is 16
Complex Method,FSpot.Query,LogicWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\LogicWidget.cs,UnInclude,Cyclomatic complexity of the method is 9
Complex Method,FSpot.Query,Term,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\Term.cs,TagRequired,Cyclomatic complexity of the method is 9
Long Parameter List,FSpot,FolderQueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FolderQueryWidget.cs,OnDragDataReceived,The method has 6 parameters. Parameters: context' x' y' selection_data' info' time_
Long Parameter List,FSpot,ItemAction,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ItemAction.cs,ItemAction,The method has 5 parameters. Parameters: pointer' name' label' tooltip' icon_name
Long Parameter List,FSpot,RotateAction,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ItemAction.cs,RotateAction,The method has 6 parameters. Parameters: pointer' direction' name' label' tooltip' stock_id
Long Parameter List,FSpot,CacheEntry,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PixbufCache.cs,CacheEntry,The method has 5 parameters. Parameters: cache' uri' closure' width' height
Long Parameter List,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawComment,The method has 6 parameters. Parameters: context' x' y' h' comment' rotated
Long Parameter List,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawImage,The method has 6 parameters. Parameters: cr' pixbuf' x' y' w' h
Long Parameter List,FSpot,ObsoletePhotoQueries,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ObsoletePhotoQueries.cs,Query,The method has 5 parameters. Parameters: tags' extraCondition' range' importidrange' ratingrange
Long Parameter List,FSpot,ObsoletePhotoQueries,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ObsoletePhotoQueries.cs,Query,The method has 5 parameters. Parameters: searchexpression' extraCondition' range' importidrange' ratingrange
Long Parameter List,FSpot.ColorAdjustment,FullColorAdjustment,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\FullColorAdjustment.cs,FullColorAdjustment,The method has 9 parameters. Parameters: input' input_profile' exposure' brightness' contrast' hue' saturation' src_wp' dest_wp
Long Parameter List,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AddEntry,The method has 8 parameters. Parameters: id' name' description' info_widget' label_y_align' default_visibility' set_single' set_multiple
Long Parameter List,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AddEntry,The method has 7 parameters. Parameters: id' name' description' info_widget' label_y_align' set_single' set_multiple
Long Parameter List,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AddEntry,The method has 7 parameters. Parameters: id' name' description' info_widget' default_visibility' set_single' set_multiple
Long Parameter List,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AddEntry,The method has 6 parameters. Parameters: id' name' description' info_widget' set_single' set_multiple
Long Parameter List,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AddLabelEntry,The method has 5 parameters. Parameters: id' name' description' single_string' multiple_string
Long Parameter List,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AddLabelEntry,The method has 6 parameters. Parameters: id' name' description' default_visibility' single_string' multiple_string
Long Parameter List,FSpot.Widgets,ThumbnailCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailCaptionRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' cell_area' expose_area' cell_state' photo
Long Parameter List,FSpot.Widgets,ThumbnailDateCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailDateCaptionRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' cell_area' expose_area' cell_state' photo
Long Parameter List,FSpot.Widgets,ThumbnailDecorationRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailDecorationRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' cell_area' expose_area' cell_state' photo
Long Parameter List,FSpot.Widgets,ThumbnailRatingDecorationRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailRatingDecorationRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' cell_area' expose_area' cell_state' photo
Long Parameter List,FSpot.Widgets,ThumbnailTagsCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailTagsCaptionRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' cell_area' expose_area' cell_state' photo
Long Parameter List,FSpot.Widgets,ThumbnailTextCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailTextCaptionRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' cell_area' expose_area' cell_state' photo
Long Parameter List,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The method has 5 parameters. Parameters: cell_num' cell_area' expose_area' selected' focussed
Long Parameter List,FSpot.Widgets,BrowseablePointerGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\BrowseablePointerGridView.cs,DrawPhoto,The method has 5 parameters. Parameters: cell_num' cell_area' expose_area' selected' focussed
Long Parameter List,Pinta.Core,CairoExtensions,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\CairoExtensions.cs,GetPointUnchecked,The method has 5 parameters. Parameters: surf' surfDataPtr' surfWidth' x' y
Long Identifier,FSpot,FolderQueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FolderQueryWidget.cs,,The length of the parameter folder_query_widget_source_table is 32.
Long Statement,FSpot,ColorManagement,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ColorManagement.cs,AddProfilesByExtension,The length of the statement  "					if (profile.ColorSpace == IccColorSpace.Rgb && profile.ProductDescription != null && !profiles.ContainsKey (profile.ProductDescription)) " is 136.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,UpdateToolbar,The length of the statement  "					count_label.Text = string.Format (Catalog.GetString ("{0} of {1}")' Query.Count == 0 ? 0 : photo_view.View.Item.Index + 1' Query.Count == 0 ? 0 : Query.Count); " is 159.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The length of the statement  "						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) { " is 142.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,UpdateStatusLabel,The length of the statement  "				status_label.Text = string.Format (Catalog.GetPluralString ("{0} photo out of {1}"' "{0} photos out of {1}"' query.Count)' query.Count' total_photos); " is 150.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,UpdateStatusLabel,The length of the statement  "				status_label.Text += string.Format (Catalog.GetPluralString (" ({0} selected)"' " ({0} selected)"' Selection.Count)' Selection.Count); " is 134.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleRemoveCommand,The length of the statement  "			string msg = Catalog.GetString ("If you remove photos from the F-Spot catalog all tag information will be lost. The photos remain on your computer and can be imported into F-Spot again."); " is 188.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,PopulateExtendableMenus,The length of the statement  "				Log.Warning ("There's (maybe) something wrong with some of the installed extensions. You can try removing the directory addin-db-000 from ~/.config/f-spot/"); " is 158.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleOpenWith,The length of the statement  "				             "Before launching {1}' should F-Spot create new versions of the selected photos to preserve the originals?"' selected.Length)' " is 126.
Long Statement,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,SelectedMimeTypes,The length of the statement  "					content = GLib.FileFactory.NewForUri (p.DefaultVersion.Uri).QueryInfo ("standard::content-type"' GLib.FileQueryInfoFlags.None' null).ContentType; " is 145.
Long Statement,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The length of the statement  "					using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (selected_photos [p_index].DefaultVersion.Uri)) { " is 126.
Long Statement,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The length of the statement  "							if (ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_OUTPUT_PROFILE)' out printer_profile)) " is 134.
Long Statement,FSpot,RotateOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\RotateCommand.cs,Step,The length of the statement  "			var info = GLib.FileFactory.NewForUri (item.DefaultVersion.Uri).QueryInfo ("access::can-write"' GLib.FileQueryInfoFlags.None' null); " is 132.
Long Statement,FSpot,RotateCommand,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\RotateCommand.cs,RunReadonlyError,The length of the statement  "				"The photo could not be rotated because it is on a read only file system or media such as a CD-ROM.  Please check the permissions and try again."' " is 146.
Long Statement,FSpot,RotateCommand,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\RotateCommand.cs,RunReadonlyError,The length of the statement  "				"{0} photos could not be rotated because they are on a read only file system or media such as a CD-ROM.  Please check the permissions and try again."' " is 150.
Long Statement,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,HandleResponse,The length of the statement  "						mail_attach.Append(((i == 0 && attach_arg.ToString () == "'") ? "" : attach_arg.ToString()) + request.Current.ToString ()); " is 123.
Long Statement,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,HandleResponse,The length of the statement  "		            System.Diagnostics.Process.Start("thunderbird"' " -compose \"subject=" + mail_subject + "'attachment='" + mail_attach + "'\""); " is 127.
Long Statement,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,HandleResponse,The length of the statement  "		            System.Diagnostics.Process.Start("icedove"' " -compose \"subject=" + mail_subject + "'attachment='" + mail_attach + "'\""); " is 123.
Long Statement,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,HandleResponse,The length of the statement  "		            System.Diagnostics.Process.Start("mozilla-thunderbird"' " -compose \"subject=" + mail_subject + "'attachment='" + mail_attach + "'\""); " is 135.
Long Statement,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,HandleResponse,The length of the statement  "		            System.Diagnostics.Process.Start("seamonkey"' " -mail -compose \"subject=" + mail_subject + "'attachment='" + mail_attach + "'\""); " is 131.
Long Statement,FSpot,SingleView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleImageViewButtonPressEvent,The length of the statement  "			GtkUtil.MakeMenuItem (popup_menu' Catalog.GetString ("Rotate _Left")' "object-rotate-left"' delegate { HandleRotate270Command(Window' null); }' has_item); " is 154.
Long Statement,FSpot,SingleView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleImageViewButtonPressEvent,The length of the statement  "			GtkUtil.MakeMenuItem (popup_menu' Catalog.GetString ("Rotate _Right")' "object-rotate-right"' delegate { HandleRotate90Command (Window' null); }' has_item); " is 156.
Long Statement,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,IconDataFunc,The length of the statement  "				if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) { " is 142.
Long Statement,FSpot,UriCollection,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\UriCollection.cs,Add,The length of the statement  "				var info = FileFactory.NewForUri (uri).QueryInfo ("standard::type'standard::content-type"' FileQueryInfoFlags.None' null); " is 122.
Long Statement,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,ConstraintPixCellFunc,The length of the statement  "				(cell as CellRendererPixbuf).Pixbuf = GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' stockname' 16' (Gtk.IconLookupFlags)0); " is 131.
Long Statement,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,Process,The length of the statement  "			Rectangle selection = FSpot.Utils.PixbufUtils.TransformOrientation ((int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Width : input.Height' " is 146.
Long Statement,FSpot.Editors,Editor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\Editor.cs,CalcPreviewSize,The length of the statement  "			//Log.Debug ("Preview size: Allocation: {0}x{1}' Input: {2}x{3}' Result: {4}x{5}"' awidth' aheight' iwidth' iheight' width' height); " is 132.
Long Statement,FSpot.Editors,RedEyeEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\RedEyeEditor.cs,Process,The length of the statement  "			Rectangle selection = FSpot.Utils.PixbufUtils.TransformOrientation ((int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Width : input.Height' " is 146.
Long Statement,FSpot.Loaders,GdkImageLoader,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Loaders\GdkImageLoader.cs,Load,The length of the statement  "			if ((thumb = App.Instance.Container.Resolve<IThumbnailService> ().TryLoadThumbnail (uri' ThumbnailSize.Large)) != null) { " is 121.
Long Statement,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The length of the statement  "				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month)); " is 172.
Long Statement,FSpot.UI.Dialog,EditTagDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\EditTagDialog.cs,HandleIconButtonClicked,The length of the statement  "			if (tag.Icon != null && FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) { " is 162.
Long Statement,FSpot.UI.Dialog,EditTagIconDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\EditTagIconDialog.cs,CreateTagIconFromExternalPhoto,The length of the statement  "				using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (new SafeUri(external_photo_chooser.Uri' true))) { " is 127.
Long Statement,FSpot.UI.Dialog,EditTagIconDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\EditTagIconDialog.cs,HandleSelectionChanged,The length of the statement  "					Gdk.Pixbuf transformed = FSpot.Utils.PixbufUtils.TransformOrientation (image_view.Pixbuf' image_view.PixbufOrientation); " is 120.
Long Statement,FSpot.UI.Dialog,EditTagIconDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\EditTagIconDialog.cs,FillIconView,The length of the statement  "				icon_store.AppendValues (item_name' GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' item_name' 32' (IconLookupFlags) 0)); " is 127.
Long Statement,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,LoadPreferences,The length of the statement  "				Resize (Preferences.Get<int> (Preferences.IMPORT_WINDOW_WIDTH)' Preferences.Get<int> (Preferences.IMPORT_WINDOW_HEIGHT)); " is 121.
Long Statement,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,ConnectEvents,The length of the statement  "						Catalog.GetString ("Checking this box will remove the imported photos from the camera after the import finished successfully.\n\nIt is generally recommended to backup your photos before removing them from the camera. <b>Use this option at your own risk!</b>")); " is 261.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "			if (Orientation == Orientation.Horizontal && (extendable && Allocation.Width >= BackgroundPixbuf.Width + (2 * x_offset) + BackgroundTile.Width) || " is 146.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "				Orientation == Orientation.Vertical && (extendable && Allocation.Height >= BackgroundPixbuf.Height + (2 * y_offset) + BackgroundTile.Height) ) " is 142.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "			if ( Orientation == Orientation.Horizontal && (extendable && Allocation.Width < BackgroundPixbuf.Width + (2 * x_offset) ) || " is 124.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "			int ref_x = (int)(icon_pixbuf.Width / 2.0 - current.Width * (Position + 0.5f - Math.Round (Position))); //xpos of the reference icon " is 132.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "					current.CopyArea (0' 0' Math.Min (current.Width' icon_pixbuf.Width - start_x) ' current.Height' icon_pixbuf' start_x' start_y); " is 127.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "					current.CopyArea (0' 0' current.Width' Math.Min (current.Height' icon_pixbuf.Height - start_y)' icon_pixbuf' start_x' start_y); " is 127.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "					current.CopyArea (Math.Max (0' -start_x)' 0' Math.Min (current.Width' current.Width + start_x)' current.Height' icon_pixbuf' Math.Max (start_x' 0)' 0); " is 151.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The length of the statement  "					current.CopyArea (0' Math.Max (0' -start_y)' current.Width' Math.Min (current.Height' current.Height + start_y)' icon_pixbuf' 0' Math.Max (start_y' 0)); " is 152.
Long Statement,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The length of the statement  "			if (ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) { " is 136.
Long Statement,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AttachRow,The length of the statement  "                info_table.Attach (entry.LabelWidget' 0' 1' (uint)row' (uint)row + 1' AttachOptions.Fill' AttachOptions.Fill' TABLE_XPADDING' TABLE_YPADDING); " is 142.
Long Statement,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AttachRow,The length of the statement  "            info_table.Attach (entry.InfoWidget' entry.TwoColumns ? 0u : 1u' 2' (uint)row' (uint)row + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Expand | AttachOptions.Fill' TABLE_XPADDING' TABLE_YPADDING); " is 212.
Long Statement,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AttachLabel,The length of the statement  "            table.Attach (label' 1' 2' (uint)row_num' (uint)row_num + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Expand | AttachOptions.Fill' (uint)entry.Style.XThickness + TABLE_XPADDING' (uint)entry.Style.YThickness); " is 224.
Long Statement,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,ApplyColorTransform,The length of the statement  "			if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) " is 140.
Long Statement,FSpot.Widgets,SlideShow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SlideShow.cs,LoadNext,The length of the statement  "					if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) " is 140.
Long Statement,FSpot.Widgets,TagView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\TagView.cs,DrawTags,The length of the statement  "				if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) " is 140.
Long Statement,FSpot.Widgets,ThumbnailTagsCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailTagsCaptionRenderer.cs,Render,The length of the statement  "			tag_bounds.X = cell_area.X + (cell_area.Width + tag_icon_hspacing - tags.Length * (tag_icon_size + tag_icon_hspacing)) / 2; " is 123.
Long Statement,FSpot.Widgets,ThumbnailTagsCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailTagsCaptionRenderer.cs,Render,The length of the statement  "					if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) " is 140.
Long Statement,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,DrawCell,The length of the statement  "			DrawPhoto (cell_num' cell_area' expose_area' Selection.Contains (cell_num)' Selection.Contains (cell_num) && FocusCell == cell_num); " is 132.
Long Statement,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The length of the statement  "            if (Rectangle.Inflate (image_bounds' expansion + 1' expansion + 1).Intersect (expose_area' out image_bounds) && thumbnail != null) { " is 132.
Long Statement,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The length of the statement  "                    if (ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) { " is 136.
Long Statement,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,PackButton,The length of the statement  "				button.Image = new Image (GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' editor.IconName' 22' (Gtk.IconLookupFlags)0)); " is 126.
Long Statement,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,Apply,The length of the statement  "				string desc = Catalog.GetString ("This tool requires an active selection. Please select a region of the photo and try the operation again"); " is 140.
Long Statement,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,Apply,The length of the statement  "				string desc = string.Format (Catalog.GetString ("Received exception \"{0}\". Note that you have to develop RAW files into JPEG before you can edit them.")' " is 155.
Long Statement,FSpot.Query,TermMenuItem,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\TermMenuItem.cs,GetSubmenu,The length of the statement  "			Gtk.MenuItem all_item = GtkUtil.MakeMenuItem (m' Catalog.GetString ("All")' new EventHandler (App.Instance.Organizer.HandleRequireTag)); " is 136.
Long Statement,FSpot.Database,UpdaterUI,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Database\UpdaterUI.cs,Show,The length of the statement  "			dialog = new ProgressDialog (Catalog.GetString ("Updating F-Spot Database")' ProgressDialog.CancelButtonType.None' 0' null); " is 124.
Long Statement,FSpot.Database,UpdaterUI,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Database\UpdaterUI.cs,Show,The length of the statement  "			dialog.Message.Text = Catalog.GetString ("Please wait while your F-Spot gallery's database is updated. This may take some time."); " is 130.
Complex Conditional,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,UpdateLimits,The conditional expression  "adaptor != null && has_limits && min_limit != null && max_limit != null"  is complex.
Complex Conditional,FSpot,Driver,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\main.cs,Main,The conditional expression  "(import && (view || shutdown || slideshow)) ||  				(view && (shutdown || slideshow)) ||  				(shutdown && slideshow)"  is complex.
Complex Conditional,FSpot,PhotoQuery,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoQuery.cs,LookupItem,The conditional expression  "!asc && comp < 0 || asc && comp > 0"  is complex.
Complex Conditional,FSpot,PhotoQuery,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoQuery.cs,LookupItem,The conditional expression  "!asc && comp > 0 || asc && comp < 0"  is complex.
Complex Conditional,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleTagsChanged,The conditional expression  "(category_valid && (category_iter.Equals (parent_iter))) || (!category_valid && !parent_valid)"  is complex.
Complex Conditional,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,TickLabel,The conditional expression  "(start.Month == 12 && !order_ascending) || (start.Month == 1 && order_ascending)"  is complex.
Complex Conditional,FSpot,UriCollection,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\UriCollection.cs,Add,The conditional expression  "info.ContentType == "text/xml"  					 || info.ContentType == "application/xml"  					 || info.ContentType == "application/rss+xml"  					 || info.ContentType == "text/plain""  is complex.
Complex Conditional,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The conditional expression  "Orientation == Orientation.Horizontal && (extendable && Allocation.Width >= BackgroundPixbuf.Width + (2 * x_offset) + BackgroundTile.Width) ||  				Orientation == Orientation.Vertical && (extendable && Allocation.Height >= BackgroundPixbuf.Height + (2 * y_offset) + BackgroundTile.Height)"  is complex.
Complex Conditional,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The conditional expression  "Orientation == Orientation.Horizontal && (extendable && Allocation.Width < BackgroundPixbuf.Width + (2 * x_offset) ) ||  				Orientation == Orientation.Vertical && ( extendable && Allocation.Height < BackgroundPixbuf.Height + (2 * y_offset) )"  is complex.
Complex Conditional,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnButtonPressEvent,The conditional expression  "evnt.Button != 1 || (  				(Orientation == Orientation.Horizontal && (evnt.X > filmstrip_end_pos || evnt.X < filmstrip_start_pos)) ||  				(Orientation == Orientation.Vertical && (evnt.Y > filmstrip_end_pos || evnt.Y < filmstrip_start_pos))  				)"  is complex.
Complex Conditional,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,HandlePhotoItemChanged,The conditional expression  "args != null &&  				args.PreviousItem != null &&  				Item.IsValid &&  				(args.PreviousIndex != item.Index) &&  				(Item.Current.DefaultVersion.Uri == args.PreviousItem.DefaultVersion.Uri)"  is complex.
Complex Conditional,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,HandlePhotoItemChanged,The conditional expression  "args != null && args.Changes != null &&  				!args.Changes.DataChanged &&  				args.PreviousItem != null &&  				Item.IsValid &&  				Item.Current.DefaultVersion.Uri == args.PreviousItem.DefaultVersion.Uri"  is complex.
Complex Conditional,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,HandlePhotoItemChanged,The conditional expression  "args != null &&  				args.PreviousItem != null &&  				Item.IsValid &&  				Item.Current.DefaultVersion.Uri == args.PreviousItem.DefaultVersion.Uri"  is complex.
Complex Conditional,FSpot.Widgets,CompletionLogic,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CompletionLogic.cs,MatchFunc,The conditional expression  "key == null || key.Length == 0 || pos < 0 || pos > key.Length - 1"  is complex.
Complex Conditional,FSpot.Widgets,CompletionLogic,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CompletionLogic.cs,MatchFunc,The conditional expression  "key [i] == ')' || key [i] == '(' ||  						   (i >= and_op_len - 1 && string.Compare (key.Substring (i - and_op_len + 1' and_op_len)' and_op' true) == 0) ||  						   (i >= or_op_len - 1 && string.Compare (key.Substring (i - or_op_len + 1' or_op_len)' or_op' true) == 0)"  is complex.
Complex Conditional,FSpot.Widgets,CompletionLogic,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CompletionLogic.cs,MatchFunc,The conditional expression  "key [j] == ')' || key [j] == '(' ||  						   (key.Length >= j + and_op_len && string.Compare (key.Substring (j' and_op_len)' and_op' true) == 0) ||  						   (key.Length >= j + or_op_len && string.Compare (key.Substring (j' or_op_len)' or_op' true) == 0)"  is complex.
Complex Conditional,FSpot.Query,LogicWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\LogicWidget.cs,HandleDragMotion,The conditional expression  "!preview && rootTerm.Count > 0 && (Literal.FocusedLiterals.Count == 0 || Children.Length > 2)"  is complex.
Complex Conditional,FSpot.Query,QueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\QueryWidget.cs,HandleChanged,The conditional expression  "! logic_widget.IsClear  			    || query.Untagged  			    || (query.RollSet != null)  			    || (query.RatingRange != null)  			    || ! folder_query_widget.Empty"  is complex.
Virtual Method Call from Constructor,FSpot,GroupAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupAdaptor.cs,GroupAdaptor,The constructor "GroupAdaptor" calls a virtual method "Reload".
Virtual Method Call from Constructor,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,Loupe,The constructor "Loupe" calls a virtual method "BuildUI".
Empty Catch Block,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,LoadPreference,The method has an empty catch block.
Empty Catch Block,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,The method has an empty catch block.
Empty Catch Block,FSpot.Loaders,GdkImageLoader,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Loaders\GdkImageLoader.cs,Dispose,The method has an empty catch block.
Empty Catch Block,FSpot.Loaders,GdkImageLoader,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Loaders\GdkImageLoader.cs,HandleReadDone,The method has an empty catch block.
Empty Catch Block,FSpot.Loaders,GdkImageLoader,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Loaders\GdkImageLoader.cs,HandleReadDone,The method has an empty catch block.
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleImport,The following statement contains a magic number: if (path != null && path.StartsWith ("gphoto2:usb:")) {                  path = string.Format ("gphoto2://[{0}]"' path.Substring (8));              }
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: window.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: window.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: window.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: if (photos.Length > 0) {  				Array.Sort (photos' new IPhotoComparer.RandomSort ());  				slideshow = new FSpot.Widgets.SlideShow (new BrowsablePointer (new PhotoList (photos)' 0)' (uint)(delay * 1000)' true);  				window.Add (slideshow);  			} else {  				Gtk.HBox outer = new Gtk.HBox ();  				Gtk.HBox hbox = new Gtk.HBox ();  				Gtk.VBox vbox = new Gtk.VBox ();    				outer.PackStart (new Gtk.Label (string.Empty));  				outer.PackStart (vbox' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));  				vbox.PackStart (hbox' false' false' 0);  				hbox.PackStart (new Gtk.Image (Gtk.Stock.DialogWarning' Gtk.IconSize.Dialog)'  						false' false' 0);  				outer.PackStart (new Gtk.Label (string.Empty));    				string msg;  				string long_msg;    				if (tag != null) {  					msg = string.Format (Catalog.GetString ("No photos matching {0} found")' tag.Name);  					long_msg = string.Format (Catalog.GetString ("The tag \"{0}\" is not applied to any photos. Try adding\n" +  										     "the tag to some photos or selecting a different tag in the\n" +  										     "F-Spot preference dialog.")' tag.Name);  				} else {  					msg = Catalog.GetString ("Search returned no results");  					long_msg = Catalog.GetString ("The tag F-Spot is looking for does not exist. Try\n" +  								      "selecting a different tag in the F-Spot preference\n" +  								      "dialog.");  				}    				Gtk.Label label = new Gtk.Label (msg);  				hbox.PackStart (label' false' false' 0);    				Gtk.Label long_label = new Gtk.Label (long_msg);  				long_label.Markup  = string.Format ("<small>{0}</small>"' long_msg);    				vbox.PackStart (long_label' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));    				window.Add (outer);  				label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  				long_label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				long_label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  			}
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: if (photos.Length > 0) {  				Array.Sort (photos' new IPhotoComparer.RandomSort ());  				slideshow = new FSpot.Widgets.SlideShow (new BrowsablePointer (new PhotoList (photos)' 0)' (uint)(delay * 1000)' true);  				window.Add (slideshow);  			} else {  				Gtk.HBox outer = new Gtk.HBox ();  				Gtk.HBox hbox = new Gtk.HBox ();  				Gtk.VBox vbox = new Gtk.VBox ();    				outer.PackStart (new Gtk.Label (string.Empty));  				outer.PackStart (vbox' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));  				vbox.PackStart (hbox' false' false' 0);  				hbox.PackStart (new Gtk.Image (Gtk.Stock.DialogWarning' Gtk.IconSize.Dialog)'  						false' false' 0);  				outer.PackStart (new Gtk.Label (string.Empty));    				string msg;  				string long_msg;    				if (tag != null) {  					msg = string.Format (Catalog.GetString ("No photos matching {0} found")' tag.Name);  					long_msg = string.Format (Catalog.GetString ("The tag \"{0}\" is not applied to any photos. Try adding\n" +  										     "the tag to some photos or selecting a different tag in the\n" +  										     "F-Spot preference dialog.")' tag.Name);  				} else {  					msg = Catalog.GetString ("Search returned no results");  					long_msg = Catalog.GetString ("The tag F-Spot is looking for does not exist. Try\n" +  								      "selecting a different tag in the F-Spot preference\n" +  								      "dialog.");  				}    				Gtk.Label label = new Gtk.Label (msg);  				hbox.PackStart (label' false' false' 0);    				Gtk.Label long_label = new Gtk.Label (long_msg);  				long_label.Markup  = string.Format ("<small>{0}</small>"' long_msg);    				vbox.PackStart (long_label' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));    				window.Add (outer);  				label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  				long_label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				long_label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  			}
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: if (photos.Length > 0) {  				Array.Sort (photos' new IPhotoComparer.RandomSort ());  				slideshow = new FSpot.Widgets.SlideShow (new BrowsablePointer (new PhotoList (photos)' 0)' (uint)(delay * 1000)' true);  				window.Add (slideshow);  			} else {  				Gtk.HBox outer = new Gtk.HBox ();  				Gtk.HBox hbox = new Gtk.HBox ();  				Gtk.VBox vbox = new Gtk.VBox ();    				outer.PackStart (new Gtk.Label (string.Empty));  				outer.PackStart (vbox' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));  				vbox.PackStart (hbox' false' false' 0);  				hbox.PackStart (new Gtk.Image (Gtk.Stock.DialogWarning' Gtk.IconSize.Dialog)'  						false' false' 0);  				outer.PackStart (new Gtk.Label (string.Empty));    				string msg;  				string long_msg;    				if (tag != null) {  					msg = string.Format (Catalog.GetString ("No photos matching {0} found")' tag.Name);  					long_msg = string.Format (Catalog.GetString ("The tag \"{0}\" is not applied to any photos. Try adding\n" +  										     "the tag to some photos or selecting a different tag in the\n" +  										     "F-Spot preference dialog.")' tag.Name);  				} else {  					msg = Catalog.GetString ("Search returned no results");  					long_msg = Catalog.GetString ("The tag F-Spot is looking for does not exist. Try\n" +  								      "selecting a different tag in the F-Spot preference\n" +  								      "dialog.");  				}    				Gtk.Label label = new Gtk.Label (msg);  				hbox.PackStart (label' false' false' 0);    				Gtk.Label long_label = new Gtk.Label (long_msg);  				long_label.Markup  = string.Format ("<small>{0}</small>"' long_msg);    				vbox.PackStart (long_label' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));    				window.Add (outer);  				label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  				long_label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				long_label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  			}
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: if (photos.Length > 0) {  				Array.Sort (photos' new IPhotoComparer.RandomSort ());  				slideshow = new FSpot.Widgets.SlideShow (new BrowsablePointer (new PhotoList (photos)' 0)' (uint)(delay * 1000)' true);  				window.Add (slideshow);  			} else {  				Gtk.HBox outer = new Gtk.HBox ();  				Gtk.HBox hbox = new Gtk.HBox ();  				Gtk.VBox vbox = new Gtk.VBox ();    				outer.PackStart (new Gtk.Label (string.Empty));  				outer.PackStart (vbox' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));  				vbox.PackStart (hbox' false' false' 0);  				hbox.PackStart (new Gtk.Image (Gtk.Stock.DialogWarning' Gtk.IconSize.Dialog)'  						false' false' 0);  				outer.PackStart (new Gtk.Label (string.Empty));    				string msg;  				string long_msg;    				if (tag != null) {  					msg = string.Format (Catalog.GetString ("No photos matching {0} found")' tag.Name);  					long_msg = string.Format (Catalog.GetString ("The tag \"{0}\" is not applied to any photos. Try adding\n" +  										     "the tag to some photos or selecting a different tag in the\n" +  										     "F-Spot preference dialog.")' tag.Name);  				} else {  					msg = Catalog.GetString ("Search returned no results");  					long_msg = Catalog.GetString ("The tag F-Spot is looking for does not exist. Try\n" +  								      "selecting a different tag in the F-Spot preference\n" +  								      "dialog.");  				}    				Gtk.Label label = new Gtk.Label (msg);  				hbox.PackStart (label' false' false' 0);    				Gtk.Label long_label = new Gtk.Label (long_msg);  				long_label.Markup  = string.Format ("<small>{0}</small>"' long_msg);    				vbox.PackStart (long_label' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));    				window.Add (outer);  				label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  				long_label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				long_label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  			}
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: if (photos.Length > 0) {  				Array.Sort (photos' new IPhotoComparer.RandomSort ());  				slideshow = new FSpot.Widgets.SlideShow (new BrowsablePointer (new PhotoList (photos)' 0)' (uint)(delay * 1000)' true);  				window.Add (slideshow);  			} else {  				Gtk.HBox outer = new Gtk.HBox ();  				Gtk.HBox hbox = new Gtk.HBox ();  				Gtk.VBox vbox = new Gtk.VBox ();    				outer.PackStart (new Gtk.Label (string.Empty));  				outer.PackStart (vbox' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));  				vbox.PackStart (hbox' false' false' 0);  				hbox.PackStart (new Gtk.Image (Gtk.Stock.DialogWarning' Gtk.IconSize.Dialog)'  						false' false' 0);  				outer.PackStart (new Gtk.Label (string.Empty));    				string msg;  				string long_msg;    				if (tag != null) {  					msg = string.Format (Catalog.GetString ("No photos matching {0} found")' tag.Name);  					long_msg = string.Format (Catalog.GetString ("The tag \"{0}\" is not applied to any photos. Try adding\n" +  										     "the tag to some photos or selecting a different tag in the\n" +  										     "F-Spot preference dialog.")' tag.Name);  				} else {  					msg = Catalog.GetString ("Search returned no results");  					long_msg = Catalog.GetString ("The tag F-Spot is looking for does not exist. Try\n" +  								      "selecting a different tag in the F-Spot preference\n" +  								      "dialog.");  				}    				Gtk.Label label = new Gtk.Label (msg);  				hbox.PackStart (label' false' false' 0);    				Gtk.Label long_label = new Gtk.Label (long_msg);  				long_label.Markup  = string.Format ("<small>{0}</small>"' long_msg);    				vbox.PackStart (long_label' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));    				window.Add (outer);  				label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  				long_label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				long_label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  			}
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: if (photos.Length > 0) {  				Array.Sort (photos' new IPhotoComparer.RandomSort ());  				slideshow = new FSpot.Widgets.SlideShow (new BrowsablePointer (new PhotoList (photos)' 0)' (uint)(delay * 1000)' true);  				window.Add (slideshow);  			} else {  				Gtk.HBox outer = new Gtk.HBox ();  				Gtk.HBox hbox = new Gtk.HBox ();  				Gtk.VBox vbox = new Gtk.VBox ();    				outer.PackStart (new Gtk.Label (string.Empty));  				outer.PackStart (vbox' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));  				vbox.PackStart (hbox' false' false' 0);  				hbox.PackStart (new Gtk.Image (Gtk.Stock.DialogWarning' Gtk.IconSize.Dialog)'  						false' false' 0);  				outer.PackStart (new Gtk.Label (string.Empty));    				string msg;  				string long_msg;    				if (tag != null) {  					msg = string.Format (Catalog.GetString ("No photos matching {0} found")' tag.Name);  					long_msg = string.Format (Catalog.GetString ("The tag \"{0}\" is not applied to any photos. Try adding\n" +  										     "the tag to some photos or selecting a different tag in the\n" +  										     "F-Spot preference dialog.")' tag.Name);  				} else {  					msg = Catalog.GetString ("Search returned no results");  					long_msg = Catalog.GetString ("The tag F-Spot is looking for does not exist. Try\n" +  								      "selecting a different tag in the F-Spot preference\n" +  								      "dialog.");  				}    				Gtk.Label label = new Gtk.Label (msg);  				hbox.PackStart (label' false' false' 0);    				Gtk.Label long_label = new Gtk.Label (long_msg);  				long_label.Markup  = string.Format ("<small>{0}</small>"' long_msg);    				vbox.PackStart (long_label' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));    				window.Add (outer);  				label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  				long_label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				long_label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  			}
Magic Number,FSpot,App,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\App.cs,HandleSlideshow,The following statement contains a magic number: if (photos.Length > 0) {  				Array.Sort (photos' new IPhotoComparer.RandomSort ());  				slideshow = new FSpot.Widgets.SlideShow (new BrowsablePointer (new PhotoList (photos)' 0)' (uint)(delay * 1000)' true);  				window.Add (slideshow);  			} else {  				Gtk.HBox outer = new Gtk.HBox ();  				Gtk.HBox hbox = new Gtk.HBox ();  				Gtk.VBox vbox = new Gtk.VBox ();    				outer.PackStart (new Gtk.Label (string.Empty));  				outer.PackStart (vbox' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));  				vbox.PackStart (hbox' false' false' 0);  				hbox.PackStart (new Gtk.Image (Gtk.Stock.DialogWarning' Gtk.IconSize.Dialog)'  						false' false' 0);  				outer.PackStart (new Gtk.Label (string.Empty));    				string msg;  				string long_msg;    				if (tag != null) {  					msg = string.Format (Catalog.GetString ("No photos matching {0} found")' tag.Name);  					long_msg = string.Format (Catalog.GetString ("The tag \"{0}\" is not applied to any photos. Try adding\n" +  										     "the tag to some photos or selecting a different tag in the\n" +  										     "F-Spot preference dialog.")' tag.Name);  				} else {  					msg = Catalog.GetString ("Search returned no results");  					long_msg = Catalog.GetString ("The tag F-Spot is looking for does not exist. Try\n" +  								      "selecting a different tag in the F-Spot preference\n" +  								      "dialog.");  				}    				Gtk.Label label = new Gtk.Label (msg);  				hbox.PackStart (label' false' false' 0);    				Gtk.Label long_label = new Gtk.Label (long_msg);  				long_label.Markup  = string.Format ("<small>{0}</small>"' long_msg);    				vbox.PackStart (long_label' false' false' 0);  				vbox.PackStart (new Gtk.Label (string.Empty));    				window.Add (outer);  				label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  				long_label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));  				long_label.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (0' 0' 0));  			}
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,ControlOverlay,The following statement contains a magic number: hide = new DelayedOperation (2000' HideControls);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,ControlOverlay,The following statement contains a magic number: fade = new DelayedOperation (40' FadeToTarget);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,ControlOverlay,The following statement contains a magic number: dismiss = new DelayedOperation (2000' delegate { /* do nothing */ return false; });
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,ShapeSurface,The following statement contains a magic number: if (x_align == 1.0)                  cr.LineTo (Allocation.Width' 0);              else                  cr.Arc (Allocation.Width - round' round' round' -Math.PI * 0.5' 0);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,ShapeSurface,The following statement contains a magic number: if (x_align == 1.0 || y_align == 1.0)                  cr.LineTo (Allocation.Width' Allocation.Height);              else                  cr.Arc (Allocation.Width - round' Allocation.Height - round' round' 0' Math.PI * 0.5);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,ShapeSurface,The following statement contains a magic number: if (y_align == 1.0)                  cr.LineTo (0' Allocation.Height);              else                  cr.Arc (round' Allocation.Height - round' round' Math.PI * 0.5' Math.PI);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,ShapeSurface,The following statement contains a magic number: cr.Arc (round' round' round' Math.PI' Math.PI * 1.5);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,FadeToTarget,The following statement contains a magic number: Visible = (opacity > 0.05);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,FadeToTarget,The following statement contains a magic number: if (Math.Abs (target - opacity) < .05)                  return false;
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,FadeToTarget,The following statement contains a magic number: if (target > opacity)                  opacity += .04;              else                  opacity -= .04;
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,FadeToTarget,The following statement contains a magic number: if (target > opacity)                  opacity += .04;              else                  opacity -= .04;
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,OnExposeEvent,The following statement contains a magic number: ShapeSurface (cr' new Cairo.Color (c.Red / (double)ushort.MaxValue'                                 c.Blue / (double)ushort.MaxValue'                                 c.Green / (double)ushort.MaxValue'                                 0.8));
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,Relocate,The following statement contains a magic number: x -= (int)(Allocation.Width * 0.5);
Magic Number,FSpot,ControlOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\ControlOverlay.cs,Relocate,The following statement contains a magic number: y -= (int)(Allocation.Height * 0.5);
Magic Number,FSpot,FolderQueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FolderQueryWidget.cs,UpdateGui,The following statement contains a magic number: if (length < 4) {    				foreach (var uri in folder_set.Folders) {  					var image = new Image ("gtk-directory"' IconSize.Button);  					image.TooltipText = uri.ToString ();  					PackStart (image);  				}    				TooltipText = string.Empty;    			} else {    				var label = new Label (string.Format ("<i>{0}x</i>"' length));  				label.UseMarkup = true;  				PackStart (label);    				var image = new Image ("gtk-directory"' IconSize.Button);  				PackStart (image);    				var builder = new StringBuilder ();  				foreach (var uri in folder_set.Folders) {  					if (builder.Length > 0)  						builder.AppendLine ();    					builder.Append (uri.ToString ());  				}    				TooltipText = builder.ToString ();  			}
Magic Number,FSpot,FullScreenView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FullScreenView.cs,FullScreenView,The following statement contains a magic number: try {  				//scroll = new Gtk.ScrolledWindow (null' null);  				actions = new ActionGroup ("joe");    				actions.Add (new[] {  					new ActionEntry (HideToolbar' Stock.Close'  							 Catalog.GetString ("Hide")'  							 null'  							 Catalog.GetString ("Hide toolbar")'  							 HideToolbarAction)});    				actions.Add (new[] {  					new ToggleActionEntry (Info'  							       Stock.Info'  							       Catalog.GetString ("Info")'  							       null'  							       Catalog.GetString ("Image information")'  							       InfoAction'  							       false)});    				Gtk.Action exit_full_screen = new Gtk.Action (ExitFullScreen'  					Catalog.GetString ("Exit fullscreen")'  					null'  					null);  				exit_full_screen.IconName = "view-restore";  				exit_full_screen.Activated += ExitAction;  				actions.Add (exit_full_screen);    				Gtk.Action slide_show = new Gtk.Action (SlideShow'  					Catalog.GetString ("Slideshow")'  					Catalog.GetString ("Start slideshow")'  					null);  				slide_show.IconName = "media-playback-start";  				slide_show.Activated += SlideShowAction;  				actions.Add (slide_show);    				new WindowOpacityFader (this' 1.0' 600);  				notebook = new Notebook ();  				notebook.ShowBorder = false;  				notebook.ShowTabs = false;  				notebook.Show ();    				scroll = new ScrolledView ();  				scroll.ScrolledWindow.SetPolicy (PolicyType.Never' PolicyType.Never);  				view = new PhotoImageView (collection);  				// FIXME this should be handled by the new style setting code  				view.ModifyBg (Gtk.StateType.Normal' this.Style.Black);  				Add (notebook);  				view.Show ();  				view.MotionNotifyEvent += HandleViewMotion;  				view.PointerMode = PointerMode.Scroll;    				scroll.ScrolledWindow.Add (view);    				Toolbar tbar = new Toolbar ();  				tbar.ToolbarStyle = Gtk.ToolbarStyle.BothHoriz;    				tbar.ShowArrow = false;  				tbar.BorderWidth = 15;    				ToolItem t_item = (actions [ExitFullScreen]).CreateToolItem () as ToolItem;  				t_item.IsImportant = true;  				tbar.Insert (t_item' -1);    				Gtk.Action action = new PreviousPictureAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				play_pause_button = (actions [SlideShow]).CreateToolItem () as ToolButton;  				tbar.Insert (play_pause_button' -1);    				action = new NextPictureAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				t_item = new ToolItem ();  				t_item.Child = new Label (Catalog.GetString ("Slide transition:"));  				tbar.Insert (t_item' -1);    				display = new SlideShow (view.Item);  				display.AddEvents ((int) (Gdk.EventMask.PointerMotionMask));  				display.ModifyBg (Gtk.StateType.Normal' Style.Black);  				display.MotionNotifyEvent += HandleViewMotion;  				display.Show ();    				t_item = new ToolItem ();  				ComboBox combo = ComboBox.NewText ();  				foreach (var transition in display.Transitions)  					combo.AppendText (transition.Name);  				combo.Active = 0;  				combo.Changed += HandleTransitionChanged;  				t_item.Child = combo;  				tbar.Insert (t_item' -1);    				action = new RotateLeftAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				action = new RotateRightAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				info_button = (ToggleToolButton) ((actions [Info]).CreateToolItem () as ToolItem);  				tbar.Insert (info_button' -1);    				tbar.Insert ((actions [HideToolbar]).CreateToolItem () as ToolItem' -1);    				notebook.AppendPage (scroll' null);  				notebook.AppendPage (display' null);    				tbar.ShowAll ();    				scroll.Show ();  				Decorated = false;  				Fullscreen ();  				ButtonPressEvent += HandleButtonPressEvent;    				view.Item.Changed += HandleItemChanged;  				view.GrabFocus ();    				hide_cursor_delay = new DelayedOperation (3000' new GLib.IdleHandler (HideCursor));  				hide_cursor_delay.Start ();    				controls = new ControlOverlay (this);  				controls.Add (tbar);  				controls.Dismiss ();    				notebook.CurrentPage = 0;  			} catch (Exception e) {  				Log.Exception (e);  			}
Magic Number,FSpot,FullScreenView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FullScreenView.cs,FullScreenView,The following statement contains a magic number: try {  				//scroll = new Gtk.ScrolledWindow (null' null);  				actions = new ActionGroup ("joe");    				actions.Add (new[] {  					new ActionEntry (HideToolbar' Stock.Close'  							 Catalog.GetString ("Hide")'  							 null'  							 Catalog.GetString ("Hide toolbar")'  							 HideToolbarAction)});    				actions.Add (new[] {  					new ToggleActionEntry (Info'  							       Stock.Info'  							       Catalog.GetString ("Info")'  							       null'  							       Catalog.GetString ("Image information")'  							       InfoAction'  							       false)});    				Gtk.Action exit_full_screen = new Gtk.Action (ExitFullScreen'  					Catalog.GetString ("Exit fullscreen")'  					null'  					null);  				exit_full_screen.IconName = "view-restore";  				exit_full_screen.Activated += ExitAction;  				actions.Add (exit_full_screen);    				Gtk.Action slide_show = new Gtk.Action (SlideShow'  					Catalog.GetString ("Slideshow")'  					Catalog.GetString ("Start slideshow")'  					null);  				slide_show.IconName = "media-playback-start";  				slide_show.Activated += SlideShowAction;  				actions.Add (slide_show);    				new WindowOpacityFader (this' 1.0' 600);  				notebook = new Notebook ();  				notebook.ShowBorder = false;  				notebook.ShowTabs = false;  				notebook.Show ();    				scroll = new ScrolledView ();  				scroll.ScrolledWindow.SetPolicy (PolicyType.Never' PolicyType.Never);  				view = new PhotoImageView (collection);  				// FIXME this should be handled by the new style setting code  				view.ModifyBg (Gtk.StateType.Normal' this.Style.Black);  				Add (notebook);  				view.Show ();  				view.MotionNotifyEvent += HandleViewMotion;  				view.PointerMode = PointerMode.Scroll;    				scroll.ScrolledWindow.Add (view);    				Toolbar tbar = new Toolbar ();  				tbar.ToolbarStyle = Gtk.ToolbarStyle.BothHoriz;    				tbar.ShowArrow = false;  				tbar.BorderWidth = 15;    				ToolItem t_item = (actions [ExitFullScreen]).CreateToolItem () as ToolItem;  				t_item.IsImportant = true;  				tbar.Insert (t_item' -1);    				Gtk.Action action = new PreviousPictureAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				play_pause_button = (actions [SlideShow]).CreateToolItem () as ToolButton;  				tbar.Insert (play_pause_button' -1);    				action = new NextPictureAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				t_item = new ToolItem ();  				t_item.Child = new Label (Catalog.GetString ("Slide transition:"));  				tbar.Insert (t_item' -1);    				display = new SlideShow (view.Item);  				display.AddEvents ((int) (Gdk.EventMask.PointerMotionMask));  				display.ModifyBg (Gtk.StateType.Normal' Style.Black);  				display.MotionNotifyEvent += HandleViewMotion;  				display.Show ();    				t_item = new ToolItem ();  				ComboBox combo = ComboBox.NewText ();  				foreach (var transition in display.Transitions)  					combo.AppendText (transition.Name);  				combo.Active = 0;  				combo.Changed += HandleTransitionChanged;  				t_item.Child = combo;  				tbar.Insert (t_item' -1);    				action = new RotateLeftAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				action = new RotateRightAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				info_button = (ToggleToolButton) ((actions [Info]).CreateToolItem () as ToolItem);  				tbar.Insert (info_button' -1);    				tbar.Insert ((actions [HideToolbar]).CreateToolItem () as ToolItem' -1);    				notebook.AppendPage (scroll' null);  				notebook.AppendPage (display' null);    				tbar.ShowAll ();    				scroll.Show ();  				Decorated = false;  				Fullscreen ();  				ButtonPressEvent += HandleButtonPressEvent;    				view.Item.Changed += HandleItemChanged;  				view.GrabFocus ();    				hide_cursor_delay = new DelayedOperation (3000' new GLib.IdleHandler (HideCursor));  				hide_cursor_delay.Start ();    				controls = new ControlOverlay (this);  				controls.Add (tbar);  				controls.Dismiss ();    				notebook.CurrentPage = 0;  			} catch (Exception e) {  				Log.Exception (e);  			}
Magic Number,FSpot,FullScreenView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FullScreenView.cs,FullScreenView,The following statement contains a magic number: try {  				//scroll = new Gtk.ScrolledWindow (null' null);  				actions = new ActionGroup ("joe");    				actions.Add (new[] {  					new ActionEntry (HideToolbar' Stock.Close'  							 Catalog.GetString ("Hide")'  							 null'  							 Catalog.GetString ("Hide toolbar")'  							 HideToolbarAction)});    				actions.Add (new[] {  					new ToggleActionEntry (Info'  							       Stock.Info'  							       Catalog.GetString ("Info")'  							       null'  							       Catalog.GetString ("Image information")'  							       InfoAction'  							       false)});    				Gtk.Action exit_full_screen = new Gtk.Action (ExitFullScreen'  					Catalog.GetString ("Exit fullscreen")'  					null'  					null);  				exit_full_screen.IconName = "view-restore";  				exit_full_screen.Activated += ExitAction;  				actions.Add (exit_full_screen);    				Gtk.Action slide_show = new Gtk.Action (SlideShow'  					Catalog.GetString ("Slideshow")'  					Catalog.GetString ("Start slideshow")'  					null);  				slide_show.IconName = "media-playback-start";  				slide_show.Activated += SlideShowAction;  				actions.Add (slide_show);    				new WindowOpacityFader (this' 1.0' 600);  				notebook = new Notebook ();  				notebook.ShowBorder = false;  				notebook.ShowTabs = false;  				notebook.Show ();    				scroll = new ScrolledView ();  				scroll.ScrolledWindow.SetPolicy (PolicyType.Never' PolicyType.Never);  				view = new PhotoImageView (collection);  				// FIXME this should be handled by the new style setting code  				view.ModifyBg (Gtk.StateType.Normal' this.Style.Black);  				Add (notebook);  				view.Show ();  				view.MotionNotifyEvent += HandleViewMotion;  				view.PointerMode = PointerMode.Scroll;    				scroll.ScrolledWindow.Add (view);    				Toolbar tbar = new Toolbar ();  				tbar.ToolbarStyle = Gtk.ToolbarStyle.BothHoriz;    				tbar.ShowArrow = false;  				tbar.BorderWidth = 15;    				ToolItem t_item = (actions [ExitFullScreen]).CreateToolItem () as ToolItem;  				t_item.IsImportant = true;  				tbar.Insert (t_item' -1);    				Gtk.Action action = new PreviousPictureAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				play_pause_button = (actions [SlideShow]).CreateToolItem () as ToolButton;  				tbar.Insert (play_pause_button' -1);    				action = new NextPictureAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				t_item = new ToolItem ();  				t_item.Child = new Label (Catalog.GetString ("Slide transition:"));  				tbar.Insert (t_item' -1);    				display = new SlideShow (view.Item);  				display.AddEvents ((int) (Gdk.EventMask.PointerMotionMask));  				display.ModifyBg (Gtk.StateType.Normal' Style.Black);  				display.MotionNotifyEvent += HandleViewMotion;  				display.Show ();    				t_item = new ToolItem ();  				ComboBox combo = ComboBox.NewText ();  				foreach (var transition in display.Transitions)  					combo.AppendText (transition.Name);  				combo.Active = 0;  				combo.Changed += HandleTransitionChanged;  				t_item.Child = combo;  				tbar.Insert (t_item' -1);    				action = new RotateLeftAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				action = new RotateRightAction (view.Item);  				actions.Add (action);  				tbar.Insert (action.CreateToolItem () as ToolItem' -1);    				info_button = (ToggleToolButton) ((actions [Info]).CreateToolItem () as ToolItem);  				tbar.Insert (info_button' -1);    				tbar.Insert ((actions [HideToolbar]).CreateToolItem () as ToolItem' -1);    				notebook.AppendPage (scroll' null);  				notebook.AppendPage (display' null);    				tbar.ShowAll ();    				scroll.Show ();  				Decorated = false;  				Fullscreen ();  				ButtonPressEvent += HandleButtonPressEvent;    				view.Item.Changed += HandleItemChanged;  				view.GrabFocus ();    				hide_cursor_delay = new DelayedOperation (3000' new GLib.IdleHandler (HideCursor));  				hide_cursor_delay.Start ();    				controls = new ControlOverlay (this);  				controls.Add (tbar);  				controls.Dismiss ();    				notebook.CurrentPage = 0;  			} catch (Exception e) {  				Log.Exception (e);  			}
Magic Number,FSpot,FullScreenView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FullScreenView.cs,HandleViewMotion,The following statement contains a magic number: if (y > (Allocation.Height * 0.75)) {  				controls.Visibility = ControlOverlay.VisibilityType.Partial;  				scroll.ShowControls ();  			}
Magic Number,FSpot,FullScreenView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FullScreenView.cs,HandleButtonPressEvent,The following statement contains a magic number: if (args.Event.Type == Gdk.EventType.ButtonPress  			    && args.Event.Button == 3) {  				PhotoPopup popup = new PhotoPopup (this);  				popup.Activate (this.Toplevel' args.Event);  			}
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,OnButtonPressEvent,The following statement contains a magic number: if (args.Button == 3)  				return DrawOrderMenu (args);
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,TickBounds,The following statement contains a magic number: bounds.Y = legend.Y + 3;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,TickBounds,The following statement contains a magic number: bounds.Height = 6;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,DrawTick,The following statement contains a magic number: if (item < tick_layouts.Length) {  				layout = tick_layouts [item];    				if (layout != null) {  					int width' height;  					layout.GetPixelSize (out width' out height);    					Style.PaintLayout (Style' GdkWindow' State' true' area' this'  						   "GroupSelector:Tick"' tick.X + 3' tick.Y + tick.Height' layout);  				}  			}
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,DrawTick,The following statement contains a magic number: if (layout == null)  				tick.Height /= 2;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width = 500;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height = (int) (LegendHeight () + glass.handle_height + 3 * border);
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,PangoPixels,The following statement contains a magic number: return val >= 0 ? (val + 1024 / 2) / 1024 :  				(val - 1024 / 2) / 1024;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,PangoPixels,The following statement contains a magic number: return val >= 0 ? (val + 1024 / 2) / 1024 :  				(val - 1024 / 2) / 1024;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,PangoPixels,The following statement contains a magic number: return val >= 0 ? (val + 1024 / 2) / 1024 :  				(val - 1024 / 2) / 1024;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,PangoPixels,The following statement contains a magic number: return val >= 0 ? (val + 1024 / 2) / 1024 :  				(val - 1024 / 2) / 1024;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,PangoPixels,The following statement contains a magic number: return val >= 0 ? (val + 1024 / 2) / 1024 :  				(val - 1024 / 2) / 1024;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,PangoPixels,The following statement contains a magic number: return val >= 0 ? (val + 1024 / 2) / 1024 :  				(val - 1024 / 2) / 1024;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,LegendHeight,The following statement contains a magic number: return (int) (max_height * 1.5);
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,HandleScrollRight,The following statement contains a magic number: Offset -= 10;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,HandleScrollLeft,The following statement contains a magic number: Offset += 10;
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,OnSizeAllocated,The following statement contains a magic number: Gdk.Rectangle bar = new Rectangle (alloc.X + border' alloc.Y + border'  							   alloc.Width - 2 *  border'  							   alloc.Height - 2 * border - glass.handle_height);
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,OnSizeAllocated,The following statement contains a magic number: Gdk.Rectangle bar = new Rectangle (alloc.X + border' alloc.Y + border'  							   alloc.Width - 2 *  border'  							   alloc.Height - 2 * border - glass.handle_height);
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,GroupSelector,The following statement contains a magic number: left_delay = new DelayedOperation (50' new GLib.IdleHandler (HandleScrollLeft));
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,GroupSelector,The following statement contains a magic number: right_delay = new DelayedOperation (50' new GLib.IdleHandler (HandleScrollRight));
Magic Number,FSpot,GroupSelector,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,GroupSelector,The following statement contains a magic number: this.Put (right' 100' 0);
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,Manipulator,The following statement contains a magic number: timer = new DelayedOperation (50' new GLib.IdleHandler (DragTimeout));
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,StartDrag,The following statement contains a magic number: DragStart.X = (int)x - (bounds.Width / 2);
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,UpdateDrag,The following statement contains a magic number: double drag_lower_limit = (selector.background.Left) - (bounds.Width/2);
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,UpdateDrag,The following statement contains a magic number: double drag_upper_limit = (selector.background.Right) - (bounds.Width/2);
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,UpdateDrag,The following statement contains a magic number: double calX = x - (bounds.Width / 2);
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,UpdateDrag,The following statement contains a magic number: if (calX >= drag_lower_limit && calX <= drag_upper_limit) {  					if (selector.right_delay.IsPending)  						selector.right_delay.Stop();    					if (selector.left_delay.IsPending)  						selector.left_delay.Stop();    					DragOffset = (int)calX - DragStart.X;  				} else if (calX >= drag_upper_limit && selector.right.Sensitive && !selector.right_delay.IsPending) {  					// Ensure selector is at the limit  					if (bounds.Left != drag_upper_limit)  						DragOffset = (int)drag_upper_limit - DragStart.X;  					selector.Offset -= 10;  					selector.right_delay.Start();  				} else if (calX <= drag_lower_limit && selector.left.Sensitive && !selector.left_delay.IsPending) {  					// Ensure selector is at the limit  					if (bounds.Left != drag_lower_limit)  						DragOffset = (int)drag_lower_limit - DragStart.X;  					selector.Offset += 10;  					selector.left_delay.Start();  				}
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,UpdateDrag,The following statement contains a magic number: if (calX >= drag_lower_limit && calX <= drag_upper_limit) {  					if (selector.right_delay.IsPending)  						selector.right_delay.Stop();    					if (selector.left_delay.IsPending)  						selector.left_delay.Stop();    					DragOffset = (int)calX - DragStart.X;  				} else if (calX >= drag_upper_limit && selector.right.Sensitive && !selector.right_delay.IsPending) {  					// Ensure selector is at the limit  					if (bounds.Left != drag_upper_limit)  						DragOffset = (int)drag_upper_limit - DragStart.X;  					selector.Offset -= 10;  					selector.right_delay.Start();  				} else if (calX <= drag_lower_limit && selector.left.Sensitive && !selector.left_delay.IsPending) {  					// Ensure selector is at the limit  					if (bounds.Left != drag_lower_limit)  						DragOffset = (int)drag_lower_limit - DragStart.X;  					selector.Offset += 10;  					selector.left_delay.Start();  				}
Magic Number,FSpot,Manipulator,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,EndDrag,The following statement contains a magic number: double middle = box.X + (box.Width / 2.0);
Magic Number,FSpot,Glass,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,UpdatePopupPosition,The following statement contains a magic number: x += bounds.X + (bounds.Width - requisition.Width) / 2;
Magic Number,FSpot,Glass,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,MaintainPosition,The following statement contains a magic number: double middle = box.X + (box.Width / 2.0);
Magic Number,FSpot,Glass,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,EndDrag,The following statement contains a magic number: double middle = box.X + (box.Width / 2.0);
Magic Number,FSpot,Glass,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,InnerBounds,The following statement contains a magic number: if (Dragging) {  					box.X = DragStart.X + DragOffset + 3;  					// TODO: find out why we need to add 3 to X to set it  					// to middle of mouse cursor while dragging  				} else {  					box.X += DragOffset;  				}
Magic Number,FSpot,Limit,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,Bounds,The following statement contains a magic number: if (Dragging) {  					bounds.X = DragStart.X + DragOffset;  				} else {  					bounds.X = DragOffset + selector.BoxX (Position + limit_offset) - bounds.Width /2;  				}
Magic Number,FSpot,Limit,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\GroupSelector.cs,Bounds,The following statement contains a magic number: bounds.Y = selector.background.Y - handle_height/2;
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,FillValues,The following statement contains a magic number: values = new int [256' 3];
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,FillValues,The following statement contains a magic number: values = new int [256' 3];
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,FillValues,The following statement contains a magic number: if (src.BitsPerSample != 8)  				throw new Exception ("Invalid bits per sample");
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,FillValues,The following statement contains a magic number: unsafe {  				byte * srcb = (byte *)src.Pixels;  				byte * pixels = srcb;  				bool alpha = src.HasAlpha;  				int rowstride = src.Rowstride;  				int width = src.Width;  				int height = src.Height;    				// FIXME array bounds checks slow this down a lot  				// so we use a pointer.  It is sad but I want fastness  				fixed (int * v = &values [0'0]) {  					for (int j = 0; j < height; j++) {  						for (int i = 0; i < width; i++) {  							v [*(srcb++) * 3 + 0]++;  							v [*(srcb++) * 3 + 1]++;  							v [*(srcb++) * 3 + 2]++;    							if (alpha)  								srcb++;    						}  						srcb = pixels + j * rowstride;  					}  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,FillValues,The following statement contains a magic number: unsafe {  				byte * srcb = (byte *)src.Pixels;  				byte * pixels = srcb;  				bool alpha = src.HasAlpha;  				int rowstride = src.Rowstride;  				int width = src.Width;  				int height = src.Height;    				// FIXME array bounds checks slow this down a lot  				// so we use a pointer.  It is sad but I want fastness  				fixed (int * v = &values [0'0]) {  					for (int j = 0; j < height; j++) {  						for (int i = 0; i < width; i++) {  							v [*(srcb++) * 3 + 0]++;  							v [*(srcb++) * 3 + 1]++;  							v [*(srcb++) * 3 + 2]++;    							if (alpha)  								srcb++;    						}  						srcb = pixels + j * rowstride;  					}  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,FillValues,The following statement contains a magic number: unsafe {  				byte * srcb = (byte *)src.Pixels;  				byte * pixels = srcb;  				bool alpha = src.HasAlpha;  				int rowstride = src.Rowstride;  				int width = src.Width;  				int height = src.Height;    				// FIXME array bounds checks slow this down a lot  				// so we use a pointer.  It is sad but I want fastness  				fixed (int * v = &values [0'0]) {  					for (int j = 0; j < height; j++) {  						for (int i = 0; i < width; i++) {  							v [*(srcb++) * 3 + 0]++;  							v [*(srcb++) * 3 + 1]++;  							v [*(srcb++) * 3 + 2]++;    							if (alpha)  								srcb++;    						}  						srcb = pixels + j * rowstride;  					}  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,FillValues,The following statement contains a magic number: unsafe {  				byte * srcb = (byte *)src.Pixels;  				byte * pixels = srcb;  				bool alpha = src.HasAlpha;  				int rowstride = src.Rowstride;  				int width = src.Width;  				int height = src.Height;    				// FIXME array bounds checks slow this down a lot  				// so we use a pointer.  It is sad but I want fastness  				fixed (int * v = &values [0'0]) {  					for (int j = 0; j < height; j++) {  						for (int i = 0; i < width; i++) {  							v [*(srcb++) * 3 + 0]++;  							v [*(srcb++) * 3 + 1]++;  							v [*(srcb++) * 3 + 2]++;    							if (alpha)  								srcb++;    						}  						srcb = pixels + j * rowstride;  					}  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,GetHighLow,The following statement contains a magic number: for (int i = 0; i < values.GetLength (0) - 1; i++) {  				current += values [i' channel];  				percentage = current / total;  				next_percentage = (current + values [i + 1' channel]) / total;  				if (Math.Abs (percentage - 0.006) < Math.Abs (next_percentage - 0.006)) {  					low = i + 1;  					break;  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,GetHighLow,The following statement contains a magic number: for (int i = 0; i < values.GetLength (0) - 1; i++) {  				current += values [i' channel];  				percentage = current / total;  				next_percentage = (current + values [i + 1' channel]) / total;  				if (Math.Abs (percentage - 0.006) < Math.Abs (next_percentage - 0.006)) {  					low = i + 1;  					break;  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,GetHighLow,The following statement contains a magic number: for (int i = values.GetLength (0) - 1; i > 0; i--) {  				current += values [i' channel];  				percentage = current / total;  				next_percentage = (current + values [i - 1' channel]) / total;  				if (Math.Abs (percentage - 0.006) < Math.Abs (next_percentage - 0.006)) {  					high = i - 1;  					break;  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,GetHighLow,The following statement contains a magic number: for (int i = values.GetLength (0) - 1; i > 0; i--) {  				current += values [i' channel];  				percentage = current / total;  				next_percentage = (current + values [i - 1' channel]) / total;  				if (Math.Abs (percentage - 0.006) < Math.Abs (next_percentage - 0.006)) {  					high = i - 1;  					break;  				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Draw,The following statement contains a magic number: unsafe {  				int height = image.Height;  				int rowstride = image.Rowstride;  				int r = 0;  				int b = 0;  				int g = 0;    				for (int i = 0; i < image.Width; i++) {  					byte * pixels = (byte *)image.Pixels + i * 4;    					if (max > 0) {  						r = values [i' 0] * height / max;  						g = values [i' 1] * height / max;  						b = values [i' 2] * height / max;  					} else  						r = g = b = 0;    					int top = Math.Max (r' Math.Max (g' b));    					int j = 0;  					for (; j < height - top; j++) {  						pixels [0] = colors [0];  						pixels [1] = colors [1];  						pixels [2] = colors [2];  						pixels [3] = colors [3];  						pixels += rowstride;  					}  					for (; j < height; j++) {  						pixels [0] = (byte) ((j >= height - r) ? 0xff : 0x00);  						pixels [1] = (byte) ((j >= height - g) ? 0xff : 0x00);  						pixels [2] = (byte) ((j >= height - b) ? 0xff : 0x00);  						pixels [3] = 0xff;  						pixels += rowstride;  					}    				}  			}
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Generate,The following statement contains a magic number: using (Gdk.Pixbuf pixbuf = Generate (input))  				scaled = pixbuf.ScaleToMaxSize (max_width' 128);
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Generate,The following statement contains a magic number: int height = 128;
Magic Number,FSpot,Histogram,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\Histogram.cs,Generate,The following statement contains a magic number: Gdk.Pixbuf pixbuf = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' values.GetLength (0)' height);
Magic Number,FSpot,InfoOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\InfoOverlay.cs,InfoOverlay,The following statement contains a magic number: YAlign = 0.1;
Magic Number,FSpot,InfoOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\InfoOverlay.cs,InfoOverlay,The following statement contains a magic number: DefaultWidth = 250;
Magic Number,FSpot,InfoOverlay,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\InfoOverlay.cs,InfoOverlay,The following statement contains a magic number: box.BorderWidth = 15;
Magic Number,FSpot,Driver,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\main.cs,Main,The following statement contains a magic number: try {  				Gtk.Window.DefaultIconList = new Gdk.Pixbuf [] {  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 16' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 22' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 32' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 48' 0)  				};  			} catch (Exception ex) {  				Log.Exception ("Loading default f-spot icons"' ex);  			}
Magic Number,FSpot,Driver,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\main.cs,Main,The following statement contains a magic number: try {  				Gtk.Window.DefaultIconList = new Gdk.Pixbuf [] {  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 16' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 22' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 32' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 48' 0)  				};  			} catch (Exception ex) {  				Log.Exception ("Loading default f-spot icons"' ex);  			}
Magic Number,FSpot,Driver,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\main.cs,Main,The following statement contains a magic number: try {  				Gtk.Window.DefaultIconList = new Gdk.Pixbuf [] {  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 16' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 22' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 32' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 48' 0)  				};  			} catch (Exception ex) {  				Log.Exception ("Loading default f-spot icons"' ex);  			}
Magic Number,FSpot,Driver,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\main.cs,Main,The following statement contains a magic number: try {  				Gtk.Window.DefaultIconList = new Gdk.Pixbuf [] {  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 16' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 22' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 32' 0)'  					GtkUtil.TryLoadIcon (Global.IconTheme' "f-spot"' 48' 0)  				};  			} catch (Exception ex) {  				Log.Exception ("Loading default f-spot icons"' ex);  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,MainWindow,The following statement contains a magic number: view_vbox.ReorderChild (query_widget' 2);
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,AddTagExtended,The following statement contains a magic number: foreach (Tag t in tags) {  				if (t.Icon != null || t.IconWasCleared)  					continue;  				// FIXME this needs a lot more work.  				Pixbuf icon = null;  				try {  					var tmp = PhotoLoader.LoadAtMaxSize (query [nums [0]]' 128' 128);  					icon = PixbufUtils.TagIconFromPixbuf (tmp);  					tmp.Dispose ();  				} catch {  					icon = null;  				}    				t.Icon = icon;  				Database.Tags.Commit (t);  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,AddTagExtended,The following statement contains a magic number: foreach (Tag t in tags) {  				if (t.Icon != null || t.IconWasCleared)  					continue;  				// FIXME this needs a lot more work.  				Pixbuf icon = null;  				try {  					var tmp = PhotoLoader.LoadAtMaxSize (query [nums [0]]' 128' 128);  					icon = PixbufUtils.TagIconFromPixbuf (tmp);  					tmp.Dispose ();  				} catch {  					icon = null;  				}    				t.Icon = icon;  				Database.Tags.Commit (t);  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleTagSelectionButtonPressEvent,The following statement contains a magic number: if (args.Event.Button == 3) {  				var popup = new TagPopup ();  				popup.Activate (args.Event' tag_selection_widget.TagAtPosition (args.Event.X' args.Event.Y)'  					tag_selection_widget.TagHighlight);  				args.RetVal = true;  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewDragBegin,The following statement contains a magic number: if (photos.Length > 0) {  				int len = Math.Min (photos.Length' 4);  				int size = 48;  				int border = 2;  				int csize = size / 2 + len * size / 2 + 2 * border;    				Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);  				container.Fill (0x00000000);    				bool use_icon = false;    				while (len-- > 0) {  					FSpot.PixbufCache.CacheEntry entry = icon_view.Cache.Lookup (photos [len].DefaultVersion.Uri);    					Pixbuf thumbnail = null;  					if (entry != null) {  						Cms.Profile screen_profile;  						if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {  							thumbnail = entry.Pixbuf.Copy ();  							FSpot.ColorManagement.ApplyProfile (thumbnail' screen_profile);  						} else  							thumbnail = entry.ShallowCopyPixbuf ();  					}    					if (thumbnail != null) {  						Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    						int x = border + len * (size / 2) + (size - small.Width) / 2;  						int y = border + len * (size / 2) + (size - small.Height) / 2;  						Pixbuf box = new Pixbuf (container' x - border' y - border'  							             small.Width + 2 * border' small.Height + 2 * border);    						box.Fill (0x000000ff);  						small.CopyArea (0' 0' small.Width' small.Height' container' x' y);    						thumbnail.Dispose ();  						small.Dispose ();  						use_icon = true;  					}  				}  				if (use_icon)  					Gtk.Drag.SetIconPixbuf (args.Context' container' 0' 0);  				container.Dispose ();  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleCommonPhotoCommands,The following statement contains a magic number: switch (args.Event.Key) {  			case Gdk.Key.Delete:  				if (shift)  					HandleDeleteCommand (sender' args);  				else  					HandleRemoveCommand (sender' args);  				break;  			case Gdk.Key.Key_0:  			case Gdk.Key.KP_0:  				if (alt)  					HandleRatingMenuSelected (0);  				break;  			case Gdk.Key.Key_1:  			case Gdk.Key.KP_1:  				if (alt)  					HandleRatingMenuSelected (1);  				break;  			case Gdk.Key.Key_2:  			case Gdk.Key.KP_2:  				if (alt)  					HandleRatingMenuSelected (2);  				break;  			case Gdk.Key.Key_3:  			case Gdk.Key.KP_3:  				if (alt)  					HandleRatingMenuSelected (3);  				break;  			case Gdk.Key.Key_4:  			case Gdk.Key.KP_4:  				if (alt)  					HandleRatingMenuSelected (4);  				break;  			case Gdk.Key.Key_5:  			case Gdk.Key.KP_5:  				if (alt)  					HandleRatingMenuSelected (5);  				break;  			default:  				return; //do not set the RetVal to true  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleCommonPhotoCommands,The following statement contains a magic number: switch (args.Event.Key) {  			case Gdk.Key.Delete:  				if (shift)  					HandleDeleteCommand (sender' args);  				else  					HandleRemoveCommand (sender' args);  				break;  			case Gdk.Key.Key_0:  			case Gdk.Key.KP_0:  				if (alt)  					HandleRatingMenuSelected (0);  				break;  			case Gdk.Key.Key_1:  			case Gdk.Key.KP_1:  				if (alt)  					HandleRatingMenuSelected (1);  				break;  			case Gdk.Key.Key_2:  			case Gdk.Key.KP_2:  				if (alt)  					HandleRatingMenuSelected (2);  				break;  			case Gdk.Key.Key_3:  			case Gdk.Key.KP_3:  				if (alt)  					HandleRatingMenuSelected (3);  				break;  			case Gdk.Key.Key_4:  			case Gdk.Key.KP_4:  				if (alt)  					HandleRatingMenuSelected (4);  				break;  			case Gdk.Key.Key_5:  			case Gdk.Key.KP_5:  				if (alt)  					HandleRatingMenuSelected (5);  				break;  			default:  				return; //do not set the RetVal to true  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleCommonPhotoCommands,The following statement contains a magic number: switch (args.Event.Key) {  			case Gdk.Key.Delete:  				if (shift)  					HandleDeleteCommand (sender' args);  				else  					HandleRemoveCommand (sender' args);  				break;  			case Gdk.Key.Key_0:  			case Gdk.Key.KP_0:  				if (alt)  					HandleRatingMenuSelected (0);  				break;  			case Gdk.Key.Key_1:  			case Gdk.Key.KP_1:  				if (alt)  					HandleRatingMenuSelected (1);  				break;  			case Gdk.Key.Key_2:  			case Gdk.Key.KP_2:  				if (alt)  					HandleRatingMenuSelected (2);  				break;  			case Gdk.Key.Key_3:  			case Gdk.Key.KP_3:  				if (alt)  					HandleRatingMenuSelected (3);  				break;  			case Gdk.Key.Key_4:  			case Gdk.Key.KP_4:  				if (alt)  					HandleRatingMenuSelected (4);  				break;  			case Gdk.Key.Key_5:  			case Gdk.Key.KP_5:  				if (alt)  					HandleRatingMenuSelected (5);  				break;  			default:  				return; //do not set the RetVal to true  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleCommonPhotoCommands,The following statement contains a magic number: switch (args.Event.Key) {  			case Gdk.Key.Delete:  				if (shift)  					HandleDeleteCommand (sender' args);  				else  					HandleRemoveCommand (sender' args);  				break;  			case Gdk.Key.Key_0:  			case Gdk.Key.KP_0:  				if (alt)  					HandleRatingMenuSelected (0);  				break;  			case Gdk.Key.Key_1:  			case Gdk.Key.KP_1:  				if (alt)  					HandleRatingMenuSelected (1);  				break;  			case Gdk.Key.Key_2:  			case Gdk.Key.KP_2:  				if (alt)  					HandleRatingMenuSelected (2);  				break;  			case Gdk.Key.Key_3:  			case Gdk.Key.KP_3:  				if (alt)  					HandleRatingMenuSelected (3);  				break;  			case Gdk.Key.Key_4:  			case Gdk.Key.KP_4:  				if (alt)  					HandleRatingMenuSelected (4);  				break;  			case Gdk.Key.Key_5:  			case Gdk.Key.KP_5:  				if (alt)  					HandleRatingMenuSelected (5);  				break;  			default:  				return; //do not set the RetVal to true  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleMergeTagsCommand,The following statement contains a magic number: if (tags.Length < 2)  				return;
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleZoomChanged,The following statement contains a magic number: double zoom = .5;
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleZoomChanged,The following statement contains a magic number: switch (ViewMode) {  			case ModeType.PhotoView:  				zoom = photo_view.NormalizedZoom;  				zoom_scale.Value = zoom;  				break;  			case ModeType.IconView:  				zoom = icon_view.Zoom;  				if (zoom == 0.0 || zoom == 100.0 || zoom != zoom_scale.Value)  					zoom_scale.Value = zoom;    				break;  			}
Magic Number,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleAddTagToTerm,The following statement contains a magic number: item_pos -= 2;
Magic Number,FSpot,PhotoQuery,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoQuery.cs,RequestReload,The following statement contains a magic number: if (untagged) {  				condition_array = new IQueryCondition[conditions.Count + 1];  				condition_array[0] = new UntaggedCondition ();  				i = 1;  			} else {  				condition_array = new IQueryCondition[conditions.Count + 2];  		//		condition_array[0] = new ConditionWrapper (extra_condition);  				condition_array[1] = new ConditionWrapper (terms != null ? terms.SqlCondition () : null);  				i = 2;  			}
Magic Number,FSpot,PhotoQuery,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoQuery.cs,RequestReload,The following statement contains a magic number: if (untagged) {  				condition_array = new IQueryCondition[conditions.Count + 1];  				condition_array[0] = new UntaggedCondition ();  				i = 1;  			} else {  				condition_array = new IQueryCondition[conditions.Count + 2];  		//		condition_array[0] = new ConditionWrapper (extra_condition);  				condition_array[1] = new ConditionWrapper (terms != null ? terms.SqlCondition () : null);  				i = 2;  			}
Magic Number,FSpot,PhotoQuery,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoQuery.cs,LookupItem,The following statement contains a magic number: int mid = (low + high) / 2;
Magic Number,FSpot,PhotoQuery,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoQuery.cs,LookupItem,The following statement contains a magic number: while (low <= high) {  				mid = (low + high) / 2;  				if (!cache.TryGetPhoto (mid' out current))  					//the item we're looking for is not in the cache  					//a binary search could take up to ln2 (N/cache.SIZE) request  					//lets reduce that number to 1  					return store.IndexOf (temp_table' date' asc);    				int comp = this [mid].Time.CompareTo (date);  				if (!asc && comp < 0 || asc && comp > 0)  					high = mid - 1;  				else if (!asc && comp > 0 || asc && comp < 0)  					low = mid + 1;  				else  					return mid;  			}
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,HandleButtonPressEvent,The following statement contains a magic number: if (args.Event.Type == EventType.ButtonPress  			    && args.Event.Button == 3) {  				var popup = new PhotoPopup ();  				popup.Activate (Toplevel' args.Event);  			}
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PhotoView,The following statement contains a magic number: commit_delay = new DelayedOperation (1000' new GLib.IdleHandler (CommitPendingChanges));
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PhotoView,The following statement contains a magic number: Box vbox = new VBox (false' 6);
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PhotoView,The following statement contains a magic number: inner_vbox = new VBox (false ' 2);
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PhotoView,The following statement contains a magic number: inner_hbox = new HBox (false ' 2);
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PhotoView,The following statement contains a magic number: filmstrip.Spacing = 4;
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PhotoView,The following statement contains a magic number: filmstrip.ThumbSize = 75;
Magic Number,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PhotoView,The following statement contains a magic number: HBox lower_hbox = new HBox (false' 2);
Magic Number,FSpot,PixbufCache,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PixbufCache.cs,FindNext,The following statement contains a magic number: if (total_size > max_size * 4) {  				//System.Console.WriteLine ("Hit major limit ({0}) out of {1}"'  				//			  total_size' max_size);  				return null;  			}
Magic Number,FSpot,PixbufCache,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PixbufCache.cs,FindNext,The following statement contains a magic number: while (i-- > 0) {  				entry = items_mru [i];  				lock (entry) {  					if (entry.Reload) {  						entry.Reload = false;  						return entry;  					}    					//if the depth of the queue is so large that we've reached double our limit  					//break out of here and let the queue shrink.  					if (entry.Pixbuf != null)  						size += entry.Size;    					if (size > max_size * 2) {  						//System.Console.WriteLine ("Hit limit ({0}'{1}) out of {2}"'  						//			  size' total_size'max_size);  						return null;  					}  				}  			}
Magic Number,FSpot,PixbufCache,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PixbufCache.cs,ShrinkIfNeeded,The following statement contains a magic number: while ((items_mru.Count - num) > 10 && total_size > max_size) {  				CacheEntry entry = items_mru [num++];  				items.Remove (entry.Uri);  				entry.Dispose ();  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnCustomWidgetChanged,The following statement contains a magic number: using (var surface = new ImageSurface (Format.ARGB32' 360' 254)) {  				using (var gr = new Context (surface)) {  					gr.SetSourceColor (new Color (1' 1' 1));  					gr.Rectangle (0' 0' 360' 254);  					gr.Fill ();  					using (Gdk.Pixbuf pixbuf = Gdk.Pixbuf.LoadFromResource ("flower.png")) {  						DrawImage (gr' pixbuf' 0' 0' 360' 254);  					}  				}  				(widget as CustomPrintWidget).PreviewImage.Pixbuf = CreatePixbuf (surface);  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnCustomWidgetChanged,The following statement contains a magic number: using (var surface = new ImageSurface (Format.ARGB32' 360' 254)) {  				using (var gr = new Context (surface)) {  					gr.SetSourceColor (new Color (1' 1' 1));  					gr.Rectangle (0' 0' 360' 254);  					gr.Fill ();  					using (Gdk.Pixbuf pixbuf = Gdk.Pixbuf.LoadFromResource ("flower.png")) {  						DrawImage (gr' pixbuf' 0' 0' 360' 254);  					}  				}  				(widget as CustomPrintWidget).PreviewImage.Pixbuf = CreatePixbuf (surface);  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnCustomWidgetChanged,The following statement contains a magic number: using (var surface = new ImageSurface (Format.ARGB32' 360' 254)) {  				using (var gr = new Context (surface)) {  					gr.SetSourceColor (new Color (1' 1' 1));  					gr.Rectangle (0' 0' 360' 254);  					gr.Fill ();  					using (Gdk.Pixbuf pixbuf = Gdk.Pixbuf.LoadFromResource ("flower.png")) {  						DrawImage (gr' pixbuf' 0' 0' 360' 254);  					}  				}  				(widget as CustomPrintWidget).PreviewImage.Pixbuf = CreatePixbuf (surface);  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnCustomWidgetChanged,The following statement contains a magic number: using (var surface = new ImageSurface (Format.ARGB32' 360' 254)) {  				using (var gr = new Context (surface)) {  					gr.SetSourceColor (new Color (1' 1' 1));  					gr.Rectangle (0' 0' 360' 254);  					gr.Fill ();  					using (Gdk.Pixbuf pixbuf = Gdk.Pixbuf.LoadFromResource ("flower.png")) {  						DrawImage (gr' pixbuf' 0' 0' 360' 254);  					}  				}  				(widget as CustomPrintWidget).PreviewImage.Pixbuf = CreatePixbuf (surface);  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnCustomWidgetChanged,The following statement contains a magic number: using (var surface = new ImageSurface (Format.ARGB32' 360' 254)) {  				using (var gr = new Context (surface)) {  					gr.SetSourceColor (new Color (1' 1' 1));  					gr.Rectangle (0' 0' 360' 254);  					gr.Fill ();  					using (Gdk.Pixbuf pixbuf = Gdk.Pixbuf.LoadFromResource ("flower.png")) {  						DrawImage (gr' pixbuf' 0' 0' 360' 254);  					}  				}  				(widget as CustomPrintWidget).PreviewImage.Pixbuf = CreatePixbuf (surface);  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnCustomWidgetChanged,The following statement contains a magic number: using (var surface = new ImageSurface (Format.ARGB32' 360' 254)) {  				using (var gr = new Context (surface)) {  					gr.SetSourceColor (new Color (1' 1' 1));  					gr.Rectangle (0' 0' 360' 254);  					gr.Fill ();  					using (Gdk.Pixbuf pixbuf = Gdk.Pixbuf.LoadFromResource ("flower.png")) {  						DrawImage (gr' pixbuf' 0' 0' 360' 254);  					}  				}  				(widget as CustomPrintWidget).PreviewImage.Pixbuf = CreatePixbuf (surface);  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: switch (photos_per_page) {  			default:  			case 1: ppx = ppy = 1; break;  			case 2: ppx = 1; ppy = 2; break;  			case 4: ppx = ppy = 2; break;  			case 9: ppx = ppy = 3; break;  			case 12: ppx = 3; ppy = 4; break;  			case 20: ppx = 4; ppy = 5; break;  			case 30: ppx = 5; ppy = 6; break;  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: double mx = (w / 25.4) * context.DpiX' my = (h / 25.4) * context.DpiY;
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: double mx = (w / 25.4) * context.DpiX' my = (h / 25.4) * context.DpiY;
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: for (int x = 0; x <= ppx; x++) {  				for (int y = 0; y <= ppy; y++) {  					int p_index = repeat ? page_nr : page_nr * photos_per_page + y * ppx + x;  					if (crop_marks)  						DrawCropMarks (cr' x * w' y * h' w * .1);  					if (x == ppx || y == ppy || p_index >= selected_photos.Length)  						continue;  					using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (selected_photos [p_index].DefaultVersion.Uri)) {  						Gdk.Pixbuf pixbuf;  						try {  							pixbuf = img.Load ((int)mx' (int)my);  							if (pixbuf == null) {  								Log.Error ("Not enough memory for printing " + selected_photos [p_index].DefaultVersion.Uri);  								continue;  							}  							Cms.Profile printer_profile;  							if (ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_OUTPUT_PROFILE)' out printer_profile))  								ColorManagement.ApplyProfile (pixbuf' img.GetProfile ()' printer_profile);  						} catch (Exception e) {  							Log.Exception ("Unable to load image " + selected_photos [p_index].DefaultVersion.Uri + "\n"' e);  							// If the image is not found load error pixbuf  							pixbuf = new Gdk.Pixbuf (PixbufUtils.ErrorPixbuf' 0' 0'  											  PixbufUtils.ErrorPixbuf.Width'  											  PixbufUtils.ErrorPixbuf.Height);  						}    						bool rotated = false;  						if (Math.Sign ((double)pixbuf.Width / pixbuf.Height - 1.0) != Math.Sign (w / h - 1.0)) {  							Gdk.Pixbuf d_pixbuf = pixbuf.RotateSimple (Gdk.PixbufRotation.Counterclockwise);  							pixbuf.Dispose ();  							pixbuf = d_pixbuf;  							rotated = true;  						}    						DrawImage (cr' pixbuf' x * w' y * h' w' h);    						string tag_string = "";  						foreach (Tag t in selected_photos [p_index].Tags)  							tag_string = string.Concat (tag_string' t.Name);    						// FIXME: Convert this to StringBuilder?  						var label = string.Format (print_label_format'  										  comment'  										  selected_photos [p_index].Name'  										  selected_photos [p_index].Time.ToLocalTime ().ToShortDateString ()'  										  selected_photos [p_index].Time.ToLocalTime ().ToShortTimeString ()'  										  tag_string'  										  selected_photos [p_index].Description);    						DrawComment (context' (x + 1) * w' (rotated ? y : y + 1) * h' (rotated ? w : h) * .025' label' rotated);    						pixbuf.Dispose ();  					}  				}  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,OnDrawPage,The following statement contains a magic number: for (int x = 0; x <= ppx; x++) {  				for (int y = 0; y <= ppy; y++) {  					int p_index = repeat ? page_nr : page_nr * photos_per_page + y * ppx + x;  					if (crop_marks)  						DrawCropMarks (cr' x * w' y * h' w * .1);  					if (x == ppx || y == ppy || p_index >= selected_photos.Length)  						continue;  					using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (selected_photos [p_index].DefaultVersion.Uri)) {  						Gdk.Pixbuf pixbuf;  						try {  							pixbuf = img.Load ((int)mx' (int)my);  							if (pixbuf == null) {  								Log.Error ("Not enough memory for printing " + selected_photos [p_index].DefaultVersion.Uri);  								continue;  							}  							Cms.Profile printer_profile;  							if (ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_OUTPUT_PROFILE)' out printer_profile))  								ColorManagement.ApplyProfile (pixbuf' img.GetProfile ()' printer_profile);  						} catch (Exception e) {  							Log.Exception ("Unable to load image " + selected_photos [p_index].DefaultVersion.Uri + "\n"' e);  							// If the image is not found load error pixbuf  							pixbuf = new Gdk.Pixbuf (PixbufUtils.ErrorPixbuf' 0' 0'  											  PixbufUtils.ErrorPixbuf.Width'  											  PixbufUtils.ErrorPixbuf.Height);  						}    						bool rotated = false;  						if (Math.Sign ((double)pixbuf.Width / pixbuf.Height - 1.0) != Math.Sign (w / h - 1.0)) {  							Gdk.Pixbuf d_pixbuf = pixbuf.RotateSimple (Gdk.PixbufRotation.Counterclockwise);  							pixbuf.Dispose ();  							pixbuf = d_pixbuf;  							rotated = true;  						}    						DrawImage (cr' pixbuf' x * w' y * h' w' h);    						string tag_string = "";  						foreach (Tag t in selected_photos [p_index].Tags)  							tag_string = string.Concat (tag_string' t.Name);    						// FIXME: Convert this to StringBuilder?  						var label = string.Format (print_label_format'  										  comment'  										  selected_photos [p_index].Name'  										  selected_photos [p_index].Time.ToLocalTime ().ToShortDateString ()'  										  selected_photos [p_index].Time.ToLocalTime ().ToShortTimeString ()'  										  tag_string'  										  selected_photos [p_index].Description);    						DrawComment (context' (x + 1) * w' (rotated ? y : y + 1) * h' (rotated ? w : h) * .025' label' rotated);    						pixbuf.Dispose ();  					}  				}  			}
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawCropMarks,The following statement contains a magic number: cr.MoveTo (x - length / 2' y);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawCropMarks,The following statement contains a magic number: cr.LineTo (x + length / 2' y);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawCropMarks,The following statement contains a magic number: cr.MoveTo (x' y - length / 2);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawCropMarks,The following statement contains a magic number: cr.LineTo (x' y + length / 2);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawCropMarks,The following statement contains a magic number: cr.LineWidth = .2;
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawCropMarks,The following statement contains a magic number: cr.SetDash (new [] { length * .4' length * .2 }' 0);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawCropMarks,The following statement contains a magic number: cr.SetDash (new [] { length * .4' length * .2 }' 0);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawComment,The following statement contains a magic number: if (rotated) {  				cr.Translate (x - h' y + lay_w * scale);  				cr.Rotate (-Math.PI / 2);  			} else  				cr.Translate (x - lay_w * scale' y - h);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawImage,The following statement contains a magic number: if (white_borders)  				cr.Translate (w * .025' h * .025);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawImage,The following statement contains a magic number: if (white_borders)  				cr.Translate (w * .025' h * .025);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawImage,The following statement contains a magic number: if (white_borders)  				cr.Scale (.95' .95);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawImage,The following statement contains a magic number: if (white_borders)  				cr.Scale (.95' .95);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawImage,The following statement contains a magic number: Gdk.CairoHelper.SetSourcePixbuf (cr' pixbuf' (rectw - pixbuf.Width) / 2.0' (recth - pixbuf.Height) / 2.0);
Magic Number,FSpot,PrintOperation,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PrintOperation.cs,DrawImage,The following statement contains a magic number: Gdk.CairoHelper.SetSourcePixbuf (cr' pixbuf' (rectw - pixbuf.Width) / 2.0' (recth - pixbuf.Height) / 2.0);
Magic Number,FSpot,SelectionDataExtensions,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SelectionDataExtensions.cs,SetPhotosData,The following statement contains a magic number: selection_data.Set (target' 8' data' data.Length);
Magic Number,FSpot,SelectionDataExtensions,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SelectionDataExtensions.cs,SetTagsData,The following statement contains a magic number: selection_data.Set (target' 8' data' data.Length);
Magic Number,FSpot,SelectionDataExtensions,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SelectionDataExtensions.cs,SetUriListData,The following statement contains a magic number: selection_data.Set (target' 8' data' data.Length);
Magic Number,FSpot,SelectionDataExtensions,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SelectionDataExtensions.cs,SetCopyFiles,The following statement contains a magic number: selection_data.Set (Atom.Intern ("x-special/gnome-copied-files"' true)' 8' data' data.Length);
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,The following statement contains a magic number: if (force_original) {  				original_size.Active = true;  				tiny_size.Sensitive = false;  				small_size.Sensitive = false;  				medium_size.Sensitive = false;  				large_size.Sensitive = false;  				x_large_size.Sensitive = false;  			} else  				switch (Preferences.Get<int> (Preferences.EXPORT_EMAIL_SIZE)) {  					case 0 :  original_size.Active = true; break;  					case 1 :  tiny_size.Active = true; break;  					case 2 :  small_size.Active = true; break;  					case 3 :  medium_size.Active = true; break;  					case 4 :  large_size.Active = true; break;  					case 5 :  x_large_size.Active = true; break;  					default: break;  				}
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,The following statement contains a magic number: if (force_original) {  				original_size.Active = true;  				tiny_size.Sensitive = false;  				small_size.Sensitive = false;  				medium_size.Sensitive = false;  				large_size.Sensitive = false;  				x_large_size.Sensitive = false;  			} else  				switch (Preferences.Get<int> (Preferences.EXPORT_EMAIL_SIZE)) {  					case 0 :  original_size.Active = true; break;  					case 1 :  tiny_size.Active = true; break;  					case 2 :  small_size.Active = true; break;  					case 3 :  medium_size.Active = true; break;  					case 4 :  large_size.Active = true; break;  					case 5 :  x_large_size.Active = true; break;  					default: break;  				}
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,The following statement contains a magic number: if (force_original) {  				original_size.Active = true;  				tiny_size.Sensitive = false;  				small_size.Sensitive = false;  				medium_size.Sensitive = false;  				large_size.Sensitive = false;  				x_large_size.Sensitive = false;  			} else  				switch (Preferences.Get<int> (Preferences.EXPORT_EMAIL_SIZE)) {  					case 0 :  original_size.Active = true; break;  					case 1 :  tiny_size.Active = true; break;  					case 2 :  small_size.Active = true; break;  					case 3 :  medium_size.Active = true; break;  					case 4 :  large_size.Active = true; break;  					case 5 :  x_large_size.Active = true; break;  					default: break;  				}
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,The following statement contains a magic number: if (force_original) {  				original_size.Active = true;  				tiny_size.Sensitive = false;  				small_size.Sensitive = false;  				medium_size.Sensitive = false;  				large_size.Sensitive = false;  				x_large_size.Sensitive = false;  			} else  				switch (Preferences.Get<int> (Preferences.EXPORT_EMAIL_SIZE)) {  					case 0 :  original_size.Active = true; break;  					case 1 :  tiny_size.Active = true; break;  					case 2 :  small_size.Active = true; break;  					case 3 :  medium_size.Active = true; break;  					case 4 :  large_size.Active = true; break;  					case 5 :  x_large_size.Active = true; break;  					default: break;  				}
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,The following statement contains a magic number: if (scalephoto != null && !force_original) {    				// Get first photos file size  				long orig_size = FileFactory.NewForUri (scalephoto.DefaultVersion.Uri).QueryInfo ("standard::size"' FileQueryInfoFlags.None' null).Size;    				var filters = new FilterSet ();  				filters.Add (new ResizeFilter ((uint)(sizes [3])));  				long new_size;  				using (FilterRequest request = new FilterRequest (scalephoto.DefaultVersion.Uri)) {  					filters.Convert (request);  					new_size = FileFactory.NewForUri (request.Current).QueryInfo ("standard::size"' FileQueryInfoFlags.None' null).Size;  				}    				if (orig_size > 0) {    					// Get the factor (scale) between original and resized medium size.  					scale_percentage = 1 - ( (float) (orig_size - new_size) / orig_size);    					// What is the relation between the estimated medium scale factor' and reality?  					double scale_scale = scale_percentage / avg_scale_ref[3];    					//System.Console.WriteLine ("scale_percentage {0}' ref {1}' relative {2}"'  					//	scale_percentage' avg_scale_ref[3]' scale_scale  );    					// Re-Calculate the proper relation per size  					for (int k = 0; k < avg_scale_ref.Length; k++) {  						avg_scale[k] = avg_scale_ref[k] * scale_scale;  					//	System.Console.WriteLine ("avg_scale[{0}]={1} (was {2})"'  					//		k' avg_scale[k]' avg_scale_ref[k]  );  					}  				}    			}
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,SendEmail,The following statement contains a magic number: if (scalephoto != null && !force_original) {    				// Get first photos file size  				long orig_size = FileFactory.NewForUri (scalephoto.DefaultVersion.Uri).QueryInfo ("standard::size"' FileQueryInfoFlags.None' null).Size;    				var filters = new FilterSet ();  				filters.Add (new ResizeFilter ((uint)(sizes [3])));  				long new_size;  				using (FilterRequest request = new FilterRequest (scalephoto.DefaultVersion.Uri)) {  					filters.Convert (request);  					new_size = FileFactory.NewForUri (request.Current).QueryInfo ("standard::size"' FileQueryInfoFlags.None' null).Size;  				}    				if (orig_size > 0) {    					// Get the factor (scale) between original and resized medium size.  					scale_percentage = 1 - ( (float) (orig_size - new_size) / orig_size);    					// What is the relation between the estimated medium scale factor' and reality?  					double scale_scale = scale_percentage / avg_scale_ref[3];    					//System.Console.WriteLine ("scale_percentage {0}' ref {1}' relative {2}"'  					//	scale_percentage' avg_scale_ref[3]' scale_scale  );    					// Re-Calculate the proper relation per size  					for (int k = 0; k < avg_scale_ref.Length; k++) {  						avg_scale[k] = avg_scale_ref[k] * scale_scale;  					//	System.Console.WriteLine ("avg_scale[{0}]={1} (was {2})"'  					//		k' avg_scale[k]' avg_scale_ref[k]  );  					}  				}    			}
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,GetScaleSize,The following statement contains a magic number: if (small_size.Active)  				size_number = 2;
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,GetScaleSize,The following statement contains a magic number: if (medium_size.Active)  				size_number = 3;
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,GetScaleSize,The following statement contains a magic number: if (large_size.Active)  				size_number = 4;
Magic Number,FSpot,SendEmail,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SendEmail.cs,GetScaleSize,The following statement contains a magic number: if (x_large_size.Active)  				size_number = 5;
Magic Number,FSpot,SingleView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleImageViewButtonPressEvent,The following statement contains a magic number: if (args.Event.Type != EventType.ButtonPress || args.Event.Button != 3)  				return;
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleTransparentColorSet,The following statement contains a magic number: Preferences.Set (Preferences.VIEWER_TRANS_COLOR'  						"#" +  						(color_button.Color.Red / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Green / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Blue / 256 ).ToString("x").PadLeft (2' '0'));
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleTransparentColorSet,The following statement contains a magic number: Preferences.Set (Preferences.VIEWER_TRANS_COLOR'  						"#" +  						(color_button.Color.Red / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Green / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Blue / 256 ).ToString("x").PadLeft (2' '0'));
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleTransparentColorSet,The following statement contains a magic number: Preferences.Set (Preferences.VIEWER_TRANS_COLOR'  						"#" +  						(color_button.Color.Red / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Green / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Blue / 256 ).ToString("x").PadLeft (2' '0'));
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleTransparentColorSet,The following statement contains a magic number: Preferences.Set (Preferences.VIEWER_TRANS_COLOR'  						"#" +  						(color_button.Color.Red / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Green / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Blue / 256 ).ToString("x").PadLeft (2' '0'));
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleTransparentColorSet,The following statement contains a magic number: Preferences.Set (Preferences.VIEWER_TRANS_COLOR'  						"#" +  						(color_button.Color.Red / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Green / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Blue / 256 ).ToString("x").PadLeft (2' '0'));
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,HandleTransparentColorSet,The following statement contains a magic number: Preferences.Set (Preferences.VIEWER_TRANS_COLOR'  						"#" +  						(color_button.Color.Red / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Green / 256 ).ToString("x").PadLeft (2' '0') +  						(color_button.Color.Blue / 256 ).ToString("x").PadLeft (2' '0'));
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,LoadPreference,The following statement contains a magic number: switch (key) {  				case Preferences.VIEWER_INTERPOLATION:  					interpolation_check.Active = Preferences.Get<bool> (key);  					break;  				case Preferences.VIEWER_TRANSPARENCY:  					switch (Preferences.Get<string> (key)) {  					case "COLOR":  						as_color_radio.Active = true;  						break;  					case "CHECK_PATTERN":  						as_check_radio.Active = true;  						break;  					default: //NONE  						as_background_radio.Active = true;  						break;  					}  					break;  				case Preferences.VIEWER_TRANS_COLOR:  					color_button.Color = new Gdk.Color (  						Byte.Parse (Preferences.Get<string> (key).Substring (1'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (3'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (5'2)' System.Globalization.NumberStyles.AllowHexSpecifier));  					break;  				}
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,LoadPreference,The following statement contains a magic number: switch (key) {  				case Preferences.VIEWER_INTERPOLATION:  					interpolation_check.Active = Preferences.Get<bool> (key);  					break;  				case Preferences.VIEWER_TRANSPARENCY:  					switch (Preferences.Get<string> (key)) {  					case "COLOR":  						as_color_radio.Active = true;  						break;  					case "CHECK_PATTERN":  						as_check_radio.Active = true;  						break;  					default: //NONE  						as_background_radio.Active = true;  						break;  					}  					break;  				case Preferences.VIEWER_TRANS_COLOR:  					color_button.Color = new Gdk.Color (  						Byte.Parse (Preferences.Get<string> (key).Substring (1'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (3'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (5'2)' System.Globalization.NumberStyles.AllowHexSpecifier));  					break;  				}
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,LoadPreference,The following statement contains a magic number: switch (key) {  				case Preferences.VIEWER_INTERPOLATION:  					interpolation_check.Active = Preferences.Get<bool> (key);  					break;  				case Preferences.VIEWER_TRANSPARENCY:  					switch (Preferences.Get<string> (key)) {  					case "COLOR":  						as_color_radio.Active = true;  						break;  					case "CHECK_PATTERN":  						as_check_radio.Active = true;  						break;  					default: //NONE  						as_background_radio.Active = true;  						break;  					}  					break;  				case Preferences.VIEWER_TRANS_COLOR:  					color_button.Color = new Gdk.Color (  						Byte.Parse (Preferences.Get<string> (key).Substring (1'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (3'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (5'2)' System.Globalization.NumberStyles.AllowHexSpecifier));  					break;  				}
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,LoadPreference,The following statement contains a magic number: switch (key) {  				case Preferences.VIEWER_INTERPOLATION:  					interpolation_check.Active = Preferences.Get<bool> (key);  					break;  				case Preferences.VIEWER_TRANSPARENCY:  					switch (Preferences.Get<string> (key)) {  					case "COLOR":  						as_color_radio.Active = true;  						break;  					case "CHECK_PATTERN":  						as_check_radio.Active = true;  						break;  					default: //NONE  						as_background_radio.Active = true;  						break;  					}  					break;  				case Preferences.VIEWER_TRANS_COLOR:  					color_button.Color = new Gdk.Color (  						Byte.Parse (Preferences.Get<string> (key).Substring (1'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (3'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (5'2)' System.Globalization.NumberStyles.AllowHexSpecifier));  					break;  				}
Magic Number,FSpot,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,LoadPreference,The following statement contains a magic number: switch (key) {  				case Preferences.VIEWER_INTERPOLATION:  					interpolation_check.Active = Preferences.Get<bool> (key);  					break;  				case Preferences.VIEWER_TRANSPARENCY:  					switch (Preferences.Get<string> (key)) {  					case "COLOR":  						as_color_radio.Active = true;  						break;  					case "CHECK_PATTERN":  						as_check_radio.Active = true;  						break;  					default: //NONE  						as_background_radio.Active = true;  						break;  					}  					break;  				case Preferences.VIEWER_TRANS_COLOR:  					color_button.Color = new Gdk.Color (  						Byte.Parse (Preferences.Get<string> (key).Substring (1'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (3'2)' System.Globalization.NumberStyles.AllowHexSpecifier)'  						Byte.Parse (Preferences.Get<string> (key).Substring (5'2)' System.Globalization.NumberStyles.AllowHexSpecifier));  					break;  				}
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: int size = 32;
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: int csize = size/2 + len * size / 2 + 2;
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: int csize = size/2 + len * size / 2 + 2;
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: int csize = size/2 + len * size / 2 + 2;
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: Pixbuf container = new Pixbuf (Gdk.Colorspace.Rgb' true' 8' csize' csize);
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: while (len-- > 0) {  				Pixbuf thumbnail = tags[len].Icon;    				if (thumbnail != null) {  					Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    					int x = len * (size/2) + (size - small.Width)/2;  					int y = len * (size/2) + (size - small.Height)/2;    					small.Composite (container' x' y' small.Width' small.Height' x' y' 1.0' 1.0' Gdk.InterpType.Nearest' 0xff);  					small.Dispose ();    					use_icon = true;  				}  			}
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: while (len-- > 0) {  				Pixbuf thumbnail = tags[len].Icon;    				if (thumbnail != null) {  					Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    					int x = len * (size/2) + (size - small.Width)/2;  					int y = len * (size/2) + (size - small.Height)/2;    					small.Composite (container' x' y' small.Width' small.Height' x' y' 1.0' 1.0' Gdk.InterpType.Nearest' 0xff);  					small.Dispose ();    					use_icon = true;  				}  			}
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: while (len-- > 0) {  				Pixbuf thumbnail = tags[len].Icon;    				if (thumbnail != null) {  					Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    					int x = len * (size/2) + (size - small.Width)/2;  					int y = len * (size/2) + (size - small.Height)/2;    					small.Composite (container' x' y' small.Width' small.Height' x' y' 1.0' 1.0' Gdk.InterpType.Nearest' 0xff);  					small.Dispose ();    					use_icon = true;  				}  			}
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragBegin,The following statement contains a magic number: while (len-- > 0) {  				Pixbuf thumbnail = tags[len].Icon;    				if (thumbnail != null) {  					Pixbuf small = thumbnail.ScaleToMaxSize (size' size);    					int x = len * (size/2) + (size - small.Width)/2;  					int y = len * (size/2) + (size - small.Height)/2;    					small.Composite (container' x' y' small.Width' small.Height' x' y' 1.0' 1.0' Gdk.InterpType.Nearest' 0xff);  					small.Dispose ();    					use_icon = true;  				}  			}
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragMotion,The following statement contains a magic number: if (args.Y < 20)  				Vadjustment.Value -= 30;  	        else if (((o as Gtk.Widget).Allocation.Height - args.Y) < 20)  				Vadjustment.Value += 30;
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragMotion,The following statement contains a magic number: if (args.Y < 20)  				Vadjustment.Value -= 30;  	        else if (((o as Gtk.Widget).Allocation.Height - args.Y) < 20)  				Vadjustment.Value += 30;
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragMotion,The following statement contains a magic number: if (args.Y < 20)  				Vadjustment.Value -= 30;  	        else if (((o as Gtk.Widget).Allocation.Height - args.Y) < 20)  				Vadjustment.Value += 30;
Magic Number,FSpot,TagSelectionWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TagSelectionWidget.cs,HandleDragMotion,The following statement contains a magic number: if (args.Y < 20)  				Vadjustment.Value -= 30;  	        else if (((o as Gtk.Widget).Allocation.Height - args.Y) < 20)  				Vadjustment.Value += 30;
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,Count,The following statement contains a magic number: return years.Count * 12;
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,TickLabel,The following statement contains a magic number: if ((start.Month == 12 && !order_ascending) || (start.Month == 1 && order_ascending))  				return start.Year.ToString ();
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,Value,The following statement contains a magic number: if (order_ascending)  				return years [startyear + item/12][item % 12];
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,Value,The following statement contains a magic number: if (order_ascending)  				return years [startyear + item/12][item % 12];
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,Value,The following statement contains a magic number: return years [endyear - item/12][11 - item % 12];
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,Value,The following statement contains a magic number: return years [endyear - item/12][11 - item % 12];
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,Value,The following statement contains a magic number: return years [endyear - item/12][11 - item % 12];
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndex,The following statement contains a magic number: item = Math.Min (years.Count * 12 - 1' item);
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexAscending,The following statement contains a magic number: int year = startyear + item/12;
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexAscending,The following statement contains a magic number: int month = 1 + (item % 12);
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexDescending,The following statement contains a magic number: int year = endyear - item/12;
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexDescending,The following statement contains a magic number: int month = 12 - (item % 12);
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexDescending,The following statement contains a magic number: int month = 12 - (item % 12);
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexDescending,The following statement contains a magic number: year = Math.Min(year' 9999);
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexDescending,The following statement contains a magic number: month = Math.Min(month' 12);
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DateFromIndexDescending,The following statement contains a magic number: return new DateTime (year' month' daysInMonth).AddDays (1.0).AddMilliseconds (-.1);
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,IndexFromDateAscending,The following statement contains a magic number: return (year - startyear) * 12 + date.Month - 1 ;
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,IndexFromDateDescending,The following statement contains a magic number: return 12 * (endyear - year) + 12 - date.Month;
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,IndexFromDateDescending,The following statement contains a magic number: return 12 * (endyear - year) + 12 - date.Month;
Magic Number,FSpot,TimeAdaptor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\TimeAdaptor.cs,DoReload,The following statement contains a magic number: Thread.Sleep (200);
Magic Number,FSpot,DirectoryLoader,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\UriCollection.cs,DirectoryLoader,The following statement contains a magic number: file.EnumerateChildrenAsync ("standard::*"'  							     FileQueryInfoFlags.None'  							     500'  							     null'  							     InfoLoaded);
Magic Number,FSpot,XScreenSaverSlide,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\XScreenSaverSlide.cs,OnRealized,The following statement contains a magic number: if (env != null) {  				try {  					env = env.ToLower ();    					if (env.StartsWith ("0x"))  						env = env.Substring (2);    					uint xid = UInt32.Parse (env' System.Globalization.NumberStyles.HexNumber);    					GdkWindow = Gdk.Window.ForeignNew (xid);  					Style.Attach (GdkWindow);  					GdkWindow.Events = EventMask.ExposureMask  						| EventMask.StructureMask  						| EventMask.EnterNotifyMask  						| EventMask.LeaveNotifyMask  						| EventMask.FocusChangeMask;    					Style.SetBackground (GdkWindow' Gtk.StateType.Normal);  					GdkWindow.SetDecorations (0);  					GdkWindow.UserData = this.Handle;  					SetFlag (WidgetFlags.Realized);  					SizeRequest ();  					Gdk.Rectangle geom;  					int depth;  					GdkWindow.GetGeometry (out geom.X' out geom.Y' out geom.Width' out geom.Height' out depth);  					SizeAllocate (new Gdk.Rectangle (geom.X' geom.Y' geom.Width' geom.Height));  					Resize (geom.Width' geom.Height);  					return;  				} catch (Exception e) {  					Hyena.Log.Exception (e);  				}  			} else {  				Hyena.Log.DebugFormat ("{0} not set' falling back to window"' ScreenSaverEnviroment);  			}
Magic Number,FSpot,XScreenSaverSlide,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\XScreenSaverSlide.cs,OnRealized,The following statement contains a magic number: SetSizeRequest (640' 480);
Magic Number,FSpot,XScreenSaverSlide,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\XScreenSaverSlide.cs,OnRealized,The following statement contains a magic number: SetSizeRequest (640' 480);
Magic Number,FSpot.ColorAdjustment,Adjustment,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\Adjustment.cs,Adjust,The following statement contains a magic number: Gdk.Pixbuf final = new Gdk.Pixbuf (Gdk.Colorspace.Rgb'  							   false' 8'  							   Input.Width'  							   Input.Height);
Magic Number,FSpot.ColorAdjustment,Desaturate,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\Desaturate.cs,GenerateAdjustments,The following statement contains a magic number: profiles.Add (Profile.CreateAbstract (nsteps'  								  1.0'  								  0.0'  								  0.0'  								  0.0'  								  -100.0'  								  null'  								  ColorCIExyY.D50'  								  ColorCIExyY.D50));
Magic Number,FSpot.ColorAdjustment,FullColorAdjustment,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\FullColorAdjustment.cs,GenerateAdjustments,The following statement contains a magic number: profiles.Add (Cms.Profile.CreateAbstract (nsteps'  						Math.Pow (Math.Sqrt (2.0)' exposure)'  						brightness'  						contrast'  						hue'  						saturation'  						null'  						src_wp.ToxyY ()'  						dest_wp.ToxyY ()));
Magic Number,FSpot.ColorAdjustment,SepiaTone,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\SepiaTone.cs,GenerateAdjustments,The following statement contains a magic number: profiles.Add (Profile.CreateAbstract (nsteps'  								  1.0'  								  0.0'  								  0.0'  								  0.0'  								  -100.0'  								  null'  								  ColorCIExyY.D50'  								  ColorCIExyY.D50));
Magic Number,FSpot.ColorAdjustment,SepiaTone,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\SepiaTone.cs,GenerateAdjustments,The following statement contains a magic number: profiles.Add (Profile.CreateAbstract (nsteps'  								  1.0'  								  32.0'  								  0.0'  								  0.0'  								  0.0'  								  null'  								  ColorCIExyY.D50'  								  ColorCIExyY.WhitePointFromTemperature (9934)));
Magic Number,FSpot.ColorAdjustment,SepiaTone,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\SepiaTone.cs,GenerateAdjustments,The following statement contains a magic number: profiles.Add (Profile.CreateAbstract (nsteps'  								  1.0'  								  32.0'  								  0.0'  								  0.0'  								  0.0'  								  null'  								  ColorCIExyY.D50'  								  ColorCIExyY.WhitePointFromTemperature (9934)));
Magic Number,FSpot.ColorAdjustment,AutoStretch,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\AutoStretch.cs,GenerateAdjustments,The following statement contains a magic number: tables = new ToneCurve [3];
Magic Number,FSpot.ColorAdjustment,AutoStretch,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\AutoStretch.cs,GenerateAdjustments,The following statement contains a magic number: for (int channel = 0; channel < tables.Length; channel++) {  				int high' low;  				hist.GetHighLow (channel' out high' out low);  				Log.DebugFormat ("high = {0}' low = {1}"' high' low);  				tables [channel] = StretchChannel (255' low / 255.0' high / 255.0);  			}
Magic Number,FSpot.ColorAdjustment,AutoStretch,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\AutoStretch.cs,GenerateAdjustments,The following statement contains a magic number: for (int channel = 0; channel < tables.Length; channel++) {  				int high' low;  				hist.GetHighLow (channel' out high' out low);  				Log.DebugFormat ("high = {0}' low = {1}"' high' low);  				tables [channel] = StretchChannel (255' low / 255.0' high / 255.0);  			}
Magic Number,FSpot.ColorAdjustment,AutoStretch,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.ColorAdjustment\AutoStretch.cs,GenerateAdjustments,The following statement contains a magic number: for (int channel = 0; channel < tables.Length; channel++) {  				int high' low;  				hist.GetHighLow (channel' out high' out low);  				Log.DebugFormat ("high = {0}' low = {1}"' high' low);  				tables [channel] = StretchChannel (255' low / 255.0' high / 255.0);  			}
Magic Number,FSpot.Editors,ColorEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\ColorEditor.cs,AttachInterface,The following statement contains a magic number: temp_scale.Value = 5000;
Magic Number,FSpot.Editors,ColorEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\ColorEditor.cs,Process,The following statement contains a magic number: src_wp = Cms.ColorCIExyY.WhitePointFromTemperature (5000).ToXYZ ();
Magic Number,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,UpdateSelectionCombo,The following statement contains a magic number: if (constraints_combo.GetActiveIter (out iter)) {  				if (((ConstraintType)constraints_store.GetValue (iter' 3)) == ConstraintType.SameAsPhoto)  					constraints_combo.Active = 0;  			}
Magic Number,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,HandleConstraintsComboChanged,The following statement contains a magic number: if (constraints_combo.GetActiveIter (out iter)) {  				double ratio = ((double)constraints_store.GetValue (iter' 2));  				ConstraintType type = ((ConstraintType)constraints_store.GetValue (iter' 3));  				switch (type) {  				case ConstraintType.Normal:  					State.PhotoImageView.SelectionXyRatio = ratio;  					break;  				case ConstraintType.AddCustom:  					SelectionRatioDialog dialog = new SelectionRatioDialog ();  					dialog.Run ();  					break;  				case ConstraintType.SameAsPhoto:  					try {  						Pixbuf pb = State.PhotoImageView.CompletePixbuf ();  						State.PhotoImageView.SelectionXyRatio = (double)pb.Width / (double)pb.Height;  					} catch (System.Exception ex) {  						Log.WarningFormat ("Exception in selection ratio's: {0}"' ex);  						State.PhotoImageView.SelectionXyRatio = 0;  					}  					break;  				default:  					State.PhotoImageView.SelectionXyRatio = 0;  					break;  				}  			}
Magic Number,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,HandleConstraintsComboChanged,The following statement contains a magic number: if (constraints_combo.GetActiveIter (out iter)) {  				double ratio = ((double)constraints_store.GetValue (iter' 2));  				ConstraintType type = ((ConstraintType)constraints_store.GetValue (iter' 3));  				switch (type) {  				case ConstraintType.Normal:  					State.PhotoImageView.SelectionXyRatio = ratio;  					break;  				case ConstraintType.AddCustom:  					SelectionRatioDialog dialog = new SelectionRatioDialog ();  					dialog.Run ();  					break;  				case ConstraintType.SameAsPhoto:  					try {  						Pixbuf pb = State.PhotoImageView.CompletePixbuf ();  						State.PhotoImageView.SelectionXyRatio = (double)pb.Width / (double)pb.Height;  					} catch (System.Exception ex) {  						Log.WarningFormat ("Exception in selection ratio's: {0}"' ex);  						State.PhotoImageView.SelectionXyRatio = 0;  					}  					break;  				default:  					State.PhotoImageView.SelectionXyRatio = 0;  					break;  				}  			}
Magic Number,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,ConstraintPixCellFunc,The following statement contains a magic number: if (stockname != null)  				(cell as CellRendererPixbuf).Pixbuf = GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' stockname' 16' (Gtk.IconLookupFlags)0);  			else  				(cell as CellRendererPixbuf).Pixbuf = null;
Magic Number,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,Process,The following statement contains a magic number: Rectangle selection = FSpot.Utils.PixbufUtils.TransformOrientation ((int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Width : input.Height'  											    (int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Height : input.Width'  											    State.Selection' State.PhotoImageView.PixbufOrientation);
Magic Number,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,Process,The following statement contains a magic number: Rectangle selection = FSpot.Utils.PixbufUtils.TransformOrientation ((int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Width : input.Height'  											    (int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Height : input.Width'  											    State.Selection' State.PhotoImageView.PixbufOrientation);
Magic Number,FSpot.Editors,RedEyeEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\RedEyeEditor.cs,Process,The following statement contains a magic number: Rectangle selection = FSpot.Utils.PixbufUtils.TransformOrientation ((int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Width : input.Height'  											    (int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Height : input.Width'  											    State.Selection' State.PhotoImageView.PixbufOrientation);
Magic Number,FSpot.Editors,RedEyeEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\RedEyeEditor.cs,Process,The following statement contains a magic number: Rectangle selection = FSpot.Utils.PixbufUtils.TransformOrientation ((int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Width : input.Height'  											    (int)State.PhotoImageView.PixbufOrientation <= 4 ? input.Height : input.Width'  											    State.Selection' State.PhotoImageView.PixbufOrientation);
Magic Number,FSpot.Editors,SoftFocusEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\SoftFocusEditor.cs,ConfigurationWidget,The following statement contains a magic number: scale = new HScale (0' 1' .01);
Magic Number,FSpot.Editors,SoftFocusEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\SoftFocusEditor.cs,ConfigurationWidget,The following statement contains a magic number: scale.Value = 0.5;
Magic Number,FSpot.Editors,TiltEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\TiltEditor.cs,ConfigurationWidget,The following statement contains a magic number: scale = new HScale (-45' 45' 1);
Magic Number,FSpot.Editors,TiltEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\TiltEditor.cs,ConfigurationWidget,The following statement contains a magic number: scale = new HScale (-45' 45' 1);
Magic Number,FSpot.Editors,TiltEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\TiltEditor.cs,HandleValueChanged,The following statement contains a magic number: angle = scale.Value * Math.PI / -180;
Magic Number,FSpot.Filters,ResizeFilter,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Filters\ResizeFilter.cs,Convert,The following statement contains a magic number: using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (req.Current)) {    				using (Pixbuf pixbuf = img.Load ()) {  					if (pixbuf.Width < Size && pixbuf.Height < Size)  						return false;  				}    				using (Pixbuf pixbuf = img.Load ((int)Size' (int)Size)) {  					FSpot.Utils.PixbufUtils.CreateDerivedVersion (req.Current' dest_uri' 95' pixbuf);  				}  			}
Magic Number,FSpot.Filters,SharpFilter,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Filters\SharpFilter.cs,Convert,The following statement contains a magic number: using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (req.Current)) {  				using (Pixbuf in_pixbuf = img.Load ()) {  					using (Pixbuf out_pixbuf = PixbufUtils.UnsharpMask (in_pixbuf' radius' amount' threshold' null)) {  						FSpot.Utils.PixbufUtils.CreateDerivedVersion (req.Current' dest_uri' 95' out_pixbuf);  					}  				}  			}
Magic Number,FSpot.UI.Dialog,AdjustTimeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\AdjustTimeDialog.cs,AdjustTimeDialog,The following statement contains a magic number: entry = (Gtk.Entry) date_edit.Children [2];
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: switch (rangename) {  			case "today":  				startdate = today;  				enddate = today;  				break;  			case "yesterday":  				startdate = today.AddDays (-1);  				enddate = today.AddDays (-1);  				break;  			case "last7days":  				startdate = today.AddDays (-6);  				enddate = today;  				break;  			case "last30days":  				startdate = today.AddDays (-29);  				enddate = today;  				break;  			case "last90days":  				startdate = today.AddDays (-89);  				enddate = today;  				break;  			case "last360days":  				startdate = today.AddDays (-359);  				enddate = today;  				break;  			case "currentweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				enddate = today;  				break;  			case "previousweek":  				startdate = today.AddDays (System.DayOfWeek.Sunday - today.DayOfWeek); // Gets to Sunday  				startdate = startdate.AddDays (1); // Advance to Monday according to ISO 8601  				startdate = startdate.AddDays(-7); // Back 7 days  				enddate = startdate.AddDays (6);  				break;  			case "thismonth":  				startdate = new System.DateTime(today.Year' today.Month' 1); // the first of the month  				enddate = today; // we don't have pictures in the future  				break;  			case "previousmonth":  				startdate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' 1);  				enddate = new System.DateTime((today.AddMonths(-1)).Year' (today.AddMonths(-1)).Month' System.DateTime.DaysInMonth((today.AddMonths(-1)).Year'(today.AddMonths(-1)).Month));  				break;  			case "thisyear":  				startdate = new System.DateTime(today.Year' 1' 1); // Jan 1st of this year  				enddate = today;  				break;  			case "previousyear":  				startdate = new System.DateTime((today.AddYears(-1)).Year' 1' 1); // Jan 1st of prev year  				enddate = new System.DateTime((today.AddYears(-1)).Year' 12' 31); // Dec' 31 of prev year  				break;  			case "alldates":  				clear = true;  				break;  			case "customizedrange":  				startdate = start_dateedit.DateTimeOffset.Date;  				enddate = end_dateedit.DateTimeOffset.Date;  				break;  			default:  				clear = true;  				break;  			}
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: if (!clear)  				return new DateRange (startdate' enddate.Add (new System.TimeSpan(23'59'59)));
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: if (!clear)  				return new DateRange (startdate' enddate.Add (new System.TimeSpan(23'59'59)));
Magic Number,FSpot.UI.Dialog,DateRangeDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\DateRangeDialog.cs,QueryRange,The following statement contains a magic number: if (!clear)  				return new DateRange (startdate' enddate.Add (new System.TimeSpan(23'59'59)));
Magic Number,FSpot.UI.Dialog,EditTagIconDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\EditTagIconDialog.cs,FillIconView,The following statement contains a magic number: foreach (string item_name in icon_list)  				icon_store.AppendValues (item_name' GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' item_name' 32' (IconLookupFlags) 0));
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,BuildUI,The following statement contains a magic number: photo_scrolled.SetSizeRequest (200' 200);
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,BuildUI,The following statement contains a magic number: photo_scrolled.SetSizeRequest (200' 200);
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,ResetPreview,The following statement contains a magic number: photo_view.Pixbuf = GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' "f-spot"' 128' 0);
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,ScanSources,The following statement contains a magic number: sources_combo.SetAttributes (render' "icon-name"' 2' "sensitive"' 3);
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,ScanSources,The following statement contains a magic number: sources_combo.SetAttributes (render' "icon-name"' 2' "sensitive"' 3);
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,ScanSources,The following statement contains a magic number: sources_combo.SetAttributes (render2' "text"' 1' "sensitive"' 3);
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,ShowScanSpinner,The following statement contains a magic number: progressBarTimer = new System.Threading.Timer ((s) => {  				progress_bar.Pulse ();  			}' null' 40' 40);
Magic Number,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,ShowScanSpinner,The following statement contains a magic number: progressBarTimer = new System.Threading.Timer ((s) => {  				progress_bar.Pulse ();  			}' null' 40' 40);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: BorderWidth = 5;
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: VBox.Spacing = 2;
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: inner_vbox = new VBox { Spacing = 12' BorderWidth = 5' Visible = true };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: inner_vbox = new VBox { Spacing = 12' BorderWidth = 5' Visible = true };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: var table = new Table (3' 2' false) {                  RowSpacing = 12'                  ColumnSpacing = 16              };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: var table = new Table (3' 2' false) {                  RowSpacing = 12'                  ColumnSpacing = 16              };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: var table = new Table (3' 2' false) {                  RowSpacing = 12'                  ColumnSpacing = 16              };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: var table = new Table (3' 2' false) {                  RowSpacing = 12'                  ColumnSpacing = 16              };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: table.Attach (new Image {                      IconName = "dialog-error"'                      IconSize = (int)IconSize.Dialog'                      Yalign = 0.0f                  }' 0' 1' 0' 3' AttachOptions.Shrink' AttachOptions.Fill | AttachOptions.Expand' 0' 0);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: table.Attach (header_label = new Label { Xalign = 0.0f }' 1' 2' 0' 1'                  AttachOptions.Fill | AttachOptions.Expand'                  AttachOptions.Shrink' 0' 0);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: table.Attach (message_label = new Hyena.Widgets.WrapLabel ()' 1' 2' 1' 2'                  AttachOptions.Fill | AttachOptions.Expand'                  AttachOptions.Shrink' 0' 0);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: table.Attach (message_label = new Hyena.Widgets.WrapLabel ()' 1' 2' 1' 2'                  AttachOptions.Fill | AttachOptions.Expand'                  AttachOptions.Shrink' 0' 0);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: list_view = new TreeView () {                  HeightRequest = 120'                  WidthRequest = 200              };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: list_view = new TreeView () {                  HeightRequest = 120'                  WidthRequest = 200              };
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: table.Attach (details_expander = new Expander (Catalog.GetString ("Details"))'                  1' 2' 2' 3'                  AttachOptions.Fill | AttachOptions.Expand'                  AttachOptions.Fill | AttachOptions.Expand'                  0' 0);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: table.Attach (details_expander = new Expander (Catalog.GetString ("Details"))'                  1' 2' 2' 3'                  AttachOptions.Fill | AttachOptions.Expand'                  AttachOptions.Fill | AttachOptions.Expand'                  0' 0);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: table.Attach (details_expander = new Expander (Catalog.GetString ("Details"))'                  1' 2' 2' 3'                  AttachOptions.Fill | AttachOptions.Expand'                  AttachOptions.Fill | AttachOptions.Expand'                  0' 0);
Magic Number,FSpot.UI.Dialog,ImportFailureDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportFailureDialog.cs,BuildUI,The following statement contains a magic number: VBox.Spacing = 12;
Magic Number,FSpot.UI.Dialog,LastRolls,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\LastRollDialog.cs,HandleComboFilterChanged,The following statement contains a magic number: combo_roll_2.Visible = (combo_filter.Active == 2);
Magic Number,FSpot.UI.Dialog,LastRolls,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\LastRollDialog.cs,SelectedRolls,The following statement contains a magic number: if ((combo_roll_1.Active < 0) || ((combo_filter.Active == 2) && (combo_roll_2.Active < 0)))  				return null;
Magic Number,FSpot.UI.Dialog,LastRolls,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\LastRollDialog.cs,SelectedRolls,The following statement contains a magic number: switch (combo_filter.Active) {  			case 0 : // at - Return the roll the user selected  				result.Add (rolls [combo_roll_1.Active]);  				break;  			case 1 : // after - Return all rolls from latest to the one the user selected  				for (uint k = 0; k <= combo_roll_1.Active; k++) {  					result.Add (rolls [k]);  				}  				break;  			case 2 : // between - Return all rolls between the two import rolls the user selected  				uint k1 = (uint)combo_roll_1.Active;  				uint k2 = (uint)combo_roll_2.Active;  				if (k1 > k2) {  					k1 = (uint)combo_roll_2.Active;  					k2 = (uint)combo_roll_1.Active;  				}  				for (uint k = k1; k <= k2; k++) {  					result.Add (rolls [k]);  				}  				break;  			}
Magic Number,FSpot.UI.Dialog,ProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ProgressDialog.cs,ProgressDialog,The following statement contains a magic number: BorderWidth = 6;
Magic Number,FSpot.UI.Dialog,ProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ProgressDialog.cs,ProgressDialog,The following statement contains a magic number: SetDefaultSize (300' -1);
Magic Number,FSpot.UI.Dialog,ProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ProgressDialog.cs,ProgressDialog,The following statement contains a magic number: VBox.PackStart (message_label' true' true' 12);
Magic Number,FSpot.UI.Dialog,ProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ProgressDialog.cs,ProgressDialog,The following statement contains a magic number: VBox.PackStart (progress_bar' true' true' 6);
Magic Number,FSpot.UI.Dialog,ThreadProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ThreadProgressDialog.cs,ThreadProgressDialog,The following statement contains a magic number: BorderWidth = 6;
Magic Number,FSpot.UI.Dialog,ThreadProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ThreadProgressDialog.cs,ThreadProgressDialog,The following statement contains a magic number: SetDefaultSize (300' -1);
Magic Number,FSpot.UI.Dialog,ThreadProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ThreadProgressDialog.cs,ThreadProgressDialog,The following statement contains a magic number: VBox.PackStart (message_label' true' true' 12);
Magic Number,FSpot.UI.Dialog,ThreadProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ThreadProgressDialog.cs,ThreadProgressDialog,The following statement contains a magic number: VBox.PackStart (progress_bar' true' true' 6);
Magic Number,FSpot.UI.Dialog,CreateTagDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\CreateTagDialog.cs,Indentation,The following statement contains a magic number: return new string (' '' indentations * 2);
Magic Number,FSpot.UI.Dialog,CreateTagDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\CreateTagDialog.cs,PopulateCategoryOptionMenu,The following statement contains a magic number: text_renderer.Width = 150;
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,CellRendererTextProgress,The following statement contains a magic number: Xpad = Ypad = 2;
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,GetValueColor,The following statement contains a magic number: if (progress_value <= 33)  				return green;
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,GetValueColor,The following statement contains a magic number: if (progress_value <= 66)  				return yellow;
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,GetSize,The following statement contains a magic number: width = (int) (2 * Xpad + Math.Max (progress_width' text_width));
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,GetSize,The following statement contains a magic number: height = (int) (3 * Ypad + progress_height + text_height);
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,Render,The following statement contains a magic number: x  = (int) (cell_area.X + Xpad + Math.Max ((int) (Xalign * (cell_area.Width - 2 * Xpad - text_width))' 0));
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,Render,The following statement contains a magic number: x  = (int) (cell_area.X + Xpad + Math.Max ((int) (Xalign * (cell_area.Width - 2 * Xpad - progress_width))' 0));
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,Render,The following statement contains a magic number: using (Cairo.Context cairo_context = Gdk.CairoHelper.Create (window)) {    				width = progress_width;  				height = progress_height;    				cairo_context.Rectangle (x' y' width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' widget.Style.Dark (StateType.Normal));  				cairo_context.Fill ();    				x += widget.Style.XThickness;  				y += widget.Style.XThickness;  				width -= 2* widget.Style.XThickness;  				height -= 2 * widget.Style.Ythickness;    				cairo_context.Rectangle (x' y' width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' widget.Style.Light (StateType.Normal));  				cairo_context.Fill ();    				/* scale the value and ensure' that at least one pixel is drawn' if the value is greater than zero */  				int scaled_width =  					(int) Math.Max (((progress_value * width) / 100.0)'  					                (progress_value == 0)? 0 : 1);    				cairo_context.Rectangle (x' y' scaled_width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' GetValueColor ());  				cairo_context.Fill ();  			}
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,Render,The following statement contains a magic number: using (Cairo.Context cairo_context = Gdk.CairoHelper.Create (window)) {    				width = progress_width;  				height = progress_height;    				cairo_context.Rectangle (x' y' width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' widget.Style.Dark (StateType.Normal));  				cairo_context.Fill ();    				x += widget.Style.XThickness;  				y += widget.Style.XThickness;  				width -= 2* widget.Style.XThickness;  				height -= 2 * widget.Style.Ythickness;    				cairo_context.Rectangle (x' y' width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' widget.Style.Light (StateType.Normal));  				cairo_context.Fill ();    				/* scale the value and ensure' that at least one pixel is drawn' if the value is greater than zero */  				int scaled_width =  					(int) Math.Max (((progress_value * width) / 100.0)'  					                (progress_value == 0)? 0 : 1);    				cairo_context.Rectangle (x' y' scaled_width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' GetValueColor ());  				cairo_context.Fill ();  			}
Magic Number,FSpot.Widgets,CellRendererTextProgress,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CellRendererTextProgress.cs,Render,The following statement contains a magic number: using (Cairo.Context cairo_context = Gdk.CairoHelper.Create (window)) {    				width = progress_width;  				height = progress_height;    				cairo_context.Rectangle (x' y' width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' widget.Style.Dark (StateType.Normal));  				cairo_context.Fill ();    				x += widget.Style.XThickness;  				y += widget.Style.XThickness;  				width -= 2* widget.Style.XThickness;  				height -= 2 * widget.Style.Ythickness;    				cairo_context.Rectangle (x' y' width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' widget.Style.Light (StateType.Normal));  				cairo_context.Fill ();    				/* scale the value and ensure' that at least one pixel is drawn' if the value is greater than zero */  				int scaled_width =  					(int) Math.Max (((progress_value * width) / 100.0)'  					                (progress_value == 0)? 0 : 1);    				cairo_context.Rectangle (x' y' scaled_width' height);  				Gdk.CairoHelper.SetSourceColor (cairo_context' GetValueColor ());  				cairo_context.Fill ();  			}
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,Filmstrip,The following statement contains a magic number: thumb_cache = new DisposableCache<SafeUri' Pixbuf> (30);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,Filmstrip,The following statement contains a magic number: animation = new DoubleAnimation (0' 0' TimeSpan.FromSeconds (1.5)' SetPositionCore' new CubicEase (EasingMode.EaseOut));
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width = (Orientation == Orientation.Horizontal ? min_length : BackgroundTile.Width) + 2 * x_offset;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height = (Orientation == Orientation.Vertical ? min_height : BackgroundTile.Height) + 2 * y_offset;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Orientation == Orientation.Horizontal && (extendable && Allocation.Width >= BackgroundPixbuf.Width + (2 * x_offset) + BackgroundTile.Width) ||  				Orientation == Orientation.Vertical && (extendable && Allocation.Height >= BackgroundPixbuf.Height + (2 * y_offset) + BackgroundTile.Height) )  				BackgroundPixbuf = null;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Orientation == Orientation.Horizontal && (extendable && Allocation.Width >= BackgroundPixbuf.Width + (2 * x_offset) + BackgroundTile.Width) ||  				Orientation == Orientation.Vertical && (extendable && Allocation.Height >= BackgroundPixbuf.Height + (2 * y_offset) + BackgroundTile.Height) )  				BackgroundPixbuf = null;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if ( Orientation == Orientation.Horizontal && (extendable && Allocation.Width < BackgroundPixbuf.Width + (2 * x_offset) ) ||  				Orientation == Orientation.Vertical && ( extendable && Allocation.Height < BackgroundPixbuf.Height + (2 * y_offset) ))  				BackgroundPixbuf = null;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if ( Orientation == Orientation.Horizontal && (extendable && Allocation.Width < BackgroundPixbuf.Width + (2 * x_offset) ) ||  				Orientation == Orientation.Vertical && ( extendable && Allocation.Height < BackgroundPixbuf.Height + (2 * y_offset) ))  				BackgroundPixbuf = null;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Allocation.Width > BackgroundPixbuf.Width + (2 * x_offset))  				xpad = (int) (x_align * (Allocation.Width - (BackgroundPixbuf.Width + (2 * x_offset))));
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Allocation.Width > BackgroundPixbuf.Width + (2 * x_offset))  				xpad = (int) (x_align * (Allocation.Width - (BackgroundPixbuf.Width + (2 * x_offset))));
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Allocation.Height > BackgroundPixbuf.Height + (2 * y_offset))  				ypad = (int) (y_align * (Allocation.Height - (BackgroundPixbuf.Height + (2 * y_offset))));
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Allocation.Height > BackgroundPixbuf.Height + (2 * y_offset))  				ypad = (int) (y_align * (Allocation.Height - (BackgroundPixbuf.Height + (2 * y_offset))));
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  				icon_pixbuf = new Pixbuf (Colorspace.Rgb' true' 8' BackgroundPixbuf.Width' thumb_size);  			else if (Orientation == Orientation.Vertical)  				icon_pixbuf = new Pixbuf (Colorspace.Rgb' true' 8' thumb_size' BackgroundPixbuf.Height);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  				icon_pixbuf = new Pixbuf (Colorspace.Rgb' true' 8' BackgroundPixbuf.Width' thumb_size);  			else if (Orientation == Orientation.Vertical)  				icon_pixbuf = new Pixbuf (Colorspace.Rgb' true' 8' thumb_size' BackgroundPixbuf.Height);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: int ref_x = (int)(icon_pixbuf.Width / 2.0 - current.Width * (Position + 0.5f - Math.Round (Position)));
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnExposeEvent,The following statement contains a magic number: int ref_y = (int)(icon_pixbuf.Height / 2.0 - current.Height * (Position + 0.5f - Math.Round (Position)));
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnButtonPressEvent,The following statement contains a magic number: if (evnt.Button == 3)  				return DrawOrientationMenu (evnt);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: Pixbuf whiteBorder = new Pixbuf (Colorspace.Rgb' true' 8' current.Width' current.Height);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (1' 1' current.Width - 8' current.Height - 8' whiteBorder' 4' 4);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (1' 1' current.Width - 8' current.Height - 8' whiteBorder' 4' 4);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (1' 1' current.Width - 8' current.Height - 8' whiteBorder' 4' 4);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (1' 1' current.Width - 8' current.Height - 8' whiteBorder' 4' 4);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: Pixbuf highlight = new Pixbuf (Colorspace.Rgb' true' 8' current.Width' current.Height);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (2' 2' current.Width - 4' current.Height - 4' highlight' 2' 2);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (2' 2' current.Width - 4' current.Height - 4' highlight' 2' 2);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (2' 2' current.Width - 4' current.Height - 4' highlight' 2' 2);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (2' 2' current.Width - 4' current.Height - 4' highlight' 2' 2);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (2' 2' current.Width - 4' current.Height - 4' highlight' 2' 2);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,GetPixbuf,The following statement contains a magic number: current.CopyArea (2' 2' current.Width - 4' current.Height - 4' highlight' 2' 2);
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,ColorToInt,The following statement contains a magic number: return ((uint)color.Red / 256 << 24) + ((uint)color.Green / 256 << 16) + ((uint)color.Blue / 256 << 8) + 255;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,ColorToInt,The following statement contains a magic number: return ((uint)color.Red / 256 << 24) + ((uint)color.Green / 256 << 16) + ((uint)color.Blue / 256 << 8) + 255;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,ColorToInt,The following statement contains a magic number: return ((uint)color.Red / 256 << 24) + ((uint)color.Green / 256 << 16) + ((uint)color.Blue / 256 << 8) + 255;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,ColorToInt,The following statement contains a magic number: return ((uint)color.Red / 256 << 24) + ((uint)color.Green / 256 << 16) + ((uint)color.Blue / 256 << 8) + 255;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,ColorToInt,The following statement contains a magic number: return ((uint)color.Red / 256 << 24) + ((uint)color.Green / 256 << 16) + ((uint)color.Blue / 256 << 8) + 255;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,ColorToInt,The following statement contains a magic number: return ((uint)color.Red / 256 << 24) + ((uint)color.Green / 256 << 16) + ((uint)color.Blue / 256 << 8) + 255;
Magic Number,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,ColorToInt,The following statement contains a magic number: return ((uint)color.Red / 256 << 24) + ((uint)color.Green / 256 << 16) + ((uint)color.Blue / 256 << 8) + 255;
Magic Number,FSpot.Widgets,FindBar,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FindBar.cs,FindBar,The following statement contains a magic number: box.Spacing = 6;
Magic Number,FSpot.Widgets,FindBar,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FindBar.cs,FindBar,The following statement contains a magic number: box.BorderWidth = 2;
Magic Number,FSpot.Widgets,FindBar,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FindBar.cs,ConstructQuery,The following statement contains a magic number: string indent = string.Format ("{0'" + depth*2 + "}"' " ");
Magic Number,FSpot.Widgets,FindBar,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FindBar.cs,QueueUpdate,The following statement contains a magic number: if (updating || update_timeout_id != 0) {  				lock(lockObject) {  					// If there is a timer set and we are not yet handling its timeout' then remove the timer  					// so we delay its trigger for another 500ms.  					if (!updating && update_timeout_id != 0)  						GLib.Source.Remove (update_timeout_id);    					// Assuming we're not currently handling a timeout' add a new timer  					if (!updating)  						update_timeout_id = GLib.Timeout.Add(500' OnUpdateTimer);  				}  			} else {  				// If we are not updating and there isn't a timer already set' then there is  				// no risk of race condition with the  timeout handler.  				update_timeout_id = GLib.Timeout.Add(500' OnUpdateTimer);  			}
Magic Number,FSpot.Widgets,FindBar,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FindBar.cs,QueueUpdate,The following statement contains a magic number: if (updating || update_timeout_id != 0) {  				lock(lockObject) {  					// If there is a timer set and we are not yet handling its timeout' then remove the timer  					// so we delay its trigger for another 500ms.  					if (!updating && update_timeout_id != 0)  						GLib.Source.Remove (update_timeout_id);    					// Assuming we're not currently handling a timeout' add a new timer  					if (!updating)  						update_timeout_id = GLib.Timeout.Add(500' OnUpdateTimer);  				}  			} else {  				// If we are not updating and there isn't a timer already set' then there is  				// no risk of race condition with the  timeout handler.  				update_timeout_id = GLib.Timeout.Add(500' OnUpdateTimer);  			}
Magic Number,FSpot.Widgets,FolderTreeModel,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FolderTreeModel.cs,GetUriByIter,The following statement contains a magic number: return (SafeUri) GetValue (iter' 2);
Magic Number,FSpot.Widgets,FolderTreeModel,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FolderTreeModel.cs,UpdateFolderTree,The following statement contains a magic number: while (reader.Read ()) {  				var base_uri = new SafeUri (reader["base_uri"].ToString ()' true);    				int count = Convert.ToInt32 (reader["count"]);    				// FIXME: this is a workaround hack to stop things from crashing - https://bugzilla.gnome.org/show_bug.cgi?id=622318  				int index = base_uri.ToString ().IndexOf ("://");  				var hack = base_uri.ToString ().Substring (index + 3);  				hack = hack.IndexOf ('/') == 0 ? hack : "/" + hack;  				string[] segments = hack.TrimEnd ('/').Split ('/');    				/* First segment contains nothing (since we split by /)' so we  				 * can overwrite the first segment for our needs and put the  				 * scheme here.  				 */  				segments[0] = base_uri.Scheme;    				int i = 0;    				/* find first difference of last inserted an current uri */  				while (i < last_segments.Length && i < segments.Length) {  					if (segments[i] != last_segments[i])  						break;    					i++;  				}    				/* points to the parent node of the current iter */  				TreeIter parent_iter = iter;    				/* step back to the level' where the difference occur */  				for (int j = 0; j + i < last_segments.Length; j++) {    					iter = parent_iter;    					if (IterParent (out parent_iter' iter)) {  						last_count += (int)GetValue (parent_iter' 1);  						SetValue (parent_iter' 1' last_count);  					} else  						count_all += (int)last_count;  				}    				while (i < segments.Length) {  					if (IterIsValid (parent_iter)) {  						iter =  							AppendValues (parent_iter'  							              Uri.UnescapeDataString (segments[i])'  							              (segments.Length - 1 == i)? count : 0'  							              (GetValue (parent_iter' 2) as SafeUri).Append (string.Format ("{0}/"' segments[i]))  							              );  					} else {  						iter =  							AppendValues (Uri.UnescapeDataString (segments[i])'  							              (segments.Length - 1 == i)? count : 0'  							              new SafeUri (string.Format ("{0}:///"' base_uri.Scheme)' true));  					}    					parent_iter = iter;    					i++;  				}    				last_count = count;  				last_segments = segments;    			}
Magic Number,FSpot.Widgets,FolderTreeModel,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FolderTreeModel.cs,UpdateFolderTree,The following statement contains a magic number: while (reader.Read ()) {  				var base_uri = new SafeUri (reader["base_uri"].ToString ()' true);    				int count = Convert.ToInt32 (reader["count"]);    				// FIXME: this is a workaround hack to stop things from crashing - https://bugzilla.gnome.org/show_bug.cgi?id=622318  				int index = base_uri.ToString ().IndexOf ("://");  				var hack = base_uri.ToString ().Substring (index + 3);  				hack = hack.IndexOf ('/') == 0 ? hack : "/" + hack;  				string[] segments = hack.TrimEnd ('/').Split ('/');    				/* First segment contains nothing (since we split by /)' so we  				 * can overwrite the first segment for our needs and put the  				 * scheme here.  				 */  				segments[0] = base_uri.Scheme;    				int i = 0;    				/* find first difference of last inserted an current uri */  				while (i < last_segments.Length && i < segments.Length) {  					if (segments[i] != last_segments[i])  						break;    					i++;  				}    				/* points to the parent node of the current iter */  				TreeIter parent_iter = iter;    				/* step back to the level' where the difference occur */  				for (int j = 0; j + i < last_segments.Length; j++) {    					iter = parent_iter;    					if (IterParent (out parent_iter' iter)) {  						last_count += (int)GetValue (parent_iter' 1);  						SetValue (parent_iter' 1' last_count);  					} else  						count_all += (int)last_count;  				}    				while (i < segments.Length) {  					if (IterIsValid (parent_iter)) {  						iter =  							AppendValues (parent_iter'  							              Uri.UnescapeDataString (segments[i])'  							              (segments.Length - 1 == i)? count : 0'  							              (GetValue (parent_iter' 2) as SafeUri).Append (string.Format ("{0}/"' segments[i]))  							              );  					} else {  						iter =  							AppendValues (Uri.UnescapeDataString (segments[i])'  							              (segments.Length - 1 == i)? count : 0'  							              new SafeUri (string.Format ("{0}:///"' base_uri.Scheme)' true));  					}    					parent_iter = iter;    					i++;  				}    				last_count = count;  				last_segments = segments;    			}
Magic Number,FSpot.Widgets,FolderTreeView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\FolderTreeView.cs,FolderDataFunc,The following statement contains a magic number: if (count != 0)  				progress_value = (int) ((100.0 * folder_tree_model.GetPhotoCountByIter (iter)) / count);
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: double x_offset = Math.Round (((viewport.Width  - Bounds.Width * scale) / 2.0));
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: double y_offset = Math.Round (((viewport.Height  - Bounds.Height * scale) / 2.0));
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: double x_offset = (viewport.Width  - Bounds.Width * scale) / 2.0;
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: double y_offset = (viewport.Height  - Bounds.Height * scale) / 2.0;
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: m.Translate (viewport.Width * 0.5' viewport.Height * 0.5);
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: m.Translate (viewport.Width * 0.5' viewport.Height * 0.5);
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: m.Translate (viewport.Width * -0.5' viewport.Height * -0.5);
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fill,The following statement contains a magic number: m.Translate (viewport.Width * -0.5' viewport.Height * -0.5);
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fit,The following statement contains a magic number: double x_offset = (viewport.Width  - Bounds.Width * scale) / 2.0;
Magic Number,FSpot.Widgets,ImageInfo,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ImageInfo.cs,Fit,The following statement contains a magic number: double y_offset = (viewport.Height  - Bounds.Height * scale) / 2.0;
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AttachRow,The following statement contains a magic number: info_table.Attach (entry.InfoWidget' entry.TwoColumns ? 0u : 1u' 2' (uint)row' (uint)row + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Expand | AttachOptions.Fill' TABLE_XPADDING' TABLE_YPADDING);
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,UpdateTable,The following statement contains a magic number: info_table.Resize ((uint)(head_rows + entries.Count)' 2);
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,AttachLabel,The following statement contains a magic number: table.Attach (label' 1' 2' (uint)row_num' (uint)row_num + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Expand | AttachOptions.Fill' (uint)entry.Style.XThickness + TABLE_XPADDING' (uint)entry.Style.YThickness);
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,SetupWidgets,The following statement contains a magic number: info_table = new Table (head_rows' 2' false) { BorderWidth = 0 };
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,VersionNameCellFunc,The following statement contains a magic number: cell.Sensitive = (bool)tree_model.GetValue (iter' 2);
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,DelayedUpdateHistogram,The following statement contains a magic number: try {                  if (hint == null)                      using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (photo.DefaultVersion.Uri)) {                          hint = img.Load (256' 256);                      }                                    histogram_image.Pixbuf = histogram.Generate (hint' max);                                    hint.Dispose ();              } catch (Exception e) {                  Hyena.Log.Debug (e.StackTrace);                  using (Gdk.Pixbuf empty = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' 256' 256)) {                      empty.Fill (0x0);                      histogram_image.Pixbuf = histogram.Generate (empty' max);                  }              }
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,DelayedUpdateHistogram,The following statement contains a magic number: try {                  if (hint == null)                      using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (photo.DefaultVersion.Uri)) {                          hint = img.Load (256' 256);                      }                                    histogram_image.Pixbuf = histogram.Generate (hint' max);                                    hint.Dispose ();              } catch (Exception e) {                  Hyena.Log.Debug (e.StackTrace);                  using (Gdk.Pixbuf empty = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' 256' 256)) {                      empty.Fill (0x0);                      histogram_image.Pixbuf = histogram.Generate (empty' max);                  }              }
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,DelayedUpdateHistogram,The following statement contains a magic number: try {                  if (hint == null)                      using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (photo.DefaultVersion.Uri)) {                          hint = img.Load (256' 256);                      }                                    histogram_image.Pixbuf = histogram.Generate (hint' max);                                    hint.Dispose ();              } catch (Exception e) {                  Hyena.Log.Debug (e.StackTrace);                  using (Gdk.Pixbuf empty = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' 256' 256)) {                      empty.Fill (0x0);                      histogram_image.Pixbuf = histogram.Generate (empty' max);                  }              }
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,DelayedUpdateHistogram,The following statement contains a magic number: try {                  if (hint == null)                      using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (photo.DefaultVersion.Uri)) {                          hint = img.Load (256' 256);                      }                                    histogram_image.Pixbuf = histogram.Generate (hint' max);                                    hint.Dispose ();              } catch (Exception e) {                  Hyena.Log.Debug (e.StackTrace);                  using (Gdk.Pixbuf empty = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' 256' 256)) {                      empty.Fill (0x0);                      histogram_image.Pixbuf = histogram.Generate (empty' max);                  }              }
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,DelayedUpdateHistogram,The following statement contains a magic number: try {                  if (hint == null)                      using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (photo.DefaultVersion.Uri)) {                          hint = img.Load (256' 256);                      }                                    histogram_image.Pixbuf = histogram.Generate (hint' max);                                    hint.Dispose ();              } catch (Exception e) {                  Hyena.Log.Debug (e.StackTrace);                  using (Gdk.Pixbuf empty = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' 256' 256)) {                      empty.Fill (0x0);                      histogram_image.Pixbuf = histogram.Generate (empty' max);                  }              }
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,HandleButtonPressEvent,The following statement contains a magic number: if (args.Event.Button == 3) {                  Menu popup_menu = new Menu ();                                    AddMenuItems (popup_menu);                                    if (args.Event != null)                      popup_menu.Popup (null' null' null' args.Event.Button' args.Event.Time);                  else                      popup_menu.Popup (null' null' null' 0' Gtk.Global.CurrentEventTime);                                    args.RetVal = true;              }
Magic Number,FSpot.Widgets,InfoBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\InfoBox.cs,InfoBox,The following statement contains a magic number: BorderWidth = 2;
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,SetSamplePoint,The following statement contains a magic number: region.Width = 2 * radius;
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,SetSamplePoint,The following statement contains a magic number: region.Height = 2 * radius;
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.SetSource (new SolidPattern (new Cairo.Color (0.2' 0.2' 0.2' .6)));
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.SetSource (new SolidPattern (new Cairo.Color (0.2' 0.2' 0.2' .6)));
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.SetSource (new SolidPattern (new Cairo.Color (0.2' 0.2' 0.2' .6)));
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.SetSource (new SolidPattern (new Cairo.Color (0.2' 0.2' 0.2' .6)));
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.Rectangle (0' - (border + inner)' inner_x' 2 * (border + inner));
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.Arc (inner_x' 0' inner + border' 0' 2 * Math.PI);
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.Arc (0' 0' radius + border' 0' 2 * Math.PI);
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.Arc (inner_x' 0' inner' 0' 2 * Math.PI);
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: if (source != null)  				CairoHelper.SetSourcePixbuf (g' source' -source.Width / 2' -source.Height / 2);
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: if (source != null)  				CairoHelper.SetSourcePixbuf (g' source' -source.Width / 2' -source.Height / 2);
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: g.Arc (0' 0' radius' 0' 2 * Math.PI);
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: if (overlay != null) {  				CairoHelper.SetSourcePixbuf (g' overlay' -overlay.Width / 2' -overlay.Height / 2);  				g.Arc (0' 0' radius' angle' angle + Math.PI);  				g.ClosePath ();  				g.FillPreserve ();  				g.SetSource (new SolidPattern (new Cairo.Color (1.0' 1.0' 1.0' 1.0)));  				g.Stroke ();  			}
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,DrawShape,The following statement contains a magic number: if (overlay != null) {  				CairoHelper.SetSourcePixbuf (g' overlay' -overlay.Width / 2' -overlay.Height / 2);  				g.Arc (0' 0' radius' angle' angle + Math.PI);  				g.ClosePath ();  				g.FillPreserve ();  				g.SetSource (new SolidPattern (new Cairo.Color (1.0' 1.0' 1.0' 1.0)));  				g.Stroke ();  			}
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,HandleButtonPressEvent,The following statement contains a magic number: switch (args.Event.Type) {  			case EventType.ButtonPress:  				if (args.Event.Button == 1) {  					start = new Gdk.Point ((int)args.Event.X' (int)args.Event.Y);  					start_root = new Gdk.Point ((int)args.Event.XRoot' (int)args.Event.YRoot);  					start_hot = hotspot;    					Gdk.Point win;  					GdkWindow.GetOrigin (out win.X' out win.Y);  					start_hot.X += win.X;  					start_hot.Y += win.Y;    					dragging = true;  					rotate = (args.Event.State & ModifierType.ShiftMask) > 0;  					start_angle = Angle;  				} else {  					Angle += Math.PI /8;  				}  				break;  			case EventType.TwoButtonPress:  				dragging = false;  				App.Instance.Organizer.HideLoupe ();  				break;  			}
Magic Number,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,BuildUI,The following statement contains a magic number: drag = new DelayedOperation (20' new GLib.IdleHandler (DragUpdate));
Magic Number,FSpot.Widgets,MetadataDisplayWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\MetadataDisplay.cs,MetadataDisplayWidget,The following statement contains a magic number: main_vbox.Spacing = 6;
Magic Number,FSpot.Widgets,MetadataDisplayWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\MetadataDisplay.cs,MetadataDisplayWidget,The following statement contains a magic number: metadata_vbox.Spacing = 6;
Magic Number,FSpot.Widgets,MetadataDisplayWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\MetadataDisplay.cs,MetadataDisplayWidget,The following statement contains a magic number: BorderWidth = 3;
Magic Number,FSpot.Widgets,MetadataDisplayWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\MetadataDisplay.cs,MetadataDisplayWidget,The following statement contains a magic number: main_vbox.PackStart (expander' false' false' 6);
Magic Number,FSpot.Widgets,MetadataDisplayWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\MetadataDisplay.cs,AddExpander,The following statement contains a magic number: metadata_vbox.PackStart (expander' false' false' 6);
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,OnExposeEvent,The following statement contains a magic number: using (Cairo.Context ctx = CairoHelper.Create (GdkWindow)) {  				ctx.SetSourceRGBA (.7' .7' .7' .8);  				ctx.SetDash (new double [] { 10' 15 }' 0);  				ctx.LineWidth = .8;  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width / 3 * i' Selection.Y + Selection.Height));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  				for (int i = 1; i < 3; i++) {  					Point s = ImageCoordsToWindow (new Point (Selection.X' Selection.Y + Selection.Height / 3 * i));  					Point e = ImageCoordsToWindow (new Point (Selection.X + Selection.Width' Selection.Y + Selection.Height / 3 * i));  					ctx.MoveTo (s.X' s.Y);  					ctx.LineTo (e.X' e.Y);  					ctx.Stroke ();  				}  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,AddHistogram,The following statement contains a magic number: if (show_histogram) {  				Pixbuf image = hist.Generate (pixbuf);  				double scalex = 0.5;  				double scaley = 0.5;    				int width = (int)(image.Width * scalex);  				int height = (int)(image.Height * scaley);    				image.Composite (pixbuf'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 width' height'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 scalex' scaley'  						 InterpType.Bilinear' 200);  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,AddHistogram,The following statement contains a magic number: if (show_histogram) {  				Pixbuf image = hist.Generate (pixbuf);  				double scalex = 0.5;  				double scaley = 0.5;    				int width = (int)(image.Width * scalex);  				int height = (int)(image.Height * scaley);    				image.Composite (pixbuf'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 width' height'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 scalex' scaley'  						 InterpType.Bilinear' 200);  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,AddHistogram,The following statement contains a magic number: if (show_histogram) {  				Pixbuf image = hist.Generate (pixbuf);  				double scalex = 0.5;  				double scaley = 0.5;    				int width = (int)(image.Width * scalex);  				int height = (int)(image.Height * scaley);    				image.Composite (pixbuf'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 width' height'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 scalex' scaley'  						 InterpType.Bilinear' 200);  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,AddHistogram,The following statement contains a magic number: if (show_histogram) {  				Pixbuf image = hist.Generate (pixbuf);  				double scalex = 0.5;  				double scaley = 0.5;    				int width = (int)(image.Width * scalex);  				int height = (int)(image.Height * scaley);    				image.Composite (pixbuf'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 width' height'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 scalex' scaley'  						 InterpType.Bilinear' 200);  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,AddHistogram,The following statement contains a magic number: if (show_histogram) {  				Pixbuf image = hist.Generate (pixbuf);  				double scalex = 0.5;  				double scaley = 0.5;    				int width = (int)(image.Width * scalex);  				int height = (int)(image.Height * scaley);    				image.Composite (pixbuf'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 width' height'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 scalex' scaley'  						 InterpType.Bilinear' 200);  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,AddHistogram,The following statement contains a magic number: if (show_histogram) {  				Pixbuf image = hist.Generate (pixbuf);  				double scalex = 0.5;  				double scaley = 0.5;    				int width = (int)(image.Width * scalex);  				int height = (int)(image.Height * scaley);    				image.Composite (pixbuf'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 width' height'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 scalex' scaley'  						 InterpType.Bilinear' 200);  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,AddHistogram,The following statement contains a magic number: if (show_histogram) {  				Pixbuf image = hist.Generate (pixbuf);  				double scalex = 0.5;  				double scaley = 0.5;    				int width = (int)(image.Width * scalex);  				int height = (int)(image.Height * scaley);    				image.Composite (pixbuf'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 width' height'  						 pixbuf.Width - width - 10' pixbuf.Height - height - 10'  						 scalex' scaley'  						 InterpType.Bilinear' 200);  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,OnExposeEvent,The following statement contains a magic number: int round = 12;
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,OnExposeEvent,The following statement contains a magic number: g.SetSource (new SolidPattern (new Cairo.Color (0' 0' 0' .7)));
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,OnExposeEvent,The following statement contains a magic number: g.Arc (Allocation.Width - round' round' round' - Math.PI * 0.5' 0);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,OnExposeEvent,The following statement contains a magic number: g.Arc (Allocation.Width - round' Allocation.Height - round' round' 0' Math.PI * 0.5);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,OnExposeEvent,The following statement contains a magic number: g.Arc (round' Allocation.Height - round' round' Math.PI * 0.5' Math.PI);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,OnExposeEvent,The following statement contains a magic number: g.Arc (round' round' round' Math.PI' Math.PI * 1.5);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,UpdateImage,The following statement contains a magic number: if (pixbuf == null) {  				// A bizarre pixbuf = hack to try to deal with cinematic displays' etc.  				int preview_size = ((Screen.Width + Screen.Height)/2)/3;  				try {  					pixbuf = PhotoLoader.LoadAtMaxSize (item' preview_size' preview_size);  				} catch (Exception) {  					pixbuf = null;  				}    				if (pixbuf != null) {  					preview_cache.Add (orig_path + show_histogram' pixbuf);  					AddHistogram (pixbuf);  					image.Pixbuf = pixbuf;  				} else {  					image.Pixbuf = PixbufUtils.ErrorPixbuf;  				}  			} else {  				image.Pixbuf = pixbuf;  				pixbuf.Dispose ();  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,UpdateImage,The following statement contains a magic number: if (pixbuf == null) {  				// A bizarre pixbuf = hack to try to deal with cinematic displays' etc.  				int preview_size = ((Screen.Width + Screen.Height)/2)/3;  				try {  					pixbuf = PhotoLoader.LoadAtMaxSize (item' preview_size' preview_size);  				} catch (Exception) {  					pixbuf = null;  				}    				if (pixbuf != null) {  					preview_cache.Add (orig_path + show_histogram' pixbuf);  					AddHistogram (pixbuf);  					image.Pixbuf = pixbuf;  				} else {  					image.Pixbuf = PixbufUtils.ErrorPixbuf;  				}  			} else {  				image.Pixbuf = pixbuf;  				pixbuf.Dispose ();  			}
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,UpdatePosition,The following statement contains a magic number: x += bounds.X + (bounds.Width / 2);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,UpdatePosition,The following statement contains a magic number: y += bounds.Y + (bounds.Height / 2);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,UpdatePosition,The following statement contains a magic number: x = Math.Max (0' x - requisition.Width / 2);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,UpdatePosition,The following statement contains a magic number: y = Math.Max (0' y - requisition.Height / 2);
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: BorderWidth = 6;
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: hist.RedColorHint = 127;
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: hist.GreenColorHint = 127;
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: hist.BlueColorHint = 127;
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: label.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,PreviewPopup,The following statement contains a magic number: ModifyFg (Gtk.StateType.Normal' new Gdk.Color (127' 127' 127));
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: dialog.BorderWidth = 12;
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: dialog.VBox.Spacing = 6;
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: Gtk.Table table = new Gtk.Table (3' 2' false);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: Gtk.Table table = new Gtk.Table (3' 2' false);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.ColumnSpacing = 6;
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.RowSpacing = 6;
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (SetFancyStyle (new Gtk.Label (Catalog.GetString ("Radius:")))' 0' 1' 1' 2);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (SetFancyStyle (new Gtk.Label (Catalog.GetString ("Threshold:")))' 0' 1' 2' 3);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (SetFancyStyle (new Gtk.Label (Catalog.GetString ("Threshold:")))' 0' 1' 2' 3);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: SetFancyStyle (amount_spin = new Gtk.SpinButton (0.00' 100.0' .01));
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: SetFancyStyle (amount_spin = new Gtk.SpinButton (0.00' 100.0' .01));
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: SetFancyStyle (radius_spin = new Gtk.SpinButton (1.0' 50.0' .01));
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: SetFancyStyle (radius_spin = new Gtk.SpinButton (1.0' 50.0' .01));
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: SetFancyStyle (threshold_spin = new Gtk.SpinButton (0.0' 50.0' .01));
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: SetFancyStyle (threshold_spin = new Gtk.SpinButton (0.0' 50.0' .01));
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: amount_spin.Value = .5;
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: radius_spin.Value = 5;
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (amount_spin' 1' 2' 0' 1);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (radius_spin' 1' 2' 1' 2);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (radius_spin' 1' 2' 1' 2);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (threshold_spin' 1' 2' 2' 3);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (threshold_spin' 1' 2' 2' 3);
Magic Number,FSpot.Widgets,Sharpener,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Sharpener.cs,BuildUI,The following statement contains a magic number: table.Attach (threshold_spin' 1' 2' 2' 3);
Magic Number,FSpot.Widgets,SlideShow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SlideShow.cs,SlideShow,The following statement contains a magic number: animation = new DoubleAnimation (0' 1' new TimeSpan (0' 0' 2)' HandleProgressChanged' GLib.Priority.Default);
Magic Number,FSpot.Widgets,SlideShow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SlideShow.cs,LoadNext,The following statement contains a magic number: using (var img = App.Instance.Container.Resolve<IImageFileFactory> ().Create (item.Current.DefaultVersion.Uri)) {  				try {  					using (var pb =  img.Load ()) {  						double scale = Math.Min ((double)Allocation.Width/(double)pb.Width' (double)Allocation.Height/(double)pb.Height);  						int w = (int)(pb.Width * scale);  						int h = (int)(pb.Height * scale);    						if (w > 0 && h > 0)  							next = pb.ScaleSimple ((int)(pb.Width * scale)' (int)(pb.Height * scale)' InterpType.Bilinear);  					}  					Cms.Profile screen_profile;  					if (FSpot.ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile))  						FSpot.ColorManagement.ApplyProfile (next' screen_profile);  					loadRetries = 0;  				} catch (Exception) {  					next = PixbufUtils.ErrorPixbuf;  					if (++loadRetries < 10)  						item.MoveNext (true);  					else  						loadRetries = 0;  				}  			}
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,SoftFocus,The following statement contains a magic number: center.X = info.Bounds.Width / 2;
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,SoftFocus,The following statement contains a magic number: center.Y = info.Bounds.Height / 2;
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,SoftFocus,The following statement contains a magic number: Amount = 3;
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,SoftFocus,The following statement contains a magic number: Radius = .5;
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,CreateBlur,The following statement contains a magic number: double scale = Math.Max (256 / (double)source.Bounds.Width'  				               256 / (double)source.Bounds.Height);
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,CreateBlur,The following statement contains a magic number: double scale = Math.Max (256 / (double)source.Bounds.Width'  				               256 / (double)source.Bounds.Height);
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,CreateBlur,The following statement contains a magic number: using (var normal = image.ToPixbuf ())  			{  				using (var pixbufBlur = PixbufUtils.Blur (normal' 3' null))  				{  					overlay = new ImageInfo (pixbufBlur);  				}  			}
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,CreateMask,The following statement contains a magic number: double max = Math.Max (blur.Bounds.Width' blur.Bounds.Height) * .25;
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,CreateMask,The following statement contains a magic number: circle = new RadialGradient (Center.X * scale' Center.Y * scale' radius * max * .7'  				Center.X * scale' Center.Y * scale' radius * max + max * .2);
Magic Number,FSpot.Widgets,SoftFocus,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SoftFocus.cs,CreateMask,The following statement contains a magic number: circle = new RadialGradient (Center.X * scale' Center.Y * scale' radius * max * .7'  				Center.X * scale' Center.Y * scale' radius * max + max * .2);
Magic Number,FSpot.Widgets,TagEntry,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\TagEntry.cs,FinishTagCompletion,The following statement contains a magic number: Position = pos + 2;
Magic Number,FSpot.Widgets,TagView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\TagView.cs,DrawTags,The following statement contains a magic number: int tag_y = Allocation.Y + (Allocation.Height - thumbnail_size) / 2;
Magic Number,FSpot.Widgets,ThumbnailDateCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailDateCaptionRenderer.cs,Render,The following statement contains a magic number: if (cell_area.Width > 200) {                  date_text = photo.Time.ToString ();              } else {                  date_text = photo.Time.ToShortDateString ();              }
Magic Number,FSpot.Widgets,ThumbnailDateCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailDateCaptionRenderer.cs,Render,The following statement contains a magic number: layout_bounds.X = cell_area.X + (cell_area.Width - layout_bounds.Width) / 2;
Magic Number,FSpot.Widgets,ThumbnailTagsCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailTagsCaptionRenderer.cs,Render,The following statement contains a magic number: tag_bounds.X = cell_area.X + (cell_area.Width + tag_icon_hspacing - tags.Length * (tag_icon_size + tag_icon_hspacing)) / 2;
Magic Number,FSpot.Widgets,ThumbnailTextCaptionRenderer,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\ThumbnailTextCaptionRenderer.cs,Render,The following statement contains a magic number: layout_bounds.X = cell_area.X + (cell_area.Width - layout_bounds.Width) / 2;
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,DrawSelection,The following statement contains a magic number: using (Cairo.Context cairo_g = CairoHelper.Create (BinWindow)) {    				Color color = Style.Background (StateType.Selected);  				cairo_g.SetSourceColor (new Cairo.Color (color.Red / 65535.0' color.Green / 65535.0' color.Blue / 65535.0' 0.5));  				cairo_g.Rectangle (region.X' region.Y' region.Width' region.Height);  				cairo_g.Fill ();    			}
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,DrawSelection,The following statement contains a magic number: using (Cairo.Context cairo_g = CairoHelper.Create (BinWindow)) {    				Color color = Style.Background (StateType.Selected);  				cairo_g.SetSourceColor (new Cairo.Color (color.Red / 65535.0' color.Green / 65535.0' color.Blue / 65535.0' 0.5));  				cairo_g.Rectangle (region.X' region.Y' region.Width' region.Height);  				cairo_g.Fill ();    			}
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,DrawSelection,The following statement contains a magic number: using (Cairo.Context cairo_g = CairoHelper.Create (BinWindow)) {    				Color color = Style.Background (StateType.Selected);  				cairo_g.SetSourceColor (new Cairo.Color (color.Red / 65535.0' color.Green / 65535.0' color.Blue / 65535.0' 0.5));  				cairo_g.Rectangle (region.X' region.Y' region.Width' region.Height);  				cairo_g.Fill ();    			}
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,DrawSelection,The following statement contains a magic number: using (Cairo.Context cairo_g = CairoHelper.Create (BinWindow)) {    				Color color = Style.Background (StateType.Selected);  				cairo_g.SetSourceColor (new Cairo.Color (color.Red / 65535.0' color.Green / 65535.0' color.Blue / 65535.0' 0.5));  				cairo_g.Rectangle (region.X' region.Y' region.Width' region.Height);  				cairo_g.Fill ();    			}
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,OnButtonPressEvent,The following statement contains a magic number: switch (evnt.Type) {  			case EventType.TwoButtonPress:  				if (evnt.Button != 1 ||  				    (evnt.State & (ModifierType.ControlMask | ModifierType.ShiftMask)) != 0)  					return false;    				DoubleClicked?.Invoke (this' new BrowsableEventArgs (cell_num' null));  				return true;    			case EventType.ButtonPress:  				GrabFocus ();  				// on a cell : context menu if button 3  				// cell selection is done on button release  				if (evnt.Button == 3) {  					ContextMenu (evnt' cell_num);  					return true;  				}  				return false;  			}
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,HandleMotionTimeout,The following statement contains a magic number: if (deltaVscroll < 130)  				deltaVscroll += 15;
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,HandleMotionTimeout,The following statement contains a magic number: if (deltaVscroll < 130)  				deltaVscroll += 15;
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,OnMotionNotifyEvent,The following statement contains a magic number: if (isRectSelection) {  				// scroll if out of window  				double d_x' d_y;  				deltaVscroll = 30;    				if (EventHelper.GetCoords (evnt' out d_x' out d_y)) {  					int new_y = (int)d_y;  					if ((new_y <= 0) || (new_y >= Allocation.Height)) {  						if (scroll_timeout == 0)  							scroll_timeout = GLib.Timeout.Add (100' new GLib.TimeoutHandler (HandleMotionTimeout));  					} else if (scroll_timeout != 0) {  						GLib.Source.Remove (scroll_timeout);  						scroll_timeout = 0;  					}  				} else if (scroll_timeout != 0) {  					GLib.Source.Remove (scroll_timeout);  					scroll_timeout = 0;  				}    				// handle selection  				UpdateRubberband ();  				//SelectMotion (new Point ((int) args.Event.X' (int) args.Event.Y));  			} else {  				int cell_num = CellAtPosition (selection_start);    				if (Selection.Contains (cell_num)) {  					// on a selected cell : do drag&drop  					isDragDrop = true;  					if (StartDrag != null) {  						uint but = (evnt.State & ModifierType.Button1Mask) != 0 ? 1U : 3U;  						StartDrag (this' new StartDragArgs (but' start_select_event));  					}  				} else {  					// not on a selected cell : do rectangular select  					isRectSelection = true;    					// ctrl : toggle selected' shift : keep selected  					if ((evnt.State & (ModifierType.ShiftMask | ModifierType.ControlMask)) == 0)  						Selection.Clear ();    					start_select_selection = Selection.Ids; // keep initial selection  					// no rect draw at beginning  					rect_select = Rectangle.Zero;    					return false;  				}  			}
Magic Number,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,OnMotionNotifyEvent,The following statement contains a magic number: if (isRectSelection) {  				// scroll if out of window  				double d_x' d_y;  				deltaVscroll = 30;    				if (EventHelper.GetCoords (evnt' out d_x' out d_y)) {  					int new_y = (int)d_y;  					if ((new_y <= 0) || (new_y >= Allocation.Height)) {  						if (scroll_timeout == 0)  							scroll_timeout = GLib.Timeout.Add (100' new GLib.TimeoutHandler (HandleMotionTimeout));  					} else if (scroll_timeout != 0) {  						GLib.Source.Remove (scroll_timeout);  						scroll_timeout = 0;  					}  				} else if (scroll_timeout != 0) {  					GLib.Source.Remove (scroll_timeout);  					scroll_timeout = 0;  				}    				// handle selection  				UpdateRubberband ();  				//SelectMotion (new Point ((int) args.Event.X' (int) args.Event.Y));  			} else {  				int cell_num = CellAtPosition (selection_start);    				if (Selection.Contains (cell_num)) {  					// on a selected cell : do drag&drop  					isDragDrop = true;  					if (StartDrag != null) {  						uint but = (evnt.State & ModifierType.Button1Mask) != 0 ? 1U : 3U;  						StartDrag (this' new StartDragArgs (but' start_select_event));  					}  				} else {  					// not on a selected cell : do rectangular select  					isRectSelection = true;    					// ctrl : toggle selected' shift : keep selected  					if ((evnt.State & (ModifierType.ShiftMask | ModifierType.ControlMask)) == 0)  						Selection.Clear ();    					start_select_selection = Selection.Ids; // keep initial selection  					// no rect draw at beginning  					rect_select = Rectangle.Zero;    					return false;  				}  			}
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,HandlePixbufLoaded,The following statement contains a magic number: if (result.Width > width && result.Height > height) {                  //  Log.Debug ("scaling");                  Pixbuf temp = result.ScaleSimple(width' height' InterpType.Nearest);                  result.Dispose ();                  result = temp;              } else if (result.Width < ThumbnailWidth && result.Height < ThumbnailHeight) {                  // FIXME this is a workaround to handle images whose actual size is smaller than                  // the thumbnail size' it needs to be fixed at a different level.                  Pixbuf temp = new Pixbuf (Colorspace.Rgb' true' 8' ThumbnailWidth' ThumbnailHeight);                  temp.Fill (0x00000000);                  result.CopyArea (0' 0'                          result.Width' result.Height'                          temp'                          (temp.Width - result.Width)/ 2'                          temp.Height - result.Height);                    result.Dispose ();                  result = temp;              }
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,HandlePixbufLoaded,The following statement contains a magic number: if (result.Width > width && result.Height > height) {                  //  Log.Debug ("scaling");                  Pixbuf temp = result.ScaleSimple(width' height' InterpType.Nearest);                  result.Dispose ();                  result = temp;              } else if (result.Width < ThumbnailWidth && result.Height < ThumbnailHeight) {                  // FIXME this is a workaround to handle images whose actual size is smaller than                  // the thumbnail size' it needs to be fixed at a different level.                  Pixbuf temp = new Pixbuf (Colorspace.Rgb' true' 8' ThumbnailWidth' ThumbnailHeight);                  temp.Fill (0x00000000);                  result.CopyArea (0' 0'                          result.Width' result.Height'                          temp'                          (temp.Width - result.Width)/ 2'                          temp.Height - result.Height);                    result.Dispose ();                  result = temp;              }
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The following statement contains a magic number: var focus = Rectangle.Inflate (cell_area' -3' -3);
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The following statement contains a magic number: var focus = Rectangle.Inflate (cell_area' -3' -3);
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The following statement contains a magic number: if (Rectangle.Inflate (image_bounds' expansion + 1' expansion + 1).Intersect (expose_area' out image_bounds) && thumbnail != null) {                    PixbufUtils.Fit (thumbnail' ThumbnailWidth' ThumbnailHeight'                          true' out region.Width' out region.Height);                    region.X = (int) (cell_area.X + (cell_area.Width - region.Width) / 2);                  region.Y = (int) cell_area.Y + ThumbnailHeight - region.Height + CELL_BORDER_WIDTH;                    if (Math.Abs (region.Width - thumbnail.Width) > 1                      && Math.Abs (region.Height - thumbnail.Height) > 1)                  Cache.Reload (entry' cell_num' thumbnail.Width' thumbnail.Height);                    region = Rectangle.Inflate (region' expansion' expansion);                  Pixbuf temp_thumbnail;                  region.Width = Math.Max (1' region.Width);                  region.Height = Math.Max (1' region.Height);                    if (Math.Abs (region.Width - thumbnail.Width) > 1                      && Math.Abs (region.Height - thumbnail.Height) > 1) {                      if (region.Width < thumbnail.Width && region.Height < thumbnail.Height) {                          /*                          temp_thumbnail = PixbufUtils.ScaleDown (thumbnail'                                  region.Width' region.Height);                          */                          temp_thumbnail = thumbnail.ScaleSimple (region.Width' region.Height'                                  InterpType.Bilinear);                              lock (entry) {                              if (entry.Reload && expansion == 0 && !entry.IsDisposed) {                                  entry.SetPixbufExtended (temp_thumbnail.ShallowCopy ()' false);                                  entry.Reload = true;                              }                          }                      } else {                          temp_thumbnail = thumbnail.ScaleSimple (region.Width' region.Height'                                  InterpType.Bilinear);                      }                  } else                      temp_thumbnail = thumbnail;                    // FIXME There seems to be a rounding issue between the                  // scaled thumbnail sizes' we avoid this for now by using                  // the actual thumnail sizes here.                  region.Width = temp_thumbnail.Width;                  region.Height = temp_thumbnail.Height;                    draw = Rectangle.Inflate (region' 1' 1);                    if (!temp_thumbnail.HasAlpha)                      Style.PaintShadow (Style' BinWindow' cell_state'                          ShadowType.Out' expose_area' this'                          "IconView"'                          draw.X' draw.Y'                          draw.Width' draw.Height);                    if (region.Intersect (expose_area' out draw)) {                      Cms.Profile screen_profile;                      if (ColorManagement.Profiles.TryGetValue (Preferences.Get<string> (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE)' out screen_profile)) {                          Pixbuf t = temp_thumbnail.Copy ();                          temp_thumbnail.Dispose ();                          temp_thumbnail = t;                          ColorManagement.ApplyProfile (temp_thumbnail' screen_profile);                      }                      temp_thumbnail.RenderToDrawable (BinWindow' Style.WhiteGC'                              draw.X - region.X'                              draw.Y - region.Y'                              draw.X' draw.Y'                              draw.Width' draw.Height'                              RgbDither.None'                              draw.X' draw.Y);                  }                    if (temp_thumbnail != thumbnail) {                      temp_thumbnail.Dispose ();                  }                }
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,DrawPhoto,The following statement contains a magic number: caption_area.Width = cell_area.Width - 2 * CELL_BORDER_WIDTH;
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,Throb,The following statement contains a magic number: if (throb_timer_id == 0)                  throb_timer_id = GLib.Timeout.Add ((39000/throb_state_max)/100'                      new GLib.TimeoutHandler (HandleThrobTimer));
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,Throb,The following statement contains a magic number: if (throb_timer_id == 0)                  throb_timer_id = GLib.Timeout.Add ((39000/throb_state_max)/100'                      new GLib.TimeoutHandler (HandleThrobTimer));
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,ThrobExpansion,The following statement contains a magic number: if (cell == throb_cell) {                  double t = throb_state / (double) (throb_state_max - 1);                  double s;                  if (selected)                      s = Math.Cos (-2 * Math.PI * t);                  else                      s = 1 - Math.Cos (-2 * Math.PI * t);                    expansion = (int) (SELECTION_THICKNESS * s);              } else if (selected) {                  expansion = SELECTION_THICKNESS;              }
Magic Number,FSpot.Widgets,CollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\CollectionCellGridView.cs,ThrobExpansion,The following statement contains a magic number: if (cell == throb_cell) {                  double t = throb_state / (double) (throb_state_max - 1);                  double s;                  if (selected)                      s = Math.Cos (-2 * Math.PI * t);                  else                      s = 1 - Math.Cos (-2 * Math.PI * t);                    expansion = (int) (SELECTION_THICKNESS * s);              } else if (selected) {                  expansion = SELECTION_THICKNESS;              }
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,PackButton,The following statement contains a magic number: if (editor.IconName != null)  				button.Image = new Image (GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' editor.IconName' 22' (Gtk.IconLookupFlags)0));
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,ShowTools,The following statement contains a magic number: buttons.BorderWidth = 5;
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,ShowTools,The following statement contains a magic number: buttons.Spacing = 5;
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,ShowEditor,The following statement contains a magic number: VBox vbox = new VBox (false' 4);
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,ShowEditor,The following statement contains a magic number: vbox.PackStart (label' false' false' 5);
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,ShowEditor,The following statement contains a magic number: tool_buttons.Spacing = 5;
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,ShowEditor,The following statement contains a magic number: tool_buttons.BorderWidth = 5;
Magic Number,FSpot.Widgets,EditorPageWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\EditorPageWidget.cs,ShowEditor,The following statement contains a magic number: apply.Image = new Image (GtkUtil.TryLoadIcon (FSpot.Settings.Global.IconTheme' editor.IconName' 22' 0));
Magic Number,Pinta.Core,ColorBgra,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\ColorBgra.cs,BgraToUInt32,The following statement contains a magic number: return (uint)b + ((uint)g << 8) + ((uint)r << 16) + ((uint)a << 24);
Magic Number,Pinta.Core,ColorBgra,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\ColorBgra.cs,BgraToUInt32,The following statement contains a magic number: return (uint)b + ((uint)g << 8) + ((uint)r << 16) + ((uint)a << 24);
Magic Number,Pinta.Core,ColorBgra,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\ColorBgra.cs,BgraToUInt32,The following statement contains a magic number: return (uint)b + ((uint)g << 8) + ((uint)r << 16) + ((uint)a << 24);
Magic Number,Pinta.Core,ColorBgra,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\ColorBgra.cs,BgraToUInt32,The following statement contains a magic number: return (uint)b + ((uint)g << 8) + ((uint)r << 16) + ((uint)a << 24);
Magic Number,Pinta.Core,ColorBgra,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\ColorBgra.cs,BgraToUInt32,The following statement contains a magic number: return (uint)b + ((uint)g << 8) + ((uint)r << 16) + ((uint)a << 24);
Magic Number,Pinta.Core,ColorBgra,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\ColorBgra.cs,BgraToUInt32,The following statement contains a magic number: return (uint)b + ((uint)g << 8) + ((uint)r << 16) + ((uint)a << 24);
Magic Number,Pinta.Core,CairoExtensions,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\CairoExtensions.cs,ToPixbuf,The following statement contains a magic number: int len = surf.Data.Length / 4;
Magic Number,Pinta.Core,CairoExtensions,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\CairoExtensions.cs,ToPixbuf,The following statement contains a magic number: Gdk.Pixbuf pb = new Gdk.Pixbuf (surf.Data' true' 8' surf.Width' surf.Height' surf.Stride);
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,CreateGaussianBlurRow,The following statement contains a magic number: int size = 1 + (amount * 2);
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,CreateGaussianBlurRow,The following statement contains a magic number: for (int i = 0; i <= amount; ++i) {                  // 1 + aa - aa + 2ai - ii                  weights[i] = 16 * (i + 1);                  weights[weights.Length - i - 1] = weights[i];              }
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The following statement contains a magic number: int localStoreSize = wlen * 6 * sizeof (long);
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The following statement contains a magic number: foreach (Gdk.Rectangle rect in rois) {                  if (rect.Height >= 1 && rect.Width >= 1) {                      for (int y = rect.Top; y < rect.Bottom; ++y) {                          //Memory.SetToZero (localStore' (ulong)localStoreSize);                                long waSum = 0;                          long wcSum = 0;                          long aSum = 0;                          long bSum = 0;                          long gSum = 0;                          long rSum = 0;                                ColorBgra* dstPtr = dest.GetPointAddressUnchecked (rect.Left' y);                                for (int wx = 0; wx < wlen; ++wx) {                              int srcX = rect.Left + wx - r;                              waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * c.A;                                          bSums[wx] += wp * c.B;                                          gSums[wx] += wp * c.G;                                          rSums[wx] += wp * c.R;                                      }                                  }                                        int wwx = w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                          }                                wcSum >>= 8;                                if (waSum == 0 || wcSum == 0) {                              dstPtr->Bgra = 0;                          } else {                              int alpha = (int)(aSum / waSum);                              int blue = (int)(bSum / wcSum);                              int green = (int)(gSum / wcSum);                              int red = (int)(rSum / wcSum);                                    dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                          }                                ++dstPtr;                                for (int x = rect.Left + 1; x < rect.Right; ++x) {                              for (int i = 0; i < wlen - 1; ++i) {                                  waSums[i] = waSums[i + 1];                                  wcSums[i] = wcSums[i + 1];                                  aSums[i] = aSums[i + 1];                                  bSums[i] = bSums[i + 1];                                  gSums[i] = gSums[i + 1];                                  rSums[i] = rSums[i + 1];                              }                                    waSum = 0;                              wcSum = 0;                              aSum = 0;                              bSum = 0;                              gSum = 0;                              rSum = 0;                                    int wx;                              for (wx = 0; wx < wlen - 1; ++wx) {                                  long wwx = (long)w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                                    wx = wlen - 1;                                    waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    int srcX = x + wx - r;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * (long)c.A;                                          bSums[wx] += wp * (long)c.B;                                          gSums[wx] += wp * (long)c.G;                                          rSums[wx] += wp * (long)c.R;                                      }                                  }                                        int wr = w[wx];                                  waSum += (long)wr * waSums[wx];                                  wcSum += (long)wr * wcSums[wx];                                  aSum += (long)wr * aSums[wx];                                  bSum += (long)wr * bSums[wx];                                  gSum += (long)wr * gSums[wx];                                  rSum += (long)wr * rSums[wx];                              }                                    wcSum >>= 8;                                    if (waSum == 0 || wcSum == 0) {                                  dstPtr->Bgra = 0;                              } else {                                  int alpha = (int)(aSum / waSum);                                  int blue = (int)(bSum / wcSum);                                  int green = (int)(gSum / wcSum);                                  int red = (int)(rSum / wcSum);                                        dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                              }                                    ++dstPtr;                          }                      }                  }              }
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The following statement contains a magic number: foreach (Gdk.Rectangle rect in rois) {                  if (rect.Height >= 1 && rect.Width >= 1) {                      for (int y = rect.Top; y < rect.Bottom; ++y) {                          //Memory.SetToZero (localStore' (ulong)localStoreSize);                                long waSum = 0;                          long wcSum = 0;                          long aSum = 0;                          long bSum = 0;                          long gSum = 0;                          long rSum = 0;                                ColorBgra* dstPtr = dest.GetPointAddressUnchecked (rect.Left' y);                                for (int wx = 0; wx < wlen; ++wx) {                              int srcX = rect.Left + wx - r;                              waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * c.A;                                          bSums[wx] += wp * c.B;                                          gSums[wx] += wp * c.G;                                          rSums[wx] += wp * c.R;                                      }                                  }                                        int wwx = w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                          }                                wcSum >>= 8;                                if (waSum == 0 || wcSum == 0) {                              dstPtr->Bgra = 0;                          } else {                              int alpha = (int)(aSum / waSum);                              int blue = (int)(bSum / wcSum);                              int green = (int)(gSum / wcSum);                              int red = (int)(rSum / wcSum);                                    dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                          }                                ++dstPtr;                                for (int x = rect.Left + 1; x < rect.Right; ++x) {                              for (int i = 0; i < wlen - 1; ++i) {                                  waSums[i] = waSums[i + 1];                                  wcSums[i] = wcSums[i + 1];                                  aSums[i] = aSums[i + 1];                                  bSums[i] = bSums[i + 1];                                  gSums[i] = gSums[i + 1];                                  rSums[i] = rSums[i + 1];                              }                                    waSum = 0;                              wcSum = 0;                              aSum = 0;                              bSum = 0;                              gSum = 0;                              rSum = 0;                                    int wx;                              for (wx = 0; wx < wlen - 1; ++wx) {                                  long wwx = (long)w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                                    wx = wlen - 1;                                    waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    int srcX = x + wx - r;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * (long)c.A;                                          bSums[wx] += wp * (long)c.B;                                          gSums[wx] += wp * (long)c.G;                                          rSums[wx] += wp * (long)c.R;                                      }                                  }                                        int wr = w[wx];                                  waSum += (long)wr * waSums[wx];                                  wcSum += (long)wr * wcSums[wx];                                  aSum += (long)wr * aSums[wx];                                  bSum += (long)wr * bSums[wx];                                  gSum += (long)wr * gSums[wx];                                  rSum += (long)wr * rSums[wx];                              }                                    wcSum >>= 8;                                    if (waSum == 0 || wcSum == 0) {                                  dstPtr->Bgra = 0;                              } else {                                  int alpha = (int)(aSum / waSum);                                  int blue = (int)(bSum / wcSum);                                  int green = (int)(gSum / wcSum);                                  int red = (int)(rSum / wcSum);                                        dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                              }                                    ++dstPtr;                          }                      }                  }              }
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The following statement contains a magic number: foreach (Gdk.Rectangle rect in rois) {                  if (rect.Height >= 1 && rect.Width >= 1) {                      for (int y = rect.Top; y < rect.Bottom; ++y) {                          //Memory.SetToZero (localStore' (ulong)localStoreSize);                                long waSum = 0;                          long wcSum = 0;                          long aSum = 0;                          long bSum = 0;                          long gSum = 0;                          long rSum = 0;                                ColorBgra* dstPtr = dest.GetPointAddressUnchecked (rect.Left' y);                                for (int wx = 0; wx < wlen; ++wx) {                              int srcX = rect.Left + wx - r;                              waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * c.A;                                          bSums[wx] += wp * c.B;                                          gSums[wx] += wp * c.G;                                          rSums[wx] += wp * c.R;                                      }                                  }                                        int wwx = w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                          }                                wcSum >>= 8;                                if (waSum == 0 || wcSum == 0) {                              dstPtr->Bgra = 0;                          } else {                              int alpha = (int)(aSum / waSum);                              int blue = (int)(bSum / wcSum);                              int green = (int)(gSum / wcSum);                              int red = (int)(rSum / wcSum);                                    dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                          }                                ++dstPtr;                                for (int x = rect.Left + 1; x < rect.Right; ++x) {                              for (int i = 0; i < wlen - 1; ++i) {                                  waSums[i] = waSums[i + 1];                                  wcSums[i] = wcSums[i + 1];                                  aSums[i] = aSums[i + 1];                                  bSums[i] = bSums[i + 1];                                  gSums[i] = gSums[i + 1];                                  rSums[i] = rSums[i + 1];                              }                                    waSum = 0;                              wcSum = 0;                              aSum = 0;                              bSum = 0;                              gSum = 0;                              rSum = 0;                                    int wx;                              for (wx = 0; wx < wlen - 1; ++wx) {                                  long wwx = (long)w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                                    wx = wlen - 1;                                    waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    int srcX = x + wx - r;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * (long)c.A;                                          bSums[wx] += wp * (long)c.B;                                          gSums[wx] += wp * (long)c.G;                                          rSums[wx] += wp * (long)c.R;                                      }                                  }                                        int wr = w[wx];                                  waSum += (long)wr * waSums[wx];                                  wcSum += (long)wr * wcSums[wx];                                  aSum += (long)wr * aSums[wx];                                  bSum += (long)wr * bSums[wx];                                  gSum += (long)wr * gSums[wx];                                  rSum += (long)wr * rSums[wx];                              }                                    wcSum >>= 8;                                    if (waSum == 0 || wcSum == 0) {                                  dstPtr->Bgra = 0;                              } else {                                  int alpha = (int)(aSum / waSum);                                  int blue = (int)(bSum / wcSum);                                  int green = (int)(gSum / wcSum);                                  int red = (int)(rSum / wcSum);                                        dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                              }                                    ++dstPtr;                          }                      }                  }              }
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The following statement contains a magic number: foreach (Gdk.Rectangle rect in rois) {                  if (rect.Height >= 1 && rect.Width >= 1) {                      for (int y = rect.Top; y < rect.Bottom; ++y) {                          //Memory.SetToZero (localStore' (ulong)localStoreSize);                                long waSum = 0;                          long wcSum = 0;                          long aSum = 0;                          long bSum = 0;                          long gSum = 0;                          long rSum = 0;                                ColorBgra* dstPtr = dest.GetPointAddressUnchecked (rect.Left' y);                                for (int wx = 0; wx < wlen; ++wx) {                              int srcX = rect.Left + wx - r;                              waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * c.A;                                          bSums[wx] += wp * c.B;                                          gSums[wx] += wp * c.G;                                          rSums[wx] += wp * c.R;                                      }                                  }                                        int wwx = w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                          }                                wcSum >>= 8;                                if (waSum == 0 || wcSum == 0) {                              dstPtr->Bgra = 0;                          } else {                              int alpha = (int)(aSum / waSum);                              int blue = (int)(bSum / wcSum);                              int green = (int)(gSum / wcSum);                              int red = (int)(rSum / wcSum);                                    dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                          }                                ++dstPtr;                                for (int x = rect.Left + 1; x < rect.Right; ++x) {                              for (int i = 0; i < wlen - 1; ++i) {                                  waSums[i] = waSums[i + 1];                                  wcSums[i] = wcSums[i + 1];                                  aSums[i] = aSums[i + 1];                                  bSums[i] = bSums[i + 1];                                  gSums[i] = gSums[i + 1];                                  rSums[i] = rSums[i + 1];                              }                                    waSum = 0;                              wcSum = 0;                              aSum = 0;                              bSum = 0;                              gSum = 0;                              rSum = 0;                                    int wx;                              for (wx = 0; wx < wlen - 1; ++wx) {                                  long wwx = (long)w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                                    wx = wlen - 1;                                    waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    int srcX = x + wx - r;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * (long)c.A;                                          bSums[wx] += wp * (long)c.B;                                          gSums[wx] += wp * (long)c.G;                                          rSums[wx] += wp * (long)c.R;                                      }                                  }                                        int wr = w[wx];                                  waSum += (long)wr * waSums[wx];                                  wcSum += (long)wr * wcSums[wx];                                  aSum += (long)wr * aSums[wx];                                  bSum += (long)wr * bSums[wx];                                  gSum += (long)wr * gSums[wx];                                  rSum += (long)wr * rSums[wx];                              }                                    wcSum >>= 8;                                    if (waSum == 0 || wcSum == 0) {                                  dstPtr->Bgra = 0;                              } else {                                  int alpha = (int)(aSum / waSum);                                  int blue = (int)(bSum / wcSum);                                  int green = (int)(gSum / wcSum);                                  int red = (int)(rSum / wcSum);                                        dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                              }                                    ++dstPtr;                          }                      }                  }              }
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The following statement contains a magic number: foreach (Gdk.Rectangle rect in rois) {                  if (rect.Height >= 1 && rect.Width >= 1) {                      for (int y = rect.Top; y < rect.Bottom; ++y) {                          //Memory.SetToZero (localStore' (ulong)localStoreSize);                                long waSum = 0;                          long wcSum = 0;                          long aSum = 0;                          long bSum = 0;                          long gSum = 0;                          long rSum = 0;                                ColorBgra* dstPtr = dest.GetPointAddressUnchecked (rect.Left' y);                                for (int wx = 0; wx < wlen; ++wx) {                              int srcX = rect.Left + wx - r;                              waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * c.A;                                          bSums[wx] += wp * c.B;                                          gSums[wx] += wp * c.G;                                          rSums[wx] += wp * c.R;                                      }                                  }                                        int wwx = w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                          }                                wcSum >>= 8;                                if (waSum == 0 || wcSum == 0) {                              dstPtr->Bgra = 0;                          } else {                              int alpha = (int)(aSum / waSum);                              int blue = (int)(bSum / wcSum);                              int green = (int)(gSum / wcSum);                              int red = (int)(rSum / wcSum);                                    dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                          }                                ++dstPtr;                                for (int x = rect.Left + 1; x < rect.Right; ++x) {                              for (int i = 0; i < wlen - 1; ++i) {                                  waSums[i] = waSums[i + 1];                                  wcSums[i] = wcSums[i + 1];                                  aSums[i] = aSums[i + 1];                                  bSums[i] = bSums[i + 1];                                  gSums[i] = gSums[i + 1];                                  rSums[i] = rSums[i + 1];                              }                                    waSum = 0;                              wcSum = 0;                              aSum = 0;                              bSum = 0;                              gSum = 0;                              rSum = 0;                                    int wx;                              for (wx = 0; wx < wlen - 1; ++wx) {                                  long wwx = (long)w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                                    wx = wlen - 1;                                    waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    int srcX = x + wx - r;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * (long)c.A;                                          bSums[wx] += wp * (long)c.B;                                          gSums[wx] += wp * (long)c.G;                                          rSums[wx] += wp * (long)c.R;                                      }                                  }                                        int wr = w[wx];                                  waSum += (long)wr * waSums[wx];                                  wcSum += (long)wr * wcSums[wx];                                  aSum += (long)wr * aSums[wx];                                  bSum += (long)wr * bSums[wx];                                  gSum += (long)wr * gSums[wx];                                  rSum += (long)wr * rSums[wx];                              }                                    wcSum >>= 8;                                    if (waSum == 0 || wcSum == 0) {                                  dstPtr->Bgra = 0;                              } else {                                  int alpha = (int)(aSum / waSum);                                  int blue = (int)(bSum / wcSum);                                  int green = (int)(gSum / wcSum);                                  int red = (int)(rSum / wcSum);                                        dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                              }                                    ++dstPtr;                          }                      }                  }              }
Magic Number,Pinta.Effects,GaussianBlurEffect,C:\repos\mono_f-spot\src\Clients\FSpot\Pinta\GaussianBlurEffect.cs,RenderBlurEffect,The following statement contains a magic number: foreach (Gdk.Rectangle rect in rois) {                  if (rect.Height >= 1 && rect.Width >= 1) {                      for (int y = rect.Top; y < rect.Bottom; ++y) {                          //Memory.SetToZero (localStore' (ulong)localStoreSize);                                long waSum = 0;                          long wcSum = 0;                          long aSum = 0;                          long bSum = 0;                          long gSum = 0;                          long rSum = 0;                                ColorBgra* dstPtr = dest.GetPointAddressUnchecked (rect.Left' y);                                for (int wx = 0; wx < wlen; ++wx) {                              int srcX = rect.Left + wx - r;                              waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * c.A;                                          bSums[wx] += wp * c.B;                                          gSums[wx] += wp * c.G;                                          rSums[wx] += wp * c.R;                                      }                                  }                                        int wwx = w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                          }                                wcSum >>= 8;                                if (waSum == 0 || wcSum == 0) {                              dstPtr->Bgra = 0;                          } else {                              int alpha = (int)(aSum / waSum);                              int blue = (int)(bSum / wcSum);                              int green = (int)(gSum / wcSum);                              int red = (int)(rSum / wcSum);                                    dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                          }                                ++dstPtr;                                for (int x = rect.Left + 1; x < rect.Right; ++x) {                              for (int i = 0; i < wlen - 1; ++i) {                                  waSums[i] = waSums[i + 1];                                  wcSums[i] = wcSums[i + 1];                                  aSums[i] = aSums[i + 1];                                  bSums[i] = bSums[i + 1];                                  gSums[i] = gSums[i + 1];                                  rSums[i] = rSums[i + 1];                              }                                    waSum = 0;                              wcSum = 0;                              aSum = 0;                              bSum = 0;                              gSum = 0;                              rSum = 0;                                    int wx;                              for (wx = 0; wx < wlen - 1; ++wx) {                                  long wwx = (long)w[wx];                                  waSum += wwx * waSums[wx];                                  wcSum += wwx * wcSums[wx];                                  aSum += wwx * aSums[wx];                                  bSum += wwx * bSums[wx];                                  gSum += wwx * gSums[wx];                                  rSum += wwx * rSums[wx];                              }                                    wx = wlen - 1;                                    waSums[wx] = 0;                              wcSums[wx] = 0;                              aSums[wx] = 0;                              bSums[wx] = 0;                              gSums[wx] = 0;                              rSums[wx] = 0;                                    int srcX = x + wx - r;                                    if (srcX >= 0 && srcX < src_width) {                                  for (int wy = 0; wy < wlen; ++wy) {                                      int srcY = y + wy - r;                                            if (srcY >= 0 && srcY < src_height) {                                          ColorBgra c = src.GetPointUnchecked (src_data_ptr' src_width' srcX' srcY);                                          int wp = w[wy];                                                waSums[wx] += wp;                                          wp *= c.A + (c.A >> 7);                                          wcSums[wx] += wp;                                          wp >>= 8;                                                aSums[wx] += wp * (long)c.A;                                          bSums[wx] += wp * (long)c.B;                                          gSums[wx] += wp * (long)c.G;                                          rSums[wx] += wp * (long)c.R;                                      }                                  }                                        int wr = w[wx];                                  waSum += (long)wr * waSums[wx];                                  wcSum += (long)wr * wcSums[wx];                                  aSum += (long)wr * aSums[wx];                                  bSum += (long)wr * bSums[wx];                                  gSum += (long)wr * gSums[wx];                                  rSum += (long)wr * rSums[wx];                              }                                    wcSum >>= 8;                                    if (waSum == 0 || wcSum == 0) {                                  dstPtr->Bgra = 0;                              } else {                                  int alpha = (int)(aSum / waSum);                                  int blue = (int)(bSum / wcSum);                                  int green = (int)(gSum / wcSum);                                  int red = (int)(rSum / wcSum);                                        dstPtr->Bgra = ColorBgra.BgraToUInt32 (blue' green' red' alpha);                              }                                    ++dstPtr;                          }                      }                  }              }
Magic Number,FSpot.Query,LiteralBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\LiteralBox.cs,LiteralBox,The following statement contains a magic number: handle = new GrabHandle (24' 8);
Magic Number,FSpot.Query,LiteralBox,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\LiteralBox.cs,LiteralBox,The following statement contains a magic number: handle = new GrabHandle (24' 8);
Magic Number,FSpot.Query,LogicWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\LogicWidget.cs,HandleDragMotion,The following statement contains a magic number: if (!preview && rootTerm.Count > 0 && (Literal.FocusedLiterals.Count == 0 || Children.Length > 2)) {  				Preview ();  				preview = true;  			}
Magic Number,FSpot.Query,Term,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\Term.cs,TagRequired,The following statement contains a magic number: groupedWith = 100;
Magic Number,FSpot.Query,Term,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\Term.cs,TagRequired,The following statement contains a magic number: int min_grouped_with = 100;
Magic Number,FSpot.Query,Literal,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\Literal.cs,HandleButtonPress,The following statement contains a magic number: switch (args.Event.Type) {  			case EventType.TwoButtonPress:  				if (args.Event.Button == 1)  					IsNegated = !IsNegated;  				else  					args.RetVal = false;  				return;    			case EventType.ButtonPress:  				Widget.GrabFocus ();    				if (args.Event.Button == 1) {  					// TODO allow multiple selection of literals so they can be deleted' modified all at once  					//if ((args.Event.State & ModifierType.ControlMask) != 0) {  					//}    				} else if (args.Event.Button == 3) {  					var popup = new LiteralPopup ();  					popup.Activate (args.Event' this);  				}    				return;    			default:  				args.RetVal = false;  				return;  			}
Magic Number,FSpot.Query,Literal,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\Literal.cs,HandleDragDataGet,The following statement contains a magic number: if (args.Info == DragDropTargets.TagListEntry.Info || args.Info == DragDropTargets.TagQueryEntry.Info) {    				// FIXME: do really write data  				Byte [] data = Encoding.UTF8.GetBytes (string.Empty);  				Atom [] targets = args.Context.Targets;    				args.SelectionData.Set (targets [0]' 8' data' data.Length);    				return;  			}
Magic Number,FSpot.Query,AndTerm,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\AndTerm.cs,SeparatorWidget,The following statement contains a magic number: separator.SetSizeRequest (3' 1);
Magic Number,FSpot.Query,QueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\QueryWidget.cs,QueryWidget,The following statement contains a magic number: box.Spacing = 6;
Magic Number,FSpot.Query,QueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\QueryWidget.cs,QueryWidget,The following statement contains a magic number: box.BorderWidth = 2;
Magic Number,FSpot.Query,QueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\QueryWidget.cs,QueryWidget,The following statement contains a magic number: label.Ypad = 9;
Magic Number,FSpot.Query,QueryWidget,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\QueryWidget.cs,QueryWidget,The following statement contains a magic number: warning_box.Spacing = 6;
Missing Default,FSpot,FullScreenView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\FullScreenView.cs,OnKeyPressEvent,The following switch statement is missing a default case: switch (key.Key) {  			// quit only on certain keys  			case Gdk.Key.F:  			case Gdk.Key.f:  			case Gdk.Key.Q:  			case Gdk.Key.q:  			case Gdk.Key.F11:  			case Gdk.Key.Escape:  				Quit ();  				return true;  			// display infobox for 'i' key  			case Gdk.Key.i:  			case Gdk.Key.I:  				InfoAction (info_button' null);  				return true;  			case Gdk.Key.bracketleft:  				new RotateLeftAction (view.Item).Activate ();  				return true;  			case Gdk.Key.bracketright:  				new RotateRightAction (view.Item).Activate ();  				return true;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,SetViewMode,The following switch statement is missing a default case: switch (ViewMode) {  			case ModeType.IconView:  				if (view_notebook.CurrentPage != 0)  					view_notebook.CurrentPage = 0;    				display_timeline.Sensitive = true;  				display_filmstrip.Sensitive = false;  				group_selector.Visible = display_timeline.Active;    				if (photo_view.View.Loupe != null)  					loupe_menu_item.Active = false;  				JumpTo (photo_view.Item.Index);  				zoom_scale.Value = icon_view.Zoom;  				break;  			case ModeType.PhotoView:  				if (view_notebook.CurrentPage != 1)  					view_notebook.CurrentPage = 1;    				display_timeline.Sensitive = false;  				display_filmstrip.Sensitive = true;  				group_selector.Visible = false;    				JumpTo (icon_view.FocusCell);  				zoom_scale.Value = photo_view.NormalizedZoom;    				photo_view.View.GrabFocus ();  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleViewNotebookSwitchPage,The following switch statement is missing a default case: switch (view_notebook.CurrentPage) {  			case 0:  				SetViewMode (ModeType.IconView);  				break;  			case 1:  				SetViewMode (ModeType.PhotoView);  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,JumpTo,The following switch statement is missing a default case: switch (ViewMode) {  			case ModeType.PhotoView:  				photo_view.Item.Index = index;  				break;  			case ModeType.IconView:  				icon_view.ScrollTo (index);  				icon_view.Throb (index);  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleDoubleClicked,The following switch statement is missing a default case: switch (ViewMode) {  			case ModeType.IconView:  				icon_view.FocusCell = args.Items [0];  				SetViewMode (ModeType.PhotoView);  				break;  			case ModeType.PhotoView:  				SetViewMode (ModeType.IconView);  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleIconViewKeyPressEvent,The following switch statement is missing a default case: switch (args.Event.Key) {  			case Gdk.Key.F:  			case Gdk.Key.f:  				HandleViewFullscreen (sender' args);  				args.RetVal = true;  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandlePhotoViewKeyPressEvent,The following switch statement is missing a default case: switch (args.Event.Key) {  			case Gdk.Key.F:  			case Gdk.Key.f:  				HandleViewFullscreen (sender' args);  				args.RetVal = true;  				break;  			case Gdk.Key.Escape:  				SetViewMode (ModeType.IconView);  				args.RetVal = true;  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleZoomScaleValueChanged,The following switch statement is missing a default case: switch (ViewMode) {  			case ModeType.PhotoView:  				photo_view.View.ZoomChanged -= HandleZoomChanged;  				photo_view.NormalizedZoom = zoom_scale.Value;  				photo_view.View.ZoomChanged += HandleZoomChanged;  				break;  			case ModeType.IconView:  				icon_view.ZoomChanged -= HandleZoomChanged;  				icon_view.Zoom = zoom_scale.Value;  				icon_view.ZoomChanged += HandleZoomChanged;  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,HandleZoomChanged,The following switch statement is missing a default case: switch (ViewMode) {  			case ModeType.PhotoView:  				zoom = photo_view.NormalizedZoom;  				zoom_scale.Value = zoom;  				break;  			case ModeType.IconView:  				zoom = icon_view.Zoom;  				if (zoom == 0.0 || zoom == 100.0 || zoom != zoom_scale.Value)  					zoom_scale.Value = zoom;    				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,ZoomOut,The following switch statement is missing a default case: switch (ViewMode) {  			case ModeType.PhotoView:  				photo_view.ZoomOut ();  				break;  			case ModeType.IconView:  				icon_view.ZoomOut ();  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,ZoomIn,The following switch statement is missing a default case: switch (ViewMode) {  			case ModeType.PhotoView:  				double old_zoom = photo_view.Zoom;  				try {  					photo_view.ZoomIn ();  				} catch {  					photo_view.Zoom = old_zoom;  				}    				break;  			case ModeType.IconView:  				icon_view.ZoomIn ();  				break;  			}
Missing Default,FSpot,MainWindow,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case Preferences.MAIN_WINDOW_MAXIMIZED:  				if (Preferences.Get<bool> (key))  					main_window.Maximize ();  				else  					main_window.Unmaximize ();  				break;    			case Preferences.MAIN_WINDOW_X:  			case Preferences.MAIN_WINDOW_Y:  				main_window.Move (Preferences.Get<int> (Preferences.MAIN_WINDOW_X)'  					Preferences.Get<int> (Preferences.MAIN_WINDOW_Y));  				break;    			case Preferences.MAIN_WINDOW_WIDTH:  			case Preferences.MAIN_WINDOW_HEIGHT:  				if (Preferences.Get<int> (Preferences.MAIN_WINDOW_WIDTH) > 0 &&  				    Preferences.Get<int> (Preferences.MAIN_WINDOW_HEIGHT) > 0)  					main_window.Resize (Preferences.Get<int> (Preferences.MAIN_WINDOW_WIDTH)'  						Preferences.Get<int> (Preferences.MAIN_WINDOW_HEIGHT));    				break;    			case Preferences.SHOW_TOOLBAR:  				if (display_toolbar.Active != Preferences.Get<bool> (key))  					display_toolbar.Active = Preferences.Get<bool> (key);  				break;    			case Preferences.SHOW_SIDEBAR:  				if (display_sidebar.Active != Preferences.Get<bool> (key))  					display_sidebar.Active = Preferences.Get<bool> (key);  				break;    			case Preferences.SHOW_TIMELINE:  				if (display_timeline.Active != Preferences.Get<bool> (key))  					display_timeline.Active = Preferences.Get<bool> (key);  				break;    			case Preferences.SHOW_FILMSTRIP:  				if (display_filmstrip.Active != Preferences.Get<bool> (key)) {  					display_filmstrip.Active = Preferences.Get<bool> (key);  				}  				break;    			case Preferences.SHOW_TAGS:  				if (display_tags_menu_item.Active != Preferences.Get<bool> (key))  					display_tags_menu_item.Active = Preferences.Get<bool> (key);  				break;    			case Preferences.SHOW_DATES:  				if (display_dates_menu_item.Active != Preferences.Get<bool> (key))  					display_dates_menu_item.Active = Preferences.Get<bool> (key);  					//display_dates_menu_item.Toggle ();  				break;    			case Preferences.SHOW_RATINGS:  				if (display_ratings_menu_item.Active != Preferences.Get<bool> (key))  					display_ratings_menu_item.Active = Preferences.Get<bool> (key);  				break;    			case Preferences.GROUP_ADAPTOR_ORDER_ASC:  				group_selector.Adaptor.OrderAscending = Preferences.Get<bool> (key);  				reverse_order.Active = Preferences.Get<bool> (key);  				query.TimeOrderAsc = group_selector.Adaptor.OrderAscending;  				break;    			case Preferences.GLASS_POSITION:  				if (query.Count > 0) {  					// If the database has changed since this pref was saved' this could cause  					// an exception to be thrown.  					try {  						IPhoto photo = group_selector.Adaptor.PhotoFromIndex (Preferences.Get<int> (key));    						if (photo != null)  							JumpTo (query.IndexOf (photo));  					} catch (Exception) {  					}  				}    				icon_view.GrabFocus ();  				break;  			case Preferences.SIDEBAR_POSITION:  				if (main_hpaned.Position != Preferences.Get<int> (key))  					main_hpaned.Position = Preferences.Get<int> (key);  				break;    			case Preferences.TAG_ICON_SIZE:  				int s = Preferences.Get<int> (key);  				tag_icon_hidden.Active = (s == (int)Settings.IconSize.Hidden);  				tag_icon_small.Active = (s == (int)Settings.IconSize.Small);  				tag_icon_medium.Active = (s == (int)Settings.IconSize.Medium);  				tag_icon_large.Active = (s == (int)Settings.IconSize.Large);    				break;    			case Preferences.ZOOM:  				icon_view.Zoom = Preferences.Get<double> (key);  				break;    			case Preferences.METADATA_EMBED_IN_IMAGE:  				write_metadata = Preferences.Get<bool> (key);  				break;  			case Preferences.GNOME_MAILTO_ENABLED:  				send_mail.Visible = Preferences.Get<bool> (key);  				break;  			}
Missing Default,FSpot,MainSelection,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,IndexOf,The following switch statement is missing a default case: switch (win.ViewMode) {  				case ModeType.PhotoView:  					return item == win.photo_view.Item.Current ? 0 : -1;  				case ModeType.IconView:  					return win.icon_view.Selection.IndexOf (item);  				}
Missing Default,FSpot,MainSelection,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\MainWindow.cs,Contains,The following switch statement is missing a default case: switch (win.ViewMode) {  				case ModeType.PhotoView:  					return item == win.photo_view.Item.Current;  				case ModeType.IconView:  					return win.icon_view.Selection.Contains (item);  				}
Missing Default,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case Preferences.FILMSTRIP_ORIENTATION:  				PlaceFilmstrip ((Orientation) Preferences.Get<int> (key));  				break;  			}
Missing Default,FSpot,PhotoView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\PhotoView.cs,PlaceFilmstrip,The following switch statement is missing a default case: switch (pos) {  			case Orientation.Horizontal:  				widgets = inner_hbox.AllChildren.GetEnumerator ();  				while (widgets.MoveNext ())  					if (widgets.Current == filmstrip) {  						inner_hbox.Remove (filmstrip);  						break;  					}  				inner_vbox.PackStart (filmstrip' false' false' 0);  				inner_vbox.ReorderChild (filmstrip' 0);  				break;  			case Orientation.Vertical:  				widgets = inner_vbox.AllChildren.GetEnumerator ();  				while (widgets.MoveNext ())  					if (widgets.Current == filmstrip) {  						inner_vbox.Remove (filmstrip);  						break;  					}  				inner_hbox.PackEnd (filmstrip' false' false' 0);  				break;  			}
Missing Default,FSpot,SingleView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot\SingleView.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case Preferences.VIEWER_MAXIMIZED:  				if (Preferences.Get<bool> (key))  					Window.Maximize ();  				else  					Window.Unmaximize ();  				break;    			case Preferences.VIEWER_WIDTH:  			case Preferences.VIEWER_HEIGHT:  				int width' height;  				width = Preferences.Get<int> (Preferences.VIEWER_WIDTH);  				height = Preferences.Get<int> (Preferences.VIEWER_HEIGHT);    				if( width == 0 || height == 0 )  					break;    				Window.SetDefaultSize(width' height);    				Window.ReshowWithInitialSize();  				break;    			case Preferences.VIEWER_SHOW_TOOLBAR:  				if (toolbar_item.Active != Preferences.Get<bool> (key))  					toolbar_item.Active = Preferences.Get<bool> (key);    				toolbar_hbox.Visible = Preferences.Get<bool> (key);  				break;    			case Preferences.VIEWER_INTERPOLATION:  				if (Preferences.Get<bool> (key))  					image_view.Interpolation = Gdk.InterpType.Bilinear;  				else  					image_view.Interpolation = Gdk.InterpType.Nearest;  				break;    			case Preferences.VIEWER_SHOW_FILENAMES:  				if (filenames_item.Active != Preferences.Get<bool> (key))  					filenames_item.Active = Preferences.Get<bool> (key);  				break;    			case Preferences.VIEWER_TRANSPARENCY:  				if (Preferences.Get<string> (key) == "CHECK_PATTERN")  					image_view.CheckPattern = CheckPattern.Dark;  				else if (Preferences.Get<string> (key) == "COLOR")  					image_view.CheckPattern = new CheckPattern (Preferences.Get<string> (Preferences.VIEWER_TRANS_COLOR));  				else // NONE  					image_view.CheckPattern = new CheckPattern (image_view.Style.BaseColors [(int)Gtk.StateType.Normal]);  				break;    			case Preferences.VIEWER_TRANS_COLOR:  				if (Preferences.Get<string> (Preferences.VIEWER_TRANSPARENCY) == "COLOR")  					image_view.CheckPattern = new CheckPattern (Preferences.Get<string> (key));  				break;  			}
Missing Default,FSpot.Editors,CropEditor,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Editors\CropEditor.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case Preferences.CUSTOM_CROP_RATIOS:  				custom_constraints = new List<SelectionRatioDialog.SelectionConstraint> ();  				if (Preferences.Get<string[]> (key) != null) {  					XmlSerializer serializer = new XmlSerializer (typeof(SelectionRatioDialog.SelectionConstraint));  					foreach (string xml in Preferences.Get<string[]> (key))  						custom_constraints.Add ((SelectionRatioDialog.SelectionConstraint)serializer.Deserialize (new StringReader (xml)));  				}  				PopulateConstraints ();  				break;  			}
Missing Default,FSpot.UI.Dialog,ImportDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ImportDialog.cs,OnControllerStatusEvent,The following switch statement is missing a default case: switch (evnt) {  				case ImportEvent.SourceChanged:  					HideScanSpinner ();  					ResetPreview ();  					import_button.Sensitive = true;  					break;    				case ImportEvent.PhotoScanStarted:  					ShowScanSpinner ();  					break;    				case ImportEvent.PhotoScanFinished:  					HideScanSpinner ();  					break;    				case ImportEvent.ImportStarted:  					ShowImportProgress ();  					break;    				case ImportEvent.ImportFinished:  					ShowFailuresIfNeeded (Controller.FailedImports);  					Controller = null;  					Destroy ();  					break;    				case ImportEvent.ImportError:  					//FIXME  					break;  			}
Missing Default,FSpot.UI.Dialog,LastRolls,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\LastRollDialog.cs,SelectedRolls,The following switch statement is missing a default case: switch (combo_filter.Active) {  			case 0 : // at - Return the roll the user selected  				result.Add (rolls [combo_roll_1.Active]);  				break;  			case 1 : // after - Return all rolls from latest to the one the user selected  				for (uint k = 0; k <= combo_roll_1.Active; k++) {  					result.Add (rolls [k]);  				}  				break;  			case 2 : // between - Return all rolls between the two import rolls the user selected  				uint k1 = (uint)combo_roll_1.Active;  				uint k2 = (uint)combo_roll_2.Active;  				if (k1 > k2) {  					k1 = (uint)combo_roll_2.Active;  					k2 = (uint)combo_roll_1.Active;  				}  				for (uint k = k1; k <= k2; k++) {  					result.Add (rolls [k]);  				}  				break;  			}
Missing Default,FSpot.UI.Dialog,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\PreferenceDialog.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case Preferences.STORAGE_PATH:  				photosdir_chooser.SetCurrentFolder (Preferences.Get<string> (key));  				break;  			case Preferences.METADATA_EMBED_IN_IMAGE:  				bool embed_active = Preferences.Get<bool> (key);  				if (writemetadata_radio.Active != embed_active) {  					if (embed_active) {  						writemetadata_radio.Active = true;  					} else {  						dontwrite_radio.Active = true;  					}  				}  				always_sidecar_check.Sensitive = embed_active;  				break;  			case Preferences.METADATA_ALWAYS_USE_SIDECAR:  				bool always_use_sidecar = Preferences.Get<bool> (key);  				always_sidecar_check.Active = always_use_sidecar;  				break;  			case Preferences.GTK_RC:  				pref = Preferences.Get<string> (key);  				if (string.IsNullOrEmpty (pref)) {  					theme_combo.Active = 0;  					break;  				}  				i = 0;  				foreach (object [] row in theme_combo.Model as ListStore) {  					if (pref == (string)row [1]) {  						theme_combo.Active = i;  						break;  					}  					i++;  				}  				break;  			case Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE:  				pref = Preferences.Get<string> (key);  				if (string.IsNullOrEmpty (pref)) {  					screenprofile_combo.Active = 0;  					break;  				}  				if (pref == "_x_profile_" && FSpot.ColorManagement.XProfile != null) {  					screenprofile_combo.Active = 1;  					break;  				}  				i = 0;  				foreach (object [] row in screenprofile_combo.Model as ListStore) {  					if (pref == (string)row [0]) {  						screenprofile_combo.Active = i;  						break;  					}  					i++;  				}  				break;  			case Preferences.COLOR_MANAGEMENT_OUTPUT_PROFILE:  				pref = Preferences.Get<string> (key);  				if (string.IsNullOrEmpty (pref)) {  					printprofile_combo.Active = 0;  					break;  				}  				i = 0;  				foreach (object [] row in printprofile_combo.Model as ListStore) {  					if (pref == (string)row [0]) {  						printprofile_combo.Active = i;  						break;  					}  					i++;  				}  				break;  			}
Missing Default,FSpot.UI.Dialog,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\PreferenceDialog.cs,HandleScreenProfileComboChanged,The following switch statement is missing a default case: switch ((int)combo.Model.GetValue (iter' 1)) {  				case 0:  					Preferences.Set (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE' string.Empty);  					break;  				case -1:  					Preferences.Set (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE' "_x_profile_");  					break;  				case 1:  					Preferences.Set (Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE' (string)combo.Model.GetValue (iter' 0));  					break;  				}
Missing Default,FSpot.UI.Dialog,PreferenceDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\PreferenceDialog.cs,HandlePrintProfileComboChanged,The following switch statement is missing a default case: switch ((int)combo.Model.GetValue (iter' 1)) {  				case 0:  					Preferences.Set (Preferences.COLOR_MANAGEMENT_OUTPUT_PROFILE' string.Empty);  					break;  				case 1:  					Preferences.Set (Preferences.COLOR_MANAGEMENT_OUTPUT_PROFILE' (string)combo.Model.GetValue (iter' 0));  					break;  				}
Missing Default,FSpot.UI.Dialog,ProgressDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\ProgressDialog.cs,ProgressDialog,The following switch statement is missing a default case: switch (cancel_button_type) {  			case CancelButtonType.Cancel:  				button = (Gtk.Button)AddButton (Gtk.Stock.Cancel' (int) ResponseType.Cancel);  				break;  			case CancelButtonType.Stop:  				button = (Gtk.Button)AddButton (Gtk.Stock.Stop' (int) ResponseType.Cancel);  				break;  			}
Missing Default,FSpot.UI.Dialog,SelectionRatioDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\SelectionRatioDialog.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case Preferences.CUSTOM_CROP_RATIOS:  				Populate ();  				break;  			}
Missing Default,FSpot.UI.Dialog,VersionNameDialog,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.UI.Dialog\VersionNameDialog.cs,VersionNameDialog,The following switch statement is missing a default case: switch (request_type) {  			case RequestType.Create:  				Title = Catalog.GetString ("Create New Version");  				prompt_label.Text = Catalog.GetString ("Name:");  				break;    			case RequestType.Rename:  				Title = Catalog.GetString ("Rename Version");  				prompt_label.Text = Catalog.GetString ("New name:");  				version_name_entry.Text = photo.GetVersion (photo.DefaultVersionId).Name;  				version_name_entry.SelectRegion (0' -1);  				break;  			}
Missing Default,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnSizeRequested,The following switch statement is missing a default case: switch (Orientation) {  			case Orientation.Horizontal:  				if (min_length % BackgroundTile.Width != 0)  					requisition.Width += BackgroundTile.Width - min_length % BackgroundTile.Width;  				break;  			case Orientation.Vertical:  				if (min_height % BackgroundTile.Height != 0)  					requisition.Height += BackgroundTile.Height - min_height % BackgroundTile.Height;  				break;  			}
Missing Default,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnScrollEvent,The following switch statement is missing a default case: switch (evnt.Direction) {  			case ScrollDirection.Up:  			case ScrollDirection.Right:  				Position = animation.To - shift;  				return true;  			case ScrollDirection.Down:  			case ScrollDirection.Left:  				Position = animation.To + shift;  				return true;  			}
Missing Default,FSpot.Widgets,Filmstrip,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Filmstrip.cs,OnKeyPressEvent,The following switch statement is missing a default case: switch (evnt.Key) {  			case Gdk.Key.Page_Down:  			case Gdk.Key.Down:  			case Gdk.Key.Right:  				ActiveItem ++;  				return true;    			case Gdk.Key.Page_Up:  			case Gdk.Key.Up:  			case Gdk.Key.Left:  				ActiveItem --;  				return true;  			}
Missing Default,FSpot.Widgets,Loupe,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\Loupe.cs,HandleButtonPressEvent,The following switch statement is missing a default case: switch (args.Event.Type) {  			case EventType.ButtonPress:  				if (args.Event.Button == 1) {  					start = new Gdk.Point ((int)args.Event.X' (int)args.Event.Y);  					start_root = new Gdk.Point ((int)args.Event.XRoot' (int)args.Event.YRoot);  					start_hot = hotspot;    					Gdk.Point win;  					GdkWindow.GetOrigin (out win.X' out win.Y);  					start_hot.X += win.X;  					start_hot.Y += win.Y;    					dragging = true;  					rotate = (args.Event.State & ModifierType.ShiftMask) > 0;  					start_angle = Angle;  				} else {  					Angle += Math.PI /8;  				}  				break;  			case EventType.TwoButtonPress:  				dragging = false;  				App.Instance.Organizer.HideLoupe ();  				break;  			}
Missing Default,FSpot.Widgets,PhotoImageView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PhotoImageView.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case Preferences.COLOR_MANAGEMENT_DISPLAY_PROFILE:  				Reload ();  				break;  			}
Missing Default,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,HandleIconViewKeyPress,The following switch statement is missing a default case: switch (args.Event.Key) {  			case Key.v:  				ShowHistogram = false;  				UpdateItem ();  				args.RetVal = true;  				break;  			case Key.V:  				ShowHistogram = true;  				UpdateItem ();  				args.RetVal = true;  				break;  			}
Missing Default,FSpot.Widgets,PreviewPopup,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\PreviewPopup.cs,HandleKeyRelease,The following switch statement is missing a default case: switch (args.Event.Key) {  			case Key.v:  			case Key.V:  			case Key.h:  				Hide ();  				break;  			}
Missing Default,FSpot.Widgets,SelectionCollectionGridView,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Widgets\SelectionCollectionGridView.cs,OnButtonPressEvent,The following switch statement is missing a default case: switch (evnt.Type) {  			case EventType.TwoButtonPress:  				if (evnt.Button != 1 ||  				    (evnt.State & (ModifierType.ControlMask | ModifierType.ShiftMask)) != 0)  					return false;    				DoubleClicked?.Invoke (this' new BrowsableEventArgs (cell_num' null));  				return true;    			case EventType.ButtonPress:  				GrabFocus ();  				// on a cell : context menu if button 3  				// cell selection is done on button release  				if (evnt.Button == 3) {  					ContextMenu (evnt' cell_num);  					return true;  				}  				return false;  			}
Missing Default,FSpot.Query,Literal,C:\repos\mono_f-spot\src\Clients\FSpot\FSpot.Query\Literal.cs,KeyHandler,The following switch statement is missing a default case: switch (args.Event.Key) {  			case Gdk.Key.Delete:  				RemoveFocusedLiterals ();  				args.RetVal = true;  				return;  			}
