Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FSpot.Utils,GenericMethodCacheKey,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 12
Long Parameter List,FSpot.Utils,FileExtensions,C:\repos\mono_f-spot\src\Core\FSpot.Utils\FileExtensions.cs,CopyRecursive,The method has 5 parameters. Parameters: source' target' flags' cancellable' callback
Long Parameter List,FSpot.Utils,GtkUtil,C:\repos\mono_f-spot\src\Core\FSpot.Utils\GtkUtil.cs,MakeMenuItem,The method has 5 parameters. Parameters: menu' label' image_name' e' enabled
Long Parameter List,FSpot.Utils,GtkUtil,C:\repos\mono_f-spot\src\Core\FSpot.Utils\GtkUtil.cs,MakeCheckMenuItem,The method has 6 parameters. Parameters: menu' label' e' enabled' active' as_radio
Long Parameter List,FSpot.Utils,PixbufUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\PixbufUtils.cs,Fit,The method has 6 parameters. Parameters: pixbuf' dest_width' dest_height' upscale_smaller' fit_width' fit_height
Long Parameter List,FSpot.Utils,PixbufUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\PixbufUtils.cs,Fit,The method has 7 parameters. Parameters: orig_width' orig_height' dest_width' dest_height' upscale_smaller' fit_width' fit_height
Long Parameter List,FSpot.Utils,PixbufUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\PixbufUtils.cs,gdk_pixbuf_save,The method has 7 parameters. Parameters: raw' filename' type' error' optlabel1' optvalue1' dummy
Long Parameter List,FSpot.Utils,TypeExtensions,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetGenericMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,FSpot.Utils,TypeExtensions,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,TryResolve,The method has 5 parameters. Parameters: resolveType' name' parameters' options' resolvedType
Long Parameter List,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ConstructType,The method has 5 parameters. Parameters: requestedType' implementationType' constructor' parameters' options
Long Identifier,FSpot.Utils,ResolveOptions,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,,The length of the parameter _FailUnregisteredAndNameNotFound is 32.
Long Statement,FSpot.Utils,Metadata,C:\repos\mono_f-spot\src\Core\FSpot.Utils\Metadata.cs,SaveSafely,The length of the statement  "					Hyena.Log.WarningFormat ($"Metadata of file {photo_uri} may be corrupt' refusing to write to it' falling back to XMP sidecar."); " is 128.
Long Statement,FSpot.Utils,PixbufUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\PixbufUtils.cs,ScaleToMaxSize,The length of the statement  "				result = pixbuf.ScaleSimple (scale_width' scale_height' (scale_width > 20) ? Gdk.InterpType.Bilinear : Gdk.InterpType.Nearest); " is 127.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' null); " is 149.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' DuplicateImplementationActions.RegisterSingle' null); " is 120.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 166.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 137.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' duplicateAction' registrationPredicate); " is 136.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,Register,The length of the statement  "            return this.RegisterInternal(registerType' string.Empty' GetDefaultObjectFactory(registerType' registerImplementation)); " is 120.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(registerType' string.Empty' new InstanceFactory(registerType' registerImplementation' instance)); " is 121.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,RegisterMultiple,The length of the statement  "                    throw new ArgumentException(string.Format("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 135.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,RegisterMultiple,The length of the statement  "                var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 183.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 121.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,CanResolve,The length of the statement  "            return CanResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 124.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                    .Where(type => type.IsClass() && (type.IsAbstract() == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition()))) " is 169.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                             where ((type.IsInterface() || type.IsAbstract()) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 128.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,IsIgnoredType,The length of the statement  "                t => (t.GetConstructors(BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface() || t.IsAbstract())' " is 122.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 208.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,CanResolveInternal,The length of the statement  "                return (GetBestConstructor(checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal(registration' parameters' options) : false; " is 167.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<String' object>))) " is 161.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 216.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            //			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments()' new[] { typeof(bool) }); " is 173.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,CanConstruct,The length of the statement  "                if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ConstructType,The length of the statement  "                constructor = GetBestConstructor(typeToConstruct' parameters' options) ?? GetTypeConstructors(typeToConstruct).LastOrDefault(); " is 127.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,BuildUpInternal,The length of the statement  "            //							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,BuildUpInternal,The length of the statement  "                        property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            var registrations = _RegisteredTypes.Keys.Where(tr => tr.Type == resolveType).Concat(GetParentRegistrationsForType(resolveType)).Distinct(); " is 140.
Long Statement,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            return registrations.Select(registration => this.ResolveInternal(registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 137.
Long Statement,FSpot.Utils,RegisterOptions,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                return instance._Container.AddUpdateRegistration(instance._Registration' currentFactory.GetCustomObjectLifetimeVariant(lifetimeProvider' errorString)); " is 151.
Long Statement,FSpot.Utils,MultiRegisterOptions,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                instance._RegisterOptions = instance.ExecuteOnAllRegisterOptions(ro => RegisterOptions.ToCustomLifetimeManager(ro' lifetimeProvider' errorString)); " is 147.
Long Statement,FSpot.Utils,DelegateFactory,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,FSpot.Utils,WeakDelegateFactory,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,FSpot.Utils,InstanceFactory,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,FSpot.Utils,WeakInstanceFactory,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Complex Conditional,FSpot.Utils,UriUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\UriUtils.cs,EscapeString,The conditional expression  "(c <= 0x20) || (c >= 0x7f) ||   					    ("<>%\"{}|\\^`".IndexOf (c) != -1) ||  					    (escapeHex && (c == '#')) ||  					    (escapeBrackets && (c == '[' || c == ']')) ||  					    (escapeReserved && (";/?:@&=+$'".IndexOf (c) != -1))"  is complex.
Empty Catch Block,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: byte [] gdkPixels = new byte [width * height * 4];
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: Surface surface = new ImageSurface (gdkPixels' format' width' height' 4 * width);
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: for (j = height; j > 0; j--) {  				int p = (height - j) * 4 * width;  				int end = p + 4 * width;  				byte tmp;    				while (p < end) {  					tmp = gdkPixels [p + 0];  					if (System.BitConverter.IsLittleEndian) {  						gdkPixels [p + 0] = gdkPixels [p + 2];  						gdkPixels [p + 2] = tmp;  					} else {  						gdkPixels [p + 0] = gdkPixels [p + 1];  						gdkPixels [p + 1] = gdkPixels [p + 2];  						gdkPixels [p + 2] = gdkPixels [p + 3];  						gdkPixels [p + 3] = tmp;  					}  					p += 4;  				}  			}
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: Pixbuf pixbuf = new Pixbuf (gdkPixels' Colorspace.Rgb' true' 8' width' height' 4 * width);
Magic Number,FSpot.Utils,CairoUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\CairoUtils.cs,PixbufFromSurface,The following statement contains a magic number: Pixbuf pixbuf = new Pixbuf (gdkPixels' Colorspace.Rgb' true' 8' width' height' 4 * width);
Magic Number,FSpot.Utils,GdkUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\GdkUtils.cs,CreateEmptyCursor,The following statement contains a magic number: try {  				Gdk.Pixbuf empty = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' 1' 1);  				empty.Fill (0x00000000);  				return new Gdk.Cursor (display' empty' 0' 0);  			} catch (Exception e){  				Log.Exception (e);  				return null;  			}
Magic Number,FSpot.Utils,Metadata,C:\repos\mono_f-spot\src\Core\FSpot.Utils\Metadata.cs,Parse,The following statement contains a magic number: if (mime.StartsWith ("application/x-extension-")) {                  // Works around broken metadata detection - https://bugzilla.gnome.org/show_bug.cgi?id=624781                  mime = string.Format ($"taglib/{mime.Substring (24)}");              }
Magic Number,FSpot.Utils,PixbufUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\PixbufUtils.cs,ScaleToMaxSize,The following statement contains a magic number: if (upscale || (scale < 1.0))  				result = pixbuf.ScaleSimple (scale_width' scale_height' (scale_width > 20) ? Gdk.InterpType.Bilinear : Gdk.InterpType.Nearest);  			else  				result = pixbuf.Copy ();
Magic Number,FSpot.Utils,UriUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\UriUtils.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				// mark        = "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")"  				// control     = <US-ASCII coded characters 00-1F and 7F hexadecimal>  				// space       = <US-ASCII coded character 20 hexadecimal>  				// delims      = "<" | ">" | "#" | "%" | <">  				// unwise      = "{" | "}" | "|" | "\" | "^" | "[" | "]" | "`"    				// check for escape code already placed in str'   				// i.e. for encoding that follows the pattern   				// "%hexhex" in a string' where "hex" is a digit from 0-9   				// or a letter from A-F (case-insensitive).  				if (Uri.IsHexEncoding (str'i)) {  					// if 'yes ' copy it as is  					s.Append(str.Substring (i' 3));  					i += 2;  					continue;  				}    				byte [] data = Encoding.UTF8.GetBytes (new char[] {str[i]});  				int length = data.Length;  				for (int j = 0; j < length; j++) {  					char c = (char) data [j];  					// reserved    = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | "'"  					if ((c <= 0x20) || (c >= 0x7f) ||   					    ("<>%\"{}|\\^`".IndexOf (c) != -1) ||  					    (escapeHex && (c == '#')) ||  					    (escapeBrackets && (c == '[' || c == ']')) ||  					    (escapeReserved && (";/?:@&=+$'".IndexOf (c) != -1))) {  						s.Append (Uri.HexEscape (c));  						continue;  					}	  					s.Append (c);  				}  			}
Magic Number,FSpot.Utils,UriUtils,C:\repos\mono_f-spot\src\Core\FSpot.Utils\UriUtils.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				// mark        = "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")"  				// control     = <US-ASCII coded characters 00-1F and 7F hexadecimal>  				// space       = <US-ASCII coded character 20 hexadecimal>  				// delims      = "<" | ">" | "#" | "%" | <">  				// unwise      = "{" | "}" | "|" | "\" | "^" | "[" | "]" | "`"    				// check for escape code already placed in str'   				// i.e. for encoding that follows the pattern   				// "%hexhex" in a string' where "hex" is a digit from 0-9   				// or a letter from A-F (case-insensitive).  				if (Uri.IsHexEncoding (str'i)) {  					// if 'yes ' copy it as is  					s.Append(str.Substring (i' 3));  					i += 2;  					continue;  				}    				byte [] data = Encoding.UTF8.GetBytes (new char[] {str[i]});  				int length = data.Length;  				for (int j = 0; j < length; j++) {  					char c = (char) data [j];  					// reserved    = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | "'"  					if ((c <= 0x20) || (c >= 0x7f) ||   					    ("<>%\"{}|\\^`".IndexOf (c) != -1) ||  					    (escapeHex && (c == '#')) ||  					    (escapeBrackets && (c == '[' || c == ']')) ||  					    (escapeReserved && (";/?:@&=+$'".IndexOf (c) != -1))) {  						s.Append (Uri.HexEscape (c));  						continue;  					}	  					s.Append (c);  				}  			}
Magic Number,FSpot.Utils,GenericMethodCacheKey,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,FSpot.Utils,GenericMethodCacheKey,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,FSpot.Utils,GenericMethodCacheKey,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,FSpot.Utils,TinyIoCContainer,C:\repos\mono_f-spot\src\Core\FSpot.Utils\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))              //#endif              {                  Type returnType = genericArguments[2];                    var name = Expression.Parameter(typeof(string)' "name");                  var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");                    //#if NETFX_CORE                  //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));                  //#else                  MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) });                  //#endif                  resolveMethod = resolveMethod.MakeGenericMethod(returnType);                    var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));                    var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();                    return resolveLambda;              }
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  				((uint)((((uint)(val) & (uint)0x000000ffU) << 24) |  					 (((uint)(val) & (uint)0x0000ff00U) << 8) |  					 (((uint)(val) & (uint)0x00ff0000U) >> 8) |  					 (((uint)(val) & (uint)0xff000000U) >> 24)))  				: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  				((uint)((((uint)(val) & (uint)0x000000ffU) << 24) |  					 (((uint)(val) & (uint)0x0000ff00U) << 8) |  					 (((uint)(val) & (uint)0x00ff0000U) >> 8) |  					 (((uint)(val) & (uint)0xff000000U) >> 24)))  				: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  				((uint)((((uint)(val) & (uint)0x000000ffU) << 24) |  					 (((uint)(val) & (uint)0x0000ff00U) << 8) |  					 (((uint)(val) & (uint)0x00ff0000U) >> 8) |  					 (((uint)(val) & (uint)0xff000000U) >> 24)))  				: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  				((uint)((((uint)(val) & (uint)0x000000ffU) << 24) |  					 (((uint)(val) & (uint)0x0000ff00U) << 8) |  					 (((uint)(val) & (uint)0x00ff0000U) >> 8) |  					 (((uint)(val) & (uint)0xff000000U) >> 24)))  				: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  				((ushort)((ushort)(val >> 8) | (ushort)(val << 8)))  				: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  				((ushort)((ushort)(val >> 8) | (ushort)(val << 8)))  				: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return ((ushort)((ushort)(val >> 8) | (ushort)(val << 8)));
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return ((ushort)((ushort)(val >> 8) | (ushort)(val << 8)));
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
Magic Number,FSpot,BitConverter,C:\repos\mono_f-spot\src\Core\FSpot.Utils\BitConverter.cs,Swap,The following statement contains a magic number: return (little != System.BitConverter.IsLittleEndian) ?  		((ulong)((((ulong)(val) & (ulong)0x00000000000000ffU) << 56) |  			  (((ulong)(val) & (ulong)0x000000000000ff00U) << 40) |  			  (((ulong)(val) & (ulong)0x0000000000ff0000U) << 24) |  			  (((ulong)(val) & (ulong)0x00000000ff000000U) << 8) |  			  (((ulong)(val) & (ulong)0x000000ff00000000U) >> 8) |  			  (((ulong)(val) & (ulong)0x0000ff0000000000U) >> 24) |  			  (((ulong)(val) & (ulong)0x00ff000000000000U) >> 40) |  			  (((ulong)(val) & (ulong)0xff00000000000000U) >> 56)))  			: val;
