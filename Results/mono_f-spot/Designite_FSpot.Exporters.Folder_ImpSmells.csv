Implementation smell,Namespace,Class,File,Method,Description
Long Method,FSpot.Exporters.Folder,FolderExport,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderExport.cs,Upload,The method has 103 lines of code.
Complex Method,FSpot.Exporters.Folder,FolderExport,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderExport.cs,Upload,Cyclomatic complexity of the method is 12
Complex Method,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,GenerateLayout,Cyclomatic complexity of the method is 11
Long Parameter List,FSpot.Exporters.Folder,ScaleRequest,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderGallery.cs,ScaleRequest,The method has 5 parameters. Parameters: name' width' height' skip' exif
Long Statement,FSpot.Exporters.Folder,OriginalGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\OriginalGallery.cs,CreateHtaccess,The length of the statement  "			htaccess.Write("<Files info.txt>" + Environment.NewLine + "\tdeny from all" + Environment.NewLine+ "</Files>" + Environment.NewLine); " is 133.
Long Statement,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SavePhotoHtmlIndex,The length of the statement  "			writer.WriteLine ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"); " is 135.
Long Statement,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,WriteStyleSelectionBox,The length of the statement  "			writer.Write ("style=\"display:none;\">" + Catalog.GetString("Hide Styles") + "</span></a></span>" + Environment.NewLine); " is 122.
Long Statement,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SaveTagsPage,The length of the statement  "			writer.WriteLine ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"); " is 135.
Long Statement,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SaveTagIndex,The length of the statement  "			writer.WriteLine ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"); " is 135.
Long Statement,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SaveHtmlIndex,The length of the statement  "			writer.WriteLine ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"); " is 135.
Magic Number,FSpot.Exporters.Folder,FolderExport,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderExport.cs,LoadPreference,The following statement contains a magic number: switch (key) {  			case SCALE_KEY:  				if (scale_check.Active != Preferences.Get<bool> (key))  					scale_check.Active = Preferences.Get<bool> (key);  				break;    			case SIZE_KEY:  				int size;  				if (Preferences.TryGet<int> (key' out size))  					size_spin.Value = (double) size;  				else  					size_spin.Value = 400;  				break;    			case OPEN_KEY:  				if (open_check.Active != Preferences.Get<bool> (key))  					open_check.Active = Preferences.Get<bool> (key);  				break;    			case EXPORT_TAGS_KEY:  				if (export_tags_check.Active != Preferences.Get<bool> (key))  					export_tags_check.Active = Preferences.Get<bool> (key);  				break;    			case EXPORT_TAG_ICONS_KEY:  				if (export_tag_icons_check.Active != Preferences.Get<bool> (key))  					export_tag_icons_check.Active = Preferences.Get<bool> (key);  				break;    			case METHOD_KEY:  				static_radio.Active = (Preferences.Get<string> (key) == "static");  				original_radio.Active = (Preferences.Get<string> (key) == "original");  				plain_radio.Active = (Preferences.Get<string> (key) == "folder");  				break;  			}
Magic Number,FSpot.Exporters.Folder,FolderGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderGallery.cs,ProcessImage,The following statement contains a magic number: using (FilterRequest request = new FilterRequest (photo.DefaultVersion.Uri)) {  				filter_set.Convert (request);  				if (request.Current.LocalPath == path)  					request.Preserve (request.Current);  				else  					System.IO.File.Copy (request.Current.LocalPath' path' true);    				if (photo != null && photo is Photo && App.Instance.Database != null)  					App.Instance.Database.Exports.Create ((photo as Photo).Id' (photo as Photo).DefaultVersionId'  								      ExportStore.FolderExportType'  								      // FIXME this is wrong' the final path is the one  								      // after the Xfer.  								      new SafeUri (path).ToString ());    				for (int i = 1; i < requests.Length; i++) {    					req = requests [i];  					if (scale && req.AvoidScale (Size))  						continue;    					FilterSet req_set = new FilterSet ();  					req_set.Add (new ResizeFilter ((uint)Math.Max (req.Width' req.Height)));    					bool sharpen;  					try {  						sharpen = Preferences.Get<bool> (FolderExport.SHARPEN_KEY);  					} catch (NullReferenceException) {  						sharpen = true;  						Preferences.Set (FolderExport.SHARPEN_KEY' true);  					}    					if (sharpen) {  						if (req.Name == "lq")  							req_set.Add (new SharpFilter (0.1' 2' 4));  						if (req.Name == "thumbs")  							req_set.Add (new SharpFilter (0.1' 2' 5));  					}  					using (FilterRequest tmp_req = new FilterRequest (photo.DefaultVersion.Uri)) {  						req_set.Convert (tmp_req);  						MakeDir (SubdirPath (req.Name));  						path = SubdirPath (req.Name' ImageName (image_num));  						System.IO.File.Copy (tmp_req.Current.LocalPath' path' true);  					}  				}  			}
Magic Number,FSpot.Exporters.Folder,FolderGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderGallery.cs,ProcessImage,The following statement contains a magic number: using (FilterRequest request = new FilterRequest (photo.DefaultVersion.Uri)) {  				filter_set.Convert (request);  				if (request.Current.LocalPath == path)  					request.Preserve (request.Current);  				else  					System.IO.File.Copy (request.Current.LocalPath' path' true);    				if (photo != null && photo is Photo && App.Instance.Database != null)  					App.Instance.Database.Exports.Create ((photo as Photo).Id' (photo as Photo).DefaultVersionId'  								      ExportStore.FolderExportType'  								      // FIXME this is wrong' the final path is the one  								      // after the Xfer.  								      new SafeUri (path).ToString ());    				for (int i = 1; i < requests.Length; i++) {    					req = requests [i];  					if (scale && req.AvoidScale (Size))  						continue;    					FilterSet req_set = new FilterSet ();  					req_set.Add (new ResizeFilter ((uint)Math.Max (req.Width' req.Height)));    					bool sharpen;  					try {  						sharpen = Preferences.Get<bool> (FolderExport.SHARPEN_KEY);  					} catch (NullReferenceException) {  						sharpen = true;  						Preferences.Set (FolderExport.SHARPEN_KEY' true);  					}    					if (sharpen) {  						if (req.Name == "lq")  							req_set.Add (new SharpFilter (0.1' 2' 4));  						if (req.Name == "thumbs")  							req_set.Add (new SharpFilter (0.1' 2' 5));  					}  					using (FilterRequest tmp_req = new FilterRequest (photo.DefaultVersion.Uri)) {  						req_set.Convert (tmp_req);  						MakeDir (SubdirPath (req.Name));  						path = SubdirPath (req.Name' ImageName (image_num));  						System.IO.File.Copy (tmp_req.Current.LocalPath' path' true);  					}  				}  			}
Magic Number,FSpot.Exporters.Folder,FolderGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderGallery.cs,ProcessImage,The following statement contains a magic number: using (FilterRequest request = new FilterRequest (photo.DefaultVersion.Uri)) {  				filter_set.Convert (request);  				if (request.Current.LocalPath == path)  					request.Preserve (request.Current);  				else  					System.IO.File.Copy (request.Current.LocalPath' path' true);    				if (photo != null && photo is Photo && App.Instance.Database != null)  					App.Instance.Database.Exports.Create ((photo as Photo).Id' (photo as Photo).DefaultVersionId'  								      ExportStore.FolderExportType'  								      // FIXME this is wrong' the final path is the one  								      // after the Xfer.  								      new SafeUri (path).ToString ());    				for (int i = 1; i < requests.Length; i++) {    					req = requests [i];  					if (scale && req.AvoidScale (Size))  						continue;    					FilterSet req_set = new FilterSet ();  					req_set.Add (new ResizeFilter ((uint)Math.Max (req.Width' req.Height)));    					bool sharpen;  					try {  						sharpen = Preferences.Get<bool> (FolderExport.SHARPEN_KEY);  					} catch (NullReferenceException) {  						sharpen = true;  						Preferences.Set (FolderExport.SHARPEN_KEY' true);  					}    					if (sharpen) {  						if (req.Name == "lq")  							req_set.Add (new SharpFilter (0.1' 2' 4));  						if (req.Name == "thumbs")  							req_set.Add (new SharpFilter (0.1' 2' 5));  					}  					using (FilterRequest tmp_req = new FilterRequest (photo.DefaultVersion.Uri)) {  						req_set.Convert (tmp_req);  						MakeDir (SubdirPath (req.Name));  						path = SubdirPath (req.Name' ImageName (image_num));  						System.IO.File.Copy (tmp_req.Current.LocalPath' path' true);  					}  				}  			}
Magic Number,FSpot.Exporters.Folder,FolderGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderGallery.cs,ProcessImage,The following statement contains a magic number: using (FilterRequest request = new FilterRequest (photo.DefaultVersion.Uri)) {  				filter_set.Convert (request);  				if (request.Current.LocalPath == path)  					request.Preserve (request.Current);  				else  					System.IO.File.Copy (request.Current.LocalPath' path' true);    				if (photo != null && photo is Photo && App.Instance.Database != null)  					App.Instance.Database.Exports.Create ((photo as Photo).Id' (photo as Photo).DefaultVersionId'  								      ExportStore.FolderExportType'  								      // FIXME this is wrong' the final path is the one  								      // after the Xfer.  								      new SafeUri (path).ToString ());    				for (int i = 1; i < requests.Length; i++) {    					req = requests [i];  					if (scale && req.AvoidScale (Size))  						continue;    					FilterSet req_set = new FilterSet ();  					req_set.Add (new ResizeFilter ((uint)Math.Max (req.Width' req.Height)));    					bool sharpen;  					try {  						sharpen = Preferences.Get<bool> (FolderExport.SHARPEN_KEY);  					} catch (NullReferenceException) {  						sharpen = true;  						Preferences.Set (FolderExport.SHARPEN_KEY' true);  					}    					if (sharpen) {  						if (req.Name == "lq")  							req_set.Add (new SharpFilter (0.1' 2' 4));  						if (req.Name == "thumbs")  							req_set.Add (new SharpFilter (0.1' 2' 5));  					}  					using (FilterRequest tmp_req = new FilterRequest (photo.DefaultVersion.Uri)) {  						req_set.Convert (tmp_req);  						MakeDir (SubdirPath (req.Name));  						path = SubdirPath (req.Name' ImageName (image_num));  						System.IO.File.Copy (tmp_req.Current.LocalPath' path' true);  					}  				}  			}
Magic Number,FSpot.Exporters.Folder,FolderGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderGallery.cs,ProcessImage,The following statement contains a magic number: using (FilterRequest request = new FilterRequest (photo.DefaultVersion.Uri)) {  				filter_set.Convert (request);  				if (request.Current.LocalPath == path)  					request.Preserve (request.Current);  				else  					System.IO.File.Copy (request.Current.LocalPath' path' true);    				if (photo != null && photo is Photo && App.Instance.Database != null)  					App.Instance.Database.Exports.Create ((photo as Photo).Id' (photo as Photo).DefaultVersionId'  								      ExportStore.FolderExportType'  								      // FIXME this is wrong' the final path is the one  								      // after the Xfer.  								      new SafeUri (path).ToString ());    				for (int i = 1; i < requests.Length; i++) {    					req = requests [i];  					if (scale && req.AvoidScale (Size))  						continue;    					FilterSet req_set = new FilterSet ();  					req_set.Add (new ResizeFilter ((uint)Math.Max (req.Width' req.Height)));    					bool sharpen;  					try {  						sharpen = Preferences.Get<bool> (FolderExport.SHARPEN_KEY);  					} catch (NullReferenceException) {  						sharpen = true;  						Preferences.Set (FolderExport.SHARPEN_KEY' true);  					}    					if (sharpen) {  						if (req.Name == "lq")  							req_set.Add (new SharpFilter (0.1' 2' 4));  						if (req.Name == "thumbs")  							req_set.Add (new SharpFilter (0.1' 2' 5));  					}  					using (FilterRequest tmp_req = new FilterRequest (photo.DefaultVersion.Uri)) {  						req_set.Convert (tmp_req);  						MakeDir (SubdirPath (req.Name));  						path = SubdirPath (req.Name' ImageName (image_num));  						System.IO.File.Copy (tmp_req.Current.LocalPath' path' true);  					}  				}  			}
Magic Number,FSpot.Exporters.Folder,FolderGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderGallery.cs,ProcessImage,The following statement contains a magic number: using (FilterRequest request = new FilterRequest (photo.DefaultVersion.Uri)) {  				filter_set.Convert (request);  				if (request.Current.LocalPath == path)  					request.Preserve (request.Current);  				else  					System.IO.File.Copy (request.Current.LocalPath' path' true);    				if (photo != null && photo is Photo && App.Instance.Database != null)  					App.Instance.Database.Exports.Create ((photo as Photo).Id' (photo as Photo).DefaultVersionId'  								      ExportStore.FolderExportType'  								      // FIXME this is wrong' the final path is the one  								      // after the Xfer.  								      new SafeUri (path).ToString ());    				for (int i = 1; i < requests.Length; i++) {    					req = requests [i];  					if (scale && req.AvoidScale (Size))  						continue;    					FilterSet req_set = new FilterSet ();  					req_set.Add (new ResizeFilter ((uint)Math.Max (req.Width' req.Height)));    					bool sharpen;  					try {  						sharpen = Preferences.Get<bool> (FolderExport.SHARPEN_KEY);  					} catch (NullReferenceException) {  						sharpen = true;  						Preferences.Set (FolderExport.SHARPEN_KEY' true);  					}    					if (sharpen) {  						if (req.Name == "lq")  							req_set.Add (new SharpFilter (0.1' 2' 4));  						if (req.Name == "thumbs")  							req_set.Add (new SharpFilter (0.1' 2' 5));  					}  					using (FilterRequest tmp_req = new FilterRequest (photo.DefaultVersion.Uri)) {  						req_set.Convert (tmp_req);  						MakeDir (SubdirPath (req.Name));  						path = SubdirPath (req.Name' ImageName (image_num));  						System.IO.File.Copy (tmp_req.Current.LocalPath' path' true);  					}  				}  			}
Magic Number,FSpot.Exporters.Folder,OriginalGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\OriginalGallery.cs,OriginalGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 800' 600' true)'  							 new ScaleRequest ("lq"' 640' 480' false' true)'  							 new ScaleRequest ("thumbs"' 120' 120' false) };
Magic Number,FSpot.Exporters.Folder,OriginalGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\OriginalGallery.cs,OriginalGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 800' 600' true)'  							 new ScaleRequest ("lq"' 640' 480' false' true)'  							 new ScaleRequest ("thumbs"' 120' 120' false) };
Magic Number,FSpot.Exporters.Folder,OriginalGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\OriginalGallery.cs,OriginalGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 800' 600' true)'  							 new ScaleRequest ("lq"' 640' 480' false' true)'  							 new ScaleRequest ("thumbs"' 120' 120' false) };
Magic Number,FSpot.Exporters.Folder,OriginalGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\OriginalGallery.cs,OriginalGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 800' 600' true)'  							 new ScaleRequest ("lq"' 640' 480' false' true)'  							 new ScaleRequest ("thumbs"' 120' 120' false) };
Magic Number,FSpot.Exporters.Folder,OriginalGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\OriginalGallery.cs,OriginalGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 800' 600' true)'  							 new ScaleRequest ("lq"' 640' 480' false' true)'  							 new ScaleRequest ("thumbs"' 120' 120' false) };
Magic Number,FSpot.Exporters.Folder,OriginalGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\OriginalGallery.cs,OriginalGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 800' 600' true)'  							 new ScaleRequest ("lq"' 640' 480' false' true)'  							 new ScaleRequest ("thumbs"' 120' 120' false) };
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,HtmlGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 480' 320' false)'  							 new ScaleRequest ("thumbs"' 120' 90' false) };
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,HtmlGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 480' 320' false)'  							 new ScaleRequest ("thumbs"' 120' 90' false) };
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,HtmlGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 480' 320' false)'  							 new ScaleRequest ("thumbs"' 120' 90' false) };
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,HtmlGallery,The following statement contains a magic number: requests = new ScaleRequest [] { new ScaleRequest ("hq"' 0' 0' false)'  							 new ScaleRequest ("mq"' 480' 320' false)'  							 new ScaleRequest ("thumbs"' 120' 90' false) };
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,GenerateLayout,The following statement contains a magic number: using (Stream s = assembly.GetManifestResourceStream (stylesheet)) {  				using (Stream fs = System.IO.File.Open (SubdirPath ("style"' stylesheet)' System.IO.FileMode.Create)) {    					byte [] buffer = new byte [8192];  					int n;  					while ((n = s.Read (buffer' 0' buffer.Length)) != 0)  						fs.Write (buffer' 0'  n);    				}  			}
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,GenerateLayout,The following statement contains a magic number: using (Stream s = assembly.GetManifestResourceStream (altstylesheet)) {  				using (Stream fs = System.IO.File.Open (SubdirPath ("style"' altstylesheet)' System.IO.FileMode.Create)) {    					byte [] buffer = new byte [8192];  					int n = 0;  					while ((n = s.Read (buffer' 0' buffer.Length)) != 0)  						fs.Write (buffer' 0'  n);    				}  			}
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,GenerateLayout,The following statement contains a magic number: using (Stream s = assembly.GetManifestResourceStream (javascript)) {  				using (Stream fs = System.IO.File.Open (SubdirPath ("script"' javascript)' System.IO.FileMode.Create)) {    					byte [] buffer = new byte [8192];  					int n = 0;  					while ((n = s.Read (buffer' 0' buffer.Length)) != 0)  						fs.Write (buffer' 0'  n);    				}  			}
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,PhotoThumbPath,The following statement contains a magic number: return System.IO.Path.Combine (requests [2].Name' ImageName (item));
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SaveTagIcon,The following statement contains a magic number: if (icon.Height != 52 || icon.Width != 52) {  				scaled=icon.ScaleSimple(52'52'Gdk.InterpType.Bilinear);  			} else  				scaled=icon.Copy ();
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SaveTagIcon,The following statement contains a magic number: if (icon.Height != 52 || icon.Width != 52) {  				scaled=icon.ScaleSimple(52'52'Gdk.InterpType.Bilinear);  			} else  				scaled=icon.Copy ();
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SaveTagIcon,The following statement contains a magic number: if (icon.Height != 52 || icon.Width != 52) {  				scaled=icon.ScaleSimple(52'52'Gdk.InterpType.Bilinear);  			} else  				scaled=icon.Copy ();
Magic Number,FSpot.Exporters.Folder,HtmlGallery,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\HtmlGallery.cs,SaveTagIcon,The following statement contains a magic number: if (icon.Height != 52 || icon.Width != 52) {  				scaled=icon.ScaleSimple(52'52'Gdk.InterpType.Bilinear);  			} else  				scaled=icon.Copy ();
Missing Default,FSpot.Exporters.Folder,FolderExport,C:\repos\mono_f-spot\src\Extensions\Exporters\FSpot.Exporters.Folder\FSpot.Exporters.Folder\FolderExport.cs,LoadPreference,The following switch statement is missing a default case: switch (key) {  			case SCALE_KEY:  				if (scale_check.Active != Preferences.Get<bool> (key))  					scale_check.Active = Preferences.Get<bool> (key);  				break;    			case SIZE_KEY:  				int size;  				if (Preferences.TryGet<int> (key' out size))  					size_spin.Value = (double) size;  				else  					size_spin.Value = 400;  				break;    			case OPEN_KEY:  				if (open_check.Active != Preferences.Get<bool> (key))  					open_check.Active = Preferences.Get<bool> (key);  				break;    			case EXPORT_TAGS_KEY:  				if (export_tags_check.Active != Preferences.Get<bool> (key))  					export_tags_check.Active = Preferences.Get<bool> (key);  				break;    			case EXPORT_TAG_ICONS_KEY:  				if (export_tag_icons_check.Active != Preferences.Get<bool> (key))  					export_tag_icons_check.Active = Preferences.Get<bool> (key);  				break;    			case METHOD_KEY:  				static_radio.Active = (Preferences.Get<string> (key) == "static");  				original_radio.Active = (Preferences.Get<string> (key) == "original");  				plain_radio.Active = (Preferences.Get<string> (key) == "folder");  				break;  			}
