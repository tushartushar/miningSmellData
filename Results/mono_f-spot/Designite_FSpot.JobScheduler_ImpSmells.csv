Implementation smell,Namespace,Class,File,Method,Description
Complex Conditional,Banshee.Kernel,Scheduler,C:\repos\mono_f-spot\src\Core\FSpot.JobScheduler\Banshee.Kernel\Scheduler.cs,Unschedule,The conditional expression  "(type.IsInterface && job_type.GetInterface(type.Name) != null) ||                          job_type == type || job_type.IsSubclassOf(job_type)"  is complex.
Magic Number,Banshee.Kernel,IntervalHeap<T>,C:\repos\mono_f-spot\src\Core\FSpot.JobScheduler\Banshee.Kernel\IntervalHeap.cs,TrimExcess,The following statement contains a magic number: if(count < heap.Length * 0.9) {                  Array.Resize(ref heap' count);              }
Magic Number,Banshee.Kernel,IntervalHeap<T>,C:\repos\mono_f-spot\src\Core\FSpot.JobScheduler\Banshee.Kernel\IntervalHeap.cs,GetLeftChildIndex,The following statement contains a magic number: return index * 2 + 1;
Magic Number,Banshee.Kernel,IntervalHeap<T>,C:\repos\mono_f-spot\src\Core\FSpot.JobScheduler\Banshee.Kernel\IntervalHeap.cs,GetParentIndex,The following statement contains a magic number: return (index - 1) / 2;
Magic Number,Banshee.Kernel,Scheduler,C:\repos\mono_f-spot\src\Core\FSpot.JobScheduler\Banshee.Kernel\Scheduler.cs,ProcessJobThread,The following statement contains a magic number: while(true) {                  current_running_job = null;                                    if(suspend_count > 0) {                      Thread.Sleep(10);                      continue;                  }                                        lock(this_mutex) {                      if(disposed) {                          Log.Debug ("execution thread destroyed' dispose requested");                          return;                      }                                        try {                          current_running_job = heap.Pop();                      } catch(InvalidOperationException) {                          Debug("execution thread destroyed' no more jobs scheduled");                          job_thread = null;                          return;                      }                  }                                    try {                      Debug("Job started ({0})"' current_running_job);                      OnJobStarted(current_running_job);                      current_running_job.Run();                      Debug("Job ended ({0})"' current_running_job);                      OnJobFinished(current_running_job);                  } catch(Exception e) {                      Debug("Job threw an unhandled exception: {0}"' e);                  }              }
