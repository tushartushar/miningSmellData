Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ChocolateyGui.Models,PackageSearchOptions,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\PackageSearchOptions.cs,PackageSearchOptions,The method has 7 parameters. Parameters: pageSize' currentPage' sortColumn' includePrerelease' includeAllVersions' matchWord' source
Long Parameter List,ChocolateyGui.Commands,CommandExecutionManager,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Commands\CommandExecutionManager.cs,TryExecuteCommand,The method has 6 parameters. Parameters: target' parameter' execute' executedMethodName' canExecuteMethodName' canExecute
Long Parameter List,ChocolateyGui.ViewModels,RemoteSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\RemoteSourceViewModel.cs,RemoteSourceViewModel,The method has 6 parameters. Parameters: chocolateyPackageService' progressService' configService' eventAggregator' source' mapper
Long Parameter List,ChocolateyGui.ViewModels,LocalSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\LocalSourceViewModel.cs,LocalSourceViewModel,The method has 7 parameters. Parameters: chocolateyService' progressService' persistenceService' configService' eventAggregator' displayName' mapper
Long Identifier,ChocolateyGui.Commands,CommandExecutionManager,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Commands\CommandExecutionManager.cs,GetCommandExecutionProviderConstructor,The length of the parameter executionProviderCtorParamaters is 31.
Long Identifier,ChocolateyGui.Commands,CommandExecutionManager,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Commands\CommandExecutionManager.cs,GetCommandExecutionProviderConstructor,The length of the parameter executionProviderCtorExpression is 31.
Long Identifier,ChocolateyGui.Commands,CommandExecutionManager,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Commands\CommandExecutionManager.cs,,The length of the parameter _disconnectedItemSentinelValue is 30.
Long Identifier,ChocolateyGui.Commands,RoutedCommandMonitor,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Commands\RoutedCommandMonitor.cs,,The length of the parameter UIElementCommandBindingsProvider is 32.
Long Identifier,ChocolateyGui.Commands,RoutedCommandMonitor,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Commands\RoutedCommandMonitor.cs,,The length of the parameter UIElement3DCommandBindingsProvider is 34.
Long Identifier,ChocolateyGui.Commands,RoutedCommandMonitor,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Commands\RoutedCommandMonitor.cs,,The length of the parameter ContentElementCommandBindingsProvider is 37.
Long Identifier,ChocolateyGui.Controls.Dialogs,ChocolateyDialog,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Controls\Dialogs\ChocolateyDialog.xaml.cs,,The length of the parameter OutputBufferCollectionProperty is 30.
Long Identifier,ChocolateyGui.Views,ShellView,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Views\ShellView.xaml.cs,ShellView,The length of the parameter chocolateyConfigurationProvider is 31.
Long Identifier,ChocolateyGui.Views,ShellView,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Views\ShellView.xaml.cs,,The length of the parameter _chocolateyConfigurationProvider is 32.
Long Statement,ChocolateyGui,Bootstrapper,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Bootstrapper.cs,OnStartup,The length of the statement  "                var backgroundFeature = features.FirstOrDefault(feature => string.Equals(feature.Name' "useBackgroundService"' StringComparison.OrdinalIgnoreCase)); " is 148.
Long Statement,ChocolateyGui.Controls,InternetImage,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Controls\InternetImage.xaml.cs,GetEmptyImage,The length of the statement  "            var image = new BitmapImage(new Uri("pack://application:'''/ChocolateyGui;component/chocolatey@4.png"' UriKind.RelativeOrAbsolute)); " is 132.
Long Statement,ChocolateyGui.Controls,InternetImage,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Controls\InternetImage.xaml.cs,DownloadUrl,The length of the statement  "                // Upload: Send file or stream to database. Can be used with file or Stream. If file already exists' file content is overwritten. " is 129.
Long Statement,ChocolateyGui.Models,EnumToBoolConverter,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\EnumToBoolConverter.cs,ConvertBack,The length of the statement  "            return Equals(true' value) ? parameter : ((parameter != null) ? DefaultEnumValue(parameter.GetType()) : Binding.DoNothing); " is 123.
Long Statement,ChocolateyGui.Services,ChocolateyService,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Services\ChocolateyService.cs,GetByVersionAndIdAsync,The length of the statement  "                var nugetPackage = (NugetList.GetPackages(chocoConfig' nugetLogger) as IQueryable<IPackage>).FirstOrDefault(p => p.Version == semvar); " is 134.
Long Statement,ChocolateyGui.Startup,ChocolateyGuiModule,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Startup\ChocolateyGuiModule.cs,Load,The length of the statement  "            builder.Register(c => new LiteDatabase($"filename={Path.Combine(Bootstrapper.LocalAppDataPath' "data.db")};upgrade=true")) " is 122.
Long Statement,ChocolateyGui.Startup,Internationalization,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Startup\Internationalization.cs,Initialize,The length of the statement  "            FrameworkContentElement.LanguageProperty.OverrideMetadata(typeof(FixedDocumentSequence)' new FrameworkPropertyMetadata(lang)); " is 126.
Long Statement,ChocolateyGui.Utilities.Extensions,MvvmExtensions,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Utilities\Extensions\MvvmExtensions.cs,ToObservable,The length of the statement  "                throw new ArgumentException($"ToObservable expected \"{property.PropertyType}\"' but got \"{typeof(TType)}\" instead."); " is 120.
Long Statement,ChocolateyGui.ViewModels,SettingsViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\SettingsViewModel.cs,Save,The length of the statement  "                await _progressService.ShowMessageAsync(Resources.SettingsViewModel_SavingSource' Resources.SettingsViewModel_SourceMissingId);" is 127.
Long Statement,ChocolateyGui.ViewModels,SettingsViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\SettingsViewModel.cs,Save,The length of the statement  "                await _progressService.ShowMessageAsync(Resources.SettingsViewModel_SavingSource' Resources.SettingsViewModel_SourceMissingValue);" is 130.
Long Statement,ChocolateyGui.ViewModels,RemoteSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\RemoteSourceViewModel.cs,OnInitialize,The length of the statement  "                    .Subscribe(eventPattern => ListViewMode = ((AppConfiguration)eventPattern.Sender).DefaultToTileViewForRemoteSource ? ListViewMode.Tile : ListViewMode.Standard); " is 160.
Long Statement,ChocolateyGui.ViewModels,LocalSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\LocalSourceViewModel.cs,OnInitialize,The length of the statement  "                    .Subscribe(eventPattern => ListViewMode = ((AppConfiguration)eventPattern.Sender).DefaultToTileViewForLocalSource ? ListViewMode.Tile : ListViewMode.Standard); " is 159.
Long Statement,ChocolateyGui.ViewModels,LocalSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\LocalSourceViewModel.cs,OnInitialize,The length of the statement  "#pragma warning disable CS4014 // Because this call is not awaited' execution of the current method continues before the call is completed " is 138.
Long Statement,ChocolateyGui.ViewModels,LocalSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\LocalSourceViewModel.cs,OnInitialize,The length of the statement  "                    _progressService.ShowMessageAsync(Resources.LocalSourceViewModel_Chocolatey' Resources.LocalSourceViewModel_UpdateAvailableForChocolatey) " is 137.
Long Statement,ChocolateyGui.ViewModels,LocalSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\LocalSourceViewModel.cs,OnInitialize,The length of the statement  "#pragma warning restore CS4014 // Because this call is not awaited' execution of the current method continues before the call is completed " is 138.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Install,The length of the statement  "                using (await StartProgressDialog(Resources.PackageViewModel_InstallingPackage' Resources.PackageViewModel_InstallingPackage' Id)) " is 129.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Install,The length of the statement  "                        Logger.Warning(result.Exception' "Failed to install {Package}' version {Version}. Errors: {Errors}"' Id' Version' result.Messages); " is 131.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Reinstall,The length of the statement  "                using (await StartProgressDialog(Resources.PackageViewModel_ReinstallingPackage' Resources.PackageViewModel_ReinstallingPackage' Id)) " is 133.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Uninstall,The length of the statement  "                using (await StartProgressDialog(Resources.PackageViewModel_UninstallingPackage' Resources.PackageViewModel_UninstallingPackage' Id)) " is 133.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Uninstall,The length of the statement  "                        Logger.Warning(result.Exception' "Failed to uninstall {Package}' version {Version}. Errors: {Errors}"' Id' Version' result.Messages); " is 133.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Update,The length of the statement  "                using (await StartProgressDialog(Resources.PackageViewModel_UpdatingPackage' Resources.PackageViewModel_UpdatingPackage' Id)) " is 125.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Pin,The length of the statement  "                using (await StartProgressDialog(Resources.PackageViewModel_PinningPackage' Resources.PackageViewModel_PinningPackage' Id)) " is 123.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Pin,The length of the statement  "                        Logger.Warning(result.Exception' "Failed to pin {Package}' version {Version}. Errors: {Errors}"' Id' Version' result.Messages); " is 127.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Unpin,The length of the statement  "                using (await StartProgressDialog(Resources.PackageViewModel_UnpinningPackage' Resources.PackageViewModel_UnpinningPackage' Id)) " is 127.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,Unpin,The length of the statement  "                        Logger.Warning(result.Exception' "Failed to unpin {Package}' version {Version}. Errors: {Errors}"' Id' Version' result.Messages); " is 129.
Long Statement,ChocolateyGui.ViewModels.Items,PackageViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\Items\PackageViewModel.cs,PopulateDetails,The length of the statement  "                var package = await _chocolateyService.GetByVersionAndIdAsync(_id' _version.ToString()' _isPrerelease).ConfigureAwait(false); " is 125.
Long Statement,ChocolateyGui.Views,ShellView,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Views\ShellView.xaml.cs,CheckOperatingSystemCompatibility,The length of the statement  "                    "Usage of the PowerShell Version of Chocolatey (i.e. <= 0.9.8.33) has been detected.  ChocolateyGUI does not support using this version of Chocolatey on Windows 10.  Please update Chocolatey to the new C# Version (i.e. > 0.9.9.0) and restart ChocolateyGUI.  This application will now close."'" is 292.
Magic Number,ChocolateyGui,Bootstrapper,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Bootstrapper.cs,Configure,The following statement contains a magic number: var logConfig = new LoggerConfiguration()                  .WriteTo.Async(config => config.LiterateConsole())                  .WriteTo.Async(config =>                      config.RollingFile(directPath' retainedFileCountLimit: 10' fileSizeLimitBytes: 150 * 1000 * 1000))                  .SetDefaultLevel();
Magic Number,ChocolateyGui,Bootstrapper,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Bootstrapper.cs,Configure,The following statement contains a magic number: var logConfig = new LoggerConfiguration()                  .WriteTo.Async(config => config.LiterateConsole())                  .WriteTo.Async(config =>                      config.RollingFile(directPath' retainedFileCountLimit: 10' fileSizeLimitBytes: 150 * 1000 * 1000))                  .SetDefaultLevel();
Magic Number,ChocolateyGui,Bootstrapper,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Bootstrapper.cs,Configure,The following statement contains a magic number: var logConfig = new LoggerConfiguration()                  .WriteTo.Async(config => config.LiterateConsole())                  .WriteTo.Async(config =>                      config.RollingFile(directPath' retainedFileCountLimit: 10' fileSizeLimitBytes: 150 * 1000 * 1000))                  .SetDefaultLevel();
Magic Number,ChocolateyGui,Bootstrapper,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Bootstrapper.cs,Configure,The following statement contains a magic number: var logConfig = new LoggerConfiguration()                  .WriteTo.Async(config => config.LiterateConsole())                  .WriteTo.Async(config =>                      config.RollingFile(directPath' retainedFileCountLimit: 10' fileSizeLimitBytes: 150 * 1000 * 1000))                  .SetDefaultLevel();
Magic Number,ChocolateyGui,Bootstrapper,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Bootstrapper.cs,OnStartup,The following statement contains a magic number: try              {                  // Do not remove! Load Chocolatey once so all config gets set                  // properly for future calls                  var choco = Lets.GetChocolatey();                    Mapper.Initialize(config =>                  {                      config.CreateMap<Package' IPackageViewModel>().ConstructUsing(rc => Container.Resolve<IPackageViewModel>());                  });                    var packageService = Container.Resolve<IChocolateyService>();                  var features = await packageService.GetFeatures();                    var backgroundFeature = features.FirstOrDefault(feature => string.Equals(feature.Name' "useBackgroundService"' StringComparison.OrdinalIgnoreCase));                  var elevationProvider = Elevation.Instance;                  elevationProvider.IsBackgroundRunning = backgroundFeature?.Enabled ?? false;                    App.SplashScreen.Close(TimeSpan.FromMilliseconds(300));                    DisplayRootViewFor<ShellViewModel>();              }              catch (Exception ex)              {                  MessageBox.Show($"Failed to start application.\n{ex.Message}\n\nMore details available in application logs.");                  Logger.Fatal(ex' "Failed to start application.");                  await OnExitAsync();              }
Magic Number,ChocolateyGui.Controls,InternetImage,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Controls\InternetImage.xaml.cs,GetPackIconEntypoImage,The following statement contains a magic number: drawingGroup.Transform = new ScaleTransform(3.5' 3.5);
Magic Number,ChocolateyGui.Controls,InternetImage,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Controls\InternetImage.xaml.cs,GetPackIconEntypoImage,The following statement contains a magic number: drawingGroup.Transform = new ScaleTransform(3.5' 3.5);
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Models,ChocolateySource,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Models\ChocolateySource.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Id?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Value?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Disabled.GetHashCode();                  hashCode = (hashCode * 397) ^ (UserName?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Password?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ (Certificate?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (CertificatePassword?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ BypassProxy.GetHashCode();                  hashCode = (hashCode * 397) ^ AllowSelfService.GetHashCode();                  hashCode = (hashCode * 397) ^ VisibleToAdminsOnly.GetHashCode();                  return hashCode;              }
Magic Number,ChocolateyGui.Utilities.Converters,LongSizeToFileSizeString,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Utilities\Converters\LongSizeToFileSizeString.cs,StrFormatByteSize,The following statement contains a magic number: var sb = new StringBuilder(16);
Magic Number,ChocolateyGui.Services,ProgressService,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Services\ProgressService.cs,ProgressService,The following statement contains a magic number: Output = new ObservableRingBufferCollection<PowerShellOutputLine>(100);
Magic Number,ChocolateyGui.Services,ProgressService,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Services\ProgressService.cs,Report,The following statement contains a magic number: if (_progressController != null)             {                 if (value < 0)                 {                     Execute.OnUIThread(() => _progressController.SetIndeterminate());                 }                 else                 {                     Execute.OnUIThread(() => _progressController.SetProgress(Math.Min(Progress / 100.0f' 100)));                 }             }
Magic Number,ChocolateyGui.ViewModels,SettingsViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\SettingsViewModel.cs,RowEditEnding,The following statement contains a magic number: await Task.Delay(100);
Magic Number,ChocolateyGui.ViewModels,RemoteSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\RemoteSourceViewModel.cs,OnInitialize,The following statement contains a magic number: try              {                  Observable.FromEventPattern<EventArgs>(_configService' "SettingsChanged")                      .ObserveOnDispatcher()                      .Subscribe(eventPattern => ListViewMode = ((AppConfiguration)eventPattern.Sender).DefaultToTileViewForRemoteSource ? ListViewMode.Tile : ListViewMode.Standard);    #pragma warning disable 4014                  LoadPackages();  #pragma warning restore 4014                    var immediateProperties = new[]                  {                      "IncludeAllVersions"' "IncludePrerelease"' "MatchWord"' "SortSelection"                  };                    Observable.FromEventPattern<PropertyChangedEventArgs>(this' "PropertyChanged")                      .Where(e => e.EventArgs.PropertyName == "SearchQuery")                      .Throttle(TimeSpan.FromMilliseconds(500))                      .DistinctUntilChanged()                      .ObserveOnDispatcher()  #pragma warning disable 4014                      .Subscribe(e => LoadPackages());  #pragma warning restore 4014                    Observable.FromEventPattern<PropertyChangedEventArgs>(this' "PropertyChanged")                      .Where(e => immediateProperties.Contains(e.EventArgs.PropertyName))                      .ObserveOnDispatcher()  #pragma warning disable 4014                      .Subscribe(e => LoadPackages());  #pragma warning restore 4014                    Observable.FromEventPattern<PropertyChangedEventArgs>(this' "PropertyChanged")                      .Where(e => e.EventArgs.PropertyName == "CurrentPage")                      .Throttle(TimeSpan.FromMilliseconds(300))                      .DistinctUntilChanged()                      .ObserveOnDispatcher()  #pragma warning disable 4014                      .Subscribe(e => LoadPackages());  #pragma warning restore 4014              }              catch (InvalidOperationException ex)              {                  Logger.Error(ex' "Failed to intialize remote source view model.");                  MessageBox.Show(                      string.Format(                          CultureInfo.InvariantCulture'                          Resources.RemoteSourceViewModel_UnableToConnectToFeed'                          Source.Value)'                      Resources.RemoteSourceViewModel_FeedSearchError'                      MessageBoxButton.OK'                      MessageBoxImage.Error'                      MessageBoxResult.OK'                      MessageBoxOptions.ServiceNotification);              }
Magic Number,ChocolateyGui.ViewModels,RemoteSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\RemoteSourceViewModel.cs,OnInitialize,The following statement contains a magic number: try              {                  Observable.FromEventPattern<EventArgs>(_configService' "SettingsChanged")                      .ObserveOnDispatcher()                      .Subscribe(eventPattern => ListViewMode = ((AppConfiguration)eventPattern.Sender).DefaultToTileViewForRemoteSource ? ListViewMode.Tile : ListViewMode.Standard);    #pragma warning disable 4014                  LoadPackages();  #pragma warning restore 4014                    var immediateProperties = new[]                  {                      "IncludeAllVersions"' "IncludePrerelease"' "MatchWord"' "SortSelection"                  };                    Observable.FromEventPattern<PropertyChangedEventArgs>(this' "PropertyChanged")                      .Where(e => e.EventArgs.PropertyName == "SearchQuery")                      .Throttle(TimeSpan.FromMilliseconds(500))                      .DistinctUntilChanged()                      .ObserveOnDispatcher()  #pragma warning disable 4014                      .Subscribe(e => LoadPackages());  #pragma warning restore 4014                    Observable.FromEventPattern<PropertyChangedEventArgs>(this' "PropertyChanged")                      .Where(e => immediateProperties.Contains(e.EventArgs.PropertyName))                      .ObserveOnDispatcher()  #pragma warning disable 4014                      .Subscribe(e => LoadPackages());  #pragma warning restore 4014                    Observable.FromEventPattern<PropertyChangedEventArgs>(this' "PropertyChanged")                      .Where(e => e.EventArgs.PropertyName == "CurrentPage")                      .Throttle(TimeSpan.FromMilliseconds(300))                      .DistinctUntilChanged()                      .ObserveOnDispatcher()  #pragma warning disable 4014                      .Subscribe(e => LoadPackages());  #pragma warning restore 4014              }              catch (InvalidOperationException ex)              {                  Logger.Error(ex' "Failed to intialize remote source view model.");                  MessageBox.Show(                      string.Format(                          CultureInfo.InvariantCulture'                          Resources.RemoteSourceViewModel_UnableToConnectToFeed'                          Source.Value)'                      Resources.RemoteSourceViewModel_FeedSearchError'                      MessageBoxButton.OK'                      MessageBoxImage.Error'                      MessageBoxResult.OK'                      MessageBoxOptions.ServiceNotification);              }
Magic Number,ChocolateyGui.ViewModels,RemoteSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\RemoteSourceViewModel.cs,LoadPackages,The following statement contains a magic number: try              {                  _hasLoaded = false;                    var sort = SortSelection == Resources.RemoteSourceViewModel_SortSelectionPopularity ? "DownloadCount" : "Title";                    await _progressService.StartLoading(string.Format(Resources.RemoteSourceViewModel_LoadingPage' CurrentPage));                    _progressService.WriteMessage(Resources.RemoteSourceViewModel_FetchingPackages);                    try                  {                      var result =                          await                              _chocolateyPackageService.Search(                                  SearchQuery'                                  new PackageSearchOptions(                                      PageSize'                                      CurrentPage - 1'                                      sort'                                      IncludePrerelease'                                      IncludeAllVersions'                                      MatchWord'                                      Source.Value));                      var installed = await _chocolateyPackageService.GetInstalledPackages();                      var outdated = await _chocolateyPackageService.GetOutdatedPackages();                        PageCount = (int)(((double)result.TotalCount / (double)PageSize) + 0.5);                      Packages.Clear();                      result.Packages.ToList().ForEach(p =>                      {                          if (installed.Any(package => string.Equals(package.Id' p.Id' StringComparison.OrdinalIgnoreCase)))                          {                              p.IsInstalled = true;                          }                          if (outdated.Any(package => string.Equals(package.Item1' p.Id' StringComparison.OrdinalIgnoreCase)))                          {                              p.IsLatestVersion = false;                          }                            Packages.Add(Mapper.Map<IPackageViewModel>(p));                      });                        if (PageCount < CurrentPage)                      {                          CurrentPage = PageCount == 0 ? 1 : PageCount;                      }                  }                  finally                  {                      await _progressService.StopLoading();                      _hasLoaded = true;                  }                    await _eventAggregator.PublishOnUIThreadAsync(new ResetScrollPositionMessage());              }              catch (Exception ex)              {                  Logger.Error(ex' "Failed to load new packages.");                  await _progressService.ShowMessageAsync(                      Resources.RemoteSourceViewModel_FailedToLoad'                      string.Format(Resources.RemoteSourceViewModel_FailedToLoadRemotePackages' ex.Message));                  throw;              }
Magic Number,ChocolateyGui.ViewModels,LocalSourceViewModel,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\ViewModels\LocalSourceViewModel.cs,UpdateAll,The following statement contains a magic number: try              {                  await _progressService.StartLoading(Resources.LocalSourceViewModel_Packages' true);                  IsLoading = true;                    _progressService.WriteMessage(Resources.LocalSourceViewModel_FetchingPackages);                  var token = _progressService.GetCancellationToken();                  var packages = Packages.Where(p => p.CanUpdate && !p.IsPinned).ToList();                  double current = 0.0f;                  foreach (var package in packages)                  {                      if (token.IsCancellationRequested)                      {                          await _progressService.StopLoading();                          IsLoading = false;                          return;                      }                        _progressService.Report(Math.Min(current++ / packages.Count' 100));                      await package.Update();                  }                    await _progressService.StopLoading();                  IsLoading = false;                  ShowOnlyPackagesWithUpdate = false;                  RefreshPackages();              }              catch (Exception ex)              {                  Logger.Fatal("Updated all has failed."' ex);                  throw;              }
Magic Number,ChocolateyGui.Views,LocalSourceView,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Views\LocalSourceView.xaml.cs,LocalSourceView,The following statement contains a magic number: PART_Loading.Margin = new Thickness(0' 0' 13' 0);
Magic Number,ChocolateyGui.Views,ShellView,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Views\ShellView.xaml.cs,CheckOperatingSystemCompatibility,The following statement contains a magic number: if (operatingSystemVersion.Version.Major == 10 &&                 !_chocolateyConfigurationProvider.IsChocolateyExecutableBeingUsed)             {                 MessageBox.Show(                     "Usage of the PowerShell Version of Chocolatey (i.e. <= 0.9.8.33) has been detected.  ChocolateyGUI does not support using this version of Chocolatey on Windows 10.  Please update Chocolatey to the new C# Version (i.e. > 0.9.9.0) and restart ChocolateyGUI.  This application will now close."'                     "Incompatible Operating System Version"'                     MessageBoxButton.OK'                     MessageBoxImage.Error'                     MessageBoxResult.OK'                     MessageBoxOptions.ServiceNotification);                  Application.Current.Shutdown();             }
Missing Default,ChocolateyGui.Controls,FauxPowerShellConsole,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Controls\FauxPowerShellConsole.cs,OnBufferUpdated,The following switch statement is missing a default case: switch (args.Action)             {                 case NotifyCollectionChangedAction.Reset:                     Application.Current.Dispatcher.InvokeAsync(() => _backingParagraph.Inlines.Clear());                     break;                 case NotifyCollectionChangedAction.Add:                     foreach (PowerShellOutputLine item in args.NewItems)                     {                         Dispatcher.BeginInvoke(                             new RunStringOnUI(                                 line =>                                 { #if !DEBUG                                     if (line.LineType == PowerShellLineType.Debug ||                                         line.LineType == PowerShellLineType.Verbose)                                     {                                         return;                                     } #endif // DEBUG                                     var runBrushes = GetOutputLineBrush(line);                                     var run = new Run                                     {                                         Text = item.Text'                                         Name = _getNameHash(line.Text)'                                         Foreground = runBrushes.Item1'                                         Background = runBrushes.Item2                                     };                                      if (item.NewLine)                                     {                                         run.Text += Environment.NewLine;                                     }                                      _backingParagraph.Inlines.Add(run);                                     Selection.Select(run.ContentStart' run.ContentEnd);                                     ScrollToEnd();                                 })'                             item);                     }                      break;                 case NotifyCollectionChangedAction.Remove:                     foreach (PowerShellOutputLine item in args.OldItems)                     {                         Dispatcher.BeginInvoke(                             new RunStringOnUI(                                 line =>                                 {                                     var key = _getNameHash(line.Text);                                     var run = _backingParagraph.Inlines.FirstOrDefault(inline => inline.Name == key);                                     if (run != null)                                     {                                         _backingParagraph.Inlines.Remove(run);                                     }                                 })'                             item);                     }                      break;             }
Missing Default,ChocolateyGui.Services,ChocolateyService,C:\repos\chocolatey_ChocolateyGUI\Source\ChocolateyGui\Services\ChocolateyService.cs,GetErrors,The following switch statement is missing a default case: switch (m.LogLevel)                  {                      case LogLevel.Warn:                      case LogLevel.Error:                      case LogLevel.Fatal:                          errors.Add(m.Message);                          break;                  }
