Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The method has 168 lines of code.
Complex Method,NuGetConsole.Implementation.Console,OrderedSpans,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\OrderedSpans.cs,FindFirstOverlap,Cyclomatic complexity of the method is 7
Complex Method,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,SetReadOnlyRegionType,Cyclomatic complexity of the method is 10
Complex Method,NuGetConsole.Implementation.Console,WpfConsoleClassifier,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleClassifier.cs,GetClassificationSpans,Cyclomatic complexity of the method is 7
Complex Method,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,Cyclomatic complexity of the method is 76
Complex Method,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,PasteText,Cyclomatic complexity of the method is 7
Complex Method,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,TriggerCompletion,Cyclomatic complexity of the method is 7
Complex Method,NuGetConsole.Implementation,PowerConsoleToolWindow,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\PowerConsoleToolWindow.cs,QueryStatus,Cyclomatic complexity of the method is 7
Long Parameter List,NuGetConsole,ExtensionMethods,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Utils\ExtensionMethods.cs,Execute,The method has 4 parameters.
Long Parameter List,NuGetConsole.Implementation.Console,OleCommandFilter,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\OleCommandFilter.cs,InternalQueryStatus,The method has 4 parameters.
Long Parameter List,NuGetConsole.Implementation.Console,OleCommandFilter,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\OleCommandFilter.cs,InternalExec,The method has 5 parameters.
Long Parameter List,NuGetConsole.Implementation.Console,OleCommandFilter,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\OleCommandFilter.cs,QueryStatus,The method has 4 parameters.
Long Parameter List,NuGetConsole.Implementation.Console,OleCommandFilter,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\OleCommandFilter.cs,Exec,The method has 5 parameters.
Long Parameter List,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,WpfConsole,The method has 5 parameters.
Long Parameter List,NuGetConsole.Implementation.Console,WpfConsoleService,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleService.cs,GetSingletonHostService,The method has 4 parameters.
Long Parameter List,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The method has 5 parameters.
Long Parameter List,NuGetConsole.Implementation,PowerConsoleToolWindow,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\PowerConsoleToolWindow.cs,QueryStatus,The method has 4 parameters.
Long Parameter List,NuGetConsole.Implementation,PowerConsoleToolWindow,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\PowerConsoleToolWindow.cs,Exec,The method has 5 parameters.
Long Identifier,NuGetConsole.Implementation.Console,WpfConsoleClassifier,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleClassifier.cs,GetCommandLineClassifications,The length of the parameter cachedCommandLineClassifications is 32.
Long Identifier,NuGetConsole.Implementation.Console,WpfConsoleClassifier,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleClassifier.cs,TryGetCachedCommandLineClassifications,The length of the parameter cachedCommandLineClassifications is 32.
Long Statement,NuGetConsole.Implementation.Console,ConsoleDispatcher,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\ConsoleDispatcher.cs,Start,The length of the statement  "			Task.Factory.StartNew (// gives the host a chance to do initialization works before the console starts accepting user inputs " is 124.
Long Statement,NuGetConsole.Implementation.Console,TextFormatClassifierProvider,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\TextFormatClassifier.cs,GetTextFormatClassifier,The length of the statement  "	return textView.Properties.GetOrCreateSingletonProperty<TextFormatClassifier> (() => new TextFormatClassifier (this' textView)); " is 128.
Long Statement,NuGetConsole.Implementation.Console,TextFormatClassifier,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\TextFormatClassifier.cs,GetClassificationType,The length of the statement  "			classificationType = Factory.ClassificationTypeRegistryService.CreateClassificationType (classificationName' new IClassificationType[] { " is 136.
Long Statement,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,SetReadOnlyRegionType,The length of the statement  "				_readOnlyRegionBegin = edit.CreateReadOnlyRegion (new Span (0' 0)' SpanTrackingMode.EdgeExclusive' EdgeInsertionMode.Deny); " is 123.
Long Statement,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,SetReadOnlyRegionType,The length of the statement  "			_readOnlyRegionBody = edit.CreateReadOnlyRegion (new Span (0' snapshot.Length)' SpanTrackingMode.EdgeExclusive' EdgeInsertionMode.Deny); " is 136.
Long Statement,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,GetInputLineExtent,The length of the statement  "	return length >= 0 ? new SnapshotSpan (beginPoint' length) : new SnapshotSpan (beginPoint' beginPoint.GetContainingLine ().End); " is 128.
Long Statement,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,NavigateHistory,The length of the statement  "		string input = (index >= 0 && index < _historyInputs.Count) ? _historyInputs [_currentHistoryInputIndex] : string.Empty; " is 120.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleClassifier,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleClassifier.cs,TextBuffer_Changed,The length of the statement  "				commandExtent = new SnapshotSpan (new SnapshotPoint (commandExtent.Snapshot' _commandLineSpans [i].Item1.Start)' commandExtent.End); " is 132.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleClassifier,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleClassifier.cs,Console_NewColorSpan,The length of the statement  "		_colorSpans.Add (Tuple.Create (e.Arg.Item1.Span' TextFormatClassifier.GetClassificationType (e.Arg.Item2' e.Arg.Item3))); " is 121.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleService,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleService.cs,GetCommandExpansion,The length of the statement  "	return GetSingletonHostService<ICommandExpansion' ICommandExpansionProvider> (console' CommandExpansionProviders' (factory' host) => factory.Create (host)' () => null); " is 168.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleService,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleService.cs,GetCommandTokenizer,The length of the statement  "	return GetSingletonHostService<ICommandTokenizer' ICommandTokenizerProvider> (console' CommandTokenizerProviders' (factory' host) => factory.Create (host)' () => null); " is 168.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleCompletionSource,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleCompletionSource.cs,AugmentCompletionSession,The length of the statement  "		ITrackingSpan span = inputStart.Snapshot.CreateTrackingSpan (new SnapshotSpan (inputStart + simpleExpansion.Start' simpleExpansion.Length)' SpanTrackingMode.EdgeInclusive); " is 172.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The length of the statement  "						VirtualSnapshotPoint anchorPoint = WpfTextView.Selection.IsEmpty ? oldCaretPoint.TranslateTo (WpfTextView.TextSnapshot) : WpfTextView.Selection.AnchorPoint; " is 156.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The length of the statement  "	var keyInfo = VsKeyInfo.Create (key' keyChar' virtualKey' keyStates: KeyStates.Down' capsLockToggled: capsLockToggled' numLockToggled: numLockToggled' shiftPressed: ((shiftState & 1) == 1)' controlPressed: ((shiftState & 2) == 4)' altPressed: ((shiftState & 4) == 2)); " is 268.
Long Statement,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,TriggerCompletion,The length of the statement  "			_completionSession = CompletionBroker.CreateCompletionSession (WpfTextView' WpfTextView.TextSnapshot.CreateTrackingPoint (CaretPosition.Position' PointTrackingMode.Positive)' true); " is 181.
Complex Conditional,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,PasteText,The conditional expression  "iLineStart < text.Length && (c = text [iLineStart]) != text [iNewLine] && (c == '\n' || c == '\r')"  is complex.
Empty Catch Block,NuGetConsole,ConsoleInitializer,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\ConsoleInitializer.cs,GetInitializeTask,The method has an empty catch block.
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete > 100) {  	percentComplete = 100;  }  
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete > 100) {  	percentComplete = 100;  }  
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: percentComplete = 100;  
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete == 100) {  	HideProgress ();  } else {  	VsStatusBar.Progress (ref _pdwCookieForStatusBar' 1/* in progress */' operation' (uint)percentComplete' (uint)100);  }  
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete == 100) {  	HideProgress ();  } else {  	VsStatusBar.Progress (ref _pdwCookieForStatusBar' 1/* in progress */' operation' (uint)percentComplete' (uint)100);  }  
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: VsStatusBar.Progress (ref _pdwCookieForStatusBar' 1/* in progress */' operation' (uint)percentComplete' (uint)100);  
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,HideProgress,The following statement contains a magic number: VsStatusBar.Progress (ref _pdwCookieForStatusBar' 0/* completed */' String.Empty' (uint)100' (uint)100);  
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,HideProgress,The following statement contains a magic number: VsStatusBar.Progress (ref _pdwCookieForStatusBar' 0/* completed */' String.Empty' (uint)100' (uint)100);  
Magic Number,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: keyScan = (short)(keyScan >> 8);  
Magic Number,NuGetConsole.Implementation,PowerConsoleToolWindow,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\PowerConsoleToolWindow.cs,PowerConsoleToolWindow,The following statement contains a magic number: this.BitmapResourceID = 301;  
Missing Default,NuGetConsole.Implementation.Console,WpfConsole,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsole.cs,SetReadOnlyRegionType,The following switch statement is missing a default case: switch (value) {  case ReadOnlyRegionType.BeginAndBody:  	if (snapshot.Length > 0) {  		_readOnlyRegionBegin = edit.CreateReadOnlyRegion (new Span (0' 0)' SpanTrackingMode.EdgeExclusive' EdgeInsertionMode.Deny);  		_readOnlyRegionBody = edit.CreateReadOnlyRegion (new Span (0' snapshot.Length));  	}  	break;  case ReadOnlyRegionType.All:  	_readOnlyRegionBody = edit.CreateReadOnlyRegion (new Span (0' snapshot.Length)' SpanTrackingMode.EdgeExclusive' EdgeInsertionMode.Deny);  	break;  }  
Missing Default,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch ((VSConstants.VSStd97CmdID)nCmdID) {  case VSConstants.VSStd97CmdID.Paste:  	if (IsCaretInReadOnlyRegion || IsSelectionReadonly) {  		hr = VSConstants.S_OK;  		// eat it  	} else {  		PasteText (ref hr);  	}  	break;  }  
Missing Default,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch (commandID) {  case VSConstants.VSStd2KCmdID.TYPECHAR:  case VSConstants.VSStd2KCmdID.BACKSPACE:  case VSConstants.VSStd2KCmdID.RETURN:  	var keyInfo = GetVsKeyInfo (pvaIn' commandID);  	WpfConsole.Dispatcher.PostKey (keyInfo);  	break;  case VSConstants.VSStd2KCmdID.CANCEL:  	// Handle ESC  	WpfConsole.Dispatcher.CancelWaitKey ();  	break;  }  
Missing Default,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,D:\newReposJune17\themotleyfool_NuGet\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch (commandID) {  case VSConstants.VSStd2KCmdID.TYPECHAR:  	if (IsCompletionSessionActive) {  		char ch = (char)(ushort)Marshal.GetObjectForNativeVariant (pvaIn);  		if (IsCommitChar (ch)) {  			if (_completionSession.SelectedCompletionSet.SelectionStatus.IsSelected) {  				_completionSession.Commit ();  			} else {  				_completionSession.Dismiss ();  			}  		}  	} else {  		if (IsSelectionReadonly) {  			WpfTextView.Selection.Clear ();  		}  		if (IsCaretInReadOnlyRegion) {  			WpfTextView.Caret.MoveTo (WpfConsole.InputLineExtent.End);  		}  	}  	break;  case VSConstants.VSStd2KCmdID.LEFT:  case VSConstants.VSStd2KCmdID.LEFT_EXT:  case VSConstants.VSStd2KCmdID.LEFT_EXT_COL:  case VSConstants.VSStd2KCmdID.WORDPREV:  case VSConstants.VSStd2KCmdID.WORDPREV_EXT:  case VSConstants.VSStd2KCmdID.WORDPREV_EXT_COL:  	if (IsCaretAtInputLineStart) {  		//  		// Note: This simple implementation depends on Prompt containing a trailing space.  		// When caret is on the right of InputLineStart' editor will handle it correctly'  		// and caret won't move left to InputLineStart because of the trailing space.  		//  		hr = VSConstants.S_OK;  		// eat it  	}  	break;  case VSConstants.VSStd2KCmdID.BOL:  case VSConstants.VSStd2KCmdID.BOL_EXT:  case VSConstants.VSStd2KCmdID.BOL_EXT_COL:  	if (IsCaretOnInputLine) {  		VirtualSnapshotPoint oldCaretPoint = WpfTextView.Caret.Position.VirtualBufferPosition;  		WpfTextView.Caret.MoveTo (WpfConsole.InputLineStart.Value);  		WpfTextView.Caret.EnsureVisible ();  		if ((VSConstants.VSStd2KCmdID)nCmdID == VSConstants.VSStd2KCmdID.BOL) {  			WpfTextView.Selection.Clear ();  		} else if ((VSConstants.VSStd2KCmdID)nCmdID != VSConstants.VSStd2KCmdID.BOL)// extend selection  		 {  			VirtualSnapshotPoint anchorPoint = WpfTextView.Selection.IsEmpty ? oldCaretPoint.TranslateTo (WpfTextView.TextSnapshot) : WpfTextView.Selection.AnchorPoint;  			WpfTextView.Selection.Select (anchorPoint' WpfTextView.Caret.Position.VirtualBufferPosition);  		}  		hr = VSConstants.S_OK;  	}  	break;  case VSConstants.VSStd2KCmdID.UP:  	if (!IsCompletionSessionActive) {  		if (IsCaretInReadOnlyRegion) {  			ExecuteCommand (VSConstants.VSStd2KCmdID.END);  		}  		WpfConsole.NavigateHistory (-1);  		hr = VSConstants.S_OK;  	}  	break;  case VSConstants.VSStd2KCmdID.DOWN:  	if (!IsCompletionSessionActive) {  		if (IsCaretInReadOnlyRegion) {  			ExecuteCommand (VSConstants.VSStd2KCmdID.END);  		}  		WpfConsole.NavigateHistory (+1);  		hr = VSConstants.S_OK;  	}  	break;  case VSConstants.VSStd2KCmdID.RETURN:  	if (IsCompletionSessionActive) {  		if (_completionSession.SelectedCompletionSet.SelectionStatus.IsSelected) {  			_completionSession.Commit ();  		} else {  			_completionSession.Dismiss ();  		}  	} else if (IsCaretOnInputLine || !IsCaretInReadOnlyRegion) {  		ExecuteCommand (VSConstants.VSStd2KCmdID.END);  		ExecuteCommand (VSConstants.VSStd2KCmdID.RETURN);  		WpfConsole.EndInputLine ();  	}  	hr = VSConstants.S_OK;  	break;  case VSConstants.VSStd2KCmdID.TAB:  	if (!IsCaretInReadOnlyRegion) {  		if (IsCompletionSessionActive) {  			_completionSession.Commit ();  		} else {  			TriggerCompletion ();  		}  	}  	hr = VSConstants.S_OK;  	break;  case VSConstants.VSStd2KCmdID.CANCEL:  	if (IsCompletionSessionActive) {  		_completionSession.Dismiss ();  		hr = VSConstants.S_OK;  	} else if (!IsCaretInReadOnlyRegion) {  		// Delete all text after InputLineStart  		WpfTextView.TextBuffer.Delete (WpfConsole.AllInputExtent);  		hr = VSConstants.S_OK;  	}  	break;  case VSConstants.VSStd2KCmdID.CUTLINE:  	// clears the console when CutLine shortcut key is pressed'  	// usually it is Ctrl + L  	WpfConsole.ClearConsole ();  	hr = VSConstants.S_OK;  	break;  }  
