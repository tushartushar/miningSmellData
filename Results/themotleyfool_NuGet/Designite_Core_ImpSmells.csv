Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGet,RequestHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The method has 106 lines of code.
Complex Method,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,Cyclomatic complexity of the method is 8
Complex Method,NuGet,PackageReferenceFile,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,GetPackageReferences,Cyclomatic complexity of the method is 10
Complex Method,NuGet,PackageWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\PackageWalker.cs,Walk,Cyclomatic complexity of the method is 10
Complex Method,NuGet,ProjectSystemExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,DeleteFiles,Cyclomatic complexity of the method is 9
Complex Method,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,Cyclomatic complexity of the method is 15
Complex Method,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,Cyclomatic complexity of the method is 11
Complex Method,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,Cyclomatic complexity of the method is 9
Complex Method,NuGet,XElementExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\XElementExtensions.cs,Except,Cyclomatic complexity of the method is 9
Complex Method,NuGet,XElementExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\XElementExtensions.cs,MergeWith,Cyclomatic complexity of the method is 9
Complex Method,NuGet.Runtime,BindingRedirectManager,C:\repos\themotleyfool_NuGet\src\Core\Runtime\BindingRedirectManager.cs,AddBindingRedirects,Cyclomatic complexity of the method is 9
Long Parameter List,NuGet,RequestHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The method has 5 parameters. Parameters: createRequest' prepareRequest' proxyCache' credentialCache' credentialProvider
Long Parameter List,NuGet,AggregateQuery<TVal>,C:\repos\themotleyfool_NuGet\src\Core\Repositories\AggregateQuery.cs,AggregateQuery,The method has 6 parameters. Parameters: queryables' equalityComparer' subQueries' expression' logger' ignoreInvalidRepositories
Long Parameter List,NuGet,PackageHelper,C:\repos\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The method has 5 parameters. Parameters: sourceRepository' localRepository' packageId' version' allowPrereleaseVersions
Long Parameter List,NuGet,PackageHelper,C:\repos\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The method has 6 parameters. Parameters: sourceRepository' localRepository' constraintProvider' packageId' version' allowPrereleaseVersions
Long Parameter List,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The method has 5 parameters. Parameters: packageId' resolvePackage' updateDependencies' allowPrereleaseVersions' targetVersionSetExplicitly
Long Parameter List,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,InstallWalker,The method has 5 parameters. Parameters: localRepository' sourceRepository' logger' ignoreDependencies' allowPrereleaseVersions
Long Parameter List,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,InstallWalker,The method has 6 parameters. Parameters: localRepository' sourceRepository' targetFramework' logger' ignoreDependencies' allowPrereleaseVersions
Long Parameter List,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,InstallWalker,The method has 7 parameters. Parameters: localRepository' sourceRepository' constraintProvider' targetFramework' logger' ignoreDependencies' allowPrereleaseVersions
Long Parameter List,NuGet,UpdateWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\UpdateWalker.cs,UpdateWalker,The method has 7 parameters. Parameters: localRepository' sourceRepository' dependentsResolver' constraintProvider' logger' updateDependencies' allowPrereleaseVersions
Long Parameter List,NuGet,UpdateWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\UpdateWalker.cs,UpdateWalker,The method has 8 parameters. Parameters: localRepository' sourceRepository' dependentsResolver' constraintProvider' targetFramework' logger' updateDependencies' allowPrereleaseVersions
Long Parameter List,NuGet,UninstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,UninstallWalker,The method has 5 parameters. Parameters: repository' dependentsResolver' logger' removeDependencies' forceRemove
Long Parameter List,NuGet,UninstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,UninstallWalker,The method has 6 parameters. Parameters: repository' dependentsResolver' targetFramework' logger' removeDependencies' forceRemove
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 5 parameters. Parameters: repository' packageId' version' allowPrereleaseVersions' allowUnlisted
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 6 parameters. Parameters: repository' packageId' version' constraintProvider' allowPrereleaseVersions' allowUnlisted
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 6 parameters. Parameters: repository' packageId' versionSpec' constraintProvider' allowPrereleaseVersions' allowUnlisted
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackages,The method has 5 parameters. Parameters: repository' packageId' versionSpec' allowPrereleaseVersions' allowUnlisted
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 5 parameters. Parameters: repository' packageId' versionSpec' allowPrereleaseVersions' allowUnlisted
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindCompatiblePackages,The method has 6 parameters. Parameters: repository' constraintProvider' packageIds' package' targetFramework' allowPrereleaseVersions
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The method has 5 parameters. Parameters: repository' dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependencyCore,The method has 5 parameters. Parameters: repository' dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetUpdates,The method has 5 parameters. Parameters: repository' packages' includePrerelease' includeAllVersions' targetFrameworks
Long Parameter List,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetUpdatesCore,The method has 5 parameters. Parameters: repository' packages' includePrerelease' includeAllVersions' targetFramework
Long Identifier,NuGet,ManifestReference,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestReference.cs,,The length of the parameter _referenceFileInvalidCharacters is 31.
Long Identifier,NuGet,ManifestSchemaUtility,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestSchemaUtility.cs,,The length of the parameter TargetFrameworkInDependencyMinVersion is 37.
Long Identifier,NuGet,PackageSourceProvider,C:\repos\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,,The length of the parameter DisabledPackageSourcesSectionName is 33.
Long Identifier,NuGet,MachineCache,C:\repos\themotleyfool_NuGet\src\Core\Repositories\MachineCache.cs,,The length of the parameter NuGetCachePathEnvironmentVariable is 33.
Long Identifier,NuGet,PackageBuilder,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,Save,The length of the parameter requiresV4TargetFrameworkSchema is 31.
Long Identifier,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,IsPortableLibraryCompatible,The length of the parameter targetFrameworkPortableProfile is 30.
Long Statement,NuGet,MetadataExtractor,C:\repos\themotleyfool_NuGet\src\Core\Authoring\AssemblyMetadataExtractor.cs,GetMetadata,The length of the statement  "                string assemblyInformationalVersion = GetAttributeValueOrDefault<AssemblyInformationalVersionAttribute>(assembly' a => a.InformationalVersion); " is 143.
Long Statement,NuGet,ManifestFile,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestFile.cs,Validate,The length of the statement  "                yield return new ValidationResult(String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_SourceContainsInvalidCharacters' Source)); " is 142.
Long Statement,NuGet,ManifestFile,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestFile.cs,Validate,The length of the statement  "                yield return new ValidationResult(String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_TargetContainsInvalidCharacters' Target)); " is 142.
Long Statement,NuGet,ManifestFile,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestFile.cs,Validate,The length of the statement  "                yield return new ValidationResult(String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_ExcludeContainsInvalidCharacters' Exclude)); " is 144.
Long Statement,NuGet,ManifestMetadata,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,Validate,The length of the statement  "                    yield return new ValidationResult(String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_IdMaxLengthExceeded)); " is 122.
Long Statement,NuGet,ManifestReference,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestReference.cs,Validate,The length of the statement  "                yield return new ValidationResult(String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_InvalidReferenceFile' File)); " is 129.
Long Statement,NuGet,ManifestSchemaUtility,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestSchemaUtility.cs,GetSchemaNamespace,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.UnknownSchemaVersion' version)); " is 125.
Long Statement,NuGet,ManifestVersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestVersionUtility.cs,GetVersionFromMetadata,The length of the statement  "            if (SemanticVersion.TryParse(metadata.Version' out semanticVersion) && !String.IsNullOrEmpty(semanticVersion.SpecialVersion)) " is 125.
Long Statement,NuGet,NullSettings,C:\repos\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,SetValue,The length of the statement  "            throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "SetValue")); " is 136.
Long Statement,NuGet,NullSettings,C:\repos\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,SetValues,The length of the statement  "            throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "SetValues")); " is 137.
Long Statement,NuGet,NullSettings,C:\repos\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,SetNestedValues,The length of the statement  "            throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "SetNestedValues")); " is 143.
Long Statement,NuGet,NullSettings,C:\repos\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,DeleteValue,The length of the statement  "            throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "DeleteValue")); " is 139.
Long Statement,NuGet,NullSettings,C:\repos\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,DeleteSection,The length of the statement  "            throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "DeleteSection")); " is 141.
Long Statement,NuGet,Settings,C:\repos\themotleyfool_NuGet\src\Core\Configuration\Settings.cs,ReadValue,The length of the statement  "                throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.UserSettings_UnableToParseConfigFile' ConfigFilePath)); " is 143.
Long Statement,NuGet,PackageOperationExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,Reorder,The length of the statement  "                // For satellite packages' we need to ensure that the package is uninstalled prior to uninstalling the core package. This is because the satellite package has to remove  " is 168.
Long Statement,NuGet,PackageOperationExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,Reorder,The length of the statement  "                // satellite files from the lib directory so that the core package does not leave any files left over. The reverse is true for install operations. As a trivial fix' we are " is 171.
Long Statement,NuGet,PackageOperationExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,Reorder,The length of the statement  "                // going to trivially move all uninstall satellite operations to the beginning of our reduced list and all install operations at the end. " is 137.
Long Statement,NuGet,MultipartWebRequest,C:\repos\themotleyfool_NuGet\src\Core\Http\MultipartWebRequest.cs,CreateMultipartRequest,The length of the statement  "                    string header = String.Format(CultureInfo.InvariantCulture' FileTemplate' boundary' file.FieldName' file.FieldName' file.ContentType); " is 134.
Long Statement,NuGet,ProxyCache,C:\repos\themotleyfool_NuGet\src\Core\Http\ProxyCache.cs,GetUserConfiguredProxy,The length of the statement  "            // Try reading from the settings. The values are stored as 3 config values http_proxy' http_proxy_user' http_proxy_password " is 123.
Long Statement,NuGet,ProxyCache,C:\repos\themotleyfool_NuGet\src\Core\Http\ProxyCache.cs,GetUserConfiguredProxy,The length of the statement  "            // Next try reading from the environment variable http_proxy. This would be specified as http://<username>:<password>@proxy.com " is 127.
Long Statement,NuGet,RequestHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The length of the statement  "                    request.Proxy.Credentials = credentialProvider.GetCredentials(request' CredentialType.ProxyCredentials' retrying: proxyCredentialsRetryCount > 0); " is 146.
Long Statement,NuGet,RequestHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The length of the statement  "                    // If we are using STS' the auth's being performed by a request header. We do not need to ask the user for credentials at this point. " is 133.
Long Statement,NuGet,RequestHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The length of the statement  "                    request.Credentials = credentialProvider.GetCredentials(request' CredentialType.RequestCredentials' retrying: credentialsRetryCount > 0); " is 137.
Long Statement,NuGet,RequestHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,SetKeepAliveHeaders,The length of the statement  "            // KeepAlive is required for NTLM and Kerberos authentication. If we've never been authenticated or are using a different auth' we  " is 130.
Long Statement,NuGet,STSAuthHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\STSAuthHelper.cs,TryRetrieveSTSToken,The length of the statement  "            // TODO: We need to figure out a way to cache the token for the duration of the token's validity (which is available as part of it's result). " is 141.
Long Statement,NuGet,STSAuthHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\STSAuthHelper.cs,GetSTSToken,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.UnableToLocateWIF' requestUri)); " is 125.
Long Statement,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The length of the statement  "                            // However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone". " is 128.
Long Statement,NuGet,UnzippedPackage,C:\repos\themotleyfool_NuGet\src\Core\Packages\UnzippedPackage.cs,GetPackageRelativePath,The length of the statement  "            // Package paths returned by the file system contain the package name. We need to yank this out of the package name because the paths we are interested in are " is 158.
Long Statement,NuGet,UnzippedPackage,C:\repos\themotleyfool_NuGet\src\Core\Packages\UnzippedPackage.cs,EnsureManifest,The length of the statement  "                    String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_NotFound' _repositoryFileSystem.GetFullPath(manifestFile))); " is 126.
Long Statement,NuGet,SemanticVersion,C:\repos\themotleyfool_NuGet\src\Core\SemanticVersion.cs,Parse,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InvalidVersionString' version)' "version"); " is 128.
Long Statement,NuGet,SemanticVersion,C:\repos\themotleyfool_NuGet\src\Core\SemanticVersion.cs,TryParseInternal,The length of the statement  "            semVer = new SemanticVersion(NormalizeVersionValue(versionValue)' match.Groups["Release"].Value.TrimStart('-')' version.Replace(" "' "")); " is 138.
Long Statement,NuGet,PackageServer,C:\repos\themotleyfool_NuGet\src\Core\Server\PackageServer.cs,EnsureSuccessfulResponse,The length of the statement  "                    throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.PackageServerError' response.StatusDescription' String.Empty)); " is 156.
Long Statement,NuGet,PackageServer,C:\repos\themotleyfool_NuGet\src\Core\Server\PackageServer.cs,EnsureSuccessfulResponse,The length of the statement  "                    throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.PackageServerError' response.StatusDescription' e.Message)' e); " is 156.
Long Statement,NuGet,PackageSourceProvider,C:\repos\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,LoadPackageSources,The length of the statement  "                IEnumerable<KeyValuePair<string' string>> disabledSourcesValues = _settingsManager.GetValues(DisabledPackageSourcesSectionName) ?? " is 130.
Long Statement,NuGet,PackageSourceProvider,C:\repos\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,LoadPackageSources,The length of the statement  "                var disabledSources = new HashSet<string>(disabledSourcesValues.Select(s => s.Key)' StringComparer.CurrentCultureIgnoreCase); " is 125.
Long Statement,NuGet,PackageSourceProviderExtensions,C:\repos\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProviderExtensions.cs,GetAggregate,The length of the statement  "            return new AggregateRepository(factory' provider.GetEnabledPackageSources().Select(s => s.Source)' ignoreFailingRepositories); " is 126.
Long Statement,NuGet,PackageSourceProviderExtensions,C:\repos\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProviderExtensions.cs,ResolveSource,The length of the statement  "                                  where source.Name.Equals(value' StringComparison.CurrentCultureIgnoreCase) || source.Source.Equals(value' StringComparison.OrdinalIgnoreCase) " is 141.
Long Statement,NuGet,AggregateQuery<TVal>,C:\repos\themotleyfool_NuGet\src\Core\Repositories\AggregateQuery.cs,CreateQuery,The length of the statement  "            return (IQueryable)ctor.Invoke(new object[] { _queryables' _equalityComparer' subQueries' expression' _logger' _ignoreFailures }); " is 130.
Long Statement,NuGet,AggregateRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,GetPackages,The length of the statement  "            // We need to follow this pattern in all AggregateRepository methods to ensure it suppresses exceptions that may occur if the Ignore flag is set.  Oh how I despise my code.  " is 172.
Long Statement,NuGet,AggregateRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,ResolveDependency,The length of the statement  "                Func<IPackageRepository' IPackage> resolveDependency = Wrap(r => r.ResolveDependency(dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages)); " is 165.
Long Statement,NuGet,AggregateRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,GetUpdates,The length of the statement  "            // GetUpdatesCore returns all updates. We'll allow the extension method to determine if we need to collapse based on allVersion. " is 128.
Long Statement,NuGet,AggregateRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,GetUpdates,The length of the statement  "            var tasks = _repositories.Select(p => Task.Factory.StartNew(state => p.GetUpdates(packages' includePrerelease' includeAllVersions' targetFrameworks)' p)).ToArray(); " is 164.
Long Statement,NuGet,PackageReferenceFile,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,GetPackageReferences,The length of the statement  "                    throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.ReferenceFile_InvalidVersion' versionString' _path)); " is 141.
Long Statement,NuGet,PackageReferenceFile,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,GetPackageReferences,The length of the statement  "                        throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.ReferenceFile_InvalidVersion' versionConstraintString' _path)); " is 151.
Long Statement,NuGet,DataServiceContextWrapper,C:\repos\themotleyfool_NuGet\src\Core\Repositories\DataServiceContextWrapper.cs,ExtractSupportedProperties,The length of the statement  "            // The name is listed in the entity set listing as <EntitySet Name="Packages" EntityType="Gallery.Infrastructure.FeedModels.PublishedPackage" /> " is 144.
Long Statement,NuGet,DataServiceQueryWrapper<T>,C:\repos\themotleyfool_NuGet\src\Core\Repositories\DataServiceQueryWrapper.cs,RequiresBatch,The length of the statement  "            // Absolute uri returns the escaped url that would be sent to the server. Escaping exapnds the value and IIS uses this escaped query to determine if the  " is 152.
Long Statement,NuGet,SharedPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,OpenPackage,The length of the statement  "            // We could either be passed in manifest path or the path to the nupkg. The manifest path ensures that the calling code has already verified the existence of the  " is 161.
Long Statement,NuGet,SharedPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,OpenPackage,The length of the statement  "            // manifest and we can return an UnzippedPackageRepository. If the caller passed in a nupkg' we'll quickly verify if a manifest exists alongside. " is 145.
Long Statement,NuGet,Preprocessor,C:\repos\themotleyfool_NuGet\src\Core\FileModifiers\Preprocessor.cs,ReplaceToken,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.TokenHasNoValue' propertyName)); " is 125.
Long Statement,NuGet,MemoryCache,C:\repos\themotleyfool_NuGet\src\Core\Utility\MemoryCache.cs,GetOrAdd,The length of the statement  "            // none of the data that we cache is time sensitive. At worst' an item will be cached for an extra _cleanupInterval duration. " is 125.
Long Statement,NuGet,PackageHelper,C:\repos\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "            return ResolvePackage(sourceRepository' localRepository' constraintProvider: NullConstraintProvider.Instance' packageId: packageId' version: version' allowPrereleaseVersions: allowPrereleaseVersions); " is 200.
Long Statement,NuGet,PackageHelper,C:\repos\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "                package = sourceRepository.FindPackage(packageId' version' constraintProvider' allowPrereleaseVersions' allowUnlisted: false); " is 126.
Long Statement,NuGet,PackageHelper,C:\repos\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "                    package = localRepository.FindPackage(package.Id' package.Version' allowPrereleaseVersions' allowUnlisted: true) ?? package; " is 124.
Long Statement,NuGet,PathValidator,C:\repos\themotleyfool_NuGet\src\Core\Utility\PathValidator.cs,IsValidSource,The length of the statement  "            return PathValidator.IsValidLocalPath(source) || PathValidator.IsValidUncPath(source) || PathValidator.IsValidUrl(source); " is 122.
Long Statement,NuGet,PathValidator,C:\repos\themotleyfool_NuGet\src\Core\Utility\PathValidator.cs,IsValidLocalPath,The length of the statement  "                return Regex.IsMatch(path.Trim()' @"^[A-Za-z]:\\") && Path.IsPathRooted(path) && (path.IndexOfAny(_invalidPathChars) == -1); " is 124.
Long Statement,NuGet,PathValidator,C:\repos\themotleyfool_NuGet\src\Core\Utility\PathValidator.cs,IsValidUrl,The length of the statement  "            // Make sure url starts with protocol:// because Uri.TryCreate() returns true for local and UNC paths even if badly formed. " is 123.
Long Statement,NuGet,VersionSpec,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,Equals,The length of the statement  "            return Equals(other.MinVersion' MinVersion) && other.IsMinInclusive.Equals(IsMinInclusive) && Equals(other.MaxVersion' MaxVersion) && other.IsMaxInclusive.Equals(IsMaxInclusive); " is 178.
Long Statement,NuGet,PackageManager,C:\repos\themotleyfool_NuGet\src\Core\PackageManager.cs,InstallPackage,The length of the statement  "            IPackage package = PackageHelper.ResolvePackage(SourceRepository' LocalRepository' packageId' version' allowPrereleaseVersions); " is 128.
Long Statement,NuGet,PackageManager,C:\repos\themotleyfool_NuGet\src\Core\PackageManager.cs,InstallPackage,The length of the statement  "            InstallPackage(package' targetFramework: null' ignoreDependencies: ignoreDependencies' allowPrereleaseVersions: allowPrereleaseVersions); " is 137.
Long Statement,NuGet,PackageManager,C:\repos\themotleyfool_NuGet\src\Core\PackageManager.cs,ExpandFiles,The length of the statement  "                if (PackageUtility.IsSatellitePackage(package' LocalRepository' targetFramework: null' runtimePackage: out runtimePackage)) " is 123.
Long Statement,NuGet,PackageManager,C:\repos\themotleyfool_NuGet\src\Core\PackageManager.cs,RemoveFiles,The length of the statement  "            if (PackageUtility.IsSatellitePackage(package' LocalRepository' targetFramework: null' runtimePackage: out runtimePackage)) " is 123.
Long Statement,NuGet,PackageManager,C:\repos\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "            UpdatePackage(packageId' version: null' updateDependencies: updateDependencies' allowPrereleaseVersions: allowPrereleaseVersions); " is 130.
Long Statement,NuGet,PackageManager,C:\repos\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "            UpdatePackage(packageId' () => SourceRepository.FindPackage(packageId' versionSpec' allowPrereleaseVersions' allowUnlisted: false)' " is 131.
Long Statement,NuGet,PackageManager,C:\repos\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "            UpdatePackage(packageId' () => SourceRepository.FindPackage(packageId' version' allowPrereleaseVersions' allowUnlisted: false)' " is 127.
Long Statement,NuGet,PackageBuilder,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,ValidateDependencySets,The length of the statement  "                    throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_InvalidPrereleaseDependency' prereleaseDependency.ToString())); " is 160.
Long Statement,NuGet,PackageBuilder,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,ValidateReferenceAssemblies,The length of the statement  "                    throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.Manifest_InvalidReference' reference)); " is 127.
Long Statement,NuGet,PackageBuilder,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,AddFiles,The length of the statement  "            List<PhysicalPackageFile> searchFiles = PathResolver.ResolveSearchPattern(basePath' source' destination' _includeEmptyDirectories).ToList(); " is 140.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,WildcardToRegex,The length of the statement  "                    .Replace(@"\*\*"' ".*") // For recursive wildcards that don't end in a slash e.g. **.txt would be treated as a .txt file at any depth " is 133.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,WildcardToRegex,The length of the statement  "                    .Replace(@"\*\*"' ".*") // For recursive wildcards that don't end in a slash e.g. **.txt would be treated as a .txt file at any depth " is 133.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolveSearchPattern,The length of the statement  "            IEnumerable<SearchPathResult> searchResults = PerformWildcardSearchInternal(basePath' searchPath' includeEmptyDirectories' out normalizedBasePath); " is 147.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearch,The length of the statement  "            var searchResults = PerformWildcardSearchInternal(basePath' searchPath' includeEmptyDirectories: false' normalizedBasePath: out normalizedBasePath); " is 148.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearchInternal,The length of the statement  "            // Append the basePath to searchPattern and get the search regex. We need to do this because the search regex is matched from line start. " is 137.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearchInternal,The length of the statement  "            // This is a hack to prevent enumerating over the entire directory tree if the only wildcard characters are the ones in the file name.  " is 134.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearchInternal,The length of the statement  "            // Starting from the base path' enumerate over all files and match it using the wildcard expression provided by the user. " is 121.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,GetPathToEnumerateFrom,The length of the statement  "                // For paths without wildcard' we could either have base relative paths (such as lib\foo.dll) or paths outside the base path " is 124.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolvePackagePath,The length of the statement  "            bool isRecursiveWildcardSearch = isWildcardSearch && searchPattern.IndexOf("**"' StringComparison.OrdinalIgnoreCase) != -1; " is 123.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolvePackagePath,The length of the statement  "            if ((isRecursiveWildcardSearch || isDirectorySearch) && fullPath.StartsWith(searchDirectory' StringComparison.OrdinalIgnoreCase)) " is 129.
Long Statement,NuGet,PathResolver,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolvePackagePath,The length of the statement  "            else if (!isWildcardSearch && Path.GetExtension(searchPattern).Equals(Path.GetExtension(targetPath)' StringComparison.OrdinalIgnoreCase)) " is 137.
Long Statement,NuGet,Manifest,C:\repos\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,CreateDependencySet,The length of the statement  "                        TargetFramework = dependencySet.TargetFramework != null ? VersionUtility.GetFrameworkString(dependencySet.TargetFramework) : null' " is 130.
Long Statement,NuGet,Manifest,C:\repos\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,ValidateDependencySets,The length of the statement  "                        throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.DuplicateDependenciesDefined' metadata.Id' dependency.Id)); " is 152.
Long Statement,NuGet,Manifest,C:\repos\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,ValidateDependencyVersion,The length of the statement  "                        throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.DependencyHasInvalidVersion' dependency.Id)); " is 138.
Long Statement,NuGet,Manifest,C:\repos\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,ValidateDependencyVersion,The length of the statement  "                        throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' NuGetResources.DependencyHasInvalidVersion' dependency.Id)); " is 138.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,AddPackageReference,The length of the statement  "            IPackage package = PackageHelper.ResolvePackage(SourceRepository' LocalRepository' NullConstraintProvider.Instance' packageId' version' allowPrereleaseVersions); " is 161.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,Execute,The length of the statement  "                Logger.Log(MessageLevel.Info' NuGetResources.Log_ProjectAlreadyReferencesPackage' Project.ProjectName' package.GetFullName()); " is 126.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,Execute,The length of the statement  "                    Logger.Log(MessageLevel.Info' NuGetResources.Log_ProjectAlreadyReferencesPackage' Project.ProjectName' operation.Package.GetFullName()); " is 136.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,AddPackageReferenceToProject,The length of the statement  "            Logger.Log(MessageLevel.Info' NuGetResources.Log_SuccessfullyAddedPackageReference' package.GetFullName()' Project.ProjectName); " is 128.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "            IList<IPackageAssemblyReference> assemblyReferences = Project.GetCompatibleItemsCore(package.AssemblyReferences).ToList(); " is 122.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "            IList<FrameworkAssemblyReference> frameworkReferences = Project.GetCompatibleItemsCore(package.FrameworkAssemblies).ToList(); " is 125.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "                // for portable framework' we want to show the friendly short form (e.g. portable-win8+net45+wp8) instead of ".NETPortable' Profile=Profile104". " is 144.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReferenceFromProject,The length of the statement  "                                          from assemblyReference in assemblyReferences ?? Enumerable.Empty<IPackageAssemblyReference>() // This can happen if package installed left the project in a bad state " is 165.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReferenceFromProject,The length of the statement  "            // Get the files and references for this package' that aren't in use by any other packages so we don't have to do reference counting " is 132.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReferenceFromProject,The length of the statement  "            Logger.Log(MessageLevel.Info' NuGetResources.Log_SuccessfullyRemovedPackageReference' package.GetFullName()' Project.ProjectName); " is 130.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "                () => SourceRepository.FindPackage(packageId' versionSpec' ConstraintProvider' allowPrereleaseVersions' allowUnlisted: false)' " is 126.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "            UpdatePackageReference(packageId' () => SourceRepository.FindPackage(packageId' version' ConstraintProvider' allowPrereleaseVersions' allowUnlisted: false)' updateDependencies' allowPrereleaseVersions' targetVersionSetExplicitly: version != null); " is 247.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "            // the condition (allowPrereleaseVersions || targetVersionSetExplicitly || oldPackage.IsReleaseVersion() || !package.IsReleaseVersion() || oldPackage.Version < package.Version) " is 176.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "                (allowPrereleaseVersions || targetVersionSetExplicitly || oldPackage.IsReleaseVersion() || !package.IsReleaseVersion() || oldPackage.Version < package.Version)) " is 160.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "                Logger.Log(MessageLevel.Info' NuGetResources.Log_UpdatingPackages' package.Id' oldPackage.Version' package.Version' Project.ProjectName); " is 137.
Long Statement,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "                    Logger.Log(MessageLevel.Info' NuGetResources.Log_ApplyingConstraints' packageId' VersionUtility.PrettyPrint(constraint)' ConstraintProvider.Source); " is 148.
Long Statement,NuGet,DataServicePackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\DataServicePackageRepository.cs,GetUpdates,The length of the statement  "                return PackageRepositoryExtensions.GetUpdatesCore(this' packages' includePrerelease' includeAllVersions' targetFrameworks); " is 123.
Long Statement,NuGet,DataServicePackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\DataServicePackageRepository.cs,GetUpdates,The length of the statement  "            string targetFrameworksValue = targetFrameworks.IsEmpty() ? "" : String.Join("|"' targetFrameworks.Select(VersionUtility.GetShortFrameworkName)); " is 145.
Long Statement,NuGet,PackageDownloader,C:\repos\themotleyfool_NuGet\src\Core\Utility\PackageDownloader.cs,DownloadPackage,The length of the statement  "            string operation = String.Format(CultureInfo.CurrentCulture' NuGetResources.DownloadProgressStatus' package.Id' package.Version); " is 129.
Long Statement,NuGet,ZipPackage,C:\repos\themotleyfool_NuGet\src\Core\Packages\ZipPackage.cs,EnsureManifest,The length of the statement  "                PackageRelationship relationshipType = package.GetRelationshipsByType(Constants.PackageRelationshipNamespace + PackageBuilder.ManifestRelationType).SingleOrDefault(); " is 166.
Long Statement,NuGet,PackageWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\PackageWalker.cs,Walk,The length of the statement  "                    IPackage resolvedDependency = Marker.ResolveDependency(dependency' AllowPrereleaseVersions' preferListedPackages: false) ?? " is 123.
Long Statement,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,TryUpdate,The length of the statement  "            var packages = from p in SourceRepository.FindCompatiblePackages(ConstraintProvider' dependentsLookup.Keys' package' TargetFramework' AllowPrereleaseVersions) " is 158.
Long Statement,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,TryUpdate,The length of the statement  "                // B 1.5 or B 2.0. In order to achieve this' we add a constraint for version of B 1.0.1 so we stay within those bounds for B. " is 125.
Long Statement,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,ResolveDependency,The length of the statement  "            IPackage package = Repository.ResolveDependency(dependency' ConstraintProvider' allowPrereleaseVersions: true' preferListedPackages: false); " is 140.
Long Statement,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,ResolveDependency,The length of the statement  "            IPackage sourcePackage = SourceRepository.ResolveDependency(dependency' ConstraintProvider' AllowPrereleaseVersions' preferListedPackages: true); " is 145.
Long Statement,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,OnDependencyResolveError,The length of the statement  "                message = String.Format(CultureInfo.CurrentCulture' NuGetResources.AdditonalConstraintsDefined' dependency.Id' VersionUtility.PrettyPrint(spec)' ConstraintProvider.Source); " is 172.
Long Statement,NuGet,InstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,CreatePackageConflictException,The length of the statement  "                       NuGetResources.ConflictErrorWithDependent' package.GetFullName()' resolvedPackage.GetFullName()' dependents.Single().Id)); " is 122.
Long Statement,NuGet,UninstallWalker,C:\repos\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,WarnRemovingPackageBreaksDependents,The length of the statement  "            Logger.Log(MessageLevel.Warning' NuGetResources.Warning_UninstallingPackageWillBreakDependents' package.GetFullName()' String.Join("' "' dependents.Select(d => d.GetFullName()))); " is 179.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The length of the statement  "            // Default allow pre release versions to true here because the caller typically wants to find all packages in this scenario for e.g when checking if a  " is 150.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The length of the statement  "            return FindPackage(repository' packageId' version' NullConstraintProvider.Instance' allowPrereleaseVersions: true' allowUnlisted: true); " is 136.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The length of the statement  "            return FindPackage(repository' packageId' version' NullConstraintProvider.Instance' allowPrereleaseVersions' allowUnlisted); " is 124.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,Search,The length of the statement  "            return Search(repository' searchTerm' targetFrameworks: Enumerable.Empty<string>()' allowPrereleaseVersions: allowPrereleaseVersions); " is 134.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The length of the statement  "            return ResolveDependency(repository' dependency' constraintProvider: null' allowPrereleaseVersions: allowPrereleaseVersions' preferListedPackages: preferListedPackages); " is 169.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The length of the statement  "                return dependencyResolver.ResolveDependency(dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages); " is 123.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The length of the statement  "            return ResolveDependencyCore(repository' dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages); " is 120.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetUpdates,The length of the statement  "            return serviceBasedRepository != null ? serviceBasedRepository.GetUpdates(packages' includePrerelease' includeAllVersions' targetFrameworks) : " is 142.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,SupportsTargetFrameworks,The length of the statement  "            return targetFramework.IsEmpty() || targetFramework.Any(t => VersionUtility.IsCompatible(t' package.GetSupportedFrameworks())); " is 127.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetCompareExpression,The length of the statement  "            Expression toLowerExpression = Expression.Call(propertyExpression' typeof(string).GetMethod("ToLower"' Type.EmptyTypes)); " is 121.
Long Statement,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveSafeVersion,The length of the statement  "            // major and minor combination (we want to make some versioning assumptions that the 3rd number is a non-breaking bug fix). This is so that we get the closest version " is 166.
Long Statement,NuGet,FileSystemExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\FileSystemExtensions.cs,DeleteFiles,The length of the statement  "                var directoryFiles = directoryLookup.Contains(directory) ? directoryLookup[directory] : Enumerable.Empty<IPackageFile>(); " is 121.
Long Statement,NuGet,ProjectSystemExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,DeleteFiles,The length of the statement  "            var directoryLookup = files.ToLookup(p => Path.GetDirectoryName(ResolveTargetPath(project' fileTransformers' p.EffectivePath' out transformer))); " is 145.
Long Statement,NuGet,ProjectSystemExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,DeleteFiles,The length of the statement  "                var directoryFiles = directoryLookup.Contains(directory) ? directoryLookup[directory] : Enumerable.Empty<IPackageFile>(); " is 121.
Long Statement,NuGet,PackageUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\PackageUtility.cs,IsSatellitePackage,The length of the statement  "                    runtimePackage = repository.FindPackage(runtimePackageId' versionSpec: dependency.VersionSpec' allowPrereleaseVersions: true' allowUnlisted: true); " is 147.
Long Statement,NuGet,LocalPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FindPackage,The length of the statement  "            // If caching is enabled' check if we have a cached path. Additionally' verify that the file actually exists on disk since it might have moved. " is 143.
Long Statement,NuGet,LocalPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FindPackage,The length of the statement  "            // Lookup files which start with the name "<Id>." and attempt to match it with all possible version string combinations (e.g. 1.2.0' 1.2.0.0)  " is 141.
Long Statement,NuGet,LocalPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FindPackage,The length of the statement  "            // before opening the package. To avoid creating file name strings' we attempt to specifically match everything after the last path separator " is 141.
Long Statement,NuGet,LocalPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,OpenPackage,The length of the statement  "                throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.ErrorReadingPackage' path)' ex); " is 120.
Long Statement,NuGet,LocalPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FileNameMatchesPattern,The length of the statement  "            // When matching by pattern' we will always have a version token. Packages without versions would be matched early on by the version-less path resolver  " is 151.
Long Statement,NuGet,UriUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\UriUtility.cs,UriEquals,The length of the statement  "            return Uri.Compare(uri1' uri2' UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase) == 0; " is 149.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The length of the statement  "                // We failed to parse the version string once more. So we need to decide if this is unsupported or if we use the default version. " is 129.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The length of the statement  "            if (versionSpec.MinVersion != null && versionSpec.IsMinInclusive && versionSpec.MaxVersion == null && !versionSpec.IsMaxInclusive) " is 130.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The length of the statement  "            if (versionSpec.MinVersion != null && versionSpec.MaxVersion != null && versionSpec.MinVersion == versionSpec.MaxVersion && versionSpec.IsMinInclusive && versionSpec.IsMaxInclusive) " is 181.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetShortFrameworkName,The length of the statement  "            // "windowsphone" string' rather than "sl3-wp". The latter one is also prohibited in portable framework's profile string. " is 121.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryGetCompatibleItems,The length of the statement  "                                  let frameworks = (item.SupportedFrameworks != null && item.SupportedFrameworks.Any()) ? item.SupportedFrameworks : new FrameworkName[] { null } " is 143.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The length of the statement  "                // framework identifier a compatibility score of 10' to make sure it weighs more than the compatibility of matching version. " is 124.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetEffectiveFrameworkVersion,The length of the statement  "                    var compatibleFramework = profile.SupportedFrameworks.FirstOrDefault(f => VersionUtility.IsCompatible(projectFramework' f)); " is 124.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetCompatibilityBetweenPortableLibraryAndPortableLibrary,The length of the statement  "            // Algorithms: Give a score from 0 to N indicating how close *in version* each package platform is the project’s platforms  " is 122.
Long Statement,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,IsPortableFramework,The length of the statement  "            return framework != null && PortableFrameworkIdentifier.Equals(framework.Identifier' StringComparison.OrdinalIgnoreCase); " is 121.
Long Statement,NuGet.Analysis.Rules,MisplacedAssemblyRule,C:\repos\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedAssemblyRule.cs,Validate,The length of the statement  "                else if (!directory.StartsWith(Constants.LibDirectory + Path.DirectorySeparatorChar' StringComparison.OrdinalIgnoreCase)) " is 121.
Long Statement,NuGet.Runtime,BindingRedirectManager,C:\repos\themotleyfool_NuGet\src\Core\Runtime\BindingRedirectManager.cs,AddBindingRedirects,The length of the statement  "                        // Since we have a binding element' the assembly binding node (parent node) must exist. We don't need to do anything more here. " is 127.
Complex Conditional,NuGet,VersionSpec,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,ToString,The conditional expression  "MinVersion != null && IsMinInclusive && MaxVersion == null && !IsMaxInclusive"  is complex.
Complex Conditional,NuGet,VersionSpec,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,ToString,The conditional expression  "MinVersion != null && MaxVersion != null && MinVersion == MaxVersion && IsMinInclusive && IsMaxInclusive"  is complex.
Complex Conditional,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The conditional expression  "assemblyReferences.Count == 0 && frameworkReferences.Count == 0 && contentFiles.Count == 0 &&                  (package.FrameworkAssemblies.Any() || package.AssemblyReferences.Any() || package.GetContentFiles().Any())"  is complex.
Complex Conditional,NuGet,ProjectManager,C:\repos\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The conditional expression  "package != null &&                  oldPackage.Version != package.Version &&                  (allowPrereleaseVersions || targetVersionSetExplicitly || oldPackage.IsReleaseVersion() || !package.IsReleaseVersion() || oldPackage.Version < package.Version)"  is complex.
Complex Conditional,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The conditional expression  "versionSpec.MinVersion != null && versionSpec.IsMinInclusive && versionSpec.MaxVersion == null && !versionSpec.IsMaxInclusive"  is complex.
Complex Conditional,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The conditional expression  "versionSpec.MinVersion != null && versionSpec.MaxVersion != null && versionSpec.MinVersion == versionSpec.MaxVersion && versionSpec.IsMinInclusive && versionSpec.IsMaxInclusive"  is complex.
Empty Catch Block,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadProfilesFromFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadProfilesFromFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetDirectories,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetDirectories,The method has an empty catch block.
Empty Catch Block,NuGet,MachineCache,C:\repos\themotleyfool_NuGet\src\Core\Repositories\MachineCache.cs,TryAct,The method has an empty catch block.
Empty Catch Block,NuGet,MachineCache,C:\repos\themotleyfool_NuGet\src\Core\Repositories\MachineCache.cs,TryAct,The method has an empty catch block.
Empty Catch Block,NuGet,SharedPackageRepository,C:\repos\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,GetStoreDocument,The method has an empty catch block.
Magic Number,NuGet,VersionExtensions,C:\repos\themotleyfool_NuGet\src\Core\Extensions\VersionExtensions.cs,GetComparableVersionStrings,The following statement contains a magic number: var paths = new List<string>(3);
Magic Number,NuGet,STSAuthHelper,C:\repos\themotleyfool_NuGet\src\Core\Http\STSAuthHelper.cs,TryRetrieveSTSToken,The following statement contains a magic number: MemoryCache.Instance.GetOrAdd(cacheKey'                                      () => GetSTSToken(requestUri' endPoint' realm)'                                      TimeSpan.FromMinutes(30)'                                      absoluteExpiration: true);
Magic Number,NuGet,NetPortableProfile,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfile.cs,GetHashCode,The following statement contains a magic number: return Name.GetHashCode() * 3137 + SupportedFrameworks.GetHashCode();
Magic Number,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: try              {                  var document = XDocument.Load(stream);                  var root = document.Root;                  if (root.Name.LocalName.Equals("Framework"' StringComparison.Ordinal))                  {                      string identifer = root.GetOptionalAttributeValue("Identifier");                      if (identifer == null)                      {                          return null;                      }                        string versionString = root.GetOptionalAttributeValue("MinimumVersion");                      if (versionString == null)                      {                          return null;                      }                        Version version;                      if (!Version.TryParse(versionString' out version))                      {                          return null;                      }                        string profile = root.GetOptionalAttributeValue("Profile");                      if (profile == null)                      {                          profile = "";                      }                        if (profile.EndsWith("*"' StringComparison.Ordinal))                      {                          profile = profile.Substring(0' profile.Length - 1);                            // special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71                          if (profile.Equals("WindowsPhone7"' StringComparison.OrdinalIgnoreCase))                          {                              profile = "WindowsPhone71";                          }                          else if (identifer.Equals("Silverlight"' StringComparison.OrdinalIgnoreCase) &&                                   profile.Equals("WindowsPhone"' StringComparison.OrdinalIgnoreCase) &&                                   version == new Version(4' 0))                          {                              // Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.                               // However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".                              // This is how the Portable Library xml describes a WP7 platform' as shown here:                              //                               // <Framework                              //     Identifier="Silverlight"                              //     Profile="WindowsPhone*"                              //     MinimumVersion="4.0"                              //     DisplayName="Windows Phone"                              //     MinimumVersionDisplayName="7" />                              //                              // To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.                                version = new Version(3' 0);                          }                      }                        return new FrameworkName(identifer' version' profile);                  }              }              catch (XmlException)              {              }              catch (IOException)              {              }              catch (SecurityException)              {              }
Magic Number,NuGet,NetPortableProfileTable,C:\repos\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: try              {                  var document = XDocument.Load(stream);                  var root = document.Root;                  if (root.Name.LocalName.Equals("Framework"' StringComparison.Ordinal))                  {                      string identifer = root.GetOptionalAttributeValue("Identifier");                      if (identifer == null)                      {                          return null;                      }                        string versionString = root.GetOptionalAttributeValue("MinimumVersion");                      if (versionString == null)                      {                          return null;                      }                        Version version;                      if (!Version.TryParse(versionString' out version))                      {                          return null;                      }                        string profile = root.GetOptionalAttributeValue("Profile");                      if (profile == null)                      {                          profile = "";                      }                        if (profile.EndsWith("*"' StringComparison.Ordinal))                      {                          profile = profile.Substring(0' profile.Length - 1);                            // special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71                          if (profile.Equals("WindowsPhone7"' StringComparison.OrdinalIgnoreCase))                          {                              profile = "WindowsPhone71";                          }                          else if (identifer.Equals("Silverlight"' StringComparison.OrdinalIgnoreCase) &&                                   profile.Equals("WindowsPhone"' StringComparison.OrdinalIgnoreCase) &&                                   version == new Version(4' 0))                          {                              // Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.                               // However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".                              // This is how the Portable Library xml describes a WP7 platform' as shown here:                              //                               // <Framework                              //     Identifier="Silverlight"                              //     Profile="WindowsPhone*"                              //     MinimumVersion="4.0"                              //     DisplayName="Windows Phone"                              //     MinimumVersionDisplayName="7" />                              //                              // To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.                                version = new Version(3' 0);                          }                      }                        return new FrameworkName(identifer' version' profile);                  }              }              catch (XmlException)              {              }              catch (IOException)              {              }              catch (SecurityException)              {              }
Magic Number,NuGet,PackageName,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageName.cs,GetHashCode,The following statement contains a magic number: return _packageId.GetHashCode() * 3137 + _version.GetHashCode();
Magic Number,NuGet,SemanticVersion,C:\repos\themotleyfool_NuGet\src\Core\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: if (SpecialVersion != null)              {                  hashCode = hashCode * 4567 + SpecialVersion.GetHashCode();              }
Magic Number,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The following statement contains a magic number: try              {                  path = GetFullPath(path);                  Directory.Delete(path' recursive);                    // The directory is not guranteed to be gone since there could be                  // other open handles. Wait' up to half a second' until the directory is gone.                  for (int i = 0; Directory.Exists(path) && i < 5; ++i)                  {                      System.Threading.Thread.Sleep(100);                  }                    Logger.Log(MessageLevel.Debug' NuGetResources.Debug_RemovedFolder' path);              }              catch (DirectoryNotFoundException)              {              }
Magic Number,NuGet,PhysicalFileSystem,C:\repos\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The following statement contains a magic number: try              {                  path = GetFullPath(path);                  Directory.Delete(path' recursive);                    // The directory is not guranteed to be gone since there could be                  // other open handles. Wait' up to half a second' until the directory is gone.                  for (int i = 0; Directory.Exists(path) && i < 5; ++i)                  {                      System.Threading.Thread.Sleep(100);                  }                    Logger.Log(MessageLevel.Debug' NuGetResources.Debug_RemovedFolder' path);              }              catch (DirectoryNotFoundException)              {              }
Magic Number,NuGet,MachineCache,C:\repos\themotleyfool_NuGet\src\Core\Repositories\MachineCache.cs,AddPackage,The following statement contains a magic number: if (files.Count >= MaxPackages)              {                  // It's expensive to hit the file system to get the last accessed date for files                  // To reduce this cost from occuring frequently' we'll purge packages in batches allowing for a 20% buffer.                  var filesToDelete = files.OrderBy(FileSystem.GetLastAccessed)                                           .Take(files.Count - (int)(0.8 * MaxPackages))                                           .ToList();                  TryClear(filesToDelete);              }
Magic Number,NuGet,PackageReference,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageReference.cs,GetHashCode,The following statement contains a magic number: return Id.GetHashCode() * 3137 + (Version == null ? 0 : Version.GetHashCode());
Magic Number,NuGet,VersionSpec,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = (MinVersion != null ? MinVersion.GetHashCode() : 0);                  result = (result*397) ^ IsMinInclusive.GetHashCode();                  result = (result*397) ^ (MaxVersion != null ? MaxVersion.GetHashCode() : 0);                  result = (result*397) ^ IsMaxInclusive.GetHashCode();                  return result;              }
Magic Number,NuGet,VersionSpec,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = (MinVersion != null ? MinVersion.GetHashCode() : 0);                  result = (result*397) ^ IsMinInclusive.GetHashCode();                  result = (result*397) ^ (MaxVersion != null ? MaxVersion.GetHashCode() : 0);                  result = (result*397) ^ IsMaxInclusive.GetHashCode();                  return result;              }
Magic Number,NuGet,VersionSpec,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = (MinVersion != null ? MinVersion.GetHashCode() : 0);                  result = (result*397) ^ IsMinInclusive.GetHashCode();                  result = (result*397) ^ (MaxVersion != null ? MaxVersion.GetHashCode() : 0);                  result = (result*397) ^ IsMaxInclusive.GetHashCode();                  return result;              }
Magic Number,NuGet,PackageBuilder,C:\repos\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,ValidateSpecialVersionLength,The following statement contains a magic number: return version == null || version.SpecialVersion == null || version.SpecialVersion.Length <= 20;
Magic Number,NuGet,PackageSource,C:\repos\themotleyfool_NuGet\src\Core\PackageSource\PackageSource.cs,GetHashCode,The following statement contains a magic number: return Name.GetHashCode() * 3137 + Source.GetHashCode();
Magic Number,NuGet,DataServicePackage,C:\repos\themotleyfool_NuGet\src\Core\Packages\DataServicePackage.cs,ParseDependency,The following statement contains a magic number: var targetFramework = (tokens.Length > 2 && !String.IsNullOrEmpty(tokens[2]))                                      ? VersionUtility.ParseFrameworkName(tokens[2])                                      : null;
Magic Number,NuGet,DataServicePackage,C:\repos\themotleyfool_NuGet\src\Core\Packages\DataServicePackage.cs,ParseDependency,The following statement contains a magic number: var targetFramework = (tokens.Length > 2 && !String.IsNullOrEmpty(tokens[2]))                                      ? VersionUtility.ParseFrameworkName(tokens[2])                                      : null;
Magic Number,NuGet,DataServicePackage,C:\repos\themotleyfool_NuGet\src\Core\Packages\DataServicePackage.cs,ParseDependency,The following statement contains a magic number: var targetFramework = (tokens.Length > 2 && !String.IsNullOrEmpty(tokens[2]))                                      ? VersionUtility.ParseFrameworkName(tokens[2])                                      : null;
Magic Number,NuGet,HashCodeCombiner,C:\repos\themotleyfool_NuGet\src\Core\Utility\HashCodeCombiner.cs,AddInt32,The following statement contains a magic number: _combinedHash64 = ((_combinedHash64 << 5) + _combinedHash64) ^ i;
Magic Number,NuGet,HttpClient,C:\repos\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: const int ChunkSize = 1024 * 4;
Magic Number,NuGet,HttpClient,C:\repos\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: const int ChunkSize = 1024 * 4;
Magic Number,NuGet,HttpClient,C:\repos\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (var response = GetResponse())              {                  // Total response length                  int length = (int)response.ContentLength;                  using (Stream stream = response.GetResponseStream())                  {                      // in some circumstances' the Content-Length response header is missing' resulting in                      // the ContentLength = -1. In which case' we copy the whole stream and do not report progress.                      if (length < 0)                      {                          using (var memoryStream = new MemoryStream())                          {                              stream.CopyTo(memoryStream' ChunkSize);                              buffer = memoryStream.ToArray();                          }                            // reporting fake progress as 100%                          OnProgressAvailable(100);                      }                      else                      {                          // We read the response stream chunk by chunk (each chunk is 4KB).                           // After reading each chunk' we report the progress based on the total number bytes read so far.                          int totalReadSoFar = 0;                          buffer = new byte[length];                          while (totalReadSoFar < length)                          {                              int bytesRead = stream.Read(buffer' totalReadSoFar' Math.Min(length - totalReadSoFar' ChunkSize));                              if (bytesRead == 0)                              {                                  break;                              }                              else                              {                                  totalReadSoFar += bytesRead;                                  OnProgressAvailable((totalReadSoFar * 100) / length);                              }                          }                      }                  }              }
Magic Number,NuGet,HttpClient,C:\repos\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (var response = GetResponse())              {                  // Total response length                  int length = (int)response.ContentLength;                  using (Stream stream = response.GetResponseStream())                  {                      // in some circumstances' the Content-Length response header is missing' resulting in                      // the ContentLength = -1. In which case' we copy the whole stream and do not report progress.                      if (length < 0)                      {                          using (var memoryStream = new MemoryStream())                          {                              stream.CopyTo(memoryStream' ChunkSize);                              buffer = memoryStream.ToArray();                          }                            // reporting fake progress as 100%                          OnProgressAvailable(100);                      }                      else                      {                          // We read the response stream chunk by chunk (each chunk is 4KB).                           // After reading each chunk' we report the progress based on the total number bytes read so far.                          int totalReadSoFar = 0;                          buffer = new byte[length];                          while (totalReadSoFar < length)                          {                              int bytesRead = stream.Read(buffer' totalReadSoFar' Math.Min(length - totalReadSoFar' ChunkSize));                              if (bytesRead == 0)                              {                                  break;                              }                              else                              {                                  totalReadSoFar += bytesRead;                                  OnProgressAvailable((totalReadSoFar * 100) / length);                              }                          }                      }                  }              }
Magic Number,NuGet,PackageRepositoryExtensions,C:\repos\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackages,The following statement contains a magic number: const int batchSize = 10;
Magic Number,NuGet,Crc32,C:\repos\themotleyfool_NuGet\src\Core\Utility\Crc32.cs,Calculate,The following statement contains a magic number: while (--length >= 0)              {                  crc32 = crcTable[(crc32 ^ buffer[offset++]) & 0xFF] ^ (crc32 >> 8);              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (parts.Length > 2)              {                  throw new ArgumentException(NuGetResources.InvalidFrameworkNameFormat' "frameworkName");              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (Int32.TryParse(versionPart' out versionNumber))              {                  // Remove the extra numbers                  if (versionPart.Length > 4)                  {                      versionPart = versionPart.Substring(0' 4);                  }                    // Make sure it has at least 2 digits so it parses as a valid version                  versionPart = versionPart.PadRight(2' '0');                  versionPart = String.Join("."' versionPart.ToCharArray());              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (Int32.TryParse(versionPart' out versionNumber))              {                  // Remove the extra numbers                  if (versionPart.Length > 4)                  {                      versionPart = versionPart.Substring(0' 4);                  }                    // Make sure it has at least 2 digits so it parses as a valid version                  versionPart = versionPart.PadRight(2' '0');                  versionPart = String.Join("."' versionPart.ToCharArray());              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (Int32.TryParse(versionPart' out versionNumber))              {                  // Remove the extra numbers                  if (versionPart.Length > 4)                  {                      versionPart = versionPart.Substring(0' 4);                  }                    // Make sure it has at least 2 digits so it parses as a valid version                  versionPart = versionPart.PadRight(2' '0');                  versionPart = String.Join("."' versionPart.ToCharArray());              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The following statement contains a magic number: if (value.Length < 3)              {                  return false;              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The following statement contains a magic number: value = value.Substring(1' value.Length - 2);
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The following statement contains a magic number: if (parts.Length > 2)              {                  return false;              }              else if (parts.All(String.IsNullOrEmpty))              {                  // If all parts are empty' then neither of upper or lower bounds were specified. Version spec is of the format (']                  return false;              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The following statement contains a magic number: string maxVersionString = (parts.Length == 2) ? parts[1] : parts[0];
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: if (targetFrameworkName.IsPortableFramework())              {                  if (frameworkName.IsPortableFramework())                  {                      return GetCompatibilityBetweenPortableLibraryAndPortableLibrary(frameworkName' targetFrameworkName);                  }                  else                  {                      // we divide by 2 to ensure Portable framework has less compatibility value than specific framework.                      return GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary(frameworkName' targetFrameworkName) / 2;                  }              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: if (targetFrameworkName.Identifier.Equals(frameworkName.Identifier' StringComparison.OrdinalIgnoreCase))              {                  // Let's say a package has two framework folders: 'net40' and 'portable-net45+wp8'.                  // The package is installed into a net45 project. We want to pick the 'net40' folder' even though                  // the 'net45' in portable folder has a matching version with the project's framework.                  //                  // So' in order to achieve that' here we give the folder that has matching identifer with the project's                   // framework identifier a compatibility score of 10' to make sure it weighs more than the compatibility of matching version.                    compatibility += 10 * (1L << 32);              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: if (targetFrameworkName.Identifier.Equals(frameworkName.Identifier' StringComparison.OrdinalIgnoreCase))              {                  // Let's say a package has two framework folders: 'net40' and 'portable-net45+wp8'.                  // The package is installed into a net45 project. We want to pick the 'net40' folder' even though                  // the 'net45' in portable folder has a matching version with the project's framework.                  //                  // So' in order to achieve that' here we give the folder that has matching identifer with the project's                   // framework identifier a compatibility score of 10' to make sure it weighs more than the compatibility of matching version.                    compatibility += 10 * (1L << 32);              }
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,CalculateVersionDistance,The following statement contains a magic number: const long MaxValue = 1L << 32 + 5;
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,CalculateVersionDistance,The following statement contains a magic number: const long MaxValue = 1L << 32 + 5;
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,CalculateVersionDistance,The following statement contains a magic number: var distance = (projectVersion.Major - targetFrameworkVersion.Major) * 255L * 255 * 255 +                             (projectVersion.Minor - targetFrameworkVersion.Minor) * 255L * 255 +                             (projectVersion.Build - targetFrameworkVersion.Build) * 255L +                             (projectVersion.Revision - targetFrameworkVersion.Revision);
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,CalculateVersionDistance,The following statement contains a magic number: var distance = (projectVersion.Major - targetFrameworkVersion.Major) * 255L * 255 * 255 +                             (projectVersion.Minor - targetFrameworkVersion.Minor) * 255L * 255 +                             (projectVersion.Build - targetFrameworkVersion.Build) * 255L +                             (projectVersion.Revision - targetFrameworkVersion.Revision);
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,CalculateVersionDistance,The following statement contains a magic number: var distance = (projectVersion.Major - targetFrameworkVersion.Major) * 255L * 255 * 255 +                             (projectVersion.Minor - targetFrameworkVersion.Minor) * 255L * 255 +                             (projectVersion.Build - targetFrameworkVersion.Build) * 255L +                             (projectVersion.Revision - targetFrameworkVersion.Revision);
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetCompatibilityBetweenPortableLibraryAndPortableLibrary,The following statement contains a magic number: score = score * 50 + targetFrameworkProfile.SupportedFrameworks.Count;
Magic Number,NuGet,VersionUtility,C:\repos\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary,The following statement contains a magic number: if (compatibleFramework != null)              {                  var score = GetProfileCompatibility(frameworkName' compatibleFramework);                    // This is to ensure that if two portable frameworks have the same score'                  // we pick the one that has less number of supported platforms.                  // The *2 is to make up for the /2 to which the result of this method is subject.                  score -= (profile.SupportedFrameworks.Count * 2);                    return score;              }
Magic Number,NuGet.Analysis.Rules,InvalidFrameworkFolderRule,C:\repos\themotleyfool_NuGet\src\Core\Analysis\Rules\InvalidFrameworkFolderRule.cs,Validate,The following statement contains a magic number: foreach (var file in package.GetFiles())              {                  string path = file.Path;                  string[] parts = path.Split(Path.DirectorySeparatorChar);                  if (parts.Length >= 3 && parts[0].Equals(Constants.LibDirectory' StringComparison.OrdinalIgnoreCase))                  {                      set.Add(parts[1]);                  }              }
Missing Default,NuGet,ManifestReader,C:\repos\themotleyfool_NuGet\src\Core\Authoring\ManifestReader.cs,ReadMetadataValue,The following switch statement is missing a default case: switch (element.Name.LocalName)              {                  case "id":                      manifestMetadata.Id = value;                      break;                  case "version":                      manifestMetadata.Version = value;                      break;                  case "authors":                      manifestMetadata.Authors = value;                      break;                  case "owners":                      manifestMetadata.Owners = value;                      break;                  case "licenseUrl":                      manifestMetadata.LicenseUrl = value;                      break;                  case "projectUrl":                      manifestMetadata.ProjectUrl = value;                      break;                  case "iconUrl":                      manifestMetadata.IconUrl = value;                      break;                  case "requireLicenseAcceptance":                      manifestMetadata.RequireLicenseAcceptance = XmlConvert.ToBoolean(value);                      break;                  case "description":                      manifestMetadata.Description = value;                      break;                  case "summary":                      manifestMetadata.Summary = value;                      break;                  case "releaseNotes":                      manifestMetadata.ReleaseNotes = value;                      break;                  case "copyright":                      manifestMetadata.Copyright = value;                      break;                  case "language":                      manifestMetadata.Language = value;                      break;                  case "title":                      manifestMetadata.Title = value;                      break;                  case "tags":                      manifestMetadata.Tags = value;                      break;                  case "dependencies":                      manifestMetadata.DependencySets = ReadDependencySet(element);                      break;                  case "frameworkAssemblies":                      manifestMetadata.FrameworkAssemblies = ReadFrameworkAssemblies(element);                      break;                  case "references":                      manifestMetadata.References = ReadReferences(element);                      break;              }
